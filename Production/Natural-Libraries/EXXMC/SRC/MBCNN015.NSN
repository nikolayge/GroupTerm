* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center Online - MC II
* Get Insured Name and Policy Type to display DAL documents
* XML Request Parser/Serializer
********************************************************************
*        MODIFICATION LOG
********************************************************************
* USER   DATE      TAG  REASON
* YAK    02182015       Initial Creation
*********************************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC         /* Out
*
LOCAL USING PARSER-X
LOCAL USING ERROR_L
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML                          (A) DYNAMIC
*
1 PolicyDocument
  2 CN              (N6)
  2 PolicyNumber    (A) DYNAMIC
  2 InsuredName     (A) DYNAMIC
  2 PolicyType      (A) DYNAMIC
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 MEMBER-CONTACT-ID
  2 PLAN (9)
*
1 #ErrorCode        (A3) INIT <'0'>
1 #ErrorDescription (A) DYNAMIC
1 #I                (I2)
1 #value            (A) DYNAMIC
1 #PolicyNumber     (A16)
1 #CN_6             (A6)
1 #CN_N             (N6)
*
1 #CN               (A)  DYNAMIC
1 #PREFIX           (A) DYNAMIC
1 #SUFFIX           (A) DYNAMIC
1 #DEL              (A1) CONST <'-'>
*
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
#PolicyNumber := PolicyDocument.PolicyNumber
#CN           := PolicyDocument.CN
IF PolicyDocument.PolicyNumber = SCAN(#CN)
  #CN := PolicyDocument.CN
ELSE
  PERFORM GET-CN
END-IF  
#CN_6 := #CN
#I := F_POLICY_SEGMENT(<#PolicyNumber,#CN_6>)
*
IF #I = 0
  #ErrorCode := #INVALID-POLICY-NUMBER
  PERFORM COMPOSE-ERROR-XML
END-IF
*
#CN_N := VAL(#CN_6)
FIND(1) ST-V WITH ID-NUMBER = #CN_N
  IF NO RECORDS FOUND
    #ErrorCode := #CN-NOT-FOUND
    PERFORM COMPOSE-ERROR-XML
  END-NOREC
  RESET PolicyDocument.InsuredName
  CALLNAT 'GPRS0CNT' ST-V.MEMBER-CONTACT-ID PolicyDocument.InsuredName
*  PolicyDocument.InsuredName := EDIT_NAME_LOWCASE (< PolicyDocument.InsuredName >)  /* bz-Name
  PolicyDocument.PolicyType  := F-PLAN-DESCRIPTION(<ST-V.PLAN(#I)>)(4)
END-FIND
*
PERFORM COMPOSE-XML
*
************************
DEFINE SUBROUTINE GET-CN
************************
*
* Parse PolicyNumber to extract CN number
*
SEPARATE PolicyNumber INTO #PREFIX #CN #SUFFIX IGNORE WITH DELIMITER #DEL
IF #PREFIX IS (N6)                             /* new policy number structure
  #CN := #PREFIX
ELSE
  IF #CN = ' '
   #CN := #PREFIX
  END-IF
  SEPARATE #CN INTO #CN #SUFFIX IGNORE WITH DELIMITER 'X'
  IF NOT (#CN IS (N6))
    #ErrorCode := #INVALID-POLICY-NUMBER
    PERFORM COMPOSE-XML
    ESCAPE ROUTINE
  END-IF
END-IF
*
END-SUBROUTINE
*
************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'PolicyDocument/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6) THEN
      PolicyDocument.CN := VAL(#value)
    END-IF
  VALUE 'PolicyDocument/PolicyNumber/$'
    PolicyDocument.PolicyNumber := *TRIM(XML_PARSER_CONTENT)
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
*
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
END-IF
*
COMPRESS
  '<PolicyDocument>'
  '<CN>' PolicyDocument.CN '</CN>'
  '<PolicyNumber>' PolicyDocument.PolicyType '</PolicyNumber>'
  '<InsuredName>' PolicyDocument.InsuredName '</InsuredName>'
  '<PolicyType>' PolicyDocument.PolicyType '</PolicyType>'
  '<ErrorCode>' #ErrorCode '</ErrorCode>'
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>'
  '</PolicyDocument>' INTO XML LEAVING NO
RESPONSE-DATA := XML
*
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
***********************************
DEFINE SUBROUTINE COMPOSE-ERROR-XML
***********************************
*
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
END-IF
COMPRESS '<PolicyDocument>' '<CN>' PolicyDocument.CN '</CN>' -
  '<ErrorCode>' #ErrorCode '</ErrorCode>' -
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>' -
  '</PolicyDocument>'
  INTO RESPONSE-DATA LEAVING NO
  ESCAPE MODULE
END-SUBROUTINE
*
END
