* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center Online
* MBCNNP00 - Member Policy Details Information
********************************************************
*        MODIFICATION LOG
********************************************************
* USER   DATE      TAG  REASON
* YAK    11192014       Initial Creation
* YAK    12032015  YK1  Add Plan Type
********************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC
*
LOCAL USING MBCANP00
LOCAL USING PARSER-X
LOCAL USING ERROR_L
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML          (A) DYNAMIC
1 #I           (I2)
1 #II          (I2)
1 #ErrorCode   (A3) INIT <'0'>
1 #ErrorDescription (A) DYNAMIC
1 #value       (A) DYNAMIC
1 #test        (a70)
*
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
* Call Business Logic
*
CALLNAT 'MBCNNP01' PolicyDetails #ErrorCode
*
PERFORM COMPOSE-XML
RESPONSE-DATA := XML
*
************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'PolicyDetails'
    Ignore
  VALUE 'PolicyDetails/PolicyCN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6)
      PolicyDetails.PolicyCN := VAL(#value)
    END-IF
  VALUE 'PolicyDetails/PolicyNumber/$'
    PolicyDetails.PolicyNumber := *TRIM(XML_PARSER_CONTENT)
  VALUE 'PolicyDetails/PolicySegmentNumber/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N2)
      PolicyDetails.PolicySegmentNumber := VAL(#value)
    END-IF
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
*
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
END-IF
*
COMPRESS
  '<PolicyDetails>' '<PolicyCN>' PolicyDetails.PolicyCN '</PolicyCN>'
  '<PolicyType>' PolicyDetails.PolicyType '</PolicyType>'
  '<PlanType>' PolicyDetails.PlanType '</PlanType>'                                /* YK1
  '<PolicyNumber>' PolicyDetails.PolicyNumber '</PolicyNumber>'
  '<PolicySegmentNumber>' PolicyDetails.PolicySegmentNumber '</PolicySegmentNumber>'
  '<LinkedPolicyFlag>' PolicyDetails.LinkedPolicyFlag '</LinkedPolicyFlag>'
  '<Insured>' PolicyDetails.Insured '</Insured>'  INTO XML LEAVING NO
COMPRESS XML '<Owners>'
  '<NumberOfOwners>' PolicyDetails.C@Owner '</NumberOfOwners>' INTO XML LEAVING NO
FOR #I = 1 TO PolicyDetails.C@Owner
  COMPRESS XML '<Owner>' PolicyDetails.Owner(#I) '</Owner>' INTO XML LEAVING NO
END-FOR
COMPRESS XML '</Owners>' INTO XML LEAVING NO
COMPRESS XML '<IssueDate>' PolicyDetails.IssueDate '</IssueDate>'
  '<IssueAge>' PolicyDetails.IssueAge '</IssueAge>'
  '<InitialDeathBenefit>' PolicyDetails.InitialDeathBenefit '</InitialDeathBenefit>'
  '<CurrentDeathBenefit>' PolicyDetails.CurrentDeathBenefit '</CurrentDeathBenefit>'
  '<CurrentCashValue>' PolicyDetails.CurrentCashValue '</CurrentCashValue>'
  '<PaymentInfo>'
  '<PaymentPeriod>' PolicyDetails.PaymentPeriod '</PaymentPeriod>'
  '<PaymentStatus>' PolicyDetails.PaymentStatus '</PaymentStatus>'
  '<PaymentMethod>' PolicyDetails.PaymentMethod '</PaymentMethod>'
  '<PremiumMode>' PolicyDetails.PremiumMode '</PremiumMode>'
  '<ModalPremium>' PolicyDetails.ModalPremium '</ModalPremium>'
  '<MaximumRenewalPremium>' PolicyDetails.MaximumRenewalPremium '</MaximumRenewalPremium>'
  '<DueDate>' PolicyDetails.DueDate '</DueDate>'
  '</PaymentInfo>' INTO XML LEAVING NO
COMPRESS XML '<BeneficiaryInfo>'
  '<NumberOfBeneficiaries>' PolicyDetails.C@Beneficiary '</NumberOfBeneficiaries>' INTO XML LEAVING NO
FOR #I = 1 TO *OCCURRENCE(PolicyDetails.BeneficiaryName)
  COMPRESS XML '<BeneficiaryName>' BeneficiaryName(#I) '</BeneficiaryName>' INTO XML LEAVING NO
END-FOR
COMPRESS XML '</BeneficiaryInfo>'  INTO XML LEAVING NO
COMPRESS XML '<ErrorCode>' #ErrorCode '</ErrorCode>'
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>'
  '</PolicyDetails>'
  INTO XML LEAVING NO
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
END
