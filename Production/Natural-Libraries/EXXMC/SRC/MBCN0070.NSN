* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center Online
* Member Policy Information
* XML Request (Serializer)
* Returns Policy Information for all policies
* the member with CN owns.
********************************************************
*        MODIFICATION LOG
********************************************************
* USER   DATE      TAG  REASON
* YAK    11042010       Initial Creation
* YAK    02062013  YK1  Add maximum premium for LTII+
* YAK    10042013  YK2  Add DueDate field for MobileApp          
********************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A) DYNAMIC         /* In
1 RESPONSE-DATA     (A) DYNAMIC         /* Out
*
LOCAL USING MBCA0007
LOCAL USING PARSER-X
LOCAL USING ERROR_L
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML          (A) DYNAMIC
1 #I           (I2)
1 #II          (I2)
1 #ErrorCode   (A3) INIT <'0'>
1 #ErrorDescription (A) DYNAMIC
1 #value       (A) DYNAMIC
1 #test        (a70)
*
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
* Call Business Logic
*
CALLNAT 'MBCN0071' Policies #ErrorCode
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
  C@PolicyInfo := 0
END-IF
*
PERFORM COMPOSE-XML
RESPONSE-DATA := XML
*
************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'CNInfo'
    Ignore
  VALUE 'CNInfo/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6)
      Policies.CN := VAL(#value)
    END-IF
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
*
COMPRESS
  '<Policies>' '<CN>' Policies.CN '</CN>' INTO XML LEAVING NO
FOR #I = 1 TO Policies.C@PolicyInfo
  COMPRESS XML
    '<Policy>'
    '<LinkedPolicy>' Policies.LinkedPolicy(#I) '</LinkedPolicy>'
    '<PolicyType>' Policies.PolicyType(#I) '</PolicyType>'
    '<PaymentPeriod>' Policies.PaymentPeriod(#I) '</PaymentPeriod>'
    '<TermPolicy>' Policies.TermPolicy(#I) '</TermPolicy>'
    '<PolicyNumber>' Policies.PolicyNumber(#I) '</PolicyNumber>'
    '<Insured>' Policies.Insured(#I) '</Insured>'
    '<Owner>' Policies.Owner(#I) '</Owner>'
    '<IssueDate>' Policies.IssueDate(#I) '</IssueDate>'
    '<IssueAge>' Policies.IssueAge(#I) '</IssueAge>'
    '<NicotineUse>' Policies.NicotineUse(#I) '</NicotineUse>'
    '<InitialDeathBenefit>' Policies.InitialDeathBenefit(#I) '</InitialDeathBenefit>'
    '<CurrentDeathBenefit>' Policies.CurrentDeathBenefit(#I) '</CurrentDeathBenefit>'
    '<CurrentCashValue>' Policies.CurrentCashValue(#I) '</CurrentCashValue>'
    '<PaymentInfo>'
    '<PaymentStatus>' Policies.PaymentStatus(#I) '</PaymentStatus>'
    '<PaymentMethod>' Policies.PaymentMethod(#I) '</PaymentMethod>'
    '<AnnualPremium>' Policies.AnnualPremium(#I) '</AnnualPremium>'
    '<QuarterlyPremium>' Policies.QuarterlyPremium(#I) '</QuarterlyPremium>'
    '<SemiAnnualPremium>' Policies.SemiAnnualPremium(#I) '</SemiAnnualPremium>'
    '<MonthlyPremium>' Policies.MonthlyPremium(#I) '</MonthlyPremium>'
    '<MaximumRenewalPremium>' Policies.MaximumRenewalPremium(#I) '</MaximumRenewalPremium>'    /* YK1
    '<DueDate>' Policies.DueDate(#I) '</DueDate>'                                              /* YK2 
    '</PaymentInfo>'
    '<Loans>' INTO XML LEAVING NO
  FOR #II = 1 TO 2
    COMPRESS XML
      '<Loan>'
      '<LoanType>' Policies.LoanType(#I,#II) '</LoanType>'
      '<LoanIssueDate>' Policies.LoanIssueDate(#I,#II) '</LoanIssueDate>'
      '<InterestRate>' Policies.InterestRate(#I,#II) '</InterestRate>'
      '<RemainingPrincipal>' Policies.RemainingPrincipal(#I,#II) '</RemainingPrincipal>'
      '<AccruedInterest>' Policies.AccruedInterest(#I,#II) '</AccruedInterest>'
      '<Balance>' Policies.Balance(#I,#II) '</Balance>'
      '</Loan>' INTO XML LEAVING NO
  END-FOR
  COMPRESS XML
    '</Loans>'
    '</Policy>' INTO XML LEAVING NO
END-FOR
COMPRESS XML
  '<ErrorCode>' #ErrorCode '</ErrorCode>'
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>'
  '</Policies>'
  INTO XML LEAVING NO
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
END
