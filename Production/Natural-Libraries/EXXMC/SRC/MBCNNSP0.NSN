* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center/My Services & Products Summary Page
* Object name - MBCNN030 (No updates, View only)
* Calls to: SVCN0003 for services
* Calls to: MBCNN071 for Insurance
***********************************************************************
*        MODIFICATION LOG
***********************************************************************
* USER   DATE      TAG  REASON
* YAK    10082014       Initial Creation
* YAK    12152015  YK1  MC-II FIR 
* YAK    12012016  YK2  Add more services 
***********************************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC
*
LOCAL USING MBCLNSP0
LOCAL USING MBCA0007
LOCAL USING SVCA0003
LOCAL USING PARSER-X
LOCAL USING ERROR_L
LOCAL
*
1 #true              (A) DYNAMIC CONST<'true'>
1 #false             (A) DYNAMIC CONST<'false'>
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
*
1 SVC-MEMBER-V VIEW OF A-SVC-MEMBER
  2 SVC-ID-NUMBER
  2 SVC-STATUS
  2 SVC-PLAN
*
1 #CN          (A)  DYNAMIC
1 #ErrorCode   (A3) INIT <'0'>
1 #ErrorDescription (A) DYNAMIC
1 #value       (A) DYNAMIC
1 #XML         (A) DYNAMIC
1 #I           (I2)
1 #II          (I2)
1 #SSN         (A9)
1 #ISN         (P9)
1 #CC          (N2)
1 #CMP-STATUS  (A) DYNAMIC
1 #YES         (A1) CONST <'Y'>
1 #NO          (A1) CONST <'N'>
1 #SAS         (A3) CONST <'SAS'>
1 #PSM         (A3) CONST <'PSM'>
1 #WMT         (A3) CONST <'WMT'> 
1 #MTG         (A3) CONST <'MTG'>
1 #GTI         (A3) CONST <'GTI'>
1 #CMS         (A3) CONST <'CMS'>
1 #ContactId   (N8)
1 #GET-BY-CN   (A) DYNAMIC CONST <'GET-BY-CN'>
1 #GET         (A) DYNAMIC CONST <'GET'>
1 #DUE-DATE    (A) DYNAMIC
1 #DUE-MESSAGE (A) DYNAMIC
1 #NONE        (A) DYNAMIC CONST <'None'>
1 #NONE-DUE    (A) DYNAMIC CONST <'0'>
1 #CAP         (A) DYNAMIC CONST <'CAP'>
1 #CAP-LOAN    (A) DYNAMIC CONST <'CAP Loan'>
1 #ACTIVE      (A) DYNAMIC CONST <'A'>
1 #GRANDFATHERED (A) DYNAMIC CONST <'G'>
1 #MEMBER-SERVICE-TYPE (A7) CONST <'CODE022'>
1 #TOTAL-LOAN-AMOUNT (N9.2)
1 #TOTAL-CAP-LOAN-AMOUNT (N9.2)
1 #TOTAL-LINKED-LOAN-AMOUNT (N9.2)
1 #MSG         (A) DYNAMIC
1 #FirRequest  (L)                  /* YK1     
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
**************************
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'MemberServicesProductsSummary/UserName/$'
    MemberServicesProductsSummary.UserName := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberServicesProductsSummary/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    if #value is (N6)
      MemberServicesProductsSummary.CN := val(#value)
    end-if
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
* Business Logic
PERFORM MEMBER-SERVICES-SUMMARY
PERFORM MEMBER-INSURANCE-SUMMARY
PERFORM MEMBER-LOAN-SUMMARY
PERFORM CREATE-RESPONSE
ESCAPE MODULE
*
*****************************************
DEFINE SUBROUTINE MEMBER-SERVICES-SUMMARY
*****************************************
* MemberServicesProductsSummary
FIND SVC-MEMBER-V WITH SVC-ID-NUMBER = MemberServicesProductsSummary.CN
  DECIDE FOR FIRST CONDITION
    WHEN SVC-MEMBER-V.SVC-PLAN = '3SR' AND SVC-MEMBER-V.SVC-STATUS = #ACTIVE
      MemberServicesProductsSummary.MemberServiceType := F-LOOK-UP-TABLE(<#MEMBER-SERVICE-TYPE,#GRANDFATHERED>)
    WHEN (SVC-MEMBER-V.SVC-STATUS = 'A' OR = 'P') OR
        (SVC-MEMBER-V.SVC-PLAN = #SAS AND SVC-MEMBER-V.SVC-STATUS = 'F')
      C@Service := C@Service + 1
      EXPAND ARRAY Service TO (*:C@Service)
      MemberServicesProductsSummary.ServiceDescription(C@Service) := FUNCTION-PLAN(<SVC-MEMBER-V.SVC-PLAN>)(1)
      IF SVC-MEMBER-V.SVC-PLAN = #SAS or = #PSM or = SCAN('ER') or = #WMT or = #MTG or = #GTI or = #CMS        /* YK2
        MemberServicesProductsSummary.ServiceWithInsurance(C@Service) := #false
      ELSE
        MemberServicesProductsSummary.ServiceWithInsurance(C@Service) := #true
      END-IF
      PARM-SVC.ACTION         := #GET
      PARM-SVC.SVC-MEMBER-ID  := SVC-MEMBER-V.SVC-ID-NUMBER
      PARM-SVC.SVC-PLAN       := SVC-MEMBER-V.SVC-PLAN
      PARM-SVC.SVC-STATUS     := SVC-MEMBER-V.SVC-STATUS
      CALLNAT 'SVCN0003' PARM-SVC #MSG
      IF PARM-SVC.SVC-TOTAL-DUE <> 0
        MOVE EDITED PARM-SVC.SVC-TOTAL-DUE (EM=ZZZ,ZZ9.99-) TO MemberServicesProductsSummary.ServiceAmountDue(C@Service)
        MemberServicesProductsSummary.ServiceAmountDue(C@Service) := *TRIM(MemberServicesProductsSummary.ServiceAmountDue(C@Service))
        COMPRESS '$' MemberServicesProductsSummary.ServiceAmountDue(C@Service)
          INTO MemberServicesProductsSummary.ServiceAmountDue(C@Service) LEAVING NO
        COMPRESS 'Due:' MemberServicesProductsSummary.ServiceAmountDue(C@Service)
          INTO MemberServicesProductsSummary.ServiceAmountDue(C@Service)
        IF PARM-SVC.SVC-PAID-TO-DATE <> 0
          #DUE-DATE := FUNCTION-CALENDAR(<PARM-SVC.SVC-PAID-TO-DATE,'V'>)
          COMPRESS MemberServicesProductsSummary.ServiceAmountDue(C@Service) 'on' #DUE-DATE
            INTO MemberServicesProductsSummary.ServiceAmountDue(C@Service)
        END-IF
      END-IF
    WHEN NONE
      IGNORE
  END-DECIDE
END-FIND
END-SUBROUTINE
*
******************************************
DEFINE SUBROUTINE MEMBER-INSURANCE-SUMMARY
******************************************
*
Policies.CN := MemberServicesProductsSummary.CN
CALLNAT 'MBCNN071' Policies #ErrorCode #FirRequest
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
  C@PolicyInfo := 0
END-IF
* if insurance exists - SAS included
IF C@PolicyInfo <> 0
  C@Service := C@Service + 1
  EXPAND ARRAY Service TO (*:C@Service)
  MemberServicesProductsSummary.ServiceDescription(C@Service) := F-PLAN-DESCRIPTION(<#SAS>)(1)
  MemberServicesProductsSummary.ServiceWithInsurance(C@Service) := #true
ELSE
  MemberServicesProductsSummary.TotalNumberPolicies := C@PolicyInfo
  ESCAPE ROUTINE
END-IF
*
MemberServicesProductsSummary.TotalNumberPolicies := C@Policy := C@PolicyInfo
EXPAND ARRAY MemberServicesProductsSummary.Policy TO (*:C@Policy)
FOR #I = 1 TO C@Policy
  MemberServicesProductsSummary.PolicyCN(#I)            := Policies.PolicyCN(#I)
  MemberServicesProductsSummary.PolicyNumber(#I)        := Policies.PolicyNumber(#I)
  MemberServicesProductsSummary.PolicySegmentNumber(#I) := Policies.PolicySegmentNumber(#I)
  MemberServicesProductsSummary.PolicyDescription(#I)   := Policies.PolicyType(#I)
  MemberServicesProductsSummary.InsuredName(#I)         := Policies.Insured(#I)
  MemberServicesProductsSummary.Overdue(#I)             := Policies.Overdue(#I)
  RESET #DUE-MESSAGE
  DECIDE FOR FIRST CONDITION
    WHEN Policies.DueDate(#I) = #NONE-DUE
      #DUE-MESSAGE := 'Paid-Up'
    WHEN Policies.Overdue(#I) = #true
      COMPRESS 'Overdue:' Policies.DueAmount(#I) INTO #DUE-MESSAGE
    WHEN Policies.Autopayment(#I) = #true
      COMPRESS 'Autopay Scheduled for:' Policies.DueAmount(#I) INTO #DUE-MESSAGE
    WHEN NONE
      COMPRESS 'Due:' Policies.DueAmount(#I) 'on' Policies.DueDate(#I) INTO #DUE-MESSAGE
  END-DECIDE
  MemberServicesProductsSummary.PolicyAmountDateDue(#I) := #DUE-MESSAGE
  MemberServicesProductsSummary.LinkedLoanAmount(#I) := #NONE
  IF Policies.TotalLoanAmount(#I) <> 0
    MOVE EDITED Policies.TotalLoanAmount(#I) (EM=Z,ZZZ,ZZ9.99) TO MemberServicesProductsSummary.LinkedLoanAmount(#I)
    MemberServicesProductsSummary.LinkedLoanAmount(#I) := *TRIM(MemberServicesProductsSummary.LinkedLoanAmount(#I))
    COMPRESS '$' MemberServicesProductsSummary.LinkedLoanAmount(#I) INTO MemberServicesProductsSummary.LinkedLoanAmount(#I) LEAVING NO
    COMPRESS 'Linked Loan:' MemberServicesProductsSummary.LinkedLoanAmount(#I) INTO MemberServicesProductsSummary.LinkedLoanAmount(#I)
  END-IF
END-FOR
*
END-SUBROUTINE
*
*************************************
DEFINE SUBROUTINE MEMBER-LOAN-SUMMARY
*************************************
*
FOR #I = 1 TO C@Policy
  #TOTAL-LOAN-AMOUNT := #TOTAL-LOAN-AMOUNT + Policies.TotalLoanAmount(#I) + Policies.TotalCAPLoanAmount(#I)
  #TOTAL-CAP-LOAN-AMOUNT := #TOTAL-CAP-LOAN-AMOUNT + Policies.TotalCAPLoanAmount(#I)
  #TOTAL-LINKED-LOAN-AMOUNT := #TOTAL-LINKED-LOAN-AMOUNT + Policies.TotalLoanAmount(#I)
  FOR #II = 1 TO 2
    IF Policies.LoanType(#I,#II) <> ' '
      C@Loan := C@Loan + 1
      EXPAND ARRAY MemberServicesProductsSummary.Loan TO (*:C@Loan)
      MemberServicesProductsSummary.LoanType(C@Loan)   := Policies.LoanType(#I,#II)
      IF MemberServicesProductsSummary.LoanType(C@Loan) = #CAP
        MemberServicesProductsSummary.LoanDescription(C@Loan) := #CAP-LOAN
      ELSE
        COMPRESS Policies.PolicyType(#I) Policies.PolicyNumber(#I) INTO MemberServicesProductsSummary.LoanDescription(C@Loan)
      END-IF
      MemberServicesProductsSummary.LoanCN(C@Loan)            := Policies.PolicyCN(#I)
      MemberServicesProductsSummary.LoanAttachSegment(C@Loan) := Policies.PolicySegmentNumber(#I)
      MemberServicesProductsSummary.LoanPrincipal(C@Loan)     := Policies.RemainingPrincipal(#I,#II)
      MemberServicesProductsSummary.InterestRate(C@Loan)      := Policies.InterestRate(#I,#II)
      MemberServicesProductsSummary.AccruedInterest(C@Loan)   := Policies.AccruedInterest(#I,#II)
      MemberServicesProductsSummary.LoanBalance(C@Loan)       := Policies.Balance(#I,#II)
    END-IF
  END-FOR
END-FOR
MemberServicesProductsSummary.TotalLoanAmount       := #NONE
MemberServicesProductsSummary.TotalCAPLoanAmount    := #NONE
MemberServicesProductsSummary.TotalLinkedLoanAmount := #NONE
MemberServicesProductsSummary.TotalNumberLoans := C@Loan
IF C@Loan <> 0
  IF #TOTAL-LOAN-AMOUNT <> 0
    MOVE EDITED #TOTAL-LOAN-AMOUNT (EM=Z,ZZZ,ZZ9.99) TO MemberServicesProductsSummary.TotalLoanAmount
    MemberServicesProductsSummary.TotalLoanAmount := *TRIM(MemberServicesProductsSummary.TotalLoanAmount)
    COMPRESS '$' MemberServicesProductsSummary.TotalLoanAmount INTO MemberServicesProductsSummary.TotalLoanAmount LEAVING NO
  END-IF
  IF #TOTAL-CAP-LOAN-AMOUNT <> 0
    MOVE EDITED #TOTAL-CAP-LOAN-AMOUNT (EM=Z,ZZZ,ZZ9.99) TO MemberServicesProductsSummary.TotalCAPLoanAmount
    MemberServicesProductsSummary.TotalCAPLoanAmount := *TRIM(MemberServicesProductsSummary.TotalCAPLoanAmount)
    COMPRESS '$' MemberServicesProductsSummary.TotalCAPLoanAmount INTO MemberServicesProductsSummary.TotalCAPLoanAmount LEAVING NO
  END-IF
  IF #TOTAL-LINKED-LOAN-AMOUNT <> 0
    MOVE EDITED #TOTAL-LINKED-LOAN-AMOUNT (EM=Z,ZZZ,ZZ9.99) TO MemberServicesProductsSummary.TotalLinkedLoanAmount
    MemberServicesProductsSummary.TotalLinkedLoanAmount := *TRIM(MemberServicesProductsSummary.TotalLinkedLoanAmount)
    COMPRESS '$' MemberServicesProductsSummary.TotalLinkedLoanAmount INTO MemberServicesProductsSummary.TotalLinkedLoanAmount LEAVING NO
  END-IF
END-IF
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE CREATE-RESPONSE
*********************************
*
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
END-IF
*
COMPRESS '<MemberServicesProductsSummary>' INTO #XML LEAVING NO
COMPRESS  #XML '<CN>' MemberServicesProductsSummary.CN '</CN>'
  '<MemberServiceType>' MemberServicesProductsSummary.MemberServiceType '</MemberServiceType>'
  '<Services>'  INTO #XML LEAVING NO
FOR #I = 1 TO MemberServicesProductsSummary.C@Service
  COMPRESS  #XML '<Service>'
    '<ServiceDescription>' MemberServicesProductsSummary.ServiceDescription(#I) '</ServiceDescription>'
    '<ServiceWithInsurance>' MemberServicesProductsSummary.ServiceWithInsurance(#I) '</ServiceWithInsurance>'
    '<ServiceAmountDue>' MemberServicesProductsSummary.ServiceAmountDue(#I) '</ServiceAmountDue>'
    '</Service>' INTO #XML LEAVING NO
END-FOR
COMPRESS #XML '</Services>' INTO #XML LEAVING NO
COMPRESS  #XML '<LifeInsurance>' INTO #XML LEAVING NO
MemberServicesProductsSummary.TotalNumberPolicies := MemberServicesProductsSummary.C@Policy
COMPRESS #XML '<TotalNumberPolicies>' MemberServicesProductsSummary.TotalNumberPolicies '</TotalNumberPolicies>' INTO #XML LEAVING NO
FOR #I = 1 TO MemberServicesProductsSummary.C@Policy
  COMPRESS  #XML '<Policy>'
    '<PolicyCN>' MemberServicesProductsSummary.PolicyCN(#I) '</PolicyCN>'
    '<PolicyNumber>' MemberServicesProductsSummary.PolicyNumber(#I) '</PolicyNumber>'
    '<PolicySegmentNumber>' MemberServicesProductsSummary.PolicySegmentNumber(#I) '</PolicySegmentNumber>'
    '<PolicyDescription>' MemberServicesProductsSummary.PolicyDescription(#I) '</PolicyDescription>'
    '<InsuredName>' MemberServicesProductsSummary.InsuredName(#I) '</InsuredName>'
    '<PolicyAmountDateDue>' MemberServicesProductsSummary.PolicyAmountDateDue(#I) '</PolicyAmountDateDue>'
    '<Overdue>' MemberServicesProductsSummary.Overdue(#I) '</Overdue>'
    '<LinkedLoanAmount>' MemberServicesProductsSummary.LinkedLoanAmount(#I) '</LinkedLoanAmount>'
    '</Policy>'
    INTO #XML LEAVING NO
END-FOR
COMPRESS #XML '</LifeInsurance>' INTO #XML LEAVING NO
COMPRESS  #XML '<Loans>'
  '<TotalLoanAmount>' MemberServicesProductsSummary.TotalLoanAmount '</TotalLoanAmount>'
  '<TotalCAPLoanAmount>' MemberServicesProductsSummary.TotalCAPLoanAmount '</TotalCAPLoanAmount>'
  '<TotalLinkedLoanAmount>' MemberServicesProductsSummary.TotalLinkedLoanAmount '</TotalLinkedLoanAmount>'
  '<TotalNumberLoans>' MemberServicesProductsSummary.TotalNumberLoans '</TotalNumberLoans>' INTO #XML LEAVING NO
FOR #I = 1 TO MemberServicesProductsSummary.C@Loan
  COMPRESS #XML '<Loan>'
    '<LoanCN>' MemberServicesProductsSummary.LoanCN(#I) '</LoanCN>'
    '<LoanType>' MemberServicesProductsSummary.LoanType(#I) '</LoanType>'
    '<LoanDescription>' MemberServicesProductsSummary.LoanDescription(#I) '</LoanDescription>'
    '<LoanAttachSegment>' MemberServicesProductsSummary.LoanAttachSegment(#I) '</LoanAttachSegment>'
    '<LoanPrincipal>' MemberServicesProductsSummary.LoanPrincipal(#I) '</LoanPrincipal>'
    '<InterestRate>' MemberServicesProductsSummary.InterestRate(#I) '</InterestRate>'
    '<AccruedInterest>' MemberServicesProductsSummary.AccruedInterest(#I) '</AccruedInterest>'
    '<LoanBalance>' MemberServicesProductsSummary.LoanBalance(#I) '</LoanBalance>'
    '</Loan>'
    INTO #XML LEAVING NO
END-FOR
COMPRESS #XML '</Loans>'
  '<ErrorCode>' #ErrorCode '</ErrorCode>'
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>'
  '</MemberServicesProductsSummary>' INTO #XML LEAVING NO
RESPONSE-DATA := #XML
END-SUBROUTINE
END
