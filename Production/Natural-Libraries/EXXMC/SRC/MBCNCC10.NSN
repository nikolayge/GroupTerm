* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center 'GetPayments' function - called via EntireX
* MBCNCC10 - Accepts Request Data from Member Center/Payment Center
*            calls calculation module, creates Response XML
* Called from    - NATSERV0 (EntireX NATURAL server)
*
*******************************************************************
*        MODIFICATION LOG
*******************************************************************
* USER   DATE      TAG  REASON
* YAK    11152010       Initial Creation
* YAK    11152010  YK1  Add field to indicate that payment
*                       cannot exceed due amount displayed
*                       (currently used for loan payments)
* YAK    01042012  YK2  Changes to include Premier Services
* YAK    09132012  YK3  Remove F-SERV-EXIST function, change logic
*                       to determine if there is a payable service
* YAK    10032012  YK4  Use function to identify Level II Term plans
* YAK    10022013  YK5  Set rules for ADCR, RDCR on Member Center
* YAK    11292013  YK6  Add rules for calculating PAST DUE
* YAK    03052014  YK7  Add Survivor Assistance Service plan
* YAK    08152014  YK8  Add eCheck / eCheck scheduling
* YAK    10202014  YK9  Populate only owner Bank Info
* YAK    10202014  YK10 Minor changes to keep this module & data areas
*                       for Mobile website/Mobile App only
* YAK    03292017  YK11 EB&P III (Payor project)
*******************************************************************
*
DEFINE DATA
PARAMETER
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC
LOCAL USING MBCLCC01          /* YK8
LOCAL USING MBCAEC51          /* YK8  YK10
LOCAL USING WCCA0011
LOCAL USING PARSER-X
LOCAL USING GPRA006N
LOCAL USING OBJLMB01           /* YK3
LOCAL USING MBCAPR02           /* YK8
LOCAL USING ERROR_L
LOCAL
1 ERROR-MESSAGE     (A100)
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML               (A) DYNAMIC
1 #I                (I2)
1 #II               (I2)
1 #J                (I2)
1 #JJ               (I2)
1 #ErrorCode        (A3)
1 #value            (A) DYNAMIC
1 #ActionType       (A) DYNAMIC     /* YK8
*
1 Members                           /* YK8
  2 CN_Owner         (N6)
  2 User             (A) DYNAMIC
  2 ErrorCode        (A) DYNAMIC
  2 ErrorDescription (A) DYNAMIC

1 #TARGET-POLICY    (L)
1 C@Own_Polices     (N2)
1 #PREV-ID-NUMBER   (N6)
*
1 #SUCCESS-CODE    (A4) CONST <'0'>
1 #AMOUNT          (A) DYNAMIC
1 #DATE            (A20)
1 #PAYMENT-ID      (N4)
1 #TRUE            (A4) INIT <'true'>
1 #FALSE           (A5) INIT <'false'>
1 #FLEX-PLAN       (A2)
1 #FLEX-KEY        (A3)
1 ERROR-LOG        (A100)
1 #FULL-NAME       (A) DYNAMIC
1 #ACTIVE          (A1) CONST <'A'>
1 #SERVICE         (A) DYNAMIC CONST <'Service Plan'>    /* YK2
1 #PAYABLE         (A3/2) CONST <'PSM','SAS'>            /* YK3  YK7
1 #MC-EXCEPTION-TRAN (A4/3) CONST <'ADCR','RDCR'>        /* YK5
1 #PAST-DUE-DATE   (N8)                                  /* YK6
1 REDEFINE #PAST-DUE-DATE                                /* YK6
  2 #PAST-DUE-YYYYMM     (N6)                            /* YK6
  2 #PAST-DUE-DD         (N2)                            /* YK6
* YK8 >
1 #GET             (A) DYNAMIC CONST <'GET'>
1 #GET-ST          (A) DYNAMIC CONST <'GET-ST'>
1 #eCheck          (A) DYNAMIC CONST <'eCheck'>
1 #EZ-PAY          (A) DYNAMIC CONST <'EZ-Pay'>
1 #Scheduled       (A) DYNAMIC CONST <'S'>
1 #Mobile          (A) DYNAMIC CONST <'AAFMAA\mobile'>
1 #Mobapp          (A) DYNAMIC CONST <'AAFMAA\mobapp'>
1 #REQUEST-KEY      (A7)
1 REDEFINE #REQUEST-KEY
  2 #REQUEST-CN     (N6)
  2 #REQUEST-STATUS (A1)
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 PROCESS-IND
* > YK8
1 #Owner          (N2) CONST <2>                         /* YK11
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
* calculate when payment considered past-due    YK6
#PAST-DUE-DATE := *DATN
#PAST-DUE-DD   := 1
* Business Logic
PERFORM GET-POLICIES
RESET RESPONSE-DATA XML
FOR #J = 1 TO C@Own_Polices
  IF PARM-POLICIES.ID-NUMBER(#J) = #PREV-ID-NUMBER
    ESCAPE TOP
  END-IF
  #PREV-ID-NUMBER := PARM-POLICIES.ID-NUMBER(#J)
  RESET Member
  PERFORM GET-PAYMENTS
  PERFORM POPULATE-PAYMENT-DATA
  IF Member.C@Policy = 0
    ESCAPE TOP
  END-IF
  PERFORM GET-ECHECK-DATA
  PERFORM GET-EXISTING-REQUEST
  PERFORM COMPOSE-XML
END-FOR
*
PERFORM COMPOSE-RESPONSE-DATA
*
**************************
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'Members'
    Ignore
  VALUE 'Members/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6)
      Members.CN_Owner := VAL(#value)
    END-IF
  VALUE 'Members/User/$'
    Members.User := *TRIM(XML_PARSER_CONTENT)
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
*
RESET XML
ErrorCode        := XML_PARSER_RESPONSE
ErrorDescription := XML_PARSER_ERROR_TEXT
PERFORM COMPOSE-RESPONSE-DATA
ESCAPE MODULE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE GET-POLICIES
******************************
* Call subprogram that returns all policy numbers this member owns
PARM-CN := Members.CN_Owner
CALLNAT 'GPRN006N' PARM-CN PARM-MEMBER-CN PARM-POLICIES(*) #Owner          /* YK11
C@Own_Polices := *OCCURRENCE(PARM-POLICIES.ID-NUMBER)
*
IF C@Own_Polices = 0 AND PARM-CN = PARM-MEMBER-CN       /* YK2
  PERFORM CHECK-SERVICES                                /* YK2
END-IF                                                  /* YK2
*
IF C@Own_Polices = 0
  RESET XML
  ErrorCode := #NO-POLICIES-OWN
  PERFORM COMPOSE-RESPONSE-DATA
  ESCAPE MODULE
END-IF
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE CHECK-SERVICES          /* YK3 Start
********************************
*
FIND SVC-MEMBER-V WITH SVC-ID-NUMBER = PARM-CN
  ACCEPT IF SVC-MEMBER-V.SVC-PLAN = #PAYABLE(*)
  IF SVC-STATUS = 'A'
      OR SVC-PLAN = 'SAS' AND SVC-STATUS = 'P' OR= 'F'   /* NG99
** IF F-SERV-EXIST(<PARM-CN>) = #ACTIVE
    C@Own_Polices := C@Own_Polices + 1
    EXPAND ARRAY PARM-POLICIES TO (*:C@Own_Polices)
    PARM-POLICIES.ID-NUMBER(C@Own_Polices)     := PARM-CN
    PARM-POLICIES.POLICY-NUMBER(C@Own_Polices) := #SERVICE
  END-IF
END-FIND
*
END-SUBROUTINE                            /* YK3 End
*
******************************
DEFINE SUBROUTINE GET-PAYMENTS
******************************
* Get payments for the CN
RESET CC-PAYMENT
CC-PAYMENT.PARM-DATE := *DATN
CC-PAYMENT.ID-NUMBER := PARM-POLICIES.ID-NUMBER(#J)
CALLNAT 'WCCNCC11' CC-PAYMENT ERROR-MESSAGE
IF ERROR-MESSAGE NE ' '
  ErrorCode := SUBSTR(ERROR-MESSAGE,1,4)
  COMPRESS '*MemberCN*' CC-PAYMENT.ID-NUMBER ERROR-MESSAGE INTO ErrorDescription
* Write log file
  RESET XML
  PERFORM COMPOSE-RESPONSE-DATA
  ESCAPE MODULE
END-IF
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE GET-ECHECK-DATA    /* YK8
*********************************
* Pre-populate eCheck data
* Check if has scheduled payments
* Disallow "Pay By Check" for Service Only
*
Member.ServiceOnly := #FALSE
FIND(1) ST-V WITH ID-NUMBER = PARM-CN
  IF PROCESS-IND = 'S'
    Member.ServiceOnly := #TRUE
    C@BankAccount := 0
    ESCAPE ROUTINE
  END-IF
END-FIND
* Replace ECheck with BankAccount
* YK10 >
RESET BankAccount #ErrorCode
* YK9 >
* IF Member.CN IS (N6)
*   ECheck.CN := val(Member.CN)
* END-IF
* < YK9
BankAccount.AccountCN := Members.CN_Owner
#ActionType := #GET
* Rename called program from MBCNEC51
CALLNAT 'MBCNEC5M' BankAccount #ActionType #ErrorCode
IF #ErrorCode = ' '
  C@BankAccount := C@BankAccount + 1
  EXPAND ARRAY Account TO (*:C@BankAccount)
  MOVE BY NAME BankAccount TO Account(C@BankAccount)
  #I := C@BankAccount
  Member.CheckType(#I) := #eCheck
END-IF
* Check if member has EZ-Pay account
#ActionType := #GET-ST
RESET #ErrorCode
CALLNAT 'MBCNEC5M' BankAccount #ActionType #ErrorCode
IF #ErrorCode = ' '
  C@BankAccount := C@BankAccount + 1
  EXPAND ARRAY Account TO (*:C@BankAccount)
  MOVE BY NAME BankAccount TO Account(C@BankAccount)
  #I := C@BankAccount
  Member.CheckType(#I) := #EZ-PAY
END-IF
* < YK10
END-SUBROUTINE
*
**************************************
DEFINE SUBROUTINE GET-EXISTING-REQUEST   /* YK8
**************************************
*
FOR #II = 1 TO Member.C@Policy
  RESET PayRequest #ErrorCode
  PayRequest.CN := val(Member.CN)
  PayRequest.PayPolicyNumber := Member.PolicyNumber(#II)
  PayRequest.RequestStatus := #Scheduled
  PayRequest.RequestType   := 'eCheck'
  #ActionType := #GET
  CALLNAT 'MBCNPR21' PayRequest #ActionType #ErrorCode
  IF #ErrorCode = ' '
    C@PaymentRequest := C@PaymentRequest + 1
    EXPAND ARRAY PaymentRequest TO (*:C@PaymentRequest)
    #I := C@PaymentRequest
    Member.RequestType(#I)   := PayRequest.RequestType
    Member.RequestStatus(#I) := PayRequest.RequestStatus
    Member.RequestDate(#I)   := PayRequest.RequestDate
    Member.PaymentDate(#I)   := PayRequest.PaymentDate
    Member.PayPolicyNumber(#I) := PayRequest.PayPolicyNumber
    Member.PaymentAmount(#I) := PayRequest.PaymentAmount
  END-IF
END-FOR
*
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
* XML for one CN
COMPRESS XML '<Member><CN>' Member.CN '</CN>'
  '<Name>' Member.NAME '</Name>'
  '<ServiceOnly>' Member.ServiceOnly '</ServiceOnly>'
  '<Policies>' INTO XML LEAVING NO
FOR #I = 1 TO Member.C@POLICY
  IF Member.POLICYNUMBER(#I) = ' '
    ESCAPE TOP
  END-IF
  COMPRESS XML
    '<Policy><PolicyNumber>' Member.POLICYNUMBER(#I) '</PolicyNumber>'
    '<PolicyName>' Member.POLICYNAME(#I) '</PolicyName>'
    '<PolicyDesc>' Member.POLICYDESC(#I) '</PolicyDesc>'
    '<MaxPremiums>' Member.MAXPREMIUMS(#I) '</MaxPremiums>'
    '<Payments>' INTO XML LEAVING NO
  FOR #II = 1 TO Member.C@PAYMENT(#I)
    IF (Member.PAYMENTTYPE(#I,#II) = 'ADCR' OR = 'RDCR' OR = 'BADJ')
        AND Members.User = #Mobile
      ESCAPE TOP
    END-IF
    COMPRESS XML '<Payment ID="' Member.ID(#I,#II) '">'
      '<CCPayable>' Member.CCPAYABLE(#I,#II) '</CCPayable>'
      '<VariableAmt>' Member.VARIABLEAMT(#I,#II) '</VariableAmt>'
      '<ExceedAmt>' Member.EXCEEDAMT(#I,#II) '</ExceedAmt>'
      '<PaymentType>' Member.PAYMENTTYPE(#I,#II) '</PaymentType>'
      '<PaymentDesc>' Member.PAYMENTDESC(#I,#II) '</PaymentDesc>'
      '<PaymentDesc2>' Member.PAYMENTDESC2(#I,#II) '</PaymentDesc2>'
      '<PaymentMode>' Member.PAYMENTMODE(#I,#II) '</PaymentMode>'
      '<DueDate>' Member.DUEDATE(#I,#II) '</DueDate>'
      '<DefaultAmount>' Member.DEFAULTAMOUNT(#I,#II) '</DefaultAmount>'
      '<DueAmount>'Member.AMOUNT(#I,#II)'</DueAmount>'
      '<Amount>' Member.AMOUNT(#I,#II) '</Amount>'
      '<PastDue>' Member.PASTDUE(#I,#II) '</PastDue>'
      '</Payment>' INTO XML LEAVING NO
  END-FOR
  COMPRESS XML '</Payments>' '</Policy>' INTO XML LEAVING NO
END-FOR
COMPRESS XML '</Policies>' INTO XML LEAVING NO
* YK8 >
COMPRESS XML '<CreditCards />' INTO XML LEAVING NO
IF Member.C@BankAccount = 0
  COMPRESS XML '<BankAccounts />' INTO XML LEAVING NO
ELSE
  COMPRESS XML '<BankAccounts>' INTO XML LEAVING NO
  FOR #I = 1 TO C@BankAccount
    COMPRESS XML '<BankAccount>'
      '<CheckType>' Member.CheckType(#I) '</CheckType>'
      '<RoutingNumber>' Member.RoutingNumber(#I) '</RoutingNumber>'
      '<AccountNumber>' Member.AccountNumber(#I) '</AccountNumber>'
      '<AccountType>' Member.AccountType(#I) '</AccountType>'
      '<AccountHolderFirstName>' Member.AccountHolderFirstName(#I) '</AccountHolderFirstName>'
      '<AccountHolderLastName>' Member.AccountHolderLastName(#I) '</AccountHolderLastName>'
      '<AccountStreet>' Member.AccountStreet(#I) '</AccountStreet>'
      '<AccountCity>' Member.AccountCity(#I) '</AccountCity>'
      '<AccountState>' Member.AccountState(#I) '</AccountState>'
      '<AccountZipCode>' Member.AccountZipCode(#I) '</AccountZipCode>'
      '<SaveBankAccountInfoInd>false</SaveBankAccountInfoInd>'
      '</BankAccount>' INTO XML LEAVING NO
  END-FOR
  COMPRESS XML '</BankAccounts>' INTO XML LEAVING NO
END-IF
IF C@PaymentRequest = 0
  COMPRESS XML '<PaymentRequests />' INTO XML LEAVING NO
ELSE
  COMPRESS XML '<PaymentRequests>' INTO XML LEAVING NO
  FOR #I = 1 TO C@PaymentRequest
    COMPRESS XML '<PaymentRequest>'
      '<RequestType>' Member.RequestType(#I) '</RequestType>'
      '<RequestStatus>' Member.RequestStatus(#I) '</RequestStatus>'
      '<RequestDate>' Member.RequestDate(#I) '</RequestDate>'
      '<PaymentDate>' Member.PaymentDate(#I) '</PaymentDate>'
      '<PolicyNumber>' Member.PayPolicyNumber(#I) '</PolicyNumber>'
      '<PaymentAmount>' Member.PaymentAmount(#I) '</PaymentAmount>'
      '</PaymentRequest>' INTO XML LEAVING NO
  END-FOR
  COMPRESS XML '</PaymentRequests>' INTO XML LEAVING NO
END-IF
* > YK8
COMPRESS XML '</Member>' INTO XML LEAVING NO
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE COMPOSE-RESPONSE-DATA
***************************************
*
DECIDE FOR FIRST CONDITION
  WHEN ErrorCode = ' ' AND XML = ' '
    ErrorCode := #ErrorCode := #NO-PAYMENTS-DUE
    ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
  WHEN ErrorCode <> ' ' AND ErrorDescription = ' '
    #ErrorCode       := ErrorCode
    ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
  WHEN ErrorCode = ' ' AND XML <> ' '
    ErrorCode        :=  #SUCCESS-CODE
  WHEN NONE
    IGNORE
END-DECIDE
*
COMPRESS
  '<Members>' '<CN>' Members.CN_Owner '</CN>'   '<User /><PaymentMethod />'
  XML '<ErrorCode>' ErrorCode '</ErrorCode>'
  '<ErrorDescription>' ErrorDescription '</ErrorDescription>'
  '</Members>'
  INTO RESPONSE-DATA LEAVING NO
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE POPULATE-PAYMENT-DATA
***************************************
*
RESET #PAYMENT-ID
C@CREDITCARD := 1
IF C@PAY-POLICY NE 0
  C@POLICY     := C@PAY-POLICY
ELSE
  C@POLICY := 0
  #PAYMENT-ID := C@POLICY
  COMPRESS '*MemberCN*' CC-PAYMENT.ID-NUMBER #NO-PAYMENTS-DUE
    INTO ERROR-MESSAGE
  WRITE WORK FILE 1 VARIABLE ERROR-MESSAGE
  RESET ERROR-MESSAGE
  ESCAPE ROUTINE
END-IF
*
FOR #I = 1 TO C@POLICY
  C@PAYMENT(#I) := C@AVAILABLE-PAYMENT(#I)
END-FOR
*
Member.NAME := INSURED-NAME
Member.CN   := PARM-POLICIES.ID-NUMBER(#J)
FOR #I = 1 TO C@PAY-POLICY
* Filter by owner
  RESET #TARGET-POLICY
  FOR #JJ = 1 TO C@Own_Polices
    IF PARM-POLICIES.POLICY-NUMBER(#JJ) = CC-PAYMENT.POLICY-NBR(#I)
        OR (CC-PAYMENT.POLICY-NBR(#I) = 'Service Plan'                 /* YK2
        AND CC-PAYMENT.ID-NUMBER = PARM-MEMBER-CN                      /* YK2
        AND PARM-MEMBER-CN = PARM-CN )                                 /* YK2
      #TARGET-POLICY := true
      ESCAPE BOTTOM
    END-IF
  END-FOR
  IF NOT #TARGET-POLICY
    ESCAPE TOP
  END-IF
*
  Member.PolicyNumber(#I) := POLICY-NBR(#I)
  DECIDE FOR FIRST CONDITION
    WHEN (SUBSTR(PLAN-TYPE(#I),3,1) = 'F' AND PLAN-TYPE(#I) NE 'SPF')
      #FLEX-PLAN := SUBSTR(PLAN-TYPE(#I),1,2)
      #FLEX-KEY  := '99F'
*   WHEN SUBSTR(PLAN-TYPE(#I),1,1) = 'U' OR = 'V' OR = 'W'        /* YK4
    WHEN F-LT2-TRUE(<PLAN-TYPE(#I)>)                              /* YK4
      #FLEX-PLAN := SUBSTR(PLAN-TYPE(#I),2,2)
      COMPRESS SUBSTR(PLAN-TYPE(#I),1,1) '99' INTO #FLEX-KEY LEAVING NO
    WHEN ANY
      POLICYNAME(#I) := FUNCTION-PLAN(<#FLEX-KEY>)(1)
      EXAMINE POLICYNAME(#I) FOR '99' REPLACE #FLEX-PLAN
    WHEN NONE
      PolicyName(#I) := FUNCTION-PLAN(<PLAN-TYPE(#I)>)(1)
  END-DECIDE
  #DATE := FUNCTION-CALENDAR(<CC-PAYMENT.ISSUE-DATE(#I),'S'>)
  IF CC-PAYMENT.FACE-AMOUNT(#I) <> 0                                            /* YK2
    COMPRESS 'Policy' Member.PolicyNumber(#I) INTO Member.PolicyNumber(#I)      /* YK2
    MOVE EDITED CC-PAYMENT.FACE-AMOUNT(#I) (EM=Z,ZZZ,ZZ9.99) TO #AMOUNT
    #AMOUNT := *TRIM(#AMOUNT)
    COMPRESS '$' #AMOUNT INTO #AMOUNT LEAVING NO
    COMPRESS 'for' #AMOUNT 'issued' #DATE
      INTO PolicyDesc(#I)
  ELSE                                                            /* YK2
    COMPRESS 'issue date' #DATE INTO PolicyDesc(#I)               /* YK2
  END-IF                                                          /* YK2
  COMPRESS MIN-PREMIUMS(#I) '-' MAX-PREMIUMS(#I) '-' DEFAULT-PREM(#I)
    INTO MaxPremiums(#I) LEAVING NO
  FOR #II = 1 TO C@Payment(#I)
    #PAYMENT-ID := #PAYMENT-ID + 1
    ID(#I,#II) := #PAYMENT-ID
    IF CC-PAYABLE(#I,#II)= 'T'
      CCPayable(#I,#II) := #TRUE
    ELSE
      CCPayable(#I,#II) := #FALSE
    END-IF
* YK5 - set variable amount and exceed amount for ADCR, RDCR or BADJ to false for Member Center
    IF TRAN-TYPE(#I,#II) = #MC-EXCEPTION-TRAN(*)
      VariableAmt(#I,#II) := #FALSE
      ExceedAmt(#I,#II)   := #FALSE
    ELSE                                    /* YK5
      IF VAR-AMOUNT(#I,#II) = 'T'
        VariableAmt(#I,#II) := #TRUE
      ELSE
        VariableAmt(#I,#II) := #FALSE
      END-IF
      IF EXCEED-AMT(#I,#II) = 'T'           /* YK1
        ExceedAmt(#I,#II) := #TRUE          /* YK1
      ELSE                                  /* YK1
        ExceedAmt(#I,#II) := #FALSE         /* YK1
      END-IF                                /* YK1
    END-IF                                  /* YK5
    PaymentType(#I,#II) := TRAN-TYPE(#I,#II)
    PaymentDesc(#I,#II) := FUNCTION-PAYMENT-TYPE(<TRAN-TYPE(#I,#II)>)(1)
    PaymentDesc2(#I,#II):= FUNCTION-PAYMENT-TYPE(<TRAN-TYPE(#I,#II)>)(2)
    IF PAYMENT-NOTE(#I,#II) NE ' '
      COMPRESS PAYMENT-NOTE(#I,#II) PaymentDesc2(#I,#II) INTO PaymentDesc2(#I,#II)
    END-IF
    PaymentMode(#I,#II) := FUNCTION-PAYMENT-MODE(<PAYMENT-MODE(#I,#II)>)(1)
    IF FUNCTION-PAYMENT-MODE(<PAYMENT-MODE(#I,#II)>)(2) NE ' '
      COMPRESS FUNCTION-PAYMENT-MODE(<PAYMENT-MODE(#I,#II)>)(2) PaymentMode(#I,#II)
        INTO PaymentMode(#I,#II)
    END-IF
    DueDate(#I,#II) := CC-PAYMENT.PAID-TO-DATE(#I,#II)
* Remove "," from MASK for amounts
    MOVE EDITED DEFAULT-AMOUNT(#I,#II) (EM=ZZZZZ9.99) TO DefaultAmount(#I,#II)
    DefaultAmount(#I,#II) := *TRIM(DefaultAmount(#I,#II))
    IF DEFAULT-AMOUNT(#I,#II) < 0
      COMPRESS '-' DefaultAmount(#I,#II) TO DefaultAmount(#I,#II) LEAVING NO
    END-IF
    MOVE EDITED DUE-AMOUNT(#I,#II) (EM=ZZZZZ9.99) TO Amount(#I,#II)
    Amount(#I,#II) := *TRIM(Amount(#I,#II))
    IF DUE-AMOUNT(#I,#II) < 0
      COMPRESS '-' Amount(#I,#II) TO Amount(#I,#II) LEAVING NO
    END-IF
    IF CC-PAYMENT.PAID-TO-DATE(#I,#II) < #PAST-DUE-DATE       /* YK6
      PastDue(#I,#II) := #TRUE
    ELSE
      PastDue(#I,#II) := #FALSE
    END-IF                                         /* YK6
  END-FOR
END-FOR
END-SUBROUTINE
END
