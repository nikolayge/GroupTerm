* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center Online
* Member Address Information
* XML Request Parser
********************************************************
*        MODIFICATION LOG
********************************************************
* USER   DATE      TAG  REASON
* YAK    09072010       Initial Creation
* YAK    06282012  YK1  Sync with CRM using ContactID
********************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC         /* Out
*
LOCAL USING PARSER-X
LOCAL USING MBCA0003
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML                          (A) DYNAMIC
*
1 #ErrorCode    (A3) INIT <'0'>
1 #ErrorDescription (A) DYNAMIC
1 #DEL          (A1) CONST <'-'>
1 #TAB          (A1) CONST <H'09'>
1 #I            (I2)
1 #value        (A) DYNAMIC
1 FUNCTION_CODE (A) DYNAMIC CONST <'ADDRESS'>
1 #FIR-REQUEST  (A50)
1 #ContactID    (N8)                           /* YK1
*
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
* Call Business Logic for Get
IF AddressInfo.ActionType = '0'
  CALLNAT 'MBCN0031' AddressInfo #ErrorCode
  IF #ErrorCode = '0'
     PERFORM COMPOSE-XML-GET
     ESCAPE ROUTINE
  END-IF
ELSE
* Call Business Logic for Add/Update
  CALLNAT 'MBCN0032' AddressInfo #ErrorCode
  IF #ErrorCode = '0'
    END TRANSACTION
  ELSE
    BACKOUT TRANSACTION
  END-IF
END-IF
  PERFORM COMPOSE-XML
*
************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'AddressInfo/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6) THEN
      AddressInfo.CN := VAL(#value)
    END-IF
  VALUE 'AddressInfo/UserID/$'
    AddressInfo.UserID := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/ActionType/$'
    AddressInfo.ActionType := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/AddressPoolID/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N8) THEN
      AddressInfo.AddressPoolID := VAL(#value)
    END-IF
  VALUE 'AddressInfo/AddressTypeCode/$'
    AddressInfo.AddressTypeCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/AddressLocationCode/$'
    AddressInfo.AddressLocationCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/AttentionLine/$'
    AddressInfo.AttentionLine := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/Street/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.Street := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/Unit/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.Unit := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/City/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.City := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/StateCode/$'
    AddressInfo.StateCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/ZipCode/$'
    AddressInfo.ZipCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/CountryCode/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.CountryCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/IntlRegion/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.IntlRegion := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/PostalCode/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.PostalCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/Urbanization/$'
    EXAMINE XML_PARSER_CONTENT TRANSLATE INTO UPPER CASE
    AddressInfo.Urbanization := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/AddressFormatTypeCode/$'
    AddressInfo.AddressFormatTypeCode := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/AddressValidIndicator/$'
    AddressInfo.AddressValidIndicator := *TRIM(XML_PARSER_CONTENT)
  VALUE 'AddressInfo/Contacts/Contact'
    /* multiple
    ADD 1 TO AddressInfo.C@Contact
    EXPAND ARRAY AddressInfo.Contact TO
      (1:AddressInfo.C@Contact)
  VALUE 'AddressInfo/Contacts/Contact/ContactID/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N8) THEN
      AddressInfo.ContactID(C@Contact) := VAL(#value)
    END-IF
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE COMPOSE-XML-GET
*********************************
* <![CDATA[' ... ']]>
* COMPRESS XML '<?xml version="1.0" encoding="UTF-8"?>'
COMPRESS NUMERIC '<AddressInfo>'
  '<CN>' AddressInfo.CN '</CN>'
  '<UserID>' AddressInfo.UserID '</UserID>'
  '<ActionType>' AddressInfo.ActionType '</ActionType>'
  '<AddressPoolID>' AddressInfo.AddressPoolID '</AddressPoolID>'
  '<Street><![CDATA[' AddressInfo.Street ']]></Street>'
  '<Unit><![CDATA[' AddressInfo.Unit ']]></Unit>'
  '<City><![CDATA[' AddressInfo.City ']]></City>'
  '<StateCode>' AddressInfo.StateCode '</StateCode>'
  '<ZipCode>' AddressInfo.ZipCode '</ZipCode>'
  '<CountryCode>' AddressInfo.CountryCode '</CountryCode>'
  '<IntlRegion><![CDATA[' AddressInfo.IntlRegion ']]></IntlRegion>'
  '<PostalCode><![CDATA[' AddressInfo.PostalCode ']]></PostalCode>'
  '<Urbanization><![CDATA[' AddressInfo.Urbanization ']]></Urbanization>'
  '<AddressFormatTypeCode>' AddressInfo.AddressFormatTypeCode '</AddressFormatTypeCode>'
  '<AddressValidIndicator>' AddressInfo.AddressValidIndicator '</AddressValidIndicator>'
  '<AddressTypeCode>' AddressInfo.AddressTypeCode '</AddressTypeCode>'
  '<AddressLocationCode>' AddressInfo.AddressLocationCode '</AddressLocationCode>'
  '<AttentionLine>' AddressInfo.AttentionLine '</AttentionLine>'
  '<Contacts>' INTO XML LEAVING NO
*
FOR #I = 1 TO AddressInfo.C@Contact COMPRESS XML
    '<Contact>'
    '<ContactID>' AddressInfo.ContactId(#I) '</ContactID>'
    '<SharingAddress>' AddressInfo.SharingAddress(#I) '</SharingAddress>'
    '<CurrentRelationshipCode>' AddressInfo.CurrentRelationshipCode(#I) '</CurrentRelationshipCode>'
    '<FirstName>' AddressInfo.FirstName(#I) '</FirstName>'
    '<LastName>' AddressInfo.LastName(#I)  '</LastName>'
    '<MiddleName>' AddressInfo.MiddleName(#I) '</MiddleName>'
    '<DateOfBirth>' AddressInfo.DateofBirth(#I) '</DateOfBirth>'
    '</Contact>' INTO XML LEAVING NO
END-FOR
COMPRESS XML '</Contacts>' '</AddressInfo>' INTO XML LEAVING NO
RESPONSE-DATA := XML
*
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
*
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
ELSE
  PERFORM LOG-REQUESTS
END-IF
COMPRESS '<AddressInfo>' '<CN>' AddressInfo.CN '</CN>' -
  '<ErrorCode>' #ErrorCode '</ErrorCode>' -
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>' -
  '</AddressInfo>'
  INTO RESPONSE-DATA LEAVING NO
END-SUBROUTINE
******************************
DEFINE SUBROUTINE LOG-REQUESTS
******************************
* save FIR request
* COMPRESS FULL AddressInfo.CN #TAB FUNCTION_CODE TO #FIR-REQUEST
  WRITE WORK FILE 2 AddressInfo.CN
  CLOSE WORK FILE 2
* Log CRM request
* CALLNAT 'MBRCRC' AddressInfo.CN FUNCTION_CODE           /* YK1
#ContactID := F-GET-CONTACT-ID(<AddressInfo.CN>)          /* YK1
CALLNAT 'MBRCRC' #ContactID FUNCTION_CODE                 /* YK1
END-SUBROUTINE
*
END
