* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center Online/AUC/Online Application
* Email Information
* Main program: MBCN0050
********************************************************
*        MODIFICATION LOG
********************************************************
* USER   DATE      TAG  REASON
* YAK    09072010       Initial Creation
* YAK    04052012       Restructured to be used from AUC
* YAK    06282012  YK1  Sync with CRM using ContactID
* YAK    04102015  YK2  SystemSource not populates when from Online Application
*                       if SystemSource = ' ' - using old MC structure
********************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC         /* Out
*
LOCAL USING PARSER-X
LOCAL USING MBCA0005
LOCAL USING OBJACEML
LOCAL USING ERROR_L
LOCAL
*
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML                          (A) DYNAMIC
*
1 #MC               (A) DYNAMIC INIT <'MC'>
1 #AUC              (A) DYNAMIC INIT <'AUC'>
1 #TRUE             (A) DYNAMIC CONST <'true'>
1 #FALSE            (A) DYNAMIC CONST <'false'>
1 FUNCTION_CODE     (A) DYNAMIC CONST <'EMAIL'>
1 #GET              (A) DYNAMIC CONST <'0'>
1 #UserName         (A) DYNAMIC
1 #TAB              (A1) CONST <H'09'>
1 #NO               (A1) CONST <'N'>
1 #YES              (A1) CONST <'Y'>
1 #FIR-REQUEST      (A50)
1 #DATN             (N8)
1 #TIMN             (N7)
1 #I                (I2)
1 #GET-ALL          (L)
*
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
* Call Business Logic
*
#DATN := *DATN
#TIMN := *TIMN
*
DECIDE FOR EVERY CONDITION
  WHEN Email.SystemSource = ' '     /* From Online Application
*     Email.SystemSource := #MC     /* YK2
    Email.EmailUndeliverableInd(*) := #NO
  WHEN Email.SystemSource = #AUC 
    IGNORE
  WHEN Email.SystemSource = #AUC AND Email.ActionType = '0'
    PERFORM PROCESS-GET-REQUEST
  WHEN Email.ActionType <> '0'
    PERFORM PROCESS-UPDATE-REQUEST
  WHEN NONE 
    IGNORE
END-DECIDE
*
PERFORM COMPOSE-XML
*
**************************
DEFINE PROCESS-GET-REQUEST
**************************
*
Email.ErrorCode := '0'
CALLNAT 'MBCN0051' Email
IF Email.ErrorCode = '0'
  PERFORM COMPOSE-GET-XML
END-IF
*
END-SUBROUTINE
*
*****************************
DEFINE PROCESS-UPDATE-REQUEST
*****************************
*
Email.ErrorCode := '0'
CALLNAT 'MBCN0052' Email 
IF Email.ErrorCode = '0'
  END TRANSACTION
ELSE
  BACKOUT TRANSACTION
END-IF
END-SUBROUTINE
*
************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'MemberEmails/CN/$'
    Email.CN := VAL(XML_PARSER_CONTENT)
  VALUE 'MemberEmails/UserID/$'
    Email.UserID := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberEmails/EmailInfo'
    ADD 1 TO Email.C@EmailInfo
    EXPAND ARRAY Email.EmailInfo TO (1:Email.C@EmailInfo)
  VALUE 'MemberEmails/EmailInfo/ActionType/$'
    Email.ActionType_s(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberEmails/EmailInfo/EmailID/$'
    Email.EmailID(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  VALUE 'MemberEmails/EmailInfo/EmailAddress/$'
    Email.EmailAddress(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberEmails/EmailInfo/EmailPreferred/$'
    Email.EmailPreferredInd(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberEmails/EmailInfo/Remarks/$'
    Email.Remarks(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Emails/ActionType/$'
    Email.ActionType := *TRIM(XML_PARSER_CONTENT)    
    #GET-ALL := TRUE
  VALUE 'Emails/SystemSource/$'
    Email.SystemSource := *TRIM(XML_PARSER_CONTENT)    
  VALUE 'Emails/ContactID/$'
    Email.ContactID := VAL(XML_PARSER_CONTENT)    
  VALUE 'Email'
    RESET INITIAL Email  
    Email.C@EmailInfo := 1 
    EXPAND ARRAY Email.EmailInfo TO (1:Email.C@EmailInfo)
  VALUE 'Email/ActionType/$'
    Email.ActionType := Email.ActionType_s(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/ContactID/$'
    Email.ContactID := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/CN/$'
    Email.CN := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/SystemSource/$'
    Email.SystemSource := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/LastUpdatedDate/$'
    Email.LastUpdatedDate(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/LastUpdatedTime/$'
    Email.LastUpdatedTime(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/LastUpdatedUser/$'
    Email.LastUpdatedUser(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)    
  VALUE 'Email/User/$'
    Email.UserID := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/EmailID/$'
    Email.EmailID(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/EmailPreferred/$'
    Email.EmailPreferredInd(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
    IF Email.EmailPreferredInd(C@EmailInfo) = #TRUE
      Email.EmailPreferredInd(C@EmailInfo) := #YES
    ELSE
      Email.EmailPreferredInd(C@EmailInfo) := #NO
    END-IF
  VALUE 'Email/Protected/$'
    Email.EmailProtectedInd(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
    IF Email.EmailProtectedInd(C@EmailInfo) = #TRUE
      Email.EmailProtectedInd(C@EmailInfo) := #YES
    ELSE
      Email.EmailProtectedInd(C@EmailInfo) := #NO
    END-IF    
  VALUE 'Email/EmailType/$'
    Email.EmailType(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/EmailAddress/$'
    Email.EmailAddress(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/Remarks/$'
    Email.Remarks(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
*   VALUE 'Email/ShowRemarks'
*     Email.ShowRemarks(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/EmailUndeliverable/$'
    Email.EmailUndeliverableInd(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
    IF Email.EmailUndeliverableInd(C@EmailInfo) = #TRUE
      Email.EmailUndeliverableInd(C@EmailInfo) := #YES
    ELSE
      Email.EmailUndeliverableInd(C@EmailInfo) := #NO
    END-IF
  VALUE 'Email/EmailStatus/$'
    Email.EmailStatus(C@EmailInfo) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Email/EmailStatusDate/$'
    Email.EmailStatusDate(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/EmailStartDate/$'
    Email.EmailStartDate(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  VALUE 'Email/EmailEndDate/$'
    Email.EmailEndDate(C@EmailInfo) := VAL(XML_PARSER_CONTENT)
  NONE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE COMPOSE-GET-XML
*********************************
*
RESET XML
FOR #I = 1 TO C@EmailInfo
DECIDE ON FIRST VALUE Email.LastUpdatedUser(#I)
  VALUE 'MBR'
    #UserName := 'Member Center' 
  VALUE 'AUC'  
    #UserName := 'User Center'   
  NONE VALUE    
    #UserName := FUNCTION-NAME (<*TRANSLATE(Email.LastUpdatedUser(#I),UPPER)>)
END-DECIDE   
COMPRESS  XML
  '<Email>'
  '<SystemSource>' Email.SystemSource '</SystemSource>'
  '<CN>' Email.CN '</CN>'
  '<ContactID>' Email.ContactID '</ContactID>'  
  '<ActionType>' Email.ActionType '</ActionType>'  
  '<LastUpdatedDate>' Email.LastUpdatedDate(#I) '</LastUpdatedDate>'
  '<LastUpdatedTime>' Email.LastUpdatedTime(#I) '</LastUpdatedTime>'
  '<LastUpdatedUser>' #UserName '</LastUpdatedUser>'
  '<EmailID>' Email.EmailID(#I) '</EmailID>'
  '<EmailType>' Email.EmailType(#I) '</EmailType>'
  '<EmailAddress><![CDATA[' Email.EmailAddress(#I) ']]></EmailAddress>'
  '<Remarks>' Email.Remarks(#I) '</Remarks>'
  '<EmailPreferred>' INTO XML LEAVING NO
  IF Email.EmailPreferredInd(#I) = 'Y'
    COMPRESS  XML #TRUE
      '</EmailPreferred>' INTO XML LEAVING NO
  ELSE
    COMPRESS  XML #FALSE
      '</EmailPreferred>' INTO XML LEAVING NO
  END-IF
  COMPRESS XML
  '<EmailUndeliverable>' INTO XML LEAVING NO
  IF Email.EmailUndeliverableInd(#I) = 'Y'
    COMPRESS  XML #TRUE
      '</EmailUndeliverable>' INTO XML LEAVING NO
  ELSE
    COMPRESS  XML #FALSE
      '</EmailUndeliverable>' INTO XML LEAVING NO
  END-IF
  COMPRESS XML
  '<Protected>' INTO XML LEAVING NO
  IF Email.EmailProtectedInd(#I) = 'Y'
    COMPRESS  XML #TRUE
      '</Protected>' INTO XML LEAVING NO
  ELSE
    COMPRESS  XML #FALSE
      '</Protected>' INTO XML LEAVING NO
  END-IF
  COMPRESS  XML
    '<EmailStatus>' Email.EmailStatus(#I) '</EmailStatus>'
    '<EmailStatusDate>' Email.EmailStatusDate(#I) '</EmailStatusDate>'
    '<EmailStartDate>' Email.EmailStartDate(#I) '</EmailStartDate>'
    '<EmailEndDate>' Email.EmailEndDate(#I) '</EmailEndDate>'
    '</Email>'
    INTO XML LEAVING NO
END-FOR    
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
DECIDE FOR FIRST CONDITION
  WHEN Email.ErrorCode <> '0'
    Email.ErrorDescription := F-ERROR-DESCRIPTION(<Email.ErrorCode>)
  WHEN Email.ActionType <> #GET
    PERFORM LOG-REQUESTS
  WHEN NONE
    IGNORE
END-DECIDE
*
DECIDE FOR FIRST CONDITION
  WHEN #GET-ALL
    COMPRESS 
      '<Emails>' 
        XML 
      '<ErrorCode>' Email.ErrorCode '</ErrorCode>'
      '<ErrorDescription>' Email.ErrorDescription '</ErrorDescription>' 
      '</Emails>' 
    INTO RESPONSE-DATA LEAVING NO
  WHEN Email.SystemSource = #AUC AND Email.ActionType = '0'
    RESPONSE-DATA := XML
  WHEN Email.SystemSource = #AUC AND Email.ActionType <> '0'
      COMPRESS 
      '<Emails>'
      '<SystemSource>' Email.SystemSource '</SystemSource>'
      '<ContactID>' Email.ContactID '</ContactID>'
      '<ErrorCode>' Email.ErrorCode '</ErrorCode>'
      '<ErrorDescription>' Email.ErrorDescription '</ErrorDescription>' 
      '</Emails>' 
    INTO RESPONSE-DATA LEAVING NO      
  WHEN Email.SystemSource = #MC OR = ' '                /* YK2
    COMPRESS '<MemberEmails>' 
             '<SystemSource>' Email.SystemSource '</SystemSource>'    
             '<CN>' Email.CN '</CN>' 
             '<ContactID>' Email.ContactID '</ContactID>' 
             '<ErrorCode>' Email.ErrorCode '</ErrorCode>'
             '<ErrorDescription>' Email.ErrorDescription '</ErrorDescription>' 
             '</MemberEmails>' 
    INTO RESPONSE-DATA LEAVING NO  
  WHEN NONE
    IGNORE
END-DECIDE  
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE LOG-REQUESTS
******************************
* save FIR request
IF Email.SystemSource = #MC
  WRITE WORK FILE 2 Email.CN
  CLOSE WORK FILE 2
END-IF   
* Log CRM request
* CALLNAT 'MBRCRC' Email.CN FUNCTION_CODE         /* YK1 
CALLNAT 'MBRCRC' Email.ContactID FUNCTION_CODE    /* YK1
IF Email.SystemSource = #AUC
* Do GetEmails 
  Email.ActionType := '0'  
  #GET-ALL := TRUE
  RESET Email.EmailInfo(*)
  PERFORM PROCESS-GET-REQUEST
END-IF
END-SUBROUTINE
*
END
