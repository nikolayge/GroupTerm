* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center/Member Login
* Object name - MBCNN010
***********************************************************************
*        MODIFICATION LOG
***********************************************************************
* USER   DATE      TAG  REASON
* YAK    08032010       Initial Creation
* YAK    07292011  YK1  Delete "." from policy number if typed in error
* YAK    09102014       Re-written for Member Center II
* YAK    01262016  YK2  MC-II FIR - Add fields
***********************************************************************
*
DEFINE DATA PARAMETER
*
1 PROCESS-NAME      (A) DYNAMIC
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC
*
LOCAL USING OBJAWEBU
LOCAL USING MBCLN010
LOCAL USING MBCA0010
LOCAL USING OBJACONT
LOCAL USING PARSER-X
LOCAL USING ERROR_LN
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
*
1 #CN               (A)  DYNAMIC
1 #ErrorCode        (A3) INIT <'0'>
1 #ErrorDescription (A) DYNAMIC
1 #value            (A) DYNAMIC
1 #I                (I2)
1 #SSN              (A9)
1 #ISN              (P9)
1 #YES              (A1) CONST <'Y'>
1 #NO               (A1) CONST <'N'>
1 #TRUE             (A) DYNAMIC CONST <'true'>
1 #FALSE            (A) DYNAMIC CONST <'false'>
1 #ContactId   (N8)
1 #DateOfBirth (N8)
1 #UserID_Available  (A) DYNAMIC
1 #Dynamic_Name      (A) DYNAMIC
1 #XML               (A) DYNAMIC
1 #Update            (L)
1 C@SecurityQuestion (N2)
1 #CheckIsRegistered (A) DYNAMIC CONST <'CheckIsRegistered'>
1 #VerifyMemberInfo  (A) DYNAMIC CONST <'VerifyMemberInfo'>
1 #CheckUserID       (A) DYNAMIC CONST <'CheckUserID'>
1 #MemberLogin       (A) DYNAMIC CONST <'MemberLogin'>
1 #RegisterMember    (A) DYNAMIC CONST <'RegisterMember'>
1 #GetAccountInformation (A) DYNAMIC CONST <'GetAccountInformation'>
1 #Get               (A) DYNAMIC CONST <'GET'>
1 #AddRecord         (A) DYNAMIC CONST <'AddRecord'>
*
1 #CHECK-BY-CN         (A) DYNAMIC CONST <'CHECK-BY-CN'>
1 #CHECK-BY-FIELDS     (A) DYNAMIC CONST <'CHECK-BY-FIELDS'>
1 #CHECK-ORGANIZATION  (A) DYNAMIC CONST <'CHECK-ORGANIZATION'>
1 #ORGANIZATION        (A) DYNAMIC CONST <'O'>
1 #INDIVIDUAL          (A) DYNAMIC CONST <'I'>
1 #ELECTRONIC-DELIVERY (A) DYNAMIC CONST <'W'>
1 #MembershipType        (A7) CONST <'CODE051'>
1 #MembershipServiceType (A7) CONST <'CODE022'>
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
**************************
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'MemberLogin/UserName/$'
    MemberLogin.UserName := *TRIM(XML_PARSER_CONTENT)
    MemberLogin.UserName := *TRANSLATE(MemberLogin.UserName,LOWER)
  VALUE 'MemberLogin/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    if #value is (N6)
      MemberLogin.CN := val(#value)
    else
      #ErrorCode := #INVALID-CN-FORMAT
      PERFORM CREATE-RESPONSE
      ESCAPE MODULE
    end-if
  VALUE 'MemberLogin/OrganizationFlag/$'
    MemberLogin.OrganizationFlag := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberLogin/LastName/$'
    MemberLogin.LastName := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberLogin/TrustCompanyEntityName/$'
    MemberLogin.TrustCompanyEntityName := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberLogin/DateOfBirth/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    if #value is (N8)
      MemberLogin.DateOfBirth := #value
    end-if
  VALUE 'MemberLogin/SSNLast4/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    if #value IS (N4)
      MemberLogin.SSNLast4 := #value
    end-if
  VALUE 'MemberLogin/TINLast4/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    if #value IS (N4)
      MemberLogin.TINLast4 := #value
    end-if
  VALUE 'MemberLogin/Password/$'
    MemberLogin.Password := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberLogin/SecurityQuestions/SecurityQuestion'
    C@SecurityQuestion := C@SecurityQuestion + 1
  VALUE 'MemberLogin/SecurityQuestions/SecurityQuestion/Key/$'
    #I := C@SecurityQuestion
    MemberLogin.Key(#I) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberLogin/SecurityQuestions/SecurityQuestion/Answer/$'
    #I := C@SecurityQuestion
    MemberLogin.Answer(#I) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'MemberLogin/DALAccessDate/$'
    MemberLogin.DALAccessDate := *TRIM(XML_PARSER_CONTENT)
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
* Business Logic
DECIDE ON FIRST VALUE PROCESS-NAME
  VALUE #CheckIsRegistered
    PERFORM CHECK-REGISTERED
  VALUE #VerifyMemberInfo
    PERFORM VERIFY-MEMBER-INFO
  VALUE #CheckUserID
    PERFORM CHECK-USER-ID
  VALUE #MemberLogin
    PERFORM MEMBER-LOGIN
  VALUE #GetAccountInformation
    PERFORM GET-ACCOUNT-INFORMATION
  VALUE #RegisterMember
    PERFORM REGISTER-MEMBER
  NONE VALUE
    IGNORE
END-DECIDE
*
DECIDE FOR FIRST CONDITION
  WHEN #ErrorCode = '0' AND #Update
    END TRANSACTION
  WHEN #ErrorCode <> '0' AND #Update
    BACKOUT TRANSACTION
  WHEN NONE
    IGNORE
END-DECIDE
PERFORM CREATE-RESPONSE
*
**********************************
DEFINE SUBROUTINE CHECK-REGISTERED
**********************************
*
FIND NUMBER ST-V WITH ID-NUMBER = MemberLogin.CN
IF *NUMBER = 0
  #ErrorCode := #CN-DOES-NOT-EXIST
  ESCAPE ROUTINE
END-IF
RESET PARM-WEB-ACCOUNT-INFO
PARM-WEB-ACCOUNT-INFO.MEMBER-CN := MemberLogin.CN
PARM-WEB-ACCOUNT-INFO.#ACTION   := #Get
CALLNAT 'OBJNWEBU' PARM-WEB-ACCOUNT-INFO
* Return Member Information for Admin if not registered
IF PARM-WEB-ACCOUNT-INFO.#RETURN-CODE = #ID-NOT-REGISTERED OR PARM-WEB-ACCOUNT-INFO.REGISTERED-FLAG <> 'Y'
  #ErrorCode := #ID-NOT-REGISTERED
ELSE
  IF PARM-WEB-ACCOUNT-INFO.#RETURN-CODE <> ' '
    #ErrorCode := PARM-WEB-ACCOUNT-INFO.#RETURN-CODE
    ESCAPE ROUTINE
  END-IF
END-IF
* IF PARM-WEB-ACCOUNT-INFO.REGISTERED-FLAG = 'Y'
MemberLogin.UserName  := PARM-WEB-ACCOUNT-INFO.WEB-USER-NAME
PERFORM GET-SALUTATION
PERFORM GET-MEMBER-STATUS-INFO
MemberLogin.Salutation := #Dynamic_Name
MemberLogin.MembershipTypeCode := MemberInfo.MembershipTypeCode
MemberLogin.MembershipType := F-LOOK-UP-TABLE(<#MembershipType,MemberInfo.MembershipTypeCode>)
MemberLogin.MemberServiceTypeCode := MemberInfo.MemberServiceTypeCode
MemberLogin.MemberServiceType := F-LOOK-UP-TABLE(<#MembershipServiceType,MemberInfo.MemberServiceTypeCode>)
MemberLogin.MemberEmail := GET-EML(<#ContactId>)
MemberLogin.MemberSpouseStatusCode := MemberInfo.MemberSpouseStatusCode                 /* YK2
* ELSE
* #ErrorCode := #ID-NOT-REGISTERED
* END-IF
*
END-SUBROUTINE
*
*****************************************
DEFINE SUBROUTINE GET-ACCOUNT-INFORMATION
*****************************************
*
RESET PARM-WEB-ACCOUNT-INFO
PARM-WEB-ACCOUNT-INFO.MEMBER-CN         := MemberLogin.CN
PARM-WEB-ACCOUNT-INFO.#ACTION           := #Get
CALLNAT 'OBJNWEBU' PARM-WEB-ACCOUNT-INFO
IF PARM-WEB-ACCOUNT-INFO.#RETURN-CODE NE ' '
  #ErrorCode := PARM-WEB-ACCOUNT-INFO.#RETURN-CODE
  ESCAPE ROUTINE
END-IF
MemberLogin.UserName := PARM-WEB-ACCOUNT-INFO.WEB-USER-NAME
MemberLogin.CN       := PARM-WEB-ACCOUNT-INFO.MEMBER-CN
MemberLogin.Password := PARM-WEB-ACCOUNT-INFO.WEB-USER-PASSWORD
MemberLogin.Key(*)   := PARM-WEB-ACCOUNT-INFO.SECURITY-QUESTION(*)
MemberLogin.Answer(*):= PARM-WEB-ACCOUNT-INFO.SECURITY-ANSWER(*)
MemberLogin.BillDeliveryFlag := PARM-WEB-ACCOUNT-INFO.BILL-DELIVERY-FLAG
MemberLogin.AnnsDeliveryFlag := PARM-WEB-ACCOUNT-INFO.ANNS-DELIVERY-FLAG
*
PERFORM GET-MEMBER-STATUS-INFO
MemberLogin.FIRDeliveryFlag    := MemberInfo.FIRDeliveryFlag
MemberLogin.AnnRepDeliveryFlag := MemberInfo.AnnRepDeliveryFlag
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE GET-SALUTATION
********************************
*
#Dynamic_Name := 'S1'
#ContactId := F-GET-CONTACT-ID(<MemberLogin.CN>)
CALLNAT 'GPRS0CNT' #ContactId #Dynamic_Name
* #Dynamic_Name := EDIT_NAME_LOWCASE (< #Dynamic_Name >) /* bz-Name
EXAMINE #Dynamic_Name FOR 'Dear' DELETE
#Dynamic_Name := *TRIM(#Dynamic_Name)
END-SUBROUTINE
*
****************************************
DEFINE SUBROUTINE GET-MEMBER-STATUS-INFO
****************************************
*
MemberInfo.CN := MemberLogin.CN
CALLNAT 'MBCNN013' MemberInfo #ErrorCode
*
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE VERIFY-MEMBER-INFO
************************************
*
PARM-CONTACT.ID-NUMBER     := MemberLogin.CN
DECIDE FOR FIRST CONDITION
  WHEN MemberLogin.OrganizationFlag = #TRUE AND MemberLogin.TINLast4 <> ' '
    PARM-CONTACT.SSN           := VAL(MemberLogin.TINLast4)
    PARM-CONTACT.CONTACT-TYPE  := #ORGANIZATION
    PARM-CONTACT.FIRM-ORGANIZATION-NAME := *TRANSLATE(MemberLogin.TrustCompanyEntityName,UPPER)
  WHEN MemberLogin.DateOfBirth <> ' ' AND MemberLogin.SSNLast4 <> ' '
    PARM-CONTACT.DATE-OF-BIRTH := VAL(MemberLogin.DateOfBirth)
    PARM-CONTACT.SSN           := VAL(MemberLogin.SSNLast4)
    PARM-CONTACT.CONTACT-TYPE  := #INDIVIDUAL
    PARM-CONTACT.LAST-NAME     := *TRANSLATE(MemberLogin.LastName,UPPER)
  WHEN NONE
    #ErrorCode := #VALIDATION-FIELDS-MISSING
END-DECIDE
*
DECIDE FOR FIRST CONDITION
  WHEN MemberLogin.CN <> 0
    PARM-CONTACT.#ACTION := #CHECK-BY-CN
  WHEN MemberLogin.OrganizationFlag = #TRUE
    PARM-CONTACT.#ACTION := #CHECK-ORGANIZATION
  WHEN NONE
    PARM-CONTACT.#ACTION := #CHECK-BY-FIELDS
END-DECIDE
CALLNAT 'OBJNCONT' PARM-CONTACT
IF PARM-CONTACT.#RETURN-CODE NE ' '
  #ErrorCode := #VALIDATION-FAILED
  ESCAPE ROUTINE
END-IF
IF MemberLogin.CN = 0
  MemberLogin.CN := PARM-CONTACT.ID-NUMBER
END-IF
PERFORM GET-SALUTATION
MemberLogin.Salutation := #Dynamic_Name
* Get Web account info if available
IF PROCESS-NAME = #VerifyMemberInfo
  RESET PARM-WEB-ACCOUNT-INFO
  PARM-WEB-ACCOUNT-INFO.MEMBER-CN := MemberLogin.CN
  PARM-WEB-ACCOUNT-INFO.#ACTION   := #Get
  CALLNAT 'OBJNWEBU' PARM-WEB-ACCOUNT-INFO
  MemberLogin.Password := PARM-WEB-ACCOUNT-INFO.WEB-USER-PASSWORD
  MemberLogin.Key(*)   := PARM-WEB-ACCOUNT-INFO.SECURITY-QUESTION(*)
  MemberLogin.Answer(*):= PARM-WEB-ACCOUNT-INFO.SECURITY-ANSWER(*)
END-IF
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE CHECK-USER-ID
*******************************
*
#UserID_Available := #TRUE
RESET PARM-WEB-ACCOUNT-INFO
PARM-WEB-ACCOUNT-INFO.WEB-USER-NAME := MemberLogin.UserName
PARM-WEB-ACCOUNT-INFO.#ACTION := #CheckUserID
CALLNAT 'OBJNWEBU' PARM-WEB-ACCOUNT-INFO
IF #NUMBER-OF-RECORDS <> 0
  #UserID_Available := #FALSE
  #ErrorCode := #USER-NAME-NOT-AVAILABLE
  ESCAPE ROUTINE
END-IF
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE MEMBER-LOGIN
******************************
*
RESET PARM-WEB-ACCOUNT-INFO
PARM-WEB-ACCOUNT-INFO.WEB-USER-NAME     := MemberLogin.UserName
PARM-WEB-ACCOUNT-INFO.MEMBER-CN         := MemberLogin.CN
PARM-WEB-ACCOUNT-INFO.WEB-USER-PASSWORD := MemberLogin.Password
PARM-WEB-ACCOUNT-INFO.#ACTION           := #MemberLogin
CALLNAT 'OBJNWEBU' PARM-WEB-ACCOUNT-INFO
IF PARM-WEB-ACCOUNT-INFO.#RETURN-CODE NE ' ' 
  #ErrorCode := PARM-WEB-ACCOUNT-INFO.#RETURN-CODE 
  ESCAPE ROUTINE 
END-IF 
MemberLogin.UserName := PARM-WEB-ACCOUNT-INFO.WEB-USER-NAME
MemberLogin.CN       := PARM-WEB-ACCOUNT-INFO.MEMBER-CN
PERFORM GET-SALUTATION
MemberLogin.Salutation := #Dynamic_Name
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE REGISTER-MEMBER
*********************************
*
IF (MemberLogin.OrganizationFlag = #FALSE AND MemberLogin.SSNLast4 IS (N4))
    OR (MemberLogin.OrganizationFlag = #TRUE AND MemberLogin.TINLast4 IS (N4))
  IGNORE
ELSE
  #ErrorCode := #INCORRECT-SSN4-FORMAT
  ESCAPE ROUTINE
END-IF
IF MemberLogin.OrganizationFlag = #FALSE
  IF MemberLogin.DateofBirth IS (N8)
    IGNORE
  ELSE
    #ErrorCode := #INCORRECT-DOB-FORMAT
    ESCAPE ROUTINE
  END-IF
END-IF
IF C@SecurityQuestion <> 3
  #ErrorCode := #QA-NOT-COMPLETE
  ESCAPE ROUTINE
END-IF
*
PERFORM VERIFY-MEMBER-INFO
IF #ErrorCode <> '0'
  ESCAPE ROUTINE
END-IF
* Assign fields
RESET PARM-WEB-ACCOUNT-INFO
PARM-WEB-ACCOUNT-INFO.MEMBER-CN := MemberLogin.CN
PARM-WEB-ACCOUNT-INFO.#ACTION   := #AddRecord
PARM-WEB-ACCOUNT-INFO.WEB-USER-NAME       := MemberLogin.UserName
PARM-WEB-ACCOUNT-INFO.WEB-USER-PASSWORD   := MemberLogin.Password
PARM-WEB-ACCOUNT-INFO.SECURITY-QUESTION(*):= MemberLogin.Key(*)
PARM-WEB-ACCOUNT-INFO.SECURITY-ANSWER(*)  := MemberLogin.Answer(*)
PARM-WEB-ACCOUNT-INFO.REGISTERED-FLAG     := #YES
PARM-WEB-ACCOUNT-INFO.NO-FAMILY-FLAG      := #NO
PARM-WEB-ACCOUNT-INFO.ANNS-DELIVERY-FLAG  := #ELECTRONIC-DELIVERY
PARM-WEB-ACCOUNT-INFO.BILL-DELIVERY-FLAG  := #ELECTRONIC-DELIVERY
PARM-WEB-ACCOUNT-INFO.DATE-CREATED := PARM-WEB-ACCOUNT-INFO.DATE-MODIFIED :=
PARM-WEB-ACCOUNT-INFO.PROFILE-UPDATE-DATE := *DATN
CALLNAT 'OBJNWEBU' PARM-WEB-ACCOUNT-INFO
IF PARM-WEB-ACCOUNT-INFO.#RETURN-CODE NE ' '
  #ErrorCode := PARM-WEB-ACCOUNT-INFO.#RETURN-CODE
  ESCAPE ROUTINE
END-IF
#Update := true
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE CREATE-RESPONSE
*********************************
IF #ErrorCode <> '0'
  #ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
END-IF
*
COMPRESS '<MemberLogin>' '<CN>' MemberLogin.CN '</CN>'
  '<UserName>' MemberLogin.UserName '</UserName>'
  '<Salutation>' MemberLogin.Salutation '</Salutation>'
  '<Password>' MemberLogin.Password '</Password>'
  '<DALAccessDate>' MemberLogin.DALAccessDate '</DALAccessDate>'
  '<SecurityQuestions>' INTO #XML LEAVING NO
FOR #I = 1 TO 3
  COMPRESS #XML
    '<SecurityQuestion>'
    '<Key>'MemberLogin.Key(#I)'</Key>'
    '<Answer><![CDATA[' MemberLogin.Answer(#I)']]></Answer>'
    '</SecurityQuestion>' INTO #XML LEAVING NO
END-FOR
COMPRESS #XML '</SecurityQuestions>'
  '<PaperlessOptions>'
  '<BillDeliveryFlag>' MemberLogin.BillDeliveryFlag'</BillDeliveryFlag>'
  '<AnnsDeliveryFlag>' MemberLogin.AnnsDeliveryFlag'</AnnsDeliveryFlag>'
  '<FIRDeliveryFlag>' MemberLogin.FIRDeliveryFlag'</FIRDeliveryFlag>'
  '<AnnRepDeliveryFlag>' MemberLogin.AnnRepDeliveryFlag'</AnnRepDeliveryFlag>'
  '</PaperlessOptions>'
  '<MembershipType>' MemberLogin.MembershipType '</MembershipType>'
  '<MemberEmail>' MemberLogin.MemberEmail '</MemberEmail>'
  '<MemberServiceTypeCode>' MemberLogin.MemberServiceTypeCode '</MemberServiceTypeCode>'
  '<MemberSpouseStatusCode>' MemberLogin.MemberSpouseStatusCode '</MemberSpouseStatusCode>'     /* YK2
  '<ErrorCode>' #ErrorCode '</ErrorCode>' -
  '<ErrorDescription>' #ErrorDescription '</ErrorDescription>' -
  '</MemberLogin>' INTO #XML LEAVING NO
RESPONSE-DATA := #XML
END-SUBROUTINE
END
