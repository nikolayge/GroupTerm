* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Member Center 'ApplyPayments' function - called via EntireX
* MBCNCC20 - Accepts Request Data from Member Center/Payment Center
*            calls apply payment module, creates Response XML
* Called from    - NATSERV0 (EntireX NATURAL server)
*
**********************************************************
*        MODIFICATION LOG
**********************************************************
* USER   DATE      TAG  REASON
* YAK    12012010       Initial Creation
* YAK    01042012  YK1  Changes to include Premier Services
* YAK    15082014  YK2  Add "Pay By Check" functionality
* YAK    10202014  YK3  Minor changes to keep this module
*                       for Mobile website/Mobile App only
***********************************************************
*
DEFINE DATA
PARAMETER
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC
1 PROCESS_NAME      (A) DYNAMIC    /* YK10
LOCAL USING MBCLCC02
LOCAL USING WCCA0021
LOCAL USING PARSER-X
LOCAL USING OBJLERRQ
LOCAL USING ERROR_L
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
*
LOCAL
1 ERROR-MESSAGE   (A100)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 #I              (I2)
1 #II             (I2)
1 #III            (I2)
1 #LINE-LENGTH    (N3) CONST <250>
1 #LENGTH-PLUS1   (N3) CONST <251>
1 #value          (A)  dynamic
*
1 XML              (A) DYNAMIC
1 #ERROR           (L)
1 #ErrorCode       (A3)
1 #FATAL-ERROR     (A4)  CONST <'101'>
1 #ECHECK          (A) DYNAMIC CONST <'eCheck'>
1 #TRUE            (A) DYNAMIC CONST <'true'>
1 #SUCCESS-CODE    (A4)  CONST <'0'>
1 #SUCCESS-MESSAGE (A) DYNAMIC CONST <'Request processed successfully'>
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
* INCLUDE THE PARSER
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to repesent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of founld element
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
PERFORM APPLY-PAYMENTS
IF PROCESS_NAME = 'ApplyMobilePayments'     /* YK10
  PERFORM SAVE-ACCOUNT-INFO
END-IF
PERFORM COMPOSE-XML
PERFORM COMPOSE-RESPONSE-DATA
*
**************************
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'Members/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6) THEN
      Members.CN_Owner := VAL(#value)
    END-IF
  VALUE 'Members/User/$'
    Members.User := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Members/PaymentMethod/$'
    Members.PaymentMethod := *TRIM(XML_PARSER_CONTENT)
* VALUE 'Members/ProcessType/$'
*   Members.ProcessType := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Members/Member'
    ADD 1 TO Members.C@Member
    EXPAND ARRAY Members.Member TO
      (1:Members.C@Member)
  VALUE 'Members/Member/CN/$'
    #I := Members.C@Member
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6) THEN
      Members.CN(#I) := VAL(#value)
    END-IF
  VALUE 'Members/Member/Policies/Policy'
    #I := Members.C@Member
    ADD 1 TO Members.C@Policy(#I)
    EXPAND ARRAY Members.Policy TO
      (*:*,1:Members.C@Policy(#I))
  VALUE 'Members/Member/Policies/Policy/PolicyNumber/$'
    #I := Members.C@Member
    #II := Members.C@Policy(#I)
    Members.PolicyNumber(#I,#II) := XML_PARSER_CONTENT
  VALUE 'Members/Member/Policies/Policy/Payments/Payment'
    #I := Members.C@Member
    #II := Members.C@Policy(#I)
    ADD 1 TO Members.C@Payment(#I,#II)
    EXPAND ARRAY Members.Payment TO
      (*:*,*:*,1:Members.C@Payment(#I,#II))
  VALUE 'Members/Member/Policies/Policy/Payments/Payment/@ID'
    #I := Members.C@Member
    #II := Members.C@Policy(#I)
    #III := Members.C@Payment(#I,#II)
    IF XML_PARSER_CONTENT IS (I2) THEN
      Members.ID(#I,#II,#III) := VAL(XML_PARSER_CONTENT)
    END-IF
  VALUE 'Members/Member/Policies/Policy/Payments/Payment/PaymentType/$'
    #I := Members.C@Member
    #II := Members.C@Policy(#I)
    #III := Members.C@Payment(#I,#II)
    Members.PaymentType(#I,#II,#III) := XML_PARSER_CONTENT
  VALUE 'Members/Member/Policies/Policy/Payments/Payment/Amount/$'
    #I := Members.C@Member
    #II := Members.C@Policy(#I)
    #III := Members.C@Payment(#I,#II)
    Members.Amount(#I,#II,#III) := *TRIM(XML_PARSER_CONTENT)
  VALUE 'Members/Member/BankAccounts/BankAccount'
    #I := Members.C@Member
    ADD 1 TO Members.C@BankAccount(#I)
    EXPAND ARRAY Members.BankAccount TO
      (*:*,1:Members.C@BankAccount(#I))    
  VALUE 'Members/Member/BankAccounts/BankAccount/SaveBankAccountInfoInd/$'
    #I := Members.C@Member
    #II := Members.C@BankAccount(#I)
    Members.SaveBankAccountInfoInd(#I,#II) := XML_PARSER_CONTENT
* Get Payment Request data from XML
  VALUE 'Members/Member/PaymentRequests/PaymentRequest'
    #I := Members.C@Member
    ADD 1 TO Members.C@PaymentRequest(#I)
    EXPAND ARRAY Members.PaymentRequest TO
      (*:*,1:Members.C@PaymentRequest(#I))
  VALUE 'Members/Member/PaymentRequests/PaymentRequest/RequestType/$'
    #I := Members.C@Member
    #II := Members.C@PaymentRequest(#I)
    Members.RequestType(#I,#II) := XML_PARSER_CONTENT
  NONE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
*
RESET XML
#ErrorCode       := XML_PARSER_RESPONSE
ErrorDescription := XML_PARSER_ERROR_TEXT
PERFORM COMPOSE-RESPONSE-DATA
ESCAPE MODULE
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE APPLY-PAYMENTS
********************************
*
* YK2 <
FOR #I = 1 TO C@Member
  RESET CC-PAYMENT
  CC-PAYMENT.ID-NUMBER := Members.CN(#I)
  CC-PAYMENT.USER := Members.User
  DECIDE ON FIRST VALUE Members.PaymentMethod
    VALUE 'check'
      CC-PAYMENT.CASH-CODE := 'H'
    NONE VALUE
      IGNORE
  END-DECIDE
* > YK2
  C@PAY-POLICY := C@POLICY(#I)
  FOR #II = 1 TO C@PAY-POLICY
    CC-PAYMENT.POLICY-NBR(#II) := Members.POLICYNUMBER(#I,#II)
    C@APPLIED-PAYMENT(#II) := C@PAYMENT(#I,#II)
    FOR #III = 1 C@APPLIED-PAYMENT(#II)
      CC-PAYMENT.TRAN-TYPE(#II,#III) := PAYMENTTYPE(#I,#II,#III)
      EXAMINE Members.AMOUNT(#I,#II,#III) FOR ',' DELETE
      IF Members.AMOUNT(#I,#II,#III)IS (N5.2) THEN
        CC-PAYMENT.DUE-AMOUNT(#II,#III):= VAL(AMOUNT(#I,#II,#III))
      ELSE
        WRITE WORK FILE 1 VARIABLE 'INCORRECT VALUE FOR AMOUNT' Members.AMOUNT(#I,#II,#III)
        ErrorCode := #ErrorCode := #INCORRECT-AMOUNT-VALUE
        ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
        PERFORM COMPOSE-RESPONSE-DATA
        ESCAPE MODULE
      END-IF
    END-FOR
  END-FOR
*
  CALLNAT 'WCCNCC21' CC-PAYMENT ERROR-MESSAGE
  IF SUBSTR(ERROR-MESSAGE,1,4) = #FATAL-ERROR
    ErrorCode        := #FATAL-ERROR
    ErrorDescription := SUBSTR(ERROR-MESSAGE,5)
    PERFORM COMPOSE-RESPONSE-DATA
    ESCAPE MODULE
  END-IF
END-FOR
END-SUBROUTINE
*
***********************************
DEFINE SUBROUTINE SAVE-ACCOUNT-INFO
***********************************
*
* IF (Members.C@BankAccount <> 0 AND Members.SaveBankAccountInfoInd(*,*) = #TRUE)
*  OR (Members.C@PaymentRequest <> 0 AND Members.RequestType(*,*) = #ECHECK)
  CALLNAT 'MBCNPR10' REQUEST-DATA RESPONSE-DATA
* END-IF
*
END-SUBROUTINE
*
* Create Response to Client
*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
*
RESET XML
IF #ERROR
  ErrorCode := #ErrorCode := #PAYMENT-APPLY-ERROR
  ErrorDescription := F-ERROR-DESCRIPTION(<#ErrorCode>)
  PERFORM COMPOSE-RESPONSE-DATA
  PERFORM LOG-PROCESS-ERROR
  ESCAPE MODULE
END-IF
END-SUBROUTINE
*
*******************************************
DEFINE SUBROUTINE LOG-PROCESS-ERROR-REQUEST
*******************************************
*
REPEAT
  #I := #I + 1
  REQUEST-LINE(#I) := REQUEST-DATA
  IF *LENGTH(REQUEST-DATA) > #LINE-LENGTH
    REQUEST-DATA := SUBSTR(REQUEST-DATA,#LENGTH-PLUS1)
  ELSE
    ESCAPE BOTTOM
  END-IF
END-REPEAT
*
IF RESPONSE-DATA NE ' '
  RESET #I
  REPEAT
    #I := #I + 1
    RESPONSE-LINE(#I) := RESPONSE-DATA
    IF *LENGTH(RESPONSE-DATA) > #LINE-LENGTH
      RESPONSE-DATA := SUBSTR(RESPONSE-DATA,#LENGTH-PLUS1)
    ELSE
      ESCAPE BOTTOM
    END-IF
  END-REPEAT
END-IF

STORE ERROR-QUEUE-V
*
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE COMPOSE-RESPONSE-DATA
***************************************
*
IF ErrorCode = ' '
  RESET XML
  ErrorCode        :=  #SUCCESS-CODE
  ErrorDescription :=  #SUCCESS-MESSAGE
END-IF
*
COMPRESS
  '<Members>' XML '<ErrorCode>' ErrorCode '</ErrorCode>'
  '<ErrorDescription>' ErrorDescription '</ErrorDescription>'
  '</Members>'
  INTO RESPONSE-DATA LEAVING NO
END-SUBROUTINE
*
END
