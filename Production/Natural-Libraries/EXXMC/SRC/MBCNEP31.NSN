* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
*******************************************************************
* MBCNEP31 - Member Center/MC-II - Get payment settings
* Called from MBCNEP30 - 'ManagePaymentSettings' function
*******************************************************************
*        MODIFICATION LOG
*******************************************************************
* USER   DATE      TAG  REASON
* YAK    01102016       Initial Creation EB&P II
* YAK    01102016  YK1  EB&P III (Payor project)
* YAK    08062017  YK2  Add Bill Cycle selection
* YAK    08062017  YK3  Correct dates for EZ-Pay. Move Bill Cycle dates
*                       calculation to the function
* YAK    10202017  YK4  Correct CAP Loan description,
*                       calculate next payment date for loans
* YAK    02062018  YK5  Show correct Next Bill Date for credit card
*                       if account has overdue amount
*******************************************************************
*
DEFINE DATA
PARAMETER USING MBCAEP30
PARAMETER
1 #ErrorCode (A3)
LOCAL USING ERROR_L
LOCAL
1 #I                (I2)
1 #II               (I2)
1 #I1               (I2)
1 #I2               (I2)
1 #value            (A) DYNAMIC
1 #length           (N2)
1 #DATN             (N8)
1 REDEFINE #DATN
  2 #YYYY           (N4)
  2 #MM             (N2)
  2 #DD             (N2)
1 REDEFINE #DATN
  2 #YYYYMM         (N6)
*
1 #NEXT-BC-DATE (N8/3)
1 REDEFINE #NEXT-BC-DATE
  2 #BC-DATE (3)
    3 #BC-YYYY        (N4)
    3 #BC-MM          (N2)
    3 #BC-DD          (N2)
1 #PAID-TO-DATE     (N8)
1 REDEFINE #PAID-TO-DATE
  2 #PTD-YYYY       (N4)
  2 #PTD-MM         (N2)
  2 #PTD-DD         (N2)
1 REDEFINE #PAID-TO-DATE
  2 #PTD-YYYYMM     (N6)
*
1 #AUC             (A) DYNAMIC CONST <'AUC'>
1 #GET             (A) DYNAMIC CONST <'GET'>
1 #GET-ST          (A) DYNAMIC CONST <'GET-ST'>
1 #BankCardName    (A) DYNAMIC
1 #AccountType     (A) DYNAMIC
1 #AccountNumber   (A) DYNAMIC
1 #DDA             (A) DYNAMIC CONST <'DDA'>
1 #Checking        (A) DYNAMIC CONST <'Checking'>
1 #Saving          (A) DYNAMIC CONST <'Saving'>
1 #Active          (A1)   CONST <'D'>
1 #PremiumPaid     (A2)   CONST <'22'>
1 #NonModifyable   (A1/2) INIT <'E','G'>
1 #NonModifyableLoan (A1/6) INIT <'1','2','3','4','L','E'>
1 #CAP_Loan        (A) DYNAMIC CONST <'CAP Loan'>
1 #Pending         (A1/2) INIT <'E','L'>
1 #Linked_Loan     (A/2) DYNAMIC CONST <'Linked Fixed Loan','Linked Variable Loan'>
1 #LinkedLoan      (A) DYNAMIC
1 #ActionType      (A) DYNAMIC
1 #MethodType      (A) DYNAMIC
1 #CheckType       (A) DYNAMIC
1 #PolicyName      (A) DYNAMIC
1 #FLEX-PLAN       (A2)
1 #FLEX-KEY        (A3)
1 #PLAN-TYPE       (A3)
1 #SERVICE-PLAN    (A) DYNAMIC CONST <'Service Plan'>
1 #Policy          (A) DYNAMIC CONST <'Policy'>
1 #Loan            (A) DYNAMIC CONST <'Loan'>
1 #CAPLoan         (A) DYNAMIC CONST <'CapLoan'>
1 #Service         (A) DYNAMIC CONST <'Service'>
1 #ServiceOnly     (A) DYNAMIC CONST <'ServiceOnly'>
1 #true            (A) DYNAMIC CONST <'true'>             /* YK1
1 #false           (A) DYNAMIC CONST <'false'>            /* YK1
1 #NumberOfMonth   (N2)                                   /* YK1
1 #ModalPayment    (N5.2)                                 /* YK1
1 #MonthOverdue    (N2)                                   /* YK2
1 #AmountOverdue   (N5.2)                                 /* YK2
1 #BILL-CYCLE      (N1)                                   /* YK2
1 #LOAN-BILL-CYCLE (N1)                                   /* YK2
1 #MODE-WITH-BILL-CYCLE (A1/4) CONST <'1','2','4','0'>    /* YK2
1 #LOAN-MODE-WITH-BILL-CYCLE (A1) CONST <'8'>             /* YK2
1 #CurrentPolicyAutoPayIndex (N2)                         /* YK2
1 #PROCESS    (A) DYNAMIC                                 /* YK3
1 #CC-PROCESS (A) DYNAMIC CONST <'CC'>                    /* YK3
1 #EZPay      (A) DYNAMIC CONST <'E'>                     /* YK3
1 #LoanPayToDate (A) DYNAMIC                              /* YK4
*
END-DEFINE
*
#DATN := *DATN
*
IF PaymentSettings.SystemSource = #AUC
  RESET #NonModifyable(1) #NonModifyableLoan(3) #NonModifyableLoan(4) /* #NonModifyableLoan(5) #NonModifyableLoan(6)
END-IF
* Define the table with all policies and payment settings
FOR #I = 1 TO PaymentSettings.C@Polices
  RESET #CurrentPolicyAutoPayIndex #NEXT-BC-DATE(*) #PAID-TO-DATE
  IF (PaymentSettings.PolicyStatus(#I) = #Active AND PaymentSettings.PolicyPayStatus(#I) <= '40') OR
      (PaymentSettings.LinkedLoanPayMode(#I,1) <> ' ') OR
      (PaymentSettings.LinkedLoanPayMode(#I,2) <> ' ') OR
      (PaymentSettings.PolicyNumber(#I) = #SERVICE-PLAN)
    PERFORM GET-POLICY-NAME
    PaymentSettings.PolicyDescription(#I) := #PolicyName
    #BILL-CYCLE := VAL(PaymentSettings.PolicyBillCycle(#I))               /* YK2
* Populate Payment settings
    DECIDE FOR EVERY CONDITION
      WHEN PaymentSettings.PolicyStatus(#I) = #Active AND PaymentSettings.PolicyPayStatus(#I) <= '40'
          OR PaymentSettings.PolicyNumber(#I) = #SERVICE-PLAN
        PaymentSettings.C@AutoPay  := PaymentSettings.C@AutoPay + 1
        #CurrentPolicyAutoPayIndex := PaymentSettings.C@AutoPay             /* YK2
        EXPAND ARRAY PaymentSettings.AutoPay TO (*:C@AutoPay)
        PERFORM POPULATE-AUTOPAY-FIELDS
*       PaymentSettings.AutoPayPolicy(C@AutoPay) := PaymentSettings.PolicyNumber(#I)
        COMPRESS '(' PaymentSettings.PolicyNumber(#I) ')' INTO PaymentSettings.AutoPayPolicy(C@AutoPay) LEAVING NO
        COMPRESS #PolicyName PaymentSettings.AutoPayPolicy(C@AutoPay) INTO PaymentSettings.AutoPayPolicy(C@AutoPay)
        PaymentSettings.AutoPayMethod(C@AutoPay) := FUNCTION-PAYMENT-MODE(<PaymentSettings.PolicyMode(#I)>)(3)
        PaymentSettings.AutoPayFrequency(C@AutoPay) := FUNCTION-PAYMENT-MODE(<PaymentSettings.PolicyMode(#I)>)(4)
* Set Modifyable flag
        IF PaymentSettings.PolicyMode(#I) = #NonModifyable(*)
          PaymentSettings.AutoPayModify(C@AutoPay) := #false
        ELSE
          PaymentSettings.AutoPayModify(C@AutoPay) := #true
        END-IF
* Set Payment Type
        IF PaymentSettings.PolicyNumber(#I) = #SERVICE-PLAN
          PaymentSettings.AutoPayPaymentType(C@AutoPay) := #Service
          PaymentSettings.AutoPayModify(C@AutoPay) := #false
        ELSE
          PaymentSettings.AutoPayPaymentType(C@AutoPay) := #Policy
        END-IF
        MOVE EDITED PaymentSettings.PolicyMonthlyPayment(#I) (EM=ZZ,ZZ9.99) TO PaymentSettings.AutoPayMonthlyAmount(C@AutoPay)
        PaymentSettings.AutoPayMonthlyAmount(C@AutoPay) := *TRIM(PaymentSettings.AutoPayMonthlyAmount(C@AutoPay))
        COMPRESS '$' PaymentSettings.AutoPayMonthlyAmount(C@AutoPay) INTO PaymentSettings.AutoPayMonthlyAmount(C@AutoPay) LEAVING NO
* YK1 >
        #NumberOfMonth := 12 / VAL(FUNCTION-PAYMENT-MODE(<PaymentSettings.PolicyMode(#I)>)(5))
        #ModalPayment  := PaymentSettings.PolicyMonthlyPayment(#I) * #NumberOfMonth
        MOVE EDITED #ModalPayment (EM=ZZ,ZZ9.99) TO PaymentSettings.AutoPayAmount(C@AutoPay)
        PaymentSettings.AutoPayAmount(C@AutoPay) := *TRIM(PaymentSettings.AutoPayAmount(C@AutoPay))
        COMPRESS '$' PaymentSettings.AutoPayAmount(C@AutoPay) INTO PaymentSettings.AutoPayAmount(C@AutoPay) LEAVING NO
* < YK1
* YK2 >
        #PAID-TO-DATE := PaymentSettings.PolicyPaidToDate(#I)
        IF PaymentSettings.PolicyMode(#I) = #MODE-WITH-BILL-CYCLE(*)
          #BILL-CYCLE := VAL(PaymentSettings.PolicyBillCycle(#I))
        ELSE
          #BILL-CYCLE := 3
        END-IF
        PERFORM CALCULATE-BILL-CYCLE-DATES
* < YK2
        PaymentSettings.AutoPayPaidToDate(C@AutoPay) := FUNCTION-CALENDAR(<PaymentSettings.PolicyPaidToDate(#I),'D'>)
      WHEN PaymentSettings.LinkedLoanPayMode(#I,1) <> ' ' OR PaymentSettings.LinkedLoanPayMode(#I,2) <> ' '
        FOR #I1 = 1 TO 2
          RESET #PAID-TO-DATE
          #LinkedLoan := #Linked_Loan(#I1)
          IF PaymentSettings.LinkedLoanPayMode(#I,#I1) <> ' '
            PaymentSettings.C@AutoPay  := PaymentSettings.C@AutoPay + 1
            EXPAND ARRAY PaymentSettings.AutoPay TO (*:C@AutoPay)
            PERFORM POPULATE-AUTOPAY-FIELDS
            IF PaymentSettings.CapLoan(#I) AND #I1 = 1 /* processing fixed loan
              COMPRESS '(' PaymentSettings.PolicyNumber(#I) ')' INTO PaymentSettings.AutoPayPolicy(C@AutoPay) LEAVING NO  /* YK4
              COMPRESS #CAP_Loan PaymentSettings.AutoPayPolicy(C@AutoPay) INTO PaymentSettings.AutoPayPolicy(C@AutoPay)   /* YK4
              IF PaymentSettings.LinkedLoanPayMode(#I,#I1) = #Pending(*)
                COMPRESS PaymentSettings.AutoPayPolicy(C@AutoPay) '(Pending)' INTO PaymentSettings.AutoPayPolicy(C@AutoPay)
              END-IF
              PaymentSettings.AutoPayPaymentType(C@AutoPay) := #CAPLoan
              IF PaymentSettings.CapBillDate(#I) <> 0
                #PAID-TO-DATE := PaymentSettings.CapBillDate(#I)
              END-IF
            ELSE
              COMPRESS '(' PaymentSettings.PolicyNumber(#I) ')' INTO PaymentSettings.AutoPayPolicy(C@AutoPay) LEAVING NO
              COMPRESS PaymentSettings.PolicyDescription(#I) PaymentSettings.AutoPayPolicy(C@AutoPay) INTO PaymentSettings.AutoPayPolicy(C@AutoPay)
              COMPRESS #LinkedLoan PaymentSettings.AutoPayPolicy(C@AutoPay) INTO PaymentSettings.AutoPayPolicy(C@AutoPay)
              PaymentSettings.AutoPayPaymentType(C@AutoPay) := #Loan
            END-IF
            PaymentSettings.AutoPayMethod(C@AutoPay) := FUNCTION-LOAN-PAYMODE(<PaymentSettings.LinkedLoanPayMode(#I,#I1)>)(2)
            PaymentSettings.AutoPayFrequency(C@AutoPay) := FUNCTION-LOAN-PAYMODE(<PaymentSettings.LinkedLoanPayMode(#I,#I1)>)(3)
            MOVE EDITED PaymentSettings.LoanMonthlyPayment(#I,#I1) (EM=ZZ,ZZ9.99) TO PaymentSettings.AutoPayAmount(C@AutoPay)
            PaymentSettings.AutoPayAmount(C@AutoPay) := *TRIM(PaymentSettings.AutoPayAmount(C@AutoPay))
            COMPRESS '$' PaymentSettings.AutoPayAmount(C@AutoPay) INTO PaymentSettings.AutoPayAmount(C@AutoPay) LEAVING NO
            PaymentSettings.AutoPayMonthlyAmount(C@AutoPay) := PaymentSettings.AutoPayAmount(C@AutoPay)
* Set Modifyable flag
            IF PaymentSettings.LinkedLoanPayMode(#I,#I1) = #NonModifyableLoan(*)
              PaymentSettings.AutoPayModify(C@AutoPay) := #false
            ELSE
              PaymentSettings.AutoPayModify(C@AutoPay) := #true
            END-IF
* YK4 >
            #LoanPayToDate := FUNCTION-CALENDAR(<#DATN,'N'>)        /* 1st day of the next month
            IF PaymentSettings.CapLoan(#I) AND #PAID-TO-DATE = 0    /* #PAID-TO-DATE = CapBillDate(#I)
              IF F-CAP-CURRENT(<PaymentSettings.IdNumber(#I)>)      /* Already paid this month
                #PAID-TO-DATE := VAL(#LoanPayToDate)                /* Due next month
              ELSE
                #PAID-TO-DATE := #DATN                              /* Due this month
              END-IF
            END-IF
* < YK4
            IF PaymentSettings.LinkedLoanPayMode(#I,#I1) = #LOAN-MODE-WITH-BILL-CYCLE
              #BILL-CYCLE := VAL(PaymentSettings.PolicyBillCycle(#I))
              IF #PAID-TO-DATE = 0                                  /* if not CAP Loan
                #PAID-TO-DATE := #DATN
              END-IF
            ELSE
              #BILL-CYCLE := 3
            END-IF
            PERFORM CALCULATE-BILL-CYCLE-DATES
* YK2 >
*             DECIDE FOR FIRST CONDITION
* * Policy in PP status / Loan has the same payment method - payed in the same Bill Cycle
*               WHEN #CurrentPolicyAutoPayIndex <> 0 AND PaymentSettings.AutoPayMethod(C@AutoPay) = PaymentSettings.AutoPayMethod(#CurrentPolicyAutoPayIndex)
*                 PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,*) := PaymentSettings.AutoPayBillCycleNextDate(#CurrentPolicyAutoPayIndex,*)
*                 PaymentSettings.AutoPayNextDate(C@AutoPay) := PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,#BILL-CYCLE)
*                 PaymentSettings.AutoPayBillCycle(C@AutoPay) := #BILL-CYCLE
* * Policy in PP status / Loan has different payment method which is eligible for Bill Cycle
*               WHEN #CurrentPolicyAutoPayIndex <> 0 AND
* *                 PaymentSettings.AutoPayMethod(C@AutoPay) <> PaymentSettings.AutoPayMethod(#CurrentPolicyAutoPayIndex) AND
*                   PaymentSettings.LinkedLoanPayMode(#I,#I1) = #LOAN-MODE-WITH-BILL-CYCLE
*                 #BILL-CYCLE := VAL(PaymentSettings.PolicyBillCycle(#I))
*                 #PAID-TO-DATE := #DATN
*                 PERFORM CALCULATE-BILL-CYCLE-DATES
*                 PaymentSettings.AutoPayNextDate(C@AutoPay) := PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,#BILL-CYCLE)
* * Policy in PP status / Loan has different payment method which is not eligible for Bill Cycle
*               WHEN #CurrentPolicyAutoPayIndex <> 0 AND
* *                 PaymentSettings.AutoPayMethod(C@AutoPay) <> PaymentSettings.AutoPayMethod(#CurrentPolicyAutoPayIndex) AND
*                   PaymentSettings.LinkedLoanPayMode(#I,#I1) <> #LOAN-MODE-WITH-BILL-CYCLE
*                 #PAID-TO-DATE := #DATN
*                 #BILL-CYCLE := 3
*                 PERFORM CALCULATE-BILL-CYCLE-DATES
* * Loan Only - Loan has a mode eligible for Bill Cycle
*               WHEN #CurrentPolicyAutoPayIndex = 0 AND PaymentSettings.LinkedLoanPayMode(#I,#I1) = #LOAN-MODE-WITH-BILL-CYCLE
*                 #PAID-TO-DATE := #DATN
*                 #BILL-CYCLE := VAL(PaymentSettings.PolicyBillCycle(#I))
*                 PERFORM CALCULATE-BILL-CYCLE-DATES
* * Loan Only - Loan has a mode not eligible for Bill Cycle
*               WHEN #CurrentPolicyAutoPayIndex = 0 AND PaymentSettings.LinkedLoanPayMode(#I,#I1) <> #LOAN-MODE-WITH-BILL-CYCLE
*                 #PAID-TO-DATE := #DATN
*                 #BILL-CYCLE := 3
*                 PERFORM CALCULATE-BILL-CYCLE-DATES
*               WHEN NONE
*                 IGNORE
*             END-DECIDE
* < YK2
          END-IF
        END-FOR
      WHEN NONE
        IGNORE
    END-DECIDE
  END-IF
END-FOR
*
**=======================================
DEFINE SUBROUTINE POPULATE-AUTOPAY-FIELDS
**=======================================
PaymentSettings.AutoPayCN(C@AutoPay)     := PaymentSettings.IdNumber(#I)
PaymentSettings.AutoPayPayerCN(C@AutoPay):= PaymentSettings.PayerCN(#I)
PaymentSettings.AutoPayOwnerCN(C@AutoPay):= PaymentSettings.OwnerCN(#I)
PaymentSettings.AutoPayPolicyNumber(C@AutoPay) := PaymentSettings.PolicyNumber(#I)
PaymentSettings.AutoPayPolicy(C@AutoPay) := PaymentSettings.PolicyNumber(#I)
* YK2>
IF PaymentSettings.PolicyPayStatus(#I) > '40'
  PaymentSettings.AutoPayPolicyPaidUp(C@AutoPay) := #true
ELSE
  PaymentSettings.AutoPayPolicyPaidUp(C@AutoPay) := #false
END-IF
* > YK2
* Insured Name - used in Member Center
PaymentSettings.AutoPayInsuredName(C@AutoPay) := ' '                                             /* bz  Format FMLS
CALLNAT 'GPRS0CNT' PaymentSettings.ContactId(#I) PaymentSettings.AutoPayInsuredName(C@AutoPay)   /* bz
*
IF PaymentSettings.AutoPayOwnerCN(C@AutoPay) = PaymentSettings.ViewCN
  PaymentSettings.IsOwner(C@AutoPay) := #true
ELSE
  PaymentSettings.IsOwner(C@AutoPay) := #false
END-IF
IF PaymentSettings.AutoPayPayerCN(C@AutoPay) = PaymentSettings.ViewCN
  PaymentSettings.IsPayer(C@AutoPay) := #true
ELSE
  PaymentSettings.IsPayer(C@AutoPay) := #false
  PaymentSettings.AutoPayPayerName(C@AutoPay) := FUNCTION-CONTACT-NAME-2(<PaymentSettings.PayerContactId(#I)>)
  PaymentSettings.AutoPayPayerName(C@AutoPay) := EDIT_NAME_LOWCASE(<PaymentSettings.AutoPayPayerName(C@AutoPay)>)
END-IF
  F-TIMESTAMP(<PaymentSettings.AutoPayCN(C@AutoPay),PaymentSettings.AutoPayPolicy(C@AutoPay), PaymentSettings.PolicyIssueDate(#I),
  #DATN,PaymentSettings.LastUpdatedTime(C@AutoPay)>)
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE GET-POLICY-NAME
*********************************
*
RESET #PolicyName
#PLAN-TYPE := PaymentSettings.PolicyDescription(#I)
DECIDE FOR FIRST CONDITION
  WHEN (SUBSTR(#PLAN-TYPE,3,1) = 'F' AND #PLAN-TYPE NE 'SPF')
    #FLEX-PLAN := SUBSTR(#PLAN-TYPE,1,2)
    #FLEX-KEY  := '99F'
  WHEN F-LT2-TRUE(<#PLAN-TYPE>)
    #FLEX-PLAN := SUBSTR(#PLAN-TYPE,2,2)
    COMPRESS SUBSTR(#PLAN-TYPE,1,1) '99' INTO #FLEX-KEY LEAVING NO
  WHEN ANY
    #PolicyName := FUNCTION-PLAN(<#FLEX-KEY>)(4)
    EXAMINE #PolicyName FOR '99' REPLACE #FLEX-PLAN
  WHEN NONE
    #PolicyName := FUNCTION-PLAN(<#PLAN-TYPE>)(4)
END-DECIDE
END-SUBROUTINE
*
********************************************
DEFINE SUBROUTINE CALCULATE-BILL-CYCLE-DATES    /* YK2
********************************************
*
RESET #AmountOverdue #MonthOverdue
* YK3 >
#PROCESS := #CC-PROCESS
#NEXT-BC-DATE(*) := F-BILL-DATE(<#PAID-TO-DATE,#PROCESS>)(*)
* < YK3
IF PaymentSettings.AutoPayPaymentType(C@AutoPay) = #Policy AND #PTD-YYYYMM < #YYYYMM    /* AND #NumberOfMonth = 1
  #MonthOverdue := #MM - #PTD-MM
  IF #MonthOverdue < 0
    #MonthOverdue := #MonthOverdue + 12
  END-IF
  #AmountOverdue := PaymentSettings.PolicyMonthlyPayment(#I) * #MonthOverdue
  MOVE EDITED #AmountOverdue (EM=ZZZ,ZZ9.99) TO PaymentSettings.AutoPayAmountOverdue(C@AutoPay)
  PaymentSettings.AutoPayAmountOverdue(C@AutoPay) := *TRIM(PaymentSettings.AutoPayAmountOverdue(C@AutoPay))
END-IF
*
PaymentSettings.AutoPayBillCycle(C@AutoPay) := #BILL-CYCLE
PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,1) := FUNCTION-CALENDAR(<#NEXT-BC-DATE(1),'W'>)
PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,2) := FUNCTION-CALENDAR(<#NEXT-BC-DATE(2),'W'>)
PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,3) := FUNCTION-CALENDAR(<#NEXT-BC-DATE(3),'W'>)   /* YK5
* YK5 >
IF #AmountOverdue = 0
  PaymentSettings.AutoPayNextDate(C@AutoPay) := PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,#BILL-CYCLE)
ELSE
  PaymentSettings.AutoPayNextDate(C@AutoPay) := PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,1)
  PaymentSettings.AutoPayBillCycleNextDate(C@AutoPay,*) := PaymentSettings.AutoPayNextDate(C@AutoPay)
END-IF
* < YK5
END-SUBROUTINE
*
END
