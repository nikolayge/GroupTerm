* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Mobile App - 'CheckMemberPayments' function - called via EntireX
* MBCN001M - Accepts Request Data from Mobile App
*            calls calculation module, creates Response XML
* Returns The earliest payment due-date/policy number or "No payments available method"
* Called from    - NATSERV0 (EntireX NATURAL server)
*
*******************************************************************
*        MODIFICATION LOG
*******************************************************************
* USER   DATE      TAG  REASON
* YAK    11152010       Initial Creation for Mobile App
* YAK    11292013  YK1  Add rules for calculating PAST DUE
* YAK    02292014  YK2  Add services
* YAK    03292017  YK3  EB&P III (Payor project)
*******************************************************************
*
DEFINE DATA
PARAMETER
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC
*
LOCAL USING WCCA0011
LOCAL USING PARSER-X
LOCAL USING GPRA006N
LOCAL USING OBJLMB01           /* YK2
LOCAL USING ERROR_L
LOCAL
1 ERROR-MESSAGE     (A100)
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 XML               (A) DYNAMIC
1 #I                (I2)
1 #II               (I2)
1 #J                (I2)
1 #JJ               (I2)
1 #ErrorCode        (A3) INIT <'0'>
1 #value            (A) DYNAMIC
*
1 #TARGET-POLICY    (L)
1 C@Own_Polices     (N2)
1 #PREV-ID-NUMBER   (N6)
1 #DUE-DATE         (N8)
1 #PAST-DUE-DATE   (N8)                                  /* YK1
1 REDEFINE #PAST-DUE-DATE                                /* YK1
  2 #PAST-DUE-YYYYMM     (N6)                            /* YK1
  2 #PAST-DUE-DD         (N2)                            /* YK1
*
1 #TRUE            (A4) INIT <'true'>
1 #FALSE           (A5) INIT <'false'>
1 #ACTIVE          (A1) CONST <'A'>
1 #SERVICE         (A) DYNAMIC CONST <'Service Plan'>    /* YK2
1 #PAYABLE         (A3/2) CONST <'PSM','XXX'>            /* YK2
1 #TOTAL           (N7.2)
*
1 MemberProfile
  2 MemberInfo
    3 CN              (N6)
  2 PaymentInfo
    3 PolicyNumber    (A) DYNAMIC
    3 DueDate         (A) DYNAMIC
    3 PastDue         (A) DYNAMIC
*
1 #Owner          (N2) CONST <2>                         /* YK3
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
**************************
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'MemberProfile'
    Ignore
  VALUE 'MemberProfile/MemberInfo/CN/$'
    #value := *TRIM(XML_PARSER_CONTENT)
    IF #value IS (N6)
      MemberProfile.CN := VAL(#value)
    END-IF
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
*
RESET XML
#ErrorCode := XML_PARSER_RESPONSE
PERFORM COMPOSE-XML
ESCAPE MODULE
END-SUBROUTINE
*

*****************************
DEFINE SUBROUTINE COMPOSE-XML
*****************************
*
COMPRESS '<MemberProfile>'
  '<ErrorCode>' #ErrorCode '</ErrorCode>'
  '<MemberInfo>'
  '<CN>' MemberProfile.CN '</CN>'
  '</MemberInfo>' INTO XML LEAVING NO
*
COMPRESS XML '<MemberPaymentInfo>'
  '<PolicyNumber>' MemberProfile.PolicyNumber '</PolicyNumber>'
  '<DueDate>' MemberProfile.DueDate '</DueDate>'
  '<PastDue>' MemberProfile.PastDue '</PastDue>'              /* YK1
  '</MemberPaymentInfo>' INTO XML LEAVING NO
COMPRESS XML '</MemberProfile>' INTO XML LEAVING NO
RESPONSE-DATA := XML
*
END-SUBROUTINE
*
* calculate when payment considered past-due    YK1
#PAST-DUE-DATE := *DATN
#PAST-DUE-DD   := 1
*
* Business Logic
PERFORM GET-POLICIES
FOR #J = 1 TO C@Own_Polices
  IF PARM-POLICIES.ID-NUMBER(#J) = #PREV-ID-NUMBER
    ESCAPE TOP
  END-IF
  #PREV-ID-NUMBER := PARM-POLICIES.ID-NUMBER(#J)
  PERFORM GET-PAYMENTS
  PERFORM POPULATE-PAYMENT-DATA
END-FOR
PERFORM COMPOSE-XML
*
******************************
DEFINE SUBROUTINE GET-POLICIES
******************************
* Call subprogram that returns all policy numbers this member owns
PARM-CN := MemberProfile.CN
CALLNAT 'GPRN006N' PARM-CN PARM-MEMBER-CN PARM-POLICIES(*) #Owner     /* YK3
C@Own_Polices := *OCCURRENCE(PARM-POLICIES.ID-NUMBER)
*
IF C@Own_Polices = 0 AND PARM-CN = PARM-MEMBER-CN
  PERFORM CHECK-SERVICES
END-IF
*
IF C@Own_Polices = 0
  #ErrorCode := #NO-POLICIES-OWN
  PERFORM COMPOSE-XML
  ESCAPE MODULE
END-IF
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE CHECK-SERVICES
********************************
*
FIND SVC-MEMBER-V WITH SVC-ID-NUMBER = PARM-CN
  ACCEPT IF SVC-MEMBER-V.SVC-PLAN = #PAYABLE(*)
  IF SVC-STATUS = #ACTIVE
    C@Own_Polices := C@Own_Polices + 1
    EXPAND ARRAY PARM-POLICIES TO (*:C@Own_Polices)
    PARM-POLICIES.ID-NUMBER(C@Own_Polices)     := PARM-CN
    PARM-POLICIES.POLICY-NUMBER(C@Own_Polices) := #SERVICE
  END-IF
END-FIND
*
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE GET-PAYMENTS
******************************
* Get payments for the CN
RESET CC-PAYMENT
CC-PAYMENT.PARM-DATE := *DATN
CC-PAYMENT.ID-NUMBER := PARM-POLICIES.ID-NUMBER(#J)
CALLNAT 'WCCNCC11' CC-PAYMENT ERROR-MESSAGE
*
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE POPULATE-PAYMENT-DATA
***************************************
*
FOR #I = 1 TO C@PAY-POLICY
* Filter by owner
  RESET #TARGET-POLICY
  FOR #JJ = 1 TO C@Own_Polices
    IF PARM-POLICIES.POLICY-NUMBER(#JJ) = CC-PAYMENT.POLICY-NBR(#I)
        OR (CC-PAYMENT.POLICY-NBR(#I) = 'Service Plan'                 /* YK2
        AND CC-PAYMENT.ID-NUMBER = PARM-MEMBER-CN                      /* YK2
        AND PARM-MEMBER-CN = PARM-CN )                                 /* YK2
      #TARGET-POLICY := TRUE
      ESCAPE BOTTOM
    END-IF
  END-FOR
  IF NOT #TARGET-POLICY
    ESCAPE TOP
  END-IF
*
  IF MemberProfile.PolicyNumber = ' '
    MemberProfile.PolicyNumber := POLICY-NBR(#I)
  END-IF
  FOR #II = 1 TO C@AVAILABLE-PAYMENT(#I)
    IF CC-PAYMENT.CC-PAYABLE(#I,#II)= 'T'
      #TOTAL := #TOTAL + CC-PAYMENT.DEFAULT-AMOUNT(#I,#II)
      IF (#DUE-DATE > CC-PAYMENT.PAID-TO-DATE(#I,#II) OR #DUE-DATE = 0) AND CC-PAYMENT.PAID-TO-DATE(#I,#II) <> 0
        #DUE-DATE := CC-PAYMENT.PAID-TO-DATE(#I,#II)
        MemberProfile.DueDate := FUNCTION-CALENDAR(<#DUE-DATE,'W'>)
        MemberProfile.PolicyNumber := CC-PAYMENT.POLICY-NBR(#I)
      END-IF
    END-IF
  END-FOR
END-FOR
IF #TOTAL <= 0
  RESET MemberProfile.DueDate
END-IF
IF #DUE-DATE <> 0 AND #DUE-DATE < #PAST-DUE-DATE  /* YK1
  MemberProfile.PastDue := #TRUE
ELSE
  MemberProfile.PastDue := #FALSE
END-IF                                            /* YK1
END-SUBROUTINE
*
END
