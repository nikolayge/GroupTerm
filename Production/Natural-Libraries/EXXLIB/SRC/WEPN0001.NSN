* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
************************************************************************
* NAME         : WEPN0001                                              *
* DESCRIPTION  : Electronic payment driver to charge FPF fee real time *
* Real time version of WCCP0001                                        *
* Called from "Policy approve" process (NM & AI)                       *
************************************************************************
*        MODIFICATION LOG
************************************************************************
* USER   DATE      TAG  REASON
* YAK    06202014       Initial creation
* YAK    09082014  YK1  Pay by Check II
* YAK    10292014  YK2  Fix problem with Owner e-mail
* YAK    04012015  YK3  Use new PDA's
* YAK    06252015  YK4  Add method for AT process only
* YAK    06252015  YK5  Changes to process credit cards through SAGE
* YAK    02022016  YK6  Display error description when payment not successful 
* YAK    03242016  YK7  Add GUID (CC store in SAGE) 
* YAK    05202016  YK8  Changes for FPF report
* YAK    02162018  YK9  Add 'escape' for quotation sign in Street/City fields
************************************************************************
*
DEFINE DATA PARAMETER
1 #AT-NUMBER      (N6)
1 #POLICY-SEGMENT (N1)
1 #E-DEPOSIT-IND  (A1)
1 #ERROR-CODE     (A3)
LOCAL USING OBJLAPTR       /* Application Tracking File
LOCAL USING OBJLSTAT       /* Status file
LOCAL USING OBJACC01       /* Credit card file                      /* YK3
LOCAL USING OBJABA01       /* Bank Account data                     /* YK3
LOCAL USING WCCA0030       /* Fields to pass to PayWare --> Sage
LOCAL USING WECA0030       /* Fields to pass to Sage for e-check
LOCAL USING WCCA0021       /* Fields to pass to apply payment
LOCAL USING GPRA0005       /* E-mail Information
LOCAL USING OBJAMB01       /* Services file
LOCAL USING GPRA0003       /* Error Log file
LOCAL USING P_PARMS        /* Error Log file
LOCAL USING ADDA0001       /* Address data
LOCAL USING ERROR_L        /* Error codes
*
LOCAL
1 AT-V-UPDATE VIEW OF A-APPL-TRACKING
  2 E-DEPOSIT-AMT
*
1 #DATN                  (A) DYNAMIC
1 #TIMN                  (A) DYNAMIC
1 #I                     (I2)
1 #II                    (I2)
1 #OUTPUT-RECORD         (A150)
1 #IAS-RESULT-MESSAGE    (A100)
1 #IAS-RESPONSE-CODE     (A3)
*
1 #ID-NUMBER             (N6)
1 #POLICY-INDEX          (N1)
1 REDEFINE #POLICY-INDEX
  2 #POLICY-INDEX-A      (A1)
1 #TAB                   (A1)   INIT <H'09'>
1 #DAILY-FPF-CREDIT-CARD-TRAN (A) DYNAMIC
1 #EMAIL-DAILY-FILE      (A) DYNAMIC
1 #CHARGE-AMOUNT         (N6.2)
1 #AVAILABLE-AMOUNT      (N6.2)
1 #E-DEPOSIT-AMOUNT      (A) DYNAMIC
1 #CREDIT-CARD-DECLINED-TEMPLATE (A3) INIT <'WCD'>
1 #ECHECK-DECLINED-TEMPLATE (A3) INIT <'WED'>
1 #IAS-FPF-CHARGE        (A3) CONST <'IAS'>
* Messages
1 #CC-CHARGE-SUCCESSFUL-MESSAGE (A) DYNAMIC INIT
  <'Credit Card charged successfully'>
1 #EC-CHARGE-SUCCESSFUL-MESSAGE (A) DYNAMIC INIT
  <'eCheck request sent successfully'>
1 #REJECTED-CHARGE-MESSAGE-E (A) DYNAMIC INIT
  <'eCheck was rejected with the reason:'>
1 #REJECTED-CHARGE-MESSAGE-C (A) DYNAMIC INIT
  <'Credit Card was rejected with the reason:'>
1 #WEBCHARGE-LOG          (A200)
1 #IAS-SUCCESSFUL         (A) DYNAMIC INIT <'Successfully applied in IAS'>
1 #IAS-FAILED             (A) DYNAMIC INIT <'Failed to apply in IAS'>
1 #IAS-ADCR               (A) DYNAMIC INIT <'- Applied to ADCR'>
1 #WEBCHARGE-LOG-FILE     (A) DYNAMIC
1 #EMAIL-SCRIPT-NAME      (A) DYNAMIC
1 #ERROR-LOG-FILE         (A) DYNAMIC
1 #ADCR                   (L)
1 #FPF-S                  (N7.2)
1 #FPF-SRV-MONTH          (N2)
*
1 #GET-BY-AT              (A) DYNAMIC CONST <'GET_BY_AT'>
1 #GET                    (A) DYNAMIC CONST <'GET-GUID'>     /* YK7
1 #PENDING                (A) DYNAMIC CONST <'P'>
1 #REQUEST                (A) DYNAMIC
1 #MSG                    (A) DYNAMIC
1 #TEXT                   (A50)
*
1 #CREDIT-CARD            (L)
1 #E-CHECK                (L)
1 #CHARGE-SUCCESSFULL     (L)
1 #USER-ID                (A8)
1 #CLERK-ID               (A3)
*
1 Msg_Type                (A30)
1 ErrorText               (A55)
1 #DB                     (A) DYNAMIC
1 #INSURED-NAME           (A) DYNAMIC    /* YK8
END-DEFINE
*
ON ERROR
  PERFORM PROCESS-ERROR
END-ERROR
*
DEFINE WINDOW CONFIRMATION-WINDOW
  SIZE 6 * 50
  BASE 8 / 15
  TITLE 'Confirmation Window'
  FRAMED ON
*
PERFORM GET-PROCESS-PROPERTIES
*
#DATN := *DAT4I
#TIMN := *TIMX
*
DEFINE WORK FILE 1 #DAILY-FPF-CREDIT-CARD-TRAN TYPE 'ASCII-COMPRESSED' ATTRIBUTES 'APPEND'
DEFINE WORK FILE 2 #EMAIL-DAILY-FILE TYPE 'ASCII-COMPRESSED' ATTRIBUTES 'APPEND'
DEFINE WORK FILE 3 #WEBCHARGE-LOG-FILE TYPE 'ASCII-COMPRESSED' ATTRIBUTES 'APPEND'
*
IF NOT FN_Exist(<#DAILY-FPF-CREDIT-CARD-TRAN>)
  COMPRESS 'WebCharge Card FPF transactions, ' #DATN INTO #OUTPUT-RECORD
  WRITE WORK FILE 1 VARIABLE #OUTPUT-RECORD
END-IF
*
#USER-ID  := *USER
#CLERK-ID := FUNCTION-CLERK(<#USER-ID>)
RESET #ERROR-CODE
FIND1. FIND(1) AT-V WITH ID-NUMBER = #AT-NUMBER
  IF NO RECORDS FOUND
    #ERROR-CODE    := #AT-NOT-FOUND
    #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
    COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER #ERROR-MESSAGE INTO #WEBCHARGE-LOG
    WRITE WORK FILE 3 #WEBCHARGE-LOG
    CLOSE WORK FILE 3
    PERFORM SHOW-RESULT
  END-NOREC
  #ID-NUMBER := VAL(AT-V.MEMBER-CN)
  #INSURED-NAME := FUNCTION-CONTACT-NAME-2(<AT-V.CONTACT-ID>)
* Check if already charged
  IF AT-V.E-DEPOSIT-AMT <> 0
    #ERROR-CODE := #FPF-ALREADY-CHARGED
    #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
    COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER #ERROR-MESSAGE INTO #WEBCHARGE-LOG
    WRITE WORK FILE 3 #WEBCHARGE-LOG
    CLOSE WORK FILE 3
    PERFORM SHOW-RESULT
  END-IF
*
* Calculate charges
  #CHARGE-AMOUNT := AT-V.FIRST-PLACE-FEE - AT-V.DEP-RCVD
  PERFORM GET-SERVICE-FPF
  #CHARGE-AMOUNT := #CHARGE-AMOUNT + #FPF-S
  IF #CHARGE-AMOUNT <= 0
    #ERROR-CODE := #NO-FPF-AMOUNT-DUE
    #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
    COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER 'AT FPF =' AT-V.FIRST-PLACE-FEE 'AT Deposit = ' AT-V.DEP-RCVD
      INTO #WEBCHARGE-LOG
    WRITE WORK FILE 3 #WEBCHARGE-LOG
    COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER #ERROR-MESSAGE INTO #WEBCHARGE-LOG
    WRITE WORK FILE 3 #WEBCHARGE-LOG
    CLOSE WORK FILE 3
    PERFORM SHOW-RESULT
  END-IF
  IF AT-V.E-DEP-MAX-AMT NE 0 AND #CHARGE-AMOUNT > AT-V.E-DEP-MAX-AMT
    #CHARGE-AMOUNT := AT-V.E-DEP-MAX-AMT
  END-IF
  MOVE EDITED #CHARGE-AMOUNT (EM=ZZZZZ9.99) TO #E-DEPOSIT-AMOUNT
  #E-DEPOSIT-AMOUNT := *TRIM(#E-DEPOSIT-AMOUNT)
*
  DECIDE ON FIRST VALUE #E-DEPOSIT-IND
    VALUE 'C'
      PERFORM GET-CC-INFO
      #CREDIT-CARD := TRUE
    VALUE 'E'
      PERFORM GET-BA-INFO
      #E-CHECK := TRUE
    NONE VALUE
      #ERROR-CODE := #INVALID-E-DEP-IND
      #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
      COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER 'Deposit Ind =' #E-DEPOSIT-IND #ERROR-MESSAGE INTO #WEBCHARGE-LOG
      WRITE WORK FILE 3 #WEBCHARGE-LOG
      CLOSE WORK FILE 3
      PERFORM SHOW-RESULT
  END-DECIDE
*
  COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER 'Deposit Ind =' #E-DEPOSIT-IND
    'Charge amount =' #E-DEPOSIT-AMOUNT INTO #WEBCHARGE-LOG
  WRITE WORK FILE 3 #WEBCHARGE-LOG
  CLOSE WORK FILE 3
  DECIDE FOR FIRST CONDITION
    WHEN #CREDIT-CARD
      PERFORM CALL-CC-CHARGE
    WHEN #E-CHECK
      PERFORM CALL-EC-CHARGE
    WHEN ANY
      IF #CHARGE-SUCCESSFULL
        GT1. GET AT-V-UPDATE *ISN(FIND1.)
        AT-V-UPDATE.E-DEPOSIT-AMT := #CHARGE-AMOUNT - #FPF-S
        UPDATE (GT1.)
        PERFORM CREATE-ACCT-TRANSACTIONS
        PERFORM APPLY-ACCT-TRANSACTION
        IF #IAS-RESPONSE-CODE NE ' '
* Write error to report
          #IAS-RESULT-MESSAGE := #IAS-FAILED
        ELSE
          #IAS-RESULT-MESSAGE := #IAS-SUCCESSFUL
          IF #ADCR
            COMPRESS #IAS-RESULT-MESSAGE #IAS-ADCR INTO #IAS-RESULT-MESSAGE
          END-IF
        END-IF
      ELSE
        DECIDE FOR FIRST CONDITION
          WHEN #CREDIT-CARD
            EMAIL-INFORMATION.TEMPLATE-TYPE := #CREDIT-CARD-DECLINED-TEMPLATE
            #ERROR-MESSAGE := #REJECTED-CHARGE-MESSAGE-C
            COMPRESS #ERROR-MESSAGE #CC-CHARGE-FIELDS.ResultMessage INTO #ERROR-MESSAGE          /* YK6
          WHEN #E-CHECK
            EMAIL-INFORMATION.TEMPLATE-TYPE := #ECHECK-DECLINED-TEMPLATE
            #ERROR-MESSAGE := #REJECTED-CHARGE-MESSAGE-E
            COMPRESS #ERROR-MESSAGE #EC-CHARGE-FIELDS.ResultCode #EC-CHARGE-FIELDS.ResultMessage INTO #ERROR-MESSAGE
          WHEN NONE
            IGNORE
        END-DECIDE
        COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER 'Deposit Ind =' #E-DEPOSIT-IND #ERROR-MESSAGE INTO #WEBCHARGE-LOG
        WRITE WORK FILE 3 #WEBCHARGE-LOG
        CLOSE WORK FILE 3
        PERFORM CREATE-REJECTED-CHARGE-EMAIL
      END-IF
    WHEN NONE
      IGNORE
  END-DECIDE
END-FIND
PERFORM WRITE-FPF-REPORT
IF #IAS-RESPONSE-CODE <> ' '
  PERFORM PROCESS-ERROR
END-IF
END TRANSACTION
PERFORM SHOW-RESULT
*
*****************************
DEFINE SUBROUTINE GET-CC-INFO
*****************************
*
RESET PARM-CC-DATA PARM-CC-INFO
PARM-CC-DATA.#PARM-ID-NUMBER := #ID-NUMBER
PARM-CC-DATA.#ACTION := #GET                           /* YK7
CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
* YK7 >
DECIDE FOR FIRST CONDITION
  WHEN PARM-CC-DATA.#ISN = 0
    #ERROR-CODE := #CC-INFO-MISSING
    #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
  WHEN PARM-CC-DATA.#RESULT-CODE <> ' '
    #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<PARM-CC-DATA.#RESULT-CODE>)
  WHEN ANY
* Write log
    COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER 'Deposit Ind =' #E-DEPOSIT-IND #ERROR-MESSAGE INTO #WEBCHARGE-LOG
    WRITE WORK FILE 3 #WEBCHARGE-LOG
    CLOSE WORK FILE 3
* Write Report
    RESET #OUTPUT-RECORD
    COMPRESS AT-V.ID-NUMBER #ID-NUMBER #INSURED-NAME #E-DEPOSIT-IND #CLERK-ID #ERROR-MESSAGE   /* YK8
      INTO #OUTPUT-RECORD WITH #TAB
    WRITE WORK FILE 1 VARIABLE #OUTPUT-RECORD
    CLOSE WORK FILE 1
    PERFORM SHOW-RESULT
  WHEN NONE
    IGNORE
END-DECIDE
* > YK7 
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE GET-BA-INFO
*****************************
*
RESET PARM-BA-DATA PARM-BA-INFO
PARM-BA-DATA.#PARM-ID-NUMBER := #ID-NUMBER
PARM-BA-DATA.#ACTION := 'GET-ST-AT'                       /* YK4
CALLNAT 'OBJNBA01' PARM-BA-DATA PARM-BA-INFO
IF PARM-BA-DATA.#ISN = 0
  #ERROR-CODE    := #BA-INFO-MISSING
  #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
* Write log
  COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER 'Deposit Ind =' #E-DEPOSIT-IND #ERROR-MESSAGE INTO #WEBCHARGE-LOG
  WRITE WORK FILE 3 #WEBCHARGE-LOG
  CLOSE WORK FILE 3
* Write report
  RESET #OUTPUT-RECORD
  COMPRESS AT-V.ID-NUMBER #ID-NUMBER #INSURED-NAME #E-DEPOSIT-IND #CLERK-ID #ERROR-MESSAGE    /* YK8
    INTO #OUTPUT-RECORD WITH #TAB
  WRITE WORK FILE 1 VARIABLE #OUTPUT-RECORD
  CLOSE WORK FILE 1
  PERFORM SHOW-RESULT
END-IF
*
END-SUBROUTINE
*
******************************************
DEFINE SUBROUTINE CREATE-ACCT-TRANSACTIONS
******************************************
*
RESET CC-PAYMENT
FIND(1) ST-V WITH ID-NUMBER = #ID-NUMBER
  IF NO RECORDS FOUND
    #ERROR-CODE := #ST-NOT-FOUND
  END-NOREC
END-FIND
#POLICY-INDEX     := NUM-MBRSHIPS(#POLICY-SEGMENT)
#AVAILABLE-AMOUNT := #CHARGE-AMOUNT
* Check first placement fee
IF ST-V.X-FIRST-PLACE-FEE(#POLICY-SEGMENT) <> 0
  #I := #I + 1
  TRAN-TYPE (1,#I) := 'FPFP'
  IF ST-V.X-FIRST-PLACE-FEE(#POLICY-SEGMENT) <= #AVAILABLE-AMOUNT
    DUE-AMOUNT(1,#I) := ST-V.X-FIRST-PLACE-FEE(#POLICY-SEGMENT)
  ELSE
    DUE-AMOUNT(1,#I) := #AVAILABLE-AMOUNT
  END-IF
  #AVAILABLE-AMOUNT := #AVAILABLE-AMOUNT - DUE-AMOUNT(1,#I)
END-IF
* Check FPF Rider
IF #AVAILABLE-AMOUNT > 0
  IF ST-V.X-RID-FPF(#POLICY-SEGMENT) <> 0
    #I := #I + 1
    TRAN-TYPE (1,#I) := 'FPRP'
    IF ST-V.X-RID-FPF(#POLICY-SEGMENT) <= #AVAILABLE-AMOUNT
      DUE-AMOUNT(1,#I) := ST-V.X-RID-FPF(#POLICY-SEGMENT)
    ELSE
      DUE-AMOUNT(1,#I) := #AVAILABLE-AMOUNT
    END-IF
    #AVAILABLE-AMOUNT := #AVAILABLE-AMOUNT - DUE-AMOUNT(1,#I)
  END-IF
END-IF
* Check services
* Apply charges for services separately
IF #AVAILABLE-AMOUNT > 0
  IF #FPF-S > 0
    #I := #I + 1
    TRAN-TYPE (1,#I) := 'DUESPS'
    IF #FPF-S <= #AVAILABLE-AMOUNT
      DUE-AMOUNT(1,#I) := #FPF-S
    ELSE
      DUE-AMOUNT(1,#I) := #AVAILABLE-AMOUNT
    END-IF
    #AVAILABLE-AMOUNT := #AVAILABLE-AMOUNT - DUE-AMOUNT(1,#I)
  END-IF
END-IF
*
IF #AVAILABLE-AMOUNT > 0
  #ADCR := TRUE
  #I := #I + 1
  TRAN-TYPE (1,#I) := 'ADCR'
  DUE-AMOUNT(1,#I) := #AVAILABLE-AMOUNT
END-IF
C@APPLIED-PAYMENT(1) := #I
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE GET-SERVICE-FPF
*********************************
*
RESET #SVC-MEMBER #REQUEST #MSG
#REQUEST := #GET-BY-AT
#SVC-MEMBER.SVC-AT-NUMBER := AT-V.ID-NUMBER
CALLNAT 'OBJNMB01' #REQUEST #MSG #SVC-MEMBER
IF #SVC-MEMBER.SVC-STATUS = #PENDING
  IF AT-V.MODE = 'G'
    #FPF-SRV-MONTH := 2
  ELSE
    #FPF-SRV-MONTH := F-PAY-MONTHS(<AT-V.MODE>)
  END-IF
  #FPF-S := #SVC-MEMBER.SVC-MONTHLY-RATE * #FPF-SRV-MONTH
END-IF
*
END-SUBROUTINE
* YK5 >
********************************
DEFINE SUBROUTINE CALL-CC-CHARGE
********************************
*
#CC-CHARGE-FIELDS.CNumber              := #ID-NUMBER
#CC-CHARGE-FIELDS.CardNumber           := CC-NUMBER
#CC-CHARGE-FIELDS.CardExpDate          := SUBSTR(CC-EXPIRATION-YEAR,3,2)
COMPRESS CC-EXPIRATION-MONTH #CC-CHARGE-FIELDS.CardExpDate INTO
  #CC-CHARGE-FIELDS.CardExpDate LEAVING NO
#CC-CHARGE-FIELDS.CardGUID             := CC-GUID                    /* YK7
#CC-CHARGE-FIELDS.Street               := CCHOLDER-STREET-ADDR
#CC-CHARGE-FIELDS.City                 := CCHOLDER-CITY
#CC-CHARGE-FIELDS.State                := CCHOLDER-STATE-CD       
#CC-CHARGE-FIELDS.ZipCode              := CCHOLDER-ZIP-CODE
#CC-CHARGE-FIELDS.CardHolderName       := CCHOLDER-NAME
#CC-CHARGE-FIELDS.Amount               := #E-DEPOSIT-AMOUNT
#CC-CHARGE-FIELDS.ApplicationSource := #IAS-FPF-CHARGE
*
IF #CC-CHARGE-FIELDS.Street = ' '
  RESET #PDA-ADDRESS
  MOVE AT-V.CONTACT-ID TO #ADD-CONTACT-ID
  MOVE 'P' TO #ADD-TYPE
  CALLNAT 'ADDN0001' #PDA-ADDRESS
  #CC-CHARGE-FIELDS.ZipCode := #ADD-ZIP5
  #CC-CHARGE-FIELDS.Street := SUBSTR(#ADD-STREET,1,20)
END-IF
*
RESET #CC-CHARGE-FIELDS.ResultCode #CC-CHARGE-FIELDS.ResultMessage
#CC-CHARGE-FIELDS.UserId := FUNCTION-CLERK-AD(<#USER-ID>)
EXAMINE #CC-CHARGE-FIELDS.UserId FOR '\' REPLACE '\\'
* Check for quotation sign and use 'escape'
EXAMINE #CC-CHARGE-FIELDS.CardHolderName FOR "'" REPLACE "\'"          
EXAMINE #CC-CHARGE-FIELDS.Street FOR "'" REPLACE "\'"              /* YK9
EXAMINE #CC-CHARGE-FIELDS.City FOR "'" REPLACE "\'"                /* YK9
#CC-CHARGE-FIELDS.ApplicationSource := #IAS-FPF-CHARGE
*
CALLNAT 'WCCN0030' #CC-CHARGE-FIELDS
* Parse Response
IF #CC-CHARGE-FIELDS.ResultCode = '0'
  #CHARGE-SUCCESSFULL := TRUE
END-IF
*
END-SUBROUTINE
* < YK5
********************************
DEFINE SUBROUTINE CALL-EC-CHARGE
********************************
*
* E-Check fields
#EC-CHARGE-FIELDS.AccountNumber := PARM-BA-INFO.ACCOUNT-NUMBER
#EC-CHARGE-FIELDS.RoutingNumber := PARM-BA-INFO.ROUTING-NUMBER
#EC-CHARGE-FIELDS.AccountType   := PARM-BA-INFO.ACCOUNT-TYPE
#EC-CHARGE-FIELDS.Street        := PARM-BA-INFO.ACCOUNT-STREET
#EC-CHARGE-FIELDS.ZipCode       := PARM-BA-INFO.ACCOUNT-ZIP-CODE
#EC-CHARGE-FIELDS.CNumber       := PARM-BA-INFO.ID-NUMBER
#EC-CHARGE-FIELDS.FirstName     := PARM-BA-INFO.ACCOUNT-HOLDER-FIRST-NAME
#EC-CHARGE-FIELDS.LastName      := PARM-BA-INFO.ACCOUNT-HOLDER-LAST-NAME
#EC-CHARGE-FIELDS.State         := PARM-BA-INFO.ACCOUNT-STATE
#EC-CHARGE-FIELDS.City          := PARM-BA-INFO.ACCOUNT-CITY
#EC-CHARGE-FIELDS.Amount        := #E-DEPOSIT-AMOUNT
RESET #EC-CHARGE-FIELDS.ResultCode
#EC-CHARGE-FIELDS.User          := FUNCTION-CLERK-AD(<#USER-ID>)
EXAMINE #EC-CHARGE-FIELDS.User FOR '\' REPLACE '\\'
* Check for quotation sign and use 'escape'
EXAMINE #EC-CHARGE-FIELDS.FirstName FOR "'" REPLACE "\'"
EXAMINE #EC-CHARGE-FIELDS.LastName FOR "'" REPLACE "\'"
EXAMINE #EC-CHARGE-FIELDS.Street FOR "'" REPLACE "\'"              /* YK9
EXAMINE #EC-CHARGE-FIELDS.City FOR "'" REPLACE "\'"                /* YK9 
#EC-CHARGE-FIELDS.ApplicationSource := #IAS-FPF-CHARGE
*
CALLNAT 'WECN0030' #EC-CHARGE-FIELDS
* Parse Response
IF #EC-CHARGE-FIELDS.ResultCode = '0'
  #CHARGE-SUCCESSFULL := TRUE
END-IF
*
END-SUBROUTINE
*
****************************************
DEFINE SUBROUTINE APPLY-ACCT-TRANSACTION
****************************************
* Populate CC-PAYMENT
* Set default value for this process (runs by application)
RESET #IAS-RESPONSE-CODE
CC-PAYMENT.ID-NUMBER := #ID-NUMBER
C@PAY-POLICY := 1
* Use #PARM-ID-NUMBER in COMPRESS statement instead of AT-V.MEMBER-CN
* to avoid leading zeroes in Policy number                     /* YK2
COMPRESS #ID-NUMBER #POLICY-INDEX INTO POLICY-NBR(1) WITH '-'
CC-PAYMENT.USER := #USER-ID
DECIDE FOR FIRST CONDITION
  WHEN #CREDIT-CARD
    CC-PAYMENT.CASH-CODE := 'C'
  WHEN #E-CHECK
    CC-PAYMENT.CASH-CODE := 'H'
  WHEN NONE
    IGNORE
END-DECIDE
*
CALLNAT 'WEPN0002' CC-PAYMENT #POLICY-SEGMENT #IAS-RESPONSE-CODE
IF #IAS-RESPONSE-CODE = #ADCR-APPLIED
  #ADCR := TRUE
  #ERROR-CODE := #ADCR-APPLIED
  #ERROR-MESSAGE := F-ERROR-DESCRIPTION(<#ERROR-CODE>)
  #ERROR-MESSAGE := #IAS-ADCR
  COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER
    'Tran Type =' TRAN-TYPE(#I,#II) #ERROR-MESSAGE INTO #WEBCHARGE-LOG
  WRITE WORK FILE 3 #WEBCHARGE-LOG
  CLOSE WORK FILE 3
END-IF
*
END-SUBROUTINE
*
**********************************
DEFINE SUBROUTINE WRITE-FPF-REPORT
**********************************
*
RESET #OUTPUT-RECORD
DECIDE FOR FIRST CONDITION
  WHEN #CREDIT-CARD
    #CC-CHARGE-FIELDS.CardNumber := FUNCTION-MASK(<#CC-CHARGE-FIELDS.CardNumber,'*'>)
    COMPRESS AT-V.ID-NUMBER #ID-NUMBER #INSURED-NAME #E-DEPOSIT-IND CardNumber CardExpDate           /* YK8
      #E-DEPOSIT-AMOUNT #CLERK-ID #CC-CHARGE-FIELDS.ResultCode #CC-CHARGE-FIELDS.ResultMessage #IAS-RESULT-MESSAGE
      INTO #OUTPUT-RECORD WITH #TAB
  WHEN #E-CHECK
    #EC-CHARGE-FIELDS.AccountNumber := FUNCTION-MASK(<#EC-CHARGE-FIELDS.AccountNumber,'*'>)
    COMPRESS AT-V.ID-NUMBER #ID-NUMBER #INSURED-NAME #E-DEPOSIT-IND AccountNumber RoutingNumber      /* YK8
      #E-DEPOSIT-AMOUNT #CLERK-ID #EC-CHARGE-FIELDS.ResultCode #EC-CHARGE-FIELDS.ResultMessage #IAS-RESULT-MESSAGE
      INTO #OUTPUT-RECORD WITH #TAB
  WHEN ANY
    WRITE WORK FILE 1 VARIABLE #OUTPUT-RECORD
    CLOSE WORK FILE 1
  WHEN NONE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
**********************************************
DEFINE SUBROUTINE CREATE-REJECTED-CHARGE-EMAIL
**********************************************
*
EMAIL-INFORMATION.E-CHARGE-AMOUNT := #CHARGE-AMOUNT
EMAIL-INFORMATION.PENDING-CN       := EMAIL-INFORMATION.DAL-CN
  := EMAIL-INFORMATION.POLICY-NUMBER := AT-V.MEMBER-CN
* YK2 >
* This is real time policy issue process - owner info does not yet exist
* Use contact email
* IF #POLICY-INDEX NE 0
*   EMAIL-INFORMATION.OWNER-EMAIL :=
*     FUNCTION-OWNER-EMAIL(<EMAIL-INFORMATION.DAL-CN,#POLICY-INDEX-A>)
* END-IF
* IF EMAIL-INFORMATION.OWNER-EMAIL = ' '
*   EMAIL-INFORMATION.OWNER-EMAIL := FUNCTION-MEMBER-EMAIL(<EMAIL-INFORMATION.DAL-CN>)
* END-IF
* IF EMAIL-INFORMATION.OWNER-EMAIL = ' '
EMAIL-INFORMATION.OWNER-EMAIL := FUNCTION-CN-EMAIL(<EMAIL-INFORMATION.DAL-CN>)
* END-IF
* < YK2
#MSG := FUNCTION-CLERK-N(<#USER-ID>)
EMAIL-INFORMATION.CLERK-NAME      := EDIT_NAME_LOWCASE(<#MSG>)
EMAIL-INFORMATION.CLERK-PHONE-EXT := FUNCTION-CLERK-EXT(<#USER-ID>)
*
WRITE WORK FILE 2 EMAIL-INFORMATION
CLOSE WORK FILE 2
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE PROCESS-ERROR
*******************************
*
CALLNAT 'USR2001N' P_PARMS  /* Get the actual error line details
*
RESET ERROR-LOG
ERROR-PROGRAM := *PROGRAM
ERROR-OBJECT  := P_ERROR_PROGRAM
ERROR-LINE    := P_ERROR_LINE
ERROR-NUMBER  := P_ERROR_NUM
*
IF #IAS-RESULT-MESSAGE NE ' '
  COMPRESS 'Error applying FPF charge for AT Number -' AT-V.ID-NUMBER
    INTO ERROR-MESSAGE
  COMPRESS ERROR-MESSAGE  #IAS-RESULT-MESSAGE INTO #WEBCHARGE-LOG
ELSE
  IF AT-V.ID-NUMBER NE 0
    COMPRESS 'Error in processing AT Number -' AT-V.ID-NUMBER
      INTO ERROR-MESSAGE
  ELSE
    COMPRESS 'Error in processing CN Number -' #ID-NUMBER
      INTO ERROR-MESSAGE
  END-IF
  COMPRESS ERROR-MESSAGE *PROGRAM *ERROR-NR *ERROR-LINE *DATN *TIME
    INTO #WEBCHARGE-LOG
END-IF
WRITE WORK FILE 3 #WEBCHARGE-LOG
CLOSE WORK FILE 3
BACKOUT TRANSACTION
*
CALLNAT 'GPRN0003' ERROR-LOG
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE SHOW-RESULT
*****************************
*
RESET ErrorText
IF #ERROR-CODE = ' '
  DECIDE FOR FIRST CONDITION
    WHEN #CREDIT-CARD
      #TEXT := #CC-CHARGE-SUCCESSFUL-MESSAGE
    WHEN #E-CHECK
      #TEXT := #EC-CHARGE-SUCCESSFUL-MESSAGE
    WHEN NONE
      IGNORE
  END-DECIDE
  Msg_Type := 'Charge Result:'
ELSE
  Msg_Type := 'Error:'
  #TEXT := #ERROR-MESSAGE
END-IF
IF *DEVICE NE 'BATCH'
* if charge was unsuccessful translate error code to error message
  IF #CHARGE-SUCCESSFULL = false
    DECIDE FOR FIRST CONDITION
      WHEN #CREDIT-CARD
        #TEXT := #REJECTED-CHARGE-MESSAGE-C
        ErrorText := #CC-CHARGE-FIELDS.ResultMessage
      WHEN #E-CHECK
        #TEXT := #REJECTED-CHARGE-MESSAGE-E
        ErrorText := #EC-CHARGE-FIELDS.ResultMessage
      WHEN NONE
        IGNORE
    END-DECIDE
  END-IF
  INPUT  WINDOW = 'CONFIRMATION-WINDOW'  (IP=OFF)
    2x Msg_Type (AD=OI)  /
    2x #TEXT    (AD=O)   /
    2x ErrorText (AD=OI)
END-IF
COMPRESS #DATN #TIMN 'AT number =' #AT-NUMBER 'Member CN =' #ID-NUMBER
  #TEXT ErrorText INTO #WEBCHARGE-LOG
WRITE WORK FILE 3 #WEBCHARGE-LOG
CLOSE WORK FILE 3
IF #ERROR-CODE <> ' '
  ESCAPE MODULE
END-IF
*
END-SUBROUTINE
*
****************************************
DEFINE SUBROUTINE GET-PROCESS-PROPERTIES
****************************************
*
#DATN := *DATN
#DAILY-FPF-CREDIT-CARD-TRAN :=
  '/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/DailyFPF_Tran.txt'
#EMAIL-DAILY-FILE :=
  '/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/EmailDailyFile.txt'
#WEBCHARGE-LOG-FILE := '/usr/SAG/tmp/SAGE_@DB_@Date.log'
#DB := GET_DBN(<>)
EXAMINE #WEBCHARGE-LOG-FILE FOR '@DB' REPLACE #DB
EXAMINE #WEBCHARGE-LOG-FILE FOR '@Date' REPLACE #DATN
#EMAIL-SCRIPT-NAME  := '/usr/SAG/cronus/.scripts/emailErrorLog'
#ERROR-LOG-FILE     := '/usr/SAG/tmp/emails/email.yak.e'
*
END-SUBROUTINE
*

END
