* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
DEFINE DATA
PARAMETER
1 REQUEST-DATA      (A) DYNAMIC
1 RESPONSE-DATA     (A) DYNAMIC        /* Out
1 RETURN-CODE       (A) DYNAMIC        /* Out
1 RETURN-MESSAGE    (A) DYNAMIC        /* Out
LOCAL USING WEBL0001
LOCAL USING WEBA0001
LOCAL USING PARSER-X
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
*
LOCAL
1 ERROR-MESSAGE   (A100)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
1 #CX             (I4)
1 #CY             (I4)
1 #CZ             (I4)
1 #CQ             (I4)
1 #I              (I2)
1 #II             (I2)
1 #LINE                        (A50)
*
1 #ERROR          (A1)
1 #SUCCESS-CODE   (A4) INIT <'0000'>
1 #SUCCESS-MESSAGE (A50) INIT <'REQUEST PROCESSED SUCCESSFULLY'>
1 #ERROR-CODE     (A4) INIT <'1111'>
1 #ERROR-MESSAGE  (A50) INIT <'ERROR IN PROCESSED REQUEST - SEE ERROR LOG'>
END-DEFINE
*
XML_PARSER_INPUT := REQUEST-DATA
* INCLUDE THE PARSER
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to repesent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of founld element
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
PERFORM APPLY-UPDATES
*
RETURN-CODE    := #SUCCESS-CODE
RETURN-MESSAGE := #SUCCESS-MESSAGE

************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
INCLUDE WEBCP001 'XML_PARSER_XPATH' /* XPATH to repesent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of found element
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  '#CX'
  '#CY'
  '#CZ'
  '#CQ'
*
if not XML_PARSER_CONTENT_IS_EMPTY
  #I := *length(XML_PARSER_XPATH)
  #line := substr(xml_parser_xpath,1,#i)
  #I := *length(XML_PARSER_CONTENT)
  #line := substr(xml_parser_content,1,#i)
end-if
END-SUBROUTINE
/*
DEFINE SUBROUTINE PARSER_ERROR
  RETURN-CODE    := XML_PARSER_RESPONSE
  RETURN-MESSAGE := XML_PARSER_ERROR_TEXT
  escape routine
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE APPLY-UPDATES
*******************************
*
RESET MEMBER-INFO ERROR-MESSAGE
*
MEMBER-INFO.CN         := MemberInfo.CN
MEMBER-INFO.RANK       := MemberInfo.Rank
MEMBER-INFO.ANN-REP-MAIL-CODE := MemberInfo.AnnualReportMailingCode
MEMBER-INFO.FAX        := MemberInfo.Root10_0
MEMBER-INFO.FAX-SUFFIX := MemberInfo.Suffix6_0
MEMBER-INFO.WORK-PHONE := MemberInfo.Root10_1
MEMBER-INFO.WORK-PHONE-SUFFIX := MemberInfo.Suffix6_1
MEMBER-INFO.HOME-PHONE := MemberInfo.Root10_2
MEMBER-INFO.HOME-PHONE-SUFFIX := MemberInfo.Suffix6_2
MEMBER-INFO.EMAIL      := MemberInfo.Email
MEMBER-INFO.ZIP        := MemberInfo.Zip
MEMBER-INFO.ADDRESS1   := MemberInfo.Address1
MEMBER-INFO.ADDRESS2   := MemberInfo.Address2
MEMBER-INFO.ADDRESS3   := MemberInfo.Address3
CALLNAT 'WEBN0002' MEMBER-INFO #ERROR
*
IF #ERROR = 'Y'
  RETURN-CODE    := #ERROR-CODE
  RETURN-MESSAGE := #ERROR-MESSAGE
END-IF
END-SUBROUTINE
*
END
