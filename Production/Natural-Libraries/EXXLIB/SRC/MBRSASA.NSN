* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* CRM Admin interface : Member Search Request
*****************************************************************************
* NAME         : MBRSASA                                                    *
* AUTHOR       : Copyright: MetrostarSystems AAFMAA                         *
* Program ID   : MBRSASA                                                    *
* DESCRIPTION  : Creates Contacts and relationships for Gift of membership  *
*                BASED ON CRM XML message                                   *
*****************************************************************************
*        MODIFICATION LOG                                              *
************************************************************************
* USER   DATE      TAG          REASON
* NGG    20110501            Initial Creation
* NGG    20110823  NG1  Default country is US
* NGG    20111023  NG2  ZIP is not numeric
************************************************************************
*
DEFINE DATA PARAMETER
1 XML_PARSER_INPUT    (A) Dynamic        /* In
1 XML_SERIALZE_OUTPUT (A) DYNAMIC        /* Out
1 #DECEASEDID         (A) DYNAMIC        /* For Error log ID
LOCAL USING GOADA002           /* Address PDA
LOCAL USING GOCOA001           /* Contact PDA
LOCAL USING GOCRA001           /* Contact relations PDA
LOCAL USING GOSTMA01           /* Status file PDA
LOCAL USING GODIA001           /* Death Info PDA
LOCAL USING PARSER-X           /* parser internal data - do not change
LOCAL USING MBRSALDA           /* Contact structures
LOCAL
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I4)
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 #FULL-PATH   (A126) 1 REDEFINE #FULL-PATH
  2 #PREFIX    (A17)
  2 #NODE      (A64)
1 #TOKENS      (A/5) DYNAMIC
1 #XML-MAP     (A3200)
1 #PHONE       (A10) 1 REDEFINE #PHONE
  2 #PHONE-N   (N10)
1 #SSNV        (A9) 1 REDEFINE #SSNV
  2 #SSN-N     (N9)
1 #LEN         (I4)
1 #J           (I4)
1 #X           (I4)
1 #K           (I4)
1 #L           (I4)
1 #CNTS        (L)
1 #RELNS       (L)
1 #DIGIT             (A1)
1 #EXISTING-MBR      (A40) CONST <'Existing member - no updates in Unix'>
1 #ERROR-CODE        (A2)
1 #ERROR-DESCRIPTION (A) DYNAMIC
1 #ROLE-CODE         (A1)
1 GEN-TABLE-V VIEW OF A-GEN-TABLE
  2 GEN-KEY          (A4)
  2 GEN-SUB-KEY      (A3)
  2 GEN-ALPHA-VALUE  (A50)
1 #GEN-KEY           (A4)
1 #CLERK-ID          (A3)
1 #UPDATED           (L/12)
1 #MSG               (A) DYNAMIC
1 #CNT-IDS-N         (I4)
1 #CNT-IDS           (A/64) DYNAMIC
1 #ADMIN-CI          (N8/64)
1 #DATE              (A8) 1 REDEFINE #DATE
  2 #DATE-N  (N8)
1 #GIFTM-LOG         (A) DYNAMIC        /* Log
*
1 BLANK             (A1) CONST <' '>
1 #DEL              (A1) CONST <':'>
1 #TAB              (A1) CONST <H'09'>
1 #TRUE             (A4) CONST <'TRUE'>
1 YES               (A4) CONST <'Y'>
1 #Timeout          (A2) CONST <'-2'>
1 #Natural-error    (A2) CONST <'-3'>
1 #Duplicate-AT     (A2) CONST <'-4'>
1 #No-AT#-available (A2) CONST <'-5'>
1 #No-AT#-found     (A2) CONST <'-6'>
1 #Parse-error      (A2) CONST <'-7'>
1 #Member-exist     (A2) CONST <'-8'>
1 #MESSAGE-LOG      (I4) CONST <2>
1 #ERROR-LOG        (I4) CONST <3>
*
END-DEFINE
*
RESET #SSNV
ASSIGN #LEN := *LENGTH (XML_PARSER_INPUT)
IF #LEN <= 0
  #ERROR-CODE := #Parse-error
  #ERROR-DESCRIPTION := 'Empty Gift of membership XML data'
  PERFORM FORMAT-ERROR
  ESCAPE ROUTINE
ELSE
  RESET #LEN
END-IF
*
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
DEFINE SUBROUTINE CALLBACK
/*     ===================
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  ASSIGN #FULL-PATH = XML_PARSER_XPATH
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE
/*
DEFINE PARSER_ERROR
/*     ============
#ERROR-CODE := #Parse-error
#ERROR-DESCRIPTION := XML_PARSER_ERROR_TEXT
PERFORM FORMAT-ERROR
ESCAPE ROUTINE
END-SUBROUTINE
*
*    Contacts and relations are created
*
FOR #J 1 TO #CNT-IDS-N
  IF #CNT-IDS ( #J ) = #DECEASEDID
    #STATUS.MEMBER-CONTACT-ID := #ADMIN-CI ( #J )
    ESCAPE BOTTOM
  END-IF
END-FOR
CALLNAT 'GOSTN001' #STATUS
  #ERROR-CODE
  #MSG
  #UPDATED (11)
  #CLERK-ID
IF #ERROR-CODE NE BLANK
    OR #MSG NE BLANK
  #ERROR-DESCRIPTION := #MSG
  CALLNAT 'CRMLOG' #ERROR-CODE #ERROR-DESCRIPTION
    #ERROR-LOG
    #DECEASEDID
  PERFORM FORMAT-ERROR
END-IF
*
IF #UPDATED (*)
    AND #ERROR-DESCRIPTION = BLANK
  CALLNAT 'MBRSASB'    /* Pass back Admin contacts
    #CNT-IDS-N
    #ADMIN-CI (*)
    #CNT-IDS  (*)
    #ERROR-CODE
    #ERROR-DESCRIPTION
END-IF
DECIDE FOR FIRST CONDITION
  WHEN #ERROR-DESCRIPTION EQ BLANK    /* Existing member
      AND NOT #UPDATED (*)
    #ERROR-CODE := #Member-exist
    #ERROR-DESCRIPTION := #EXISTING-MBR
    PERFORM FORMAT-ERROR
  WHEN #ERROR-DESCRIPTION NE BLANK    /* Processing error
    IF #ERROR-CODE EQ BLANK
      #ERROR-CODE := #Natural-error
    END-IF
    PERFORM FORMAT-ERROR
  WHEN NONE                           /* Successful request
    END TRANSACTION
    XML_SERIALZE_OUTPUT := #STATUS.ID-NUMBER
END-DECIDE
*
DEFINE PARSE-DOCUMENT
/*     ==============
XML_PARSER_CONTENT := *TRIM (XML_PARSER_CONTENT)
MOVE *TRANSLATE(XML_PARSER_CONTENT, UPPER) TO XML_PARSER_CONTENT
SEPARATE #NODE INTO #TOKENS (*) IGNORE WITH DELIMITERS '/'
* IF #TOKENS (1) NE BLANK
*  COMPRESS FULL #TOKENS (*) XML_PARSER_CONTENT
*    INTO #XML-MAP WITH DELIMITERS #TAB
*  WRITE WORK 2 #XML-MAP
* END-IF
DECIDE ON FIRST VALUE OF #TOKENS (1)
  VALUE 'ApplicationSource'
    #STATUS.APPL-SOURCE := XML_PARSER_CONTENT
  VALUE 'DeceasedID'
    #DECEASEDID := XML_PARSER_CONTENT
  VALUE 'User'
    #GEN-KEY := 'WEBU'
    FIND GEN-TABLE-V WITH GEN-KEY = #GEN-KEY
      MOVE *TRANSLATE(GEN-ALPHA-VALUE, UPPER) TO GEN-ALPHA-VALUE
      ACCEPT IF GEN-ALPHA-VALUE = XML_PARSER_CONTENT
      #CLERK-ID := GEN-SUB-KEY
      ESCAPE BOTTOM
    END-FIND
  VALUE 'Contacts'
    #CNTS := TRUE
  VALUE 'Relationships'
    #RELNS := TRUE
*  ANY VALUE
*    PRINT XML_PARSER_CONTENT
  NONE VALUE
    RESET #CNTS #RELNS
END-DECIDE
IF #CNTS
  PERFORM PARSE-CONTACT
END-IF
IF #RELNS
  PERFORM PARSE-RELATIONS
END-IF
END-SUBROUTINE
/*
DEFINE PARSE-CONTACT
/*     ==============
IF #TOKENS (2) = '$'
  COMPRESS #GIFTM-LOG 'END-CONTACT' #CNT-IDS-N INTO #GIFTM-LOG
  IF #CNT-IDS-N > 0
    PERFORM CREATE-CONTACT
  END-IF
  RESET #CONTACT #EMAIL1 #EMAIL2 #EMAIL3
    #PHONE1 #PHONE2 #PHONE3
    #PA-POOL #PA-REL #SA-POOL #SA-REL
    #DEATH-INFO
END-IF
*
DECIDE ON FIRST VALUE OF #TOKENS (3)
  VALUE 'Id'
    ADD 1 TO #CNT-IDS-N
    #CNT-IDS ( #CNT-IDS-N ) := XML_PARSER_CONTENT
  VALUE 'DateOfBirth'
    #DATE := XML_PARSER_CONTENT
    #CONTACT.DATE-OF-BIRTH := #DATE-N
  VALUE 'CN'
    #CONTACT.ID-NUMBER := VAL ( XML_PARSER_CONTENT )
  VALUE 'FirstName'
    #CONTACT.FIRST-NAME := XML_PARSER_CONTENT
  VALUE 'MiddleName'
    #CONTACT.MIDDLE-NAME := XML_PARSER_CONTENT
  VALUE 'LastName'
    #CONTACT.LAST-NAME := XML_PARSER_CONTENT
  VALUE 'Suffix'
    #CONTACT.SUFFIX := XML_PARSER_CONTENT
  VALUE 'Prefix'
    #CONTACT.PREFIX-TITLE := XML_PARSER_CONTENT
  VALUE 'GovtID'
    #SSNV := XML_PARSER_CONTENT
    #CONTACT.SSN := #SSN-N
  VALUE 'Gender'
    #CONTACT.GENDER-CD := XML_PARSER_CONTENT
  VALUE 'MilitaryRankId'
    IF XML_PARSER_CONTENT IS (N6)
      #CONTACT.RANK-ID := VAL ( XML_PARSER_CONTENT )
    END-IF
  VALUE 'MilitaryStatus'
    #CONTACT.MILITARY-STATUS := XML_PARSER_CONTENT
  VALUE 'IsMember'
    COMPRESS #GIFTM-LOG #TOKENS (3)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  VALUE 'PrimaryAddress'
    PERFORM PARSE-PRIMARY-ADDRESS
  VALUE 'SecondaryAddress'
    PERFORM PARSE-SECONDARY-ADDRESS
  VALUE 'Phone1'
    PERFORM PARSE-PHONE1
  VALUE 'Phone2'
    PERFORM PARSE-PHONE2
  VALUE 'Phone3'
    PERFORM PARSE-PHONE3
  VALUE 'Email1'
    DECIDE ON FIRST VALUE OF #TOKENS (4)
      VALUE 'EmailAddress'
        #EMAIL1.EMAIL-ADDRESS := XML_PARSER_CONTENT
        #EMAIL1.EMAIL-PREFERRED-IND := 'Y'
      VALUE 'Type'
        #EMAIL1.EMAIL-TYPE := XML_PARSER_CONTENT
      VALUE 'Status'
        #EMAIL1.STATUS := XML_PARSER_CONTENT
      ANY VALUE
        COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
      NONE VALUE IGNORE
    END-DECIDE
  VALUE 'Email2'
    DECIDE ON FIRST VALUE OF #TOKENS (4)
      VALUE 'EmailAddress'
        #EMAIL2.EMAIL-ADDRESS := XML_PARSER_CONTENT
      VALUE 'Type'
        #EMAIL2.EMAIL-TYPE := XML_PARSER_CONTENT
      VALUE 'Status'
        #EMAIL2.STATUS := XML_PARSER_CONTENT
      ANY VALUE
        COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
      NONE VALUE IGNORE
    END-DECIDE
  VALUE 'Email3'
    DECIDE ON FIRST VALUE OF #TOKENS (4)
      VALUE 'EmailAddress'
        #EMAIL3.EMAIL-ADDRESS := XML_PARSER_CONTENT
      VALUE 'Type'
        #EMAIL3.EMAIL-TYPE := XML_PARSER_CONTENT
      VALUE 'Status'
        #EMAIL3.STATUS := XML_PARSER_CONTENT
      ANY VALUE
        COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
      NONE VALUE IGNORE
    END-DECIDE
  VALUE 'ContactType'
    #CONTACT.CONTACT-TYPE := XML_PARSER_CONTENT
  VALUE 'CauseOfDeath'
    #DEATH-INFO.CAUSE-OF-DEATH := XML_PARSER_CONTENT
  VALUE 'DeathDocumentValidationCode'
    #DEATH-INFO.DEATH-DOCUMENT-VALIDATION-CODE := XML_PARSER_CONTENT
  VALUE 'DateOfDeath'
    #DATE := XML_PARSER_CONTENT
    #DEATH-INFO.DATE-OF-DEATH := #DATE-N
    #DEATH-INFO.DATE-OF-DEATH-STATUS-DATE  := *DATN
    #DEATH-INFO.DATE-OF-DEATH-STATUS-CODE  := 'C'
    #DEATH-INFO.DATE-OF-DEATH-REPORTED := *DATN
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (3)XML_PARSER_CONTENT INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE
    PERFORM CREATE-STATUS
END-DECIDE
*
END-SUBROUTINE
/*
DEFINE PARSE-RELATIONS
/*     ==============
IF #TOKENS (2) = '$'
  COMPRESS #GIFTM-LOG 'END-PARSE-RELATIONS' INTO #GIFTM-LOG WITH DELIMITERS #TAB
  PERFORM CREATE-CONTACT-REL
  RESET #CONTACT-REL
END-IF
*
DECIDE ON FIRST VALUE OF #TOKENS (3)
  VALUE 'MemberId'
    FOR #J 1 TO #CNT-IDS-N
      IF #CNT-IDS ( #J ) = XML_PARSER_CONTENT
        #CONTACT-REL.CONTACT-1-ID := #ADMIN-CI ( #J )
        ESCAPE BOTTOM
      END-IF
    END-FOR
  VALUE 'MemberRole'
    #CONTACT-REL.ROLE-1-CD := F-ROLECD (<XML_PARSER_CONTENT>)
  VALUE 'PartnerId'
    FOR #J 1 TO #CNT-IDS-N
      IF #CNT-IDS ( #J ) = XML_PARSER_CONTENT
        #CONTACT-REL.CONTACT-2-ID := #ADMIN-CI ( #J )
        ESCAPE BOTTOM
      END-IF
    END-FOR
  VALUE 'PartnerRole'
    #CONTACT-REL.ROLE-2-CD := F-ROLECD (<XML_PARSER_CONTENT>)
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (3)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
DEFINE CREATE-CONTACT-REL
/*     ==================
IF #CONTACT-REL.CONTACT-1-ID > 0
  CALLNAT 'GOCRN001' #CONTACT-REL #MSG #UPDATED (10)
END-IF
END-SUBROUTINE
*
DEFINE CREATE-CONTACT
/*     ==============
CALLNAT 'GOCON001' #CONTACT #CLERK-ID #MSG
  #UPDATED (1)
COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
#ADMIN-CI ( #CNT-IDS-N ) := #CONTACT.CONTACT-ID
IF #CONTACT.CONTACT-ID > 0
    AND #UPDATED (1)   /* New Contact
  #DEATH-INFO.#CONTACT-ID := #CONTACT.CONTACT-ID
  CALLNAT 'GODIN001' #DEATH-INFO
    #CLERK-ID
    #MSG
    #UPDATED (12)
  IF #PA-POOL.STREET NE BLANK
    #PA-REL.CONTACT-ID := #CONTACT.CONTACT-ID
    #PA-REL.ADDR-TYPE-CD := 'P'
    IF #PA-REL.ADDRESS-SOURCE = BLANK
      #PA-REL.ADDRESS-SOURCE := 'A'
    END-IF
    IF #PA-POOL.COUNTRY-CODE = BLANK   /* Default is US NG1
      #PA-POOL.COUNTRY-CODE := 'US'
    END-IF
    IF #PA-POOL.COUNTRY-CODE = 'US' OR= 'PR'
      RESET #PA-POOL.POSTAL-CODE
    ELSE
      RESET #PA-POOL.ZIP-CODE
    END-IF
*    CALLNAT 'GOADN003' #PA-POOL #PA-REL #CLERK-ID #MSG
*      #ADDRESS-UI
    CALLNAT 'GOADN001' #PA-POOL #PA-REL #CLERK-ID #MSG
      #UPDATED (2)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #SA-POOL.STREET NE BLANK
    #SA-REL.CONTACT-ID := #CONTACT.CONTACT-ID
    #SA-REL.ADDR-TYPE-CD := 'S'
    IF #SA-REL.ADDRESS-SOURCE = BLANK
      #SA-REL.ADDRESS-SOURCE := 'A'
    END-IF
    IF #SA-POOL.COUNTRY-CODE = BLANK   /* Default is US NG1
      #SA-POOL.COUNTRY-CODE := 'US'
    END-IF
    IF #SA-POOL.COUNTRY-CODE = 'US' OR= 'PR'
      RESET #SA-POOL.POSTAL-CODE
    ELSE
      RESET #SA-POOL.ZIP-CODE
    END-IF
    CALLNAT 'GOADN001' #SA-POOL #SA-REL #CLERK-ID #MSG
      #UPDATED (3)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #PHONE1.INTL-DIAL-NUMBER NE 0
    #PHONE1.CONTACT-ID := #CONTACT.CONTACT-ID
    CALLNAT 'GOPHN001' #PHONE1 #CLERK-ID #MSG
      #UPDATED (4)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #PHONE2.INTL-DIAL-NUMBER NE 0
    #PHONE2.CONTACT-ID := #CONTACT.CONTACT-ID
    CALLNAT 'GOPHN001' #PHONE2 #CLERK-ID #MSG
      #UPDATED (5)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #PHONE3.INTL-DIAL-NUMBER NE 0
    #PHONE3.CONTACT-ID := #CONTACT.CONTACT-ID
    CALLNAT 'GOPHN001' #PHONE3 #CLERK-ID #MSG
      #UPDATED (6)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #EMAIL1.EMAIL-ADDRESS NE BLANK
    #EMAIL1.CONTACT-ID := #CONTACT.CONTACT-ID
    CALLNAT 'GOEMN001' #EMAIL1 #CLERK-ID #MSG
      #UPDATED (7)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #EMAIL2.EMAIL-ADDRESS NE BLANK
    #EMAIL2.CONTACT-ID := #CONTACT.CONTACT-ID
    CALLNAT 'GOEMN001' #EMAIL2 #CLERK-ID #MSG
      #UPDATED (8)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
  IF #EMAIL3.EMAIL-ADDRESS NE BLANK
    #EMAIL3.CONTACT-ID := #CONTACT.CONTACT-ID
    CALLNAT 'GOEMN001' #EMAIL3 #CLERK-ID #MSG
      #UPDATED (9)
    COMPRESS #ERROR-DESCRIPTION #MSG INTO #ERROR-DESCRIPTION
  END-IF
END-IF
END-SUBROUTINE
*
DEFINE CREATE-STATUS
/*     ==============
IF #CNT-IDS-N > 0
    AND #DECEASEDID = #CNT-IDS ( #CNT-IDS-N )
  DECIDE ON FIRST VALUE OF #TOKENS (3)
    VALUE 'BranchOfService'
      #STATUS.MILITARY-SERVICE := XML_PARSER_CONTENT
    VALUE 'DIEMS'
      #DATE := XML_PARSER_CONTENT
      #STATUS.DATE-INIT-ENTRY-MIL-SVC := #DATE-N
    VALUE 'PEBD'
      #DATE := XML_PARSER_CONTENT
      #STATUS.BASE-PAY-EF-DATE := #DATE-N
    VALUE 'BASD'
      #DATE := XML_PARSER_CONTENT
      #STATUS.ACTIVE-DUTY-BASE-DATE := #DATE-N
    VALUE 'DateOfPromotion'
      #DATE := XML_PARSER_CONTENT
      #STATUS.DATE-OF-RANK := #DATE-N
    VALUE 'DateOfPreviousPromotion'
      #DATE := XML_PARSER_CONTENT
      #STATUS.PRIOR-DATE-OF-RANK := #DATE-N
    VALUE 'DateRetired'
      #DATE := XML_PARSER_CONTENT
      #STATUS.DATE-RETIRED := #DATE-N
    VALUE 'SBPOption'
      #STATUS.MIL-SBP-OPT := XML_PARSER_CONTENT
    VALUE 'DateOfMarriage'
      #DATE := XML_PARSER_CONTENT
      #STATUS.DATE-OF-MARRIAGE := #DATE-N
    VALUE 'DeathServiceConnected'
      #STATUS.DEATH-SERVICE-CON := XML_PARSER_CONTENT
    ANY VALUE
      COMPRESS #GIFTM-LOG #TOKENS (3)XML_PARSER_CONTENT INTO #GIFTM-LOG WITH DELIMITERS #TAB
    NONE VALUE IGNORE
  END-DECIDE
ELSE   /* Regular Contact default military data
  DECIDE ON FIRST VALUE OF #TOKENS (3)
    VALUE 'BranchOfService'
      #CONTACT.MILITARY-STATUS := XML_PARSER_CONTENT
      IF #CONTACT.MILITARY-STATUS = 'V' /*
        #CONTACT.MILITARY-STATUS := 'C'
        #CONTACT.RANK-ID := 1616
      ELSE
        RESET #CONTACT.MILITARY-STATUS
      END-IF
    NONE VALUE IGNORE
  END-DECIDE
END-IF
END-SUBROUTINE
/*
DEFINE PARSE-PRIMARY-ADDRESS
/*     =====================
DECIDE ON FIRST VALUE OF #TOKENS (4)
  VALUE 'City'
    #PA-POOL.CITY := XML_PARSER_CONTENT
  VALUE 'State'
    #PA-POOL.STATE-CODE := XML_PARSER_CONTENT
    #PA-POOL.INTL-REGION := XML_PARSER_CONTENT
  VALUE 'Street'
    IF *LENGTH (XML_PARSER_CONTENT) > 50
      #PA-POOL.STREET := SUBSTR(XML_PARSER_CONTENT,1,25)
    ELSE
      #PA-POOL.STREET := XML_PARSER_CONTENT
    END-IF
  VALUE 'Unit'
    IF *LENGTH (XML_PARSER_CONTENT) > 25
      #PA-POOL.UNIT := SUBSTR(XML_PARSER_CONTENT,1,25)
    ELSE
      #PA-POOL.UNIT := XML_PARSER_CONTENT
    END-IF
  VALUE 'Zip'
    #PA-POOL.POSTAL-CODE := XML_PARSER_CONTENT
    #L := *LENGTH (XML_PARSER_CONTENT)
    IF #L <= 9
      #ZIPV := XML_PARSER_CONTENT
      IF #ZIPV IS (N9)                        /* NG2
        EXAMINE #ZIPV FOR BLANK REPLACE '0'
        IF *LENGTH (XML_PARSER_CONTENT) < 9
          #ZIP-VALUE-5 := #ZIP-5
        ELSE
          #ZIP-VALUE := #ZIP-N
        END-IF
        #PA-POOL.ZIP-CODE := #ZIP-VALUE
      END-IF
    END-IF
  VALUE 'CountryCode'
    #PA-POOL.COUNTRY-CODE := XML_PARSER_CONTENT
  VALUE 'Certified'
    IF XML_PARSER_CONTENT = 'TRUE'
      #PA-POOL.ADDR-VALID-IND := 'Y'
    ELSE
      #PA-POOL.ADDR-VALID-IND := 'F'
    END-IF
  VALUE 'Undeliverable'
    #PA-REL.RETURNED-MAIL-IND := XML_PARSER_CONTENT
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
DEFINE PARSE-SECONDARY-ADDRESS
/*     =======================
DECIDE ON FIRST VALUE OF #TOKENS (4)
  VALUE 'City'
    #SA-POOL.CITY := XML_PARSER_CONTENT
  VALUE 'State'
    #SA-POOL.STATE-CODE := XML_PARSER_CONTENT
    #SA-POOL.INTL-REGION := XML_PARSER_CONTENT
  VALUE 'Street'
    IF *LENGTH (XML_PARSER_CONTENT) > 50
      #SA-POOL.STREET := SUBSTR(XML_PARSER_CONTENT,1,25)
    ELSE
      #SA-POOL.STREET := XML_PARSER_CONTENT
    END-IF
  VALUE 'Unit'
    IF *LENGTH (XML_PARSER_CONTENT) > 25
      #SA-POOL.UNIT := SUBSTR(XML_PARSER_CONTENT,1,25)
    ELSE
      #SA-POOL.UNIT := XML_PARSER_CONTENT
    END-IF
  VALUE 'Zip'
    #SA-POOL.POSTAL-CODE := XML_PARSER_CONTENT
    #L := *LENGTH (XML_PARSER_CONTENT)
    IF #L <= 9
      #ZIPV := XML_PARSER_CONTENT
      IF #ZIPV IS (N9)                        /* NG2
        EXAMINE #ZIPV FOR BLANK REPLACE '0'
        IF *LENGTH (XML_PARSER_CONTENT) < 9
          #ZIP-VALUE-5 := #ZIP-5
        ELSE
          #ZIP-VALUE := #ZIP-N
        END-IF
        #SA-POOL.ZIP-CODE := #ZIP-VALUE
      END-IF
    END-IF
  VALUE 'CountryCode'
    #SA-POOL.COUNTRY-CODE := XML_PARSER_CONTENT
  VALUE 'Certified'
    IF XML_PARSER_CONTENT = 'TRUE'
      #SA-POOL.ADDR-VALID-IND := 'Y'
    ELSE
      #SA-POOL.ADDR-VALID-IND := 'F'
    END-IF
  VALUE 'Undeliverable'
    #SA-REL.RETURNED-MAIL-IND := XML_PARSER_CONTENT
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
DEFINE PARSE-PHONE1
/*     ============
DECIDE ON FIRST VALUE OF #TOKENS (4)
  VALUE 'PhoneNumber'
    #PHONE1.INTL-DIAL-NUMBER-A := *TRIM ( XML_PARSER_CONTENT )
  VALUE 'Extension'
    RESET #PHONE
    #J := *LENGTH ( XML_PARSER_CONTENT )
    FOR #X 1 TO #J
      #DIGIT := SUBSTR(XML_PARSER_CONTENT,#X,1)
      IF #DIGIT = '+' OR= '-' OR= '.' OR= BLANK
        ESCAPE TOP
      END-IF
      IF #DIGIT IS (N1)
        COMPRESS #PHONE #DIGIT INTO #PHONE LEAVING NO
      END-IF
    END-FOR
    MOVE RIGHT JUSTIFIED #PHONE TO #PHONE
    #PHONE1.EXT := #PHONE-N
  VALUE 'Remarks'
    #J := *LENGTH ( XML_PARSER_CONTENT )
    #X := 1 RESET #K
    REPEAT UNTIL #J <= 0
      ADD 1 TO #K
      #L := #J - #X + 1
      IF #L <= 70
        MOVE SUBSTR (XML_PARSER_CONTENT,#X) TO #PHONE1.REMARKS ( #K )
      ELSE
        MOVE SUBSTR (XML_PARSER_CONTENT,#X,70) TO #PHONE1.REMARKS ( #K )
      END-IF
      ADD 70 TO #X
      SUBTRACT 70 FROM #J
    END-REPEAT
  VALUE 'Type'
    #PHONE1.PHONE-TYPE-CODE := XML_PARSER_CONTENT
  VALUE 'Preferred'
    IF XML_PARSER_CONTENT = #TRUE
      #PHONE1.PREFERRED-PHONE-IND := YES
    END-IF
  VALUE 'International'
    IF XML_PARSER_CONTENT = #TRUE
      #PHONE1.INTL-ACCESS-CODE := 11
    END-IF
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
DEFINE PARSE-PHONE2
/*     ============
DECIDE ON FIRST VALUE OF #TOKENS (4)
  VALUE 'PhoneNumber'
    #PHONE2.INTL-DIAL-NUMBER-A := *TRIM ( XML_PARSER_CONTENT )
  VALUE 'Extension'
    RESET #PHONE
    #J := *LENGTH ( XML_PARSER_CONTENT )
    FOR #X 1 TO #J
      #DIGIT := SUBSTR(XML_PARSER_CONTENT,#X,1)
      IF #DIGIT = '+' OR= '-' OR= '.' OR= BLANK
        ESCAPE TOP
      END-IF
      IF #DIGIT IS (N1)
        COMPRESS #PHONE #DIGIT INTO #PHONE LEAVING NO
      END-IF
    END-FOR
    MOVE RIGHT JUSTIFIED #PHONE TO #PHONE
    #PHONE2.EXT := #PHONE-N
  VALUE 'Remarks'
    #J := *LENGTH ( XML_PARSER_CONTENT )
    #X := 1 RESET #K
    REPEAT UNTIL #J <= 0
      ADD 1 TO #K
      #L := #J - #X + 1
      IF #L <= 70
        MOVE SUBSTR (XML_PARSER_CONTENT,#X) TO #PHONE2.REMARKS ( #K )
      ELSE
        MOVE SUBSTR (XML_PARSER_CONTENT,#X,70) TO #PHONE2.REMARKS ( #K )
      END-IF
      ADD 70 TO #X
      SUBTRACT 70 FROM #J
    END-REPEAT
  VALUE 'Type'
    #PHONE2.PHONE-TYPE-CODE := XML_PARSER_CONTENT
  VALUE 'Preferred'
    IF XML_PARSER_CONTENT = #TRUE
      #PHONE2.PREFERRED-PHONE-IND := YES
    END-IF
  VALUE 'International'
    IF XML_PARSER_CONTENT = #TRUE
      #PHONE2.INTL-ACCESS-CODE := 11
    END-IF
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
DEFINE PARSE-PHONE3
/*     ============
DECIDE ON FIRST VALUE OF #TOKENS (4)
  VALUE 'PhoneNumber'
    #PHONE3.INTL-DIAL-NUMBER-A := *TRIM ( XML_PARSER_CONTENT )
  VALUE 'Extension'
    RESET #PHONE
    #J := *LENGTH ( XML_PARSER_CONTENT )
    FOR #X 1 TO #J
      #DIGIT := SUBSTR(XML_PARSER_CONTENT,#X,1)
      IF #DIGIT = '+' OR= '-' OR= '.' OR= BLANK
        ESCAPE TOP
      END-IF
      IF #DIGIT IS (N1)
        COMPRESS #PHONE #DIGIT INTO #PHONE LEAVING NO
      END-IF
    END-FOR
    MOVE RIGHT JUSTIFIED #PHONE TO #PHONE
    #PHONE3.EXT := #PHONE-N
  VALUE 'Remarks'
    #J := *LENGTH ( XML_PARSER_CONTENT )
    #X := 1 RESET #K
    REPEAT UNTIL #J <= 0
      ADD 1 TO #K
      #L := #J - #X + 1
      IF #L <= 70
        MOVE SUBSTR (XML_PARSER_CONTENT,#X) TO #PHONE3.REMARKS ( #K )
      ELSE
        MOVE SUBSTR (XML_PARSER_CONTENT,#X,70) TO #PHONE3.REMARKS ( #K )
      END-IF
      ADD 70 TO #X
      SUBTRACT 70 FROM #J
    END-REPEAT
  VALUE 'Type'
    #PHONE3.PHONE-TYPE-CODE := XML_PARSER_CONTENT
  VALUE 'Preferred'
    IF XML_PARSER_CONTENT = #TRUE
      #PHONE3.PREFERRED-PHONE-IND := YES
    END-IF
  VALUE 'International'
    IF XML_PARSER_CONTENT = #TRUE
      #PHONE3.INTL-ACCESS-CODE := 11
    END-IF
  ANY VALUE
    COMPRESS #GIFTM-LOG #TOKENS (4)INTO #GIFTM-LOG WITH DELIMITERS #TAB
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
ON ERROR
  RESET #ERROR-CODE
  CALLNAT 'CRMLOG' #ERROR-CODE #ERROR-DESCRIPTION
    #ERROR-LOG
    #DECEASEDID
  PERFORM FORMAT-ERROR
  ESCAPE ROUTINE
END-ERROR
*
DEFINE FORMAT-ERROR
/*     ============
BACKOUT TRANSACTION
COMPRESS #ERROR-CODE #ERROR-DESCRIPTION INTO XML_SERIALZE_OUTPUT WITH DELIMITERS ':'
END-SUBROUTINE
*
END
