* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'CQRNPRS'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   C:\Users\nguentchev\mobile\CustomerQuoteRequest\Natural-Libraries\GETQ\RES\GetQuote.xsd
*   using PARSE XML statement and datastructure 'CQRA0001'
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
PARAMETER USING QQRA001
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY (L)
*
LOCAL
1 #RootTag                     (A) DYNAMIC
1 #LEN                         (I4)
1 #CX                          (I4)
1 #CY                          (I4)
1 #CZ                          (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 #NATURAL-ERROR    (I4) CONST <-3>
1 #ERROR-LOG        (I4) CONST <3>
1 #XML_NAMESPACE               (A/1:1) DYNAMIC INIT <
  'http://www.w3.org/2001/XMLSchema-instance' >
1 #XML_PREFIX                  (A/1:1) DYNAMIC INIT <
  'i:' >
END-DEFINE
*
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  ErrorCode := #Parse-error
  ErrorDescription := 'Empty search data XML'
  #RootTag := 'CustomerQuickQuote'
  CALLNAT 'CQRLOG' ErrorCode ErrorDescription
    #ERROR-LOG #RootTag
  ESCAPE ROUTINE
END-IF
RESET CustomerQuickQuote
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
ErrorCode := #PARSE-ERROR
ErrorDescription := XML_PARSER_ERROR_TEXT
#RootTag := 'CustomerQuickQuote'
CALLNAT 'CQRLOG' ErrorCode ErrorDescription
  #ERROR-LOG #RootTag
END-SUBROUTINE
*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
END-IF
PERFORM PARSE-DOCUMENT
END-SUBROUTINE
*
* ------------------------------------------------- CALL THE PARSER
DEFINE PARSE-DOCUMENT
/*     ==============
* PARSE XML #XML_INPUT INTO PATH #XML_PATH NAME #XML_NAME VALUE #XML_VALUE
*  NORMALIZE NAMESPACE #XML_NAMESPACE(*) PREFIX #XML_PREFIX(*)
*
**print #XML_PATH
DECIDE ON FIRST #XML_PATH
  VALUE 'CustomerQuickQuote//'
    IGNORE
  VALUE 'CustomerQuickQuote'
    RESET INITIAL CustomerQuickQuote
  VALUE 'CustomerQuickQuote/Relation//'
    IGNORE
  VALUE 'CustomerQuickQuote/Relation'
    IGNORE
  VALUE 'CustomerQuickQuote/Relation/$'
    CustomerQuickQuote.Relation := #XML_VALUE
  VALUE 'CustomerQuickQuote/Age//'
    IGNORE
  VALUE 'CustomerQuickQuote/Age'
    IGNORE
  VALUE 'CustomerQuickQuote/Age/$'
    CustomerQuickQuote.Age := VAL(#XML_VALUE)
  VALUE 'CustomerQuickQuote/Gender//'
    IGNORE
  VALUE 'CustomerQuickQuote/Gender'
    IGNORE
  VALUE 'CustomerQuickQuote/Gender/$'
    CustomerQuickQuote.Gender := #XML_VALUE
*
  VALUE 'CustomerQuickQuote/QuoteType//'
    IGNORE
  VALUE 'CustomerQuickQuote/QuoteType'
    IGNORE
  VALUE 'CustomerQuickQuote/QuoteType/$'
    CustomerQuickQuote.QuoteType := VAL(#XML_VALUE)
  VALUE 'CustomerQuickQuote/ContactId//'
    IGNORE
  VALUE 'CustomerQuickQuote/ContactId'
    IGNORE
  VALUE 'CustomerQuickQuote/ContactId/$'
    CustomerQuickQuote.ContactId := VAL(#XML_VALUE)
*
  VALUE 'CustomerQuickQuote/QuickQuoteAmount//'
    IGNORE
  VALUE 'CustomerQuickQuote/QuickQuoteAmount'
    IGNORE
  VALUE 'CustomerQuickQuote/QuickQuoteAmount/$'
    CustomerQuickQuote.QuickQuoteAmount := VAL(#XML_VALUE)
  VALUE 'CustomerQuickQuote/IsNicotine//'
    IGNORE
  VALUE 'CustomerQuickQuote/IsNicotine'
    IGNORE
  VALUE 'CustomerQuickQuote/IsNicotine/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'TRUE'
      CustomerQuickQuote.IsNicotine := TRUE
    ELSE
      CustomerQuickQuote.IsNicotine := FALSE
    END-IF
    /*
  VALUE 'CustomerQuickQuote/MilitaryService//'
    IGNORE
  VALUE 'CustomerQuickQuote/MilitaryService'
    IGNORE
  VALUE 'CustomerQuickQuote/MilitaryService/$'
    CustomerQuickQuote.MilitaryService := #XML_VALUE
  VALUE 'CustomerQuickQuote/MilitaryStatus//'
    IGNORE
  VALUE 'CustomerQuickQuote/MilitaryStatus'
    IGNORE
  VALUE 'CustomerQuickQuote/MilitaryStatus/$'
    CustomerQuickQuote.MilitaryStatus := #XML_VALUE
  VALUE 'CustomerQuickQuote/Rank//'
    IGNORE
  VALUE 'CustomerQuickQuote/Rank'
    IGNORE
  VALUE 'CustomerQuickQuote/Rank/$'
    CustomerQuickQuote.Rank := #XML_VALUE
  VALUE 'CustomerQuickQuote/State//'
    IGNORE
  VALUE 'CustomerQuickQuote/State'
    IGNORE
  VALUE 'CustomerQuickQuote/State/$'
    CustomerQuickQuote.State := #XML_VALUE
  VALUE 'CustomerQuickQuote/ErrorCode//'
    IGNORE
  VALUE 'CustomerQuickQuote/ErrorCode'
    IGNORE
  VALUE 'CustomerQuickQuote/ErrorCode/$'
    CustomerQuickQuote.ErrorCode := VAL(#XML_VALUE)
  VALUE 'CustomerQuickQuote/ErrorDescription//'
    IGNORE
  VALUE 'CustomerQuickQuote/ErrorDescription'
    IGNORE
  VALUE 'CustomerQuickQuote/ErrorDescription/$'
    CustomerQuickQuote.ErrorDescription := #XML_VALUE
  NONE
    IGNORE
END-DECIDE

*
END-SUBROUTINE
*
END
