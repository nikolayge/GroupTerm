* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'CQRNPRS'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   C:\Users\nguentchev\mobile\CustomerQuoteRequest\Natural-Libraries\GETQ\RES\GetQuote.xsd
*   using PARSE XML statement and datastructure 'CQRA0001'
*
************************************************************************
*        MODIFICATION LOG                                              *
************************************************************************
* USER   DATE      TAG  REASON
* NGG    20120314       Initial Creation
* NGG    20141118  NG1  Changes for widows
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
PARAMETER USING CQRA001
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY (L)
*
LOCAL
1 #RootTag                     (A) DYNAMIC
1 #LEN                         (I4)
1 #CX                          (I4)
1 #CY                          (I4)
1 #CZ                          (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 #NATURAL-ERROR    (I4) CONST <-3>
1 #ERROR-LOG        (I4) CONST <3>
1 #XML_NAMESPACE               (A/1:1) DYNAMIC INIT <
  'http://www.w3.org/2001/XMLSchema-instance' >
1 #XML_PREFIX                  (A/1:1) DYNAMIC INIT <
  'i:' >
END-DEFINE
*
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  ErrorCode := #Parse-error
  ErrorDescription := 'Empty search data XML'
  #RootTag := 'CustomerQuote'
  CALLNAT 'CQRLOG' ErrorCode ErrorDescription
    #ERROR-LOG #RootTag
  ESCAPE ROUTINE
END-IF
RESET CustomerQuote
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
ErrorCode := #PARSE-ERROR
ErrorDescription := XML_PARSER_ERROR_TEXT
#RootTag := 'CustomerQuote'
CALLNAT 'CQRLOG' ErrorCode ErrorDescription
  #ERROR-LOG #RootTag
END-SUBROUTINE
*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
*  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
END-IF
PERFORM PARSE-DOCUMENT
END-SUBROUTINE
*
* ------------------------------------------------- CALL THE PARSER
DEFINE PARSE-DOCUMENT
/*     ==============
* PARSE XML #XML_INPUT INTO PATH #XML_PATH NAME #XML_NAME VALUE #XML_VALUE
*  NORMALIZE NAMESPACE #XML_NAMESPACE(*) PREFIX #XML_PREFIX(*)
*
**print #XML_PATH
DECIDE ON FIRST #XML_PATH
  VALUE 'CustomerQuote//'
    IGNORE
  VALUE 'CustomerQuote'
    RESET INITIAL CustomerQuote
  VALUE 'CustomerQuote/CN//'
    IGNORE
  VALUE 'CustomerQuote/CN'
    IGNORE
  VALUE 'CustomerQuote/CN/$'
    CustomerQuote.CN := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/Relation//'
    IGNORE
  VALUE 'CustomerQuote/Relation'
    IGNORE
  VALUE 'CustomerQuote/Relation/$'
    CustomerQuote.Relation := #XML_VALUE
  VALUE 'CustomerQuote/DOB//'
    IGNORE
  VALUE 'CustomerQuote/DOB'
    IGNORE
  VALUE 'CustomerQuote/DOB/$'
    CustomerQuote.DOB := #XML_VALUE
  VALUE 'CustomerQuote/Age//'
    IGNORE
  VALUE 'CustomerQuote/Age'
    IGNORE
  VALUE 'CustomerQuote/Age/$'
    CustomerQuote.Age := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/Gender//'
    IGNORE
  VALUE 'CustomerQuote/Gender'
    IGNORE
  VALUE 'CustomerQuote/Gender/$'
    CustomerQuote.Gender := #XML_VALUE
*
  VALUE 'CustomerQuote/QuoteType//'
    IGNORE
  VALUE 'CustomerQuote/QuoteType'
    IGNORE
  VALUE 'CustomerQuote/QuoteType/$'
    CustomerQuote.QuoteType := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/ContactID//'
    IGNORE
  VALUE 'CustomerQuote/ContactID'
    IGNORE
  VALUE 'CustomerQuote/ContactID/$'
    CustomerQuote.ContactId := VAL(#XML_VALUE)
*   NG1   \/
  VALUE 'CustomerQuote/IsWidowOfServedInMilitary//'
    IGNORE
  VALUE 'CustomerQuote/IsWidowOfServedInMilitary'
    IGNORE
  VALUE 'CustomerQuote/IsWidowOfServedInMilitary/$'
    IF #XML_VALUE = 'true'
      CustomerQuote.MilitaryWidow := TRUE
    ELSE
      CustomerQuote.MilitaryWidow := FALSE
    END-IF
*  NG1    /\
  VALUE 'CustomerQuote/QuickQuoteAmount//'
    IGNORE
  VALUE 'CustomerQuote/QuickQuoteAmount'
    IGNORE
  VALUE 'CustomerQuote/QuickQuoteAmount/$'
    CustomerQuote.QuickQuoteAmount := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/IsNicotine//'
    IGNORE
  VALUE 'CustomerQuote/IsNicotine'
    IGNORE
  VALUE 'CustomerQuote/IsNicotine/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'true'
      CustomerQuote.IsNicotine := TRUE
    ELSE
      CustomerQuote.IsNicotine := FALSE
    END-IF
    /*
  VALUE 'CustomerQuote/MilitaryService//'
    IGNORE
  VALUE 'CustomerQuote/MilitaryService'
    IGNORE
  VALUE 'CustomerQuote/MilitaryService/$'
    CustomerQuote.MilitaryService := #XML_VALUE
  VALUE 'CustomerQuote/MilitaryStatus//'
    IGNORE
  VALUE 'CustomerQuote/MilitaryStatus'
    IGNORE
  VALUE 'CustomerQuote/MilitaryStatus/$'
    CustomerQuote.MilitaryStatus := #XML_VALUE
  VALUE 'CustomerQuote/Rank//'
    IGNORE
  VALUE 'CustomerQuote/Rank'
    IGNORE
  VALUE 'CustomerQuote/Rank/$'
    CustomerQuote.Rank := #XML_VALUE
  VALUE 'CustomerQuote/State//'
    IGNORE
  VALUE 'CustomerQuote/State'
    IGNORE
  VALUE 'CustomerQuote/State/$'
    CustomerQuote.State := #XML_VALUE
  VALUE 'CustomerQuote/ErrorCode//'
    IGNORE
  VALUE 'CustomerQuote/ErrorCode'
    IGNORE
  VALUE 'CustomerQuote/ErrorCode/$'
    CustomerQuote.ErrorCode := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/ErrorDescription//'
    IGNORE
  VALUE 'CustomerQuote/ErrorDescription'
    IGNORE
  VALUE 'CustomerQuote/ErrorDescription/$'
    CustomerQuote.ErrorDescription := #XML_VALUE
  VALUE 'CustomerQuote/Products//'
    IGNORE
  VALUE 'CustomerQuote/Products'
    IGNORE
  VALUE 'CustomerQuote/Products/Product//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product'
    ADD 1 TO CustomerQuote.C@Product
    #CX := CustomerQuote.C@Product
    EXPAND ARRAY CustomerQuote.Product TO (1:#CX)
  VALUE 'CustomerQuote/Products/Product/Name//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Name'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Name/$'
    CustomerQuote.Name(#CX) := #XML_VALUE
  VALUE 'CustomerQuote/Products/Product/Code//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Code'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Code/$'
    CustomerQuote.Code(#CX) := #XML_VALUE
  VALUE 'CustomerQuote/Products/Product/Description//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Description'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Description/$'
    CustomerQuote.Description(#CX) := #XML_VALUE
  VALUE 'CustomerQuote/Products/Product/PremiumDuration//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/PremiumDuration'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/PremiumDuration/$'
    CustomerQuote.PremiumDuration(#CX) := #XML_VALUE
  VALUE 'CustomerQuote/Products/Product/Eligibility//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Eligibility'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Eligibility/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'true'
      CustomerQuote.Eligibility(#CX) := TRUE
    ELSE
      CustomerQuote.Eligibility(#CX) := FALSE
    END-IF
    /*
  VALUE 'CustomerQuote/Products/Product/LevelTermType//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/LevelTermType'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/LevelTermType/$'
    CustomerQuote.LevelTermType(#CX) := #XML_VALUE
  VALUE 'CustomerQuote/Products/Product/Term//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Term'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Term/$'
    CustomerQuote.Term(#CX) := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/Products/Product/Rider//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Rider'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Rider/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'true'
      CustomerQuote.Rider(#CX) := TRUE
    ELSE
      CustomerQuote.Rider(#CX) := FALSE
    END-IF
    /*
  VALUE 'CustomerQuote/Products/Product/Renewable//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Renewable'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Renewable/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'true'
      CustomerQuote.Renewable(#CX) := TRUE
    ELSE
      CustomerQuote.Renewable(#CX) := FALSE
    END-IF
    /*
  VALUE 'CustomerQuote/Products/Product/RatedClass//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/RatedClass'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/RatedClass/$'
    CustomerQuote.RatedClass(#CX) := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/Products/Product/Succeeded//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Succeeded'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Succeeded/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'true'
      CustomerQuote.Succeeded(#CX) := TRUE
    ELSE
      CustomerQuote.Succeeded(#CX) := FALSE
    END-IF
    /*
  VALUE 'CustomerQuote/Products/Product/ErrorDesc//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/ErrorDesc'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/ErrorDesc/$'
    CustomerQuote.ErrorDesc(#CX) := #XML_VALUE
  VALUE 'CustomerQuote/Products/Product/Packages//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage'
    ADD 1 TO CustomerQuote.C@QuotePackage(#CX)
    #CY := CustomerQuote.C@QuotePackage(#CX)
    EXPAND ARRAY CustomerQuote.QuotePackage TO (*,1:#CY)
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/FaceAmount//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/FaceAmount'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/FaceAmount/$'
    CustomerQuote.FaceAmount(#CX,#CY) := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/Premium//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/Premium'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/Premium/$'
    CustomerQuote.Premium(#CX,#CY) := VAL(#XML_VALUE)
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/RefundAmount//'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/RefundAmount'
    IGNORE
  VALUE 'CustomerQuote/Products/Product/Packages/QuotePackage/RefundAmount/$'
    CustomerQuote.RefundAmount(#CX,#CY) := VAL(#XML_VALUE)
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
