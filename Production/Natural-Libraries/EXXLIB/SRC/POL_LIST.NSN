* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Web Application Online
* Member Information module
*
********************************************************
*        MODIFICATION LOG
********************************************************
* USER   DATE      TAG  REASON
* YAK    03092009       Initial Creation
********************************************************
*
DEFINE DATA PARAMETER
*
1 REQUEST-DATA      (A1024)
1 RESPONSE-DATA     (A1024)        /* Out
1 RETURN-CODE       (A4)           /* Out
1 RETURN-MESSAGE    (A100)         /* Out
*
LOCAL USING OBJLGENT
LOCAL USING PARSER-X
LOCAL
1 XML_PARSER_XPATH             (A) DYNAMIC
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_CONTENT           (A) DYNAMIC
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 XML_PARSER_INPUT   (A) DYNAMIC
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I2)
LOCAL
1 ST-V VIEW OF A-STATUS
  2 C*ACTIVE-SEGMENTS
  2 STATUS        (A1/9)
  2 ISSUE-DATE    (N8/9)
  2 NUM-MBRSHIPS  (N1/9)
  2 POL-NUM-PRE   (A4/9)
  2 POL-NUM-SUF   (A5/9)
*
1 #I             (I2)
1 #CN            (A) DYNAMIC
1 #ID-NUMBER     (N6)
1 #SEC-ID-NUMBER (N6)
1 #POL-NUMBER    (A) DYNAMIC
1 #LOOK-UP-KEY   (A7) CONST <'CODE999'>
END-DEFINE
*
* '<Member><InsuredCN>112056</InsuredCN></Member>'
*
XML_PARSER_INPUT := REQUEST-DATA
INCLUDE PARSER_X 'XML_PARSER_INPUT' /* XML file to be parsed
  'XML_PARSER_XPATH'                /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  'XML_PARSER_CONTENT'              /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
************************** CALLBACK HANDLER
DEFINE SUBROUTINE CALLBACK
**************************
*
DECIDE ON FIRST XML_PARSER_XPATH
  VALUE 'Member'
    IGNORE
  VALUE 'Member/InsuredCN/$'
    #CN := *TRIM(XML_PARSER_CONTENT)
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE PARSER_ERROR
******************************
COMPRESS XML_PARSER_RESPONSE XML_PARSER_ERROR_TEXT INTO RESPONSE-DATA
ESCAPE ROUTINE
END-SUBROUTINE
*
#ID-NUMBER := VAL(#CN)
COMPRESS '<Member><InsuredCN>' #CN '</InsuredCN><PolicyList>' INTO RESPONSE-DATA LEAVING NO
PERFORM CREATE-POLICY-LIST
* Check if this person has another CN
FIND GEN-TABLE-V WITH SEC-KEY = #LOOK-UP-KEY
  ACCEPT IF GEN-NUMBER-VALUE = #ID-NUMBER
  #SEC-ID-NUMBER := VAL(ADDL-INFO)
END-FIND
IF #SEC-ID-NUMBER <> 0
  #ID-NUMBER := #SEC-ID-NUMBER
  PERFORM CREATE-POLICY-LIST
END-IF

* if yes get the list for the second one
*
COMPRESS RESPONSE-DATA '</PolicyList></Member>' INTO RESPONSE-DATA LEAVING NO
RETURN-MESSAGE := 'success'
RETURN-CODE    := '0000'
*
**==================================
DEFINE SUBROUTINE CREATE-POLICY-LIST
**==================================
*
FIND(1) ST-V WITH ID-NUMBER = #ID-NUMBER
  FOR #I = 1 TO C*ACTIVE-SEGMENTS
    IF STATUS(#I) <> 'D'
      ESCAPE TOP
    END-IF 
    IF ISSUE-DATE(#I) GE 19941201
      COMPRESS #ID-NUMBER '-' NUM-MBRSHIPS(#I)
       INTO #POL-NUMBER LEAVING NO
    ELSE
      COMPRESS POL-NUM-PRE(#I) #ID-NUMBER POL-NUM-SUF(#I) INTO #POL-NUMBER LEAVING NO
    END-IF
    COMPRESS RESPONSE-DATA '<PolicyNumber>' #POL-NUMBER '</PolicyNumber>'
      INTO RESPONSE-DATA LEAVING NO
  END-FOR
END-FIND
END-SUBROUTINE
*
END
