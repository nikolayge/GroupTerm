* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* Web Charge Module - called via EntireX
* WCCNCC11 - calculates all charges/transactions for
*            the CN number passed from the Website
* Called from    - WCCNCC10
* Parm Data Area - WCCA0011
********************************************************
*        MODIFICATION LOG
********************************************************
* USER   DATE      TAG  REASON
* YAK    07012009       Initial Creation
* YAK    15012009  YK1  Add field to indicate that payment
*                       cannot exceed due amount displayed
*                       (currently used for loan payments)
* YAK    12102010  YK2  Increase #CC-AMT and #DEFAULT-AMT fields
*                       from N5.2 to N6.2. Also increase the
*                       corresponding fields in WCCA0011
* YAK    12102010  YK3  Correct MAX-PREMIUM logic
*                       Escape routine if MAX-PREMIUM <= 0
* YAK    01042011  YK4  Correct default amount for CAP loans
* YAK    01052011  YK5  Allow to pay dues when paying by allotment
*                       and premiums are behind
* YAK    01042012  YK6  Changes for Premier services
* YAK    03232012  YK7  Attach Debit/Credit (if present) to
*                       the last available policy
* YAK    06132012  YK8  Use current year (not loan issue year) to
*                       compile a loan note to display in WebCharge/MC
* YAK    07242012  YK9  Fix logic for Allotment (Should not be allowed
*                       to pay for current month).
* YAK    03032014  YK10 Add Survivor Assistance Services
* NGG    10232014  NG2  Multiple services
* YAK    01022015  YK11 Correct paid to date for CAP loans
* YAK    01122015  YK12 Changes for MC-II
* YAK    04072016  YK13 Use Policy id from Status file
* YAK    01202017  YK14 Correct calculation of MAX payments
* YAK    05022017  YK15 Correct calculation of MAX payments for Allotment
* YAK    07022017  YK16 Add non-payment mode (Group Term)
* YAK    10202017  YK17 Correct "Paid thru" date for CAP loans
*                       Add 'Allotment Waiting' status for loans         
**********************************************************************
*
DEFINE DATA
PARAMETER USING WCCA0011
PARAMETER
1 ERROR-MESSAGE       (A100)
LOCAL USING OBJLSTAT
LOCAL USING SVCA0003                           /* YK6
LOCAL
*
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER
  2 C*NOTE-TABLE
  2 NOTE-TEXT(1000)
*
1 SVC-V VIEW OF A-SVC-MEMBER                   /* NG2
  2 SVC-PLAN
*
1 #NXT                (L)
1 #WORK-AMT           (N5.4)
1 #PDUP-MM            (N2)
1 #SUFFIX             (A3)
1 #TAB                (A1) INIT <H'09'>
1 #CC-AMT             (N6.2)                   /* YK2
1 #DEFAULT-AMT        (N6.2)                   /* YK2
1 #PAY-FREQUENCY      (N2)
1 #PREM-AMT           (N5.2)
1 #DATE-A             (A20)
1 #CC-EXP-DT          (A4)
1 REDEFINE #CC-EXP-DT
  2 #CC-EXP-MONTH     (A2)
  2 #CC-EXP-YEAR      (A2)
1 #CC-EXP-CENTURY     (A2)  INIT <'20'>
1 #CC-EXP-DAY         (A2)  INIT <'01'>
1 #CC-NUMBER          (A16)
*
1 #LOAN-BAL   (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT    (N7.2/9)
1 #ACC-INT-2  (N7.2/9)
1 #CSV        (N7.2/9)
1 #CVALUE     (N7.2/9)
1 #LVALUE     (N7.2/9)
1 #MCSV       (N7.2/9)
1 #DB         (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #FACE-AMT    (N7.2/9)
1 #TPP         (N7.2/9)
1 #P-I        (N7.2)
1 #AMOUNT-A   (A) DYNAMIC
*
1 #POL-NUM   (A16)
1 #SVC-FEE    (N3.2)
1 #TRAN-TYPE             (A4)
1 #DATE                  (A) DYNAMIC
1 #RATE                  (A) DYNAMIC
1 #PAY-MODE              (A1)
* 1 ##PAID-TO-DATE         (N8)   /* Date used to calculate charges (1 month back)    YK14
1 #PAID-TO-DATE          (N8)   /* Display Date (can be zero)
1 #HOLD-PAID-TO-DATE     (N8)   /* Paid to date from the system
1 #RID-PD-TO             (N8)   /* Date used to calculate charges for rider
1 REDEFINE #RID-PD-TO
  2 #RID-PD-TO-YYYY      (N4)
  2 #RID-PD-TO-MM        (N2)
  2 #RID-PD-TO-DD        (N2)
1 #G-DATE                (N8)   /* Date to determine if Allotment is behind schedule YK9
1 #PAYMENT-NOTE          (A) DYNAMIC
1 #CAP-LOAN              (L)
1 #INTEREST-RATE         (N7.4)
1 #ISN                   (P8)
*
* Linkage to GRIDCSXX below
1 #ID         (N6)
* THE FOLLOWING INPUT IS PASSED ONLY ON AN "AT" FOR A NEW RIDER
1 #AT-RID-ATTACH-FAC-AMT (N6.2) /* Only if attached to the new "AT"
1 #AT-RID-ATTACH-PLAN    (A3)   /*    policy not yet created
1 #AT-RID-PLAN           (A2/5) /* New rider plan
1 #AT-RID-ATTACH-ISS-DT  (N8/5) /* Only if attached to an existing pol
* output below  (ex = existing)
1 #AT-TOT-FBR-PREM        (N3.2)
1 #EX-FBR-PREM-BY-LINE    (N3.2/9)
1 #EX-SPS-DB-BY-LINE      (N6/9)
1 #EX-DEP-DB-BY-LINE      (N6/9)
1 #EX-EACH-DEP-DB-BY-LINE (N6/9)
1 #NUM-ELIG-CHILDREN      (N2)
1 #NUM-ELIG-CHILDREN-UNDER-6-MON (N2)
1 #TOT-CHILD-DB      (N6)
1 #RID-TEXT          (A78)
* above is linkage to GRIDCSXX
*
1 #TRUE             (A1) INIT <'T'>
1 #FALSE            (A1) INIT <'F'>
1 #I1               (I2)
1 #I2               (I2)
1 #I3               (I2)
1 #I                (I2)
*
1 #YYYYMMDD        (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM        (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY          (N4)
    3 #MM            (N2)
  2 #DD            (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A   (A8)
*
1 #PARM-DATE          (A8)
1 REDEFINE #PARM-DATE
  2 #PARM-DATE-N      (N8)
  2 REDEFINE #PARM-DATE-N
    3 #PARM-DATE-N-Y  (N4)
1 #LOAN-ANN-DATE      (N8)
1 REDEFINE #LOAN-ANN-DATE
  2 #LOAN-ANN-DATE-Y  (N4)
1 #N                  (N2)
* Used for Passed Due Premiums/Dues calculation
1 #1MON-AGO           (N6)
1 #ERROR-LOG          (A100)
1 #MEMBER-KEY         (A7)
1 REDEFINE #MEMBER-KEY
  2 #ID-NUMBER        (N6)
1 #SRV-PREM-TRAN      (A6) CONST <'DUEPPS'>                /* YK6
1 #SRV-ONE-TIME-FEE   (A6) CONST <'DUEP1T'>                /* YK6
1 #SRV-REACT-FEE      (A6) CONST <'DUEPRF'>                /* YK6
1 #SAS-ONE-TIME-FEE   (A6) CONST <'DUEP1S'>                /* YK10
1 #SAS-PREM-TRAN      (A6) CONST <'DUEPSS'>                /* YK10
1 #GET-PAYMENT        (A) DYNAMIC CONST <'GET'>            /* YK6
1 #SERVICE            (A) DYNAMIC CONST <'Service Plan'>   /* YK6
1 #ERROR-CODE         (A) DYNAMIC                          /* YK6
1 #COMPANY            (A2)
1 #MAX-DUE            (P7.2)
1 #BILLED-INTEREST    (N7.2)                               /* YK12
1 #NON-PAY-MODE       (A) DYNAMIC CONST <'B'>              /* YK16
*
END-DEFINE
*
#YYYYMMDD := #PARM-DATE := CC-PAYMENT.PARM-DATE /* *DATN
#MM := #MM - 1
IF #MM LT 1
  #MM   := #MM + 12
  #YYYY := #YYYY - 1
END-IF
MOVE #YYYYMM TO #1MON-AGO
#DATE := FUNCTION-CALENDAR(<#PARM-DATE-N,'U'>)
#G-DATE := VAL(#DATE)
*
* Create CC trans to RETURN to PayWare
*
#ID-NUMBER := CC-PAYMENT.ID-NUMBER
FIND.
FIND(1) ST-V WITH ID-NUMBER = #ID-NUMBER
  IF NO RECORDS FOUND
    COMPRESS '1011' 'Record with CN number' #ID-NUMBER
      'not found on the database' INTO ERROR-MESSAGE
    ESCAPE ROUTINE IMMEDIATE
  END-NOREC
  #ISN := *ISN
*
  CC-PAYMENT.INSURED-NAME  := ST-V.NAME
  VAR-AMOUNT(*,*)   := #FALSE
  EXCEED-AMT(*,*)   := #TRUE          /* YK1
*  NG2 wrap the GET-SERVICE-PAYMENT
  FIND SVC-V WITH SVC-ID-NUMBER = CC-PAYMENT.ID-NUMBER
    RESET PARM-SVC
    PARM-SVC.SVC-PLAN := SVC-V.SVC-PLAN
    PERFORM GET-SERVICE-PAYMENT         /* YK6
  END-FIND
*
  FOR #I1 = 1 TO C*ACTIVE-SEGMENTS
    IF STATUS (#I1) NE  'D' OR ST-V.MODE(#I1) = #NON-PAY-MODE        /* YK16
      ESCAPE TOP
    END-IF
    #I2 := #I2 + 1
    RESET #I3
*    CALLNAT 'GPLNMSXX' #POL-NUM ST-V.ID-NUMBER #I1          /* YK13
*    #POL-NUM := FUNCTION-POLICY-NUMBER(<ST-V.ID-NUMBER,ST-V.ISSUE-DATE(#I1),
*                ST-V.NUM-MBRSHIPS(#I1),POL-NUM-PRE(#I1),POL-NUM-SUF(#I1)>)
*   CC-PAYMENT.POLICY-NBR(#I2)  := #POL-NUM                  /* YK13
    CC-PAYMENT.POLICY-NBR(#I2)  := ST-V.POLICY-ID(#I1)       /* YK13
    CC-PAYMENT.PLAN-TYPE(#I2)   := ST-V.PLAN(#I1)
    CC-PAYMENT.ISSUE-DATE(#I2)  := ST-V.ISSUE-DATE(#I1)
    CC-PAYMENT.FACE-AMOUNT(#I2) := ST-V.FACE-AMOUNT(#I1)
    IF CONV-DURATION (#I1) = 999 AND X-LOAN-AMOUNT(#I1) > 0
      #CAP-LOAN := TRUE
    END-IF
*
    #PAY-FREQUENCY := F-PAY-MONTHS(<MODE(#I1)>)   /* YK6
* Set rules for different payment modes
    DECIDE ON FIRST VALUE MODE (#I1)
      VALUE '0','M'
        CC-PAYABLE(#I2,*) := #TRUE
      VALUE 'E'
        CC-PAYABLE(#I2,*) := #TRUE                /* Mode - Eazy Pay - allowed to pay
      VALUE '4','Q'
        CC-PAYABLE(#I2,*) := #TRUE
      VALUE '2','S'
        CC-PAYABLE(#I2,*) := #TRUE
      VALUE '1','A'
        CC-PAYABLE(#I2,*) := #TRUE
      VALUE 'G'
        IF PAY-STATUS (#I1) = '21'                /* GAWT - Pending Allotment allowed
          CC-PAYABLE(#I2,*) := #TRUE
        ELSE
          CC-PAYABLE(#I2,*) := #FALSE            /*  Mode - Allotment not allowed to pay
        END-IF
      NONE
        COMPRESS '1012' 'Record with CN number' #ID-NUMBER
          'has invalid Payment Mode - check IAS' INTO ERROR-MESSAGE
        ESCAPE ROUTINE IMMEDIATE
    END-DECIDE
    #PREM-AMT := ANNUAL-PREM(#I1) / 12           /* Monthly Premium
*
* FPF / FPF Rider Dues processing
    PERFORM PROCESS-FPF-DUE
* Premium Processing
    CALLNAT 'GPDTOSXX'
      ST-V.ISSUE-DATE (#I1)
      ST-V.MONTH-ALLOC-AMT (#I1)
      ST-V.PAID-TO-DATE (#I1)
      #HOLD-PAID-TO-DATE             /* YK14
*     ##PAID-TO-DATE
    CALLNAT 'GDUESSXX' ST-V.ID-NUMBER #I1 #SVC-FEE
* YK14 >
*   #HOLD-PAID-TO-DATE := ##PAID-TO-DATE
*   #DATE-A        := FUNCTION-CALENDAR(<##PAID-TO-DATE,'P'>) /* one month back
*   ##PAID-TO-DATE := VAL(#DATE-A)
* > YK14
    PERFORM PROCESS-PREMS-DUES-RIDER
*
*   LOAN PAYMENT PROCESSING FOLLOWS
*
* If CAP Loan - Check for bankruptcy
    IF #CAP-LOAN
      FIND(1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
        EXAMINE NOTE-TEXT(*) FOR 'Mbr in bnkrptcy' INDEX #I
      END-FIND
      IF #I NE 0
        C@AVAILABLE-PAYMENT(#I2) := #I3
        ESCAPE TOP
      END-IF
    END-IF
*
    DECIDE FOR FIRST CONDITION
      WHEN X-ALT-LP-IND (#I1)   = '8'          /* FIXED AUTO LOAN PMT
          AND (X-LOAN-AMOUNT (#I1) NE 0)
        #PAY-MODE     := '0'                   /* Credit card
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND-2 (#I1) = '8'          /* VAR AUTO LOAN PMT
          AND X-LOAN-AMOUNT-2 (#I1) NE 0
        #PAY-MODE     := '0'                   /* Credit card
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND (#I1)   = 'C'          /* CAP AUTO LOAN PMT
          AND (X-LOAN-AMOUNT (#I1) NE 0)
        #PAY-MODE     := '0'                   /* Credit card
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND (#I1)   = '3' OR = '4' /* FIXED AUTO LOAN PMT
          AND X-LOAN-AMOUNT (#I1) NE 0
        #PAY-MODE     := 'E'                   /* Eazy Pay
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND-2 (#I1) = '3' OR = '4' /* VAR AUTO LOAN PMT
          AND X-LOAN-AMOUNT-2 (#I1) NE 0
        #PAY-MODE     := 'E'                   /* Eazy Pay
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND (#I1)   = '6'          /* FIXED AUTO LOAN PMT
          AND X-LOAN-AMOUNT (#I1) NE 0
        #PAY-MODE     := 'M'                   /* Direct Bill
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND-2 (#I1) = '6'          /* VAR AUTO LOAN PMT
          AND X-LOAN-AMOUNT-2 (#I1) NE 0
        #PAY-MODE     := 'M'                   /* Direct Bill
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND (#I1)   = '1' OR = '2' OR = '9' /* FIXED AUTO LOAN PMT  /* YK17
          AND X-LOAN-AMOUNT (#I1) NE 0
        #PAY-MODE := 'G'                       /* Allotment
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-ALT-LP-IND-2 (#I1) = '1' OR = '2' OR = '9' /* VAR AUTO LOAN PMT    /* YK17
          AND X-LOAN-AMOUNT-2 (#I1) NE 0
        #PAY-MODE := 'G'                       /* Allotment
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN X-LOAN-AMOUNT (#I1) NE 0 OR
          X-LOAN-AMOUNT-2 (#I1) NE 0
        #PAY-MODE := 'N'
        PERFORM PROCESS-AUTO-LOAN-PMTS
      WHEN NONE
        IGNORE
    END-DECIDE
    IF #I3 NE 0
      C@AVAILABLE-PAYMENT(#I2) := #I3
    ELSE
      #I2 := #I2 - 1
    END-IF
  END-FOR
  C@PAY-POLICY             := #I2
*
* Check Debit-Credit Amount
*
  IF #I2 NE 0 AND DEBIT-CREDIT-AMT NE 0
*   #I3          := #I3 + 1                                 /* YK7
    #I3          := C@AVAILABLE-PAYMENT(#I2) + 1            /* YK7
    #DEFAULT-AMT := #CC-AMT := DEBIT-CREDIT-AMT
    IF #CC-AMT < 0
      #TRAN-TYPE  := 'RDCR'
    ELSE
      #TRAN-TYPE  := 'ADCR'
    END-IF
    RESET #PAYMENT-NOTE #PAY-MODE
    #PAID-TO-DATE := 0
    VAR-AMOUNT(#I2,#I3) := #TRUE
    CC-PAYABLE(#I2,#I3) := #TRUE
    PERFORM ADD-CC-CHARGE
    C@AVAILABLE-PAYMENT(#I2) := #I3
  END-IF
END-FIND
*
* RESIZE ARRAY PAY-POLICY TO (1:C@PAY-POLICY)
*
*************************************
DEFINE SUBROUTINE GET-SERVICE-PAYMENT  /* YK6 Start
*************************************
*
RESET #I3
PARM-SVC.ACTION         := #GET-PAYMENT
PARM-SVC.SVC-MEMBER-ID  := CC-PAYMENT.ID-NUMBER
CALLNAT 'SVCN0003' PARM-SVC #ERROR-CODE
  #COMPANY #MAX-DUE
IF PARM-SVC.SVC-PLAN <> ' ' AND PARM-SVC.SVC-TOTAL-DUE <> 0
  #I2 := #I2 + 1
  CC-PAYMENT.POLICY-NBR(#I2) := #SERVICE
  CC-PAYMENT.PLAN-TYPE(#I2)  := PARM-SVC.SVC-PLAN
  CC-PAYMENT.ISSUE-DATE(#I2) := PARM-SVC.SVC-ISSUE-DATE
  RESET CC-PAYMENT.FACE-AMOUNT(#I2)
  DECIDE FOR EVERY CONDITION
    WHEN SVC-ONE-TIME-FEE <> 0
      #I3 := #I3 + 1
      RESET CC-PAYMENT.MIN-PREMIUMS(#I2)
        CC-PAYMENT.DEFAULT-PREM(#I2)
        CC-PAYMENT.MAX-PREMIUMS(#I2)
      CC-PAYMENT.DUE-AMOUNT(#I2,#I3)    := PARM-SVC.SVC-ONE-TIME-FEE
      CC-PAYMENT.DEFAULT-AMOUNT(#I2,#I3):= PARM-SVC.SVC-ONE-TIME-FEE
      IF PARM-SVC.SVC-PLAN EQ 'PSM'
        CC-PAYMENT.TRAN-TYPE(#I2,#I3)   := #SRV-ONE-TIME-FEE
      END-IF
      CC-PAYABLE(#I2,#I3)               := #TRUE
      CC-PAYMENT.PAYMENT-MODE(#I2,#I3)  := PARM-SVC.SVC-MODE
      CC-PAYMENT.PAID-TO-DATE(#I2,#I3)  := PARM-SVC.SVC-ISSUE-DATE
      VAR-AMOUNT(*,*)   := #TRUE
      EXCEED-AMT(*,*)   := #FALSE
      RESET CC-PAYMENT.PAYMENT-NOTE(#I2,#I3)
    WHEN SVC-REACTIVATION-FEE <> 0
      #I3 := #I3 + 1
      RESET CC-PAYMENT.MIN-PREMIUMS(#I2)
        CC-PAYMENT.DEFAULT-PREM(#I2)
        CC-PAYMENT.MAX-PREMIUMS(#I2)
      CC-PAYMENT.DUE-AMOUNT(#I2,#I3)    := PARM-SVC.SVC-REACTIVATION-FEE
      CC-PAYMENT.DEFAULT-AMOUNT(#I2,#I3):= PARM-SVC.SVC-REACTIVATION-FEE
      CC-PAYMENT.TRAN-TYPE(#I2,#I3)     := #SRV-REACT-FEE
      CC-PAYABLE(#I2,#I3)               := #TRUE
      CC-PAYMENT.PAYMENT-MODE(#I2,#I3)  := PARM-SVC.SVC-MODE
      CC-PAYMENT.PAID-TO-DATE(#I2,#I3)  := #PARM-DATE-N
      RESET CC-PAYMENT.PAYMENT-NOTE(#I2,#I3)
    WHEN (SVC-AMOUNT-DUE <> 0 OR SVC-ARREARS-FEE <> 0)
        AND (SVC-AMOUNT-DUE <> SVC-ONE-TIME-FEE)
      #I3 := #I3 + 1
      PARM-SVC.SVC-AMOUNT-DUE      := PARM-SVC.SVC-AMOUNT-DUE + PARM-SVC.SVC-ARREARS-FEE
      CC-PAYMENT.DEFAULT-PREM(#I2) := PARM-SVC.SVC-AMOUNT-DUE / PARM-SVC.SVC-MONTHLY-RATE
      CC-PAYMENT.MIN-PREMIUMS(#I2) := PARM-SVC.SVC-ARREARS-FEE / PARM-SVC.SVC-MONTHLY-RATE
      IF CC-PAYMENT.MIN-PREMIUMS(#I2) = 0
        CC-PAYMENT.MIN-PREMIUMS(#I2):= 1
      END-IF
      IF #MAX-DUE > 0
        CC-PAYMENT.MAX-PREMIUMS(#I2) := #MAX-DUE / PARM-SVC.SVC-MONTHLY-RATE
      ELSE
        CC-PAYMENT.MAX-PREMIUMS(#I2) := 12
      END-IF
/*                     Amount by MODE
      CC-PAYMENT.DEFAULT-AMOUNT(#I2,#I3):= PARM-SVC.SVC-AMOUNT-DUE
      DECIDE ON FIRST VALUE PARM-SVC.SVC-PLAN
        VALUE 'PSM'
          CC-PAYMENT.TRAN-TYPE(#I2,#I3) := #SRV-PREM-TRAN
        VALUE 'SAS'
          CC-PAYMENT.TRAN-TYPE(#I2,#I3) := #SAS-PREM-TRAN
        NONE VALUE
          IGNORE
      END-DECIDE
      CC-PAYABLE(#I2,#I3)               := #TRUE
      CC-PAYMENT.PAYMENT-MODE(#I2,#I3)  := PARM-SVC.SVC-MODE
/*                      Monthly Rate
      CC-PAYMENT.DUE-AMOUNT(#I2,#I3)    := PARM-SVC.SVC-MONTHLY-RATE
      CC-PAYMENT.PAID-TO-DATE(#I2,#I3)  := PARM-SVC.SVC-PAID-TO-DATE
    WHEN NONE
      IGNORE
  END-DECIDE
  C@AVAILABLE-PAYMENT(#I2) := #I3
  C@PAY-POLICY             := #I2
END-IF
*
END-SUBROUTINE                         /* YK6 End
*
*********************************
DEFINE SUBROUTINE PROCESS-FPF-DUE
*********************************
*     FPF/FPF-Rider Due
*
IF X-FIRST-PLACE-FEE (#I1) NE 0
  #I3           := #I3 + 1
  #DEFAULT-AMT  := #CC-AMT := X-FIRST-PLACE-FEE (#I1)
  #TRAN-TYPE    := 'FPFP'
  RESET #PAYMENT-NOTE
  #PAY-MODE     := MODE(#I1)
  #PAID-TO-DATE := ST-V.ISSUE-DATE(#I1)
  VAR-AMOUNT(#I2,#I3) := #FALSE
  CC-PAYABLE(#I2,#I3) := #TRUE
  PERFORM ADD-CC-CHARGE
END-IF
*
IF X-RID-FPF (#I1) NE 0
  #I3           := #I3 + 1
  #DEFAULT-AMT  := #CC-AMT := X-RID-FPF (#I1)
  #TRAN-TYPE    := 'FPRP'
  RESET #PAYMENT-NOTE
  #PAY-MODE     := MODE(#I1)
  #PAID-TO-DATE := ST-V.ISSUE-DATE(#I1)
  VAR-AMOUNT(#I2,#I3) := #FALSE
  CC-PAYABLE(#I2,#I3) := #TRUE
  PERFORM ADD-CC-CHARGE
END-IF
*
END-SUBROUTINE
*
******************************************
DEFINE SUBROUTINE PROCESS-PREMS-DUES-RIDER
******************************************
*
* Show Billing Adjustment if applicable
*
RESET #CC-AMT
IF X-BILL-ADJUST (#I1) NE 0
  #DEFAULT-AMT  := #CC-AMT := X-BILL-ADJUST (#I1)
  #I3           := #I3 + 1
  #TRAN-TYPE    := 'BADJ'
  #PAY-MODE     := MODE(#I1)
  VAR-AMOUNT(#I2,#I3) := #FALSE
  CC-PAYABLE(#I2,#I3) := #TRUE
  #PAID-TO-DATE       := 0
  PERFORM ADD-CC-CHARGE
END-IF
*
*     Premiums / Dues
*
RESET #PAYMENT-NOTE #CC-AMT
IF PAY-STATUS (#I1) NE '22'
    AND X-FIRST-PLACE-FEE (#I1) = 0
  COMPRESS 'Pay-Status is not "Premium Pay" for this policy'
    INTO #PAYMENT-NOTE
END-IF
*
* Check if policy was paid-up but status has not been changed yet (ME process)
IF ST-V.PAY-STATUS(#I1) > '40' OR
    ST-V.PAID-TO-DATE-YYYYMM(#I1) >= ST-V.PAID-UP-DATE-YYYYMM(#I1)
  ESCAPE ROUTINE
END-IF
*
* MOVE ##PAID-TO-DATE TO #YYYYMMDD             /* YK14
MOVE #HOLD-PAID-TO-DATE TO #YYYYMMDD           /* YK14
* calculate MAX-PREMIUMS for the policy
MAX-PREMIUMS(#I2) := (ST-V.PAID-UP-DATE-YYYY(#I1) - #YYYY) * 12
MAX-PREMIUMS(#I2) := MAX-PREMIUMS(#I2) + ST-V.PAID-UP-DATE-MM(#I1) - #MM
*
IF (FUNCTION-TERM-POLICY(<PLAN(#I1)>) OR MEC-IND(#I1) NE ' ')
  IGNORE
ELSE
  MAX-PREMIUMS(#I2) := FUNCTION-MEC-CONDITION(<#ISN,#I1,#PREM-AMT,MAX-PREMIUMS(#I2)>)
END-IF
* YK3 - Correct logic for Max premiums
IF MAX-PREMIUMS(#I2) <= 0
  ESCAPE ROUTINE
END-IF
IF MAX-PREMIUMS(#I2) > 12
  MAX-PREMIUMS(#I2) := 12
END-IF
IF #PAY-FREQUENCY > MAX-PREMIUMS(#I2)
  DEFAULT-PREM(#I2) := MAX-PREMIUMS(#I2)
ELSE
  DEFAULT-PREM(#I2) := #PAY-FREQUENCY
END-IF
* calculate MIN-PREMIUMS for the policy
REPEAT
  MIN-PREMIUMS(#I2) := MIN-PREMIUMS(#I2) + 1
  #MM := #MM + 1
  IF #MM GT 12
    #MM   := #MM - 12
    #YYYY := #YYYY + 1
  END-IF
  IF #YYYYMMDD GT #PARM-DATE-N
    ESCAPE BOTTOM
  END-IF
END-REPEAT
*
#I3                 := #I3 + 1
#PAID-TO-DATE       := #HOLD-PAID-TO-DATE   /* ##PAID-TO-DATE
IF (MODE(#I1) = 'G' AND #HOLD-PAID-TO-DATE < #G-DATE
    AND PAY-STATUS (#I1) NE '21')         /* YK1  YK9
  CC-PAYABLE(#I2,#I3) := #TRUE
* YK15 >
* Cannot be 0, since #HOLD-PAID-TO-DATE < #G-DATE
  IF MIN-PREMIUMS(#I2) > 1
    MAX-PREMIUMS(#I2) := MIN-PREMIUMS(#I2) - 1
    MIN-PREMIUMS(#I2) := 1
  ELSE
    MAX-PREMIUMS(#I2) := MIN-PREMIUMS(#I2) := 1
  END-IF
* < YK15
ELSE
  IF MIN-PREMIUMS(#I2) > 1
    MIN-PREMIUMS(#I2) := 1
  END-IF
END-IF
*
#CC-AMT         := #PREM-AMT
#DEFAULT-AMT    := #CC-AMT * DEFAULT-PREM(#I2)  /* #PAY-FREQUENCY
#TRAN-TYPE      := 'PREP'
#PAY-MODE       := MODE(#I1)
VAR-AMOUNT(#I2,#I3) := #FALSE
*
PERFORM ADD-CC-CHARGE
*
*     Dues Processing follows
*
CALLNAT 'GDUESSXX' ST-V.ID-NUMBER #I1 #SVC-FEE
IF #SVC-FEE NE 0
  #I3                   := #I3 + 1
  #CC-AMT               := #SVC-FEE
  #DEFAULT-AMT          := #CC-AMT * DEFAULT-PREM(#I2) /* #PAY-FREQUENCY
  #PAID-TO-DATE         := #HOLD-PAID-TO-DATE
  #TRAN-TYPE            := 'DUEP'
  #PAY-MODE             := MODE(#I1)
  VAR-AMOUNT(#I2,#I3)   := #FALSE
  IF (MODE(#I1) = 'G' AND #HOLD-PAID-TO-DATE < #G-DATE
      AND PAY-STATUS (#I1) NE '21')                  /* YK5  YK9
    CC-PAYABLE(#I2,#I3) := #TRUE
  END-IF
  PERFORM ADD-CC-CHARGE
END-IF
*
*     Rider Processing follows
*
IF RID-PLAN (#I1) NE ' '
  MOVE ST-V.ID-NUMBER TO #ID
  CALLNAT 'GRIDCSXX' USING
    #ID
    #AT-RID-ATTACH-FAC-AMT
    #AT-RID-ATTACH-PLAN
    #AT-RID-PLAN            (1:5)
    #AT-RID-ATTACH-ISS-DT   (1:5)
    #AT-TOT-FBR-PREM
    #EX-FBR-PREM-BY-LINE    (1:9)
    #EX-SPS-DB-BY-LINE      (1:9)
    #EX-DEP-DB-BY-LINE      (1:9)
    #EX-EACH-DEP-DB-BY-LINE (1:9)
    #NUM-ELIG-CHILDREN
    #NUM-ELIG-CHILDREN-UNDER-6-MON
    #TOT-CHILD-DB
    #RID-TEXT
*
  #CC-AMT := #EX-FBR-PREM-BY-LINE (#I1)
*
  #I3           := #I3 + 1
  #TRAN-TYPE    := 'RIDP'
  #PAY-MODE     := MODE(#I1)
  VAR-AMOUNT(#I2,#I3) := #FALSE
  IF #CC-AMT = 0
    CC-PAYABLE(#I2,#I3) := #FALSE
    #PAID-TO-DATE       := 0
  ELSE
    #DEFAULT-AMT := #CC-AMT * DEFAULT-PREM(#I2)  /* #PAY-FREQUENCY
  END-IF
  PERFORM ADD-CC-CHARGE
END-IF
*
END-SUBROUTINE
*
****************************************
DEFINE SUBROUTINE PROCESS-AUTO-LOAN-PMTS
****************************************
*
RESET #PAYMENT-NOTE #CC-AMT #BILLED-INTEREST
MOVE ST-V.FACE-AMOUNT (*) TO #FACE-AMT(*)
CALLNAT 'CVALUSXX'
  ST-V.ID-NUMBER
  #SUFFIX
  #PARM-DATE-N
  #LOAN-BAL   (1:9)
  #LOAN-BAL-2 (1:9)
  #ACC-INT    (1:9)
  #ACC-INT-2  (1:9)
  #CSV        (1:9)
  #CVALUE     (1:9)
  #LVALUE     (1:9)
  #MCSV       (1:9)
  #DB         (1:9)
  #ANN-PREMIUM  (1:9)
  #FACE-AMT   (1:9)
  #TPP        (1:9)
*
*
* Process Fixed Rate Loans
*
IF #ACC-INT (#I1) GT 0 OR X-LOAN-AMOUNT (#I1) > 0
  COMPUTE #P-I = #LOAN-BAL (#I1) + #ACC-INT (#I1)
  MOVE EDITED X-INTEREST-RATE(#I1) (EM=Z9.999) TO #RATE
  COMPRESS #RATE '%' INTO #RATE LEAVING NO
  #DATE := FUNCTION-CALENDAR(<X-LOAN-DATE(#I1),'S'>)
  COMPRESS #DATE ',' INTO #DATE LEAVING NO
  MOVE EDITED #P-I (EM=ZZZ,ZZ9.99) TO #AMOUNT-A
  COMPRESS '$' #AMOUNT-A ',' INTO #AMOUNT-A LEAVING NO
  COMPRESS 'For' #RATE ' fixed interest rate loan issued' #DATE 'with balance of'
    #AMOUNT-A INTO #PAYMENT-NOTE
  MOVE EDITED #ACC-INT(#I1) (EM=ZZZ,ZZ9.99) TO #AMOUNT-A
  IF #ACC-INT(#I1) < 0
    COMPRESS '-' #AMOUNT-A INTO #AMOUNT-A LEAVING NO
  END-IF
  COMPRESS '$' #AMOUNT-A INTO #AMOUNT-A LEAVING NO
  COMPRESS #PAYMENT-NOTE  'including ' #AMOUNT-A 'interest.' INTO #PAYMENT-NOTE
  IF X-BILL-INTEREST-AMT(#I1) > 0 AND X-BILL-SW(#I1) NE '0'
    MOVE EDITED X-BILL-INTEREST-AMT(#I1) (EM=ZZZ,ZZ9.99) TO #AMOUNT-A
    COMPRESS '$' #AMOUNT-A INTO #AMOUNT-A LEAVING NO
    #BILLED-INTEREST := X-BILL-INTEREST-AMT(#I1)         /* YK12
    #LOAN-ANN-DATE := X-LOAN-DATE(#I1)                   /* YK8
    #LOAN-ANN-DATE-Y := #PARM-DATE-N-Y                   /* YK8
    #DATE := FUNCTION-CALENDAR(<#LOAN-ANN-DATE,'L'>)     /* YK8
*   #DATE := FUNCTION-CALENDAR(<X-LOAN-DATE-2(#I1),'L'>) /* YK8
    COMPRESS #PAYMENT-NOTE 'Annual accrued interest of' #AMOUNT-A 'must be paid by'
      #DATE 'to avoid capitalization of interest.' INTO #PAYMENT-NOTE
  END-IF
END-IF
*
IF X-LOAN-AMOUNT (#I1) > 0
  #I3           := #I3 + 1
  IF #CAP-LOAN
    #TRAN-TYPE    := 'PRNC'             /* To display Cap Loans description
    #CC-AMT       := X-ALT-LP-AMT(#I1)
* YK17 >
    IF ST-V.CAP-BILL-DATE = 0
      #DATE := FUNCTION-CALENDAR(<#PARM-DATE-N,'N'>)
      #PAID-TO-DATE := VAL(#DATE)
*    #HOLD-PAID-TO-DATE /* ##PAID-TO-DATE        YK11
    ELSE
      #PAID-TO-DATE := ST-V.CAP-BILL-DATE
    END-IF
* < YK17
  ELSE
    #CC-AMT       := #BILLED-INTEREST     /* YK12
    #TRAN-TYPE    := 'PRNF'
    #PAID-TO-DATE := 0
  END-IF
*  #CC-AMT              := #P-I
  #DEFAULT-AMT          := #P-I
  IF #DEFAULT-AMT < #CC-AMT             /* YK4
    #CC-AMT := #DEFAULT-AMT            /* YK4
  END-IF                                /* YK4
  VAR-AMOUNT(#I2,#I3)   := #TRUE
  CC-PAYABLE(#I2,#I3)   := #TRUE
  EXCEED-AMT(#I2,#I3)   := #FALSE        /* YK1
  PERFORM ADD-CC-CHARGE
  CC-PAYMENT.LOAN-PRINCIPAL(#I2,#I3) := #LOAN-BAL(#I1)   /* YK12
  CC-PAYMENT.LOAN-INTEREST(#I2,#I3)  := #ACC-INT (#I1)   /* YK12
  CC-PAYMENT.LOAN-MODE(#I2,#I3)      := #PAY-MODE        /* YK12
  CC-PAYMENT.LOAN-AUTO-PAY-AMT(#I2,#I3) := X-ALT-LP-AMT(#I1) /* YK12
  RESET #PAYMENT-NOTE
END-IF
*
* Process Variable Rate Loans
*
RESET #PAYMENT-NOTE #CC-AMT #BILLED-INTEREST
IF #ACC-INT-2 (#I1) > 0 OR X-LOAN-AMOUNT-2 (#I1) > 0
  COMPUTE #P-I = #LOAN-BAL-2(#I1) + #ACC-INT-2(#I1)
  #INTEREST-RATE := FUNCTION-INT-RATE(<'RATE5AB'>);
  MOVE EDITED #INTEREST-RATE (EM=Z9.999) TO #RATE
  COMPRESS #RATE '%' INTO #RATE LEAVING NO
  #DATE := FUNCTION-CALENDAR(<X-LOAN-DATE-2(#I1),'S'>)
  COMPRESS #DATE ',' INTO #DATE LEAVING NO
  MOVE EDITED #P-I (EM=ZZZ,ZZ9.99) TO #AMOUNT-A
  COMPRESS '$' #AMOUNT-A ',' INTO #AMOUNT-A LEAVING NO
  COMPRESS 'For' #RATE ' variable interest rate loan issued' #DATE 'with balance of'
    #AMOUNT-A INTO #PAYMENT-NOTE
  MOVE EDITED #ACC-INT-2(#I1) (EM=ZZZ,ZZ9.99) TO #AMOUNT-A
  IF #ACC-INT-2(#I1) < 0
    COMPRESS '-' #AMOUNT-A INTO #AMOUNT-A LEAVING NO
  END-IF
  COMPRESS '$' #AMOUNT-A INTO #AMOUNT-A LEAVING NO
  COMPRESS #PAYMENT-NOTE  'including ' #AMOUNT-A 'interest.' INTO #PAYMENT-NOTE
  IF X-BILL-INTEREST-AMT-2(#I1) > 0 AND X-BILL-SW-2(#I1) NE '0'
    MOVE EDITED X-BILL-INTEREST-AMT-2(#I1) (EM=ZZZ,ZZ9.99) TO #AMOUNT-A
    COMPRESS '$' #AMOUNT-A INTO #AMOUNT-A LEAVING NO
    #BILLED-INTEREST := X-BILL-INTEREST-AMT-2(#I1)       /* YK12
    #LOAN-ANN-DATE := X-LOAN-DATE-2(#I1)                 /* YK8
    #LOAN-ANN-DATE-Y := #PARM-DATE-N-Y                   /* YK8
    #DATE := FUNCTION-CALENDAR(<#LOAN-ANN-DATE,'L'>)     /* YK8
*   #DATE := FUNCTION-CALENDAR(<X-LOAN-DATE-2(#I1),'L'>) /* YK8
    COMPRESS #PAYMENT-NOTE 'Annual accrued interest of' #AMOUNT-A 'must be paid by'
      #DATE 'to avoid capitalization of interest.' INTO #PAYMENT-NOTE
  END-IF
END-IF
*
*    CREATE PRNV TRAN
*
IF X-LOAN-AMOUNT-2 (#I1) > 0
* #CC-AMT       := #P-I
  #DEFAULT-AMT  := #P-I
  #CC-AMT       := #BILLED-INTEREST
  #I3           := #I3 + 1
  #TRAN-TYPE    := 'PRNV'
  #PAID-TO-DATE := 0
  VAR-AMOUNT(#I2,#I3)  := #TRUE
  CC-PAYABLE(#I2,#I3)  := #TRUE
  EXCEED-AMT(#I2,#I3)  := #FALSE     /* YK1
  PERFORM ADD-CC-CHARGE
  CC-PAYMENT.LOAN-PRINCIPAL(#I2,#I3) := #LOAN-BAL-2(#I1)    /* YK12
  CC-PAYMENT.LOAN-INTEREST(#I2,#I3)  := #ACC-INT-2 (#I1)    /* YK12
  CC-PAYMENT.LOAN-MODE(#I2,#I3)      := #PAY-MODE           /* YK12
  CC-PAYMENT.LOAN-AUTO-PAY-AMT(#I2,#I3) := X-ALT-LP-AMT-2(#I1) /* YK12
END-IF
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE ADD-CC-CHARGE
*******************************
*
CC-PAYMENT.TRAN-TYPE(#I2,#I3)      := #TRAN-TYPE
CC-PAYMENT.PAYMENT-MODE(#I2,#I3)   := #PAY-MODE
CC-PAYMENT.DEFAULT-AMOUNT(#I2,#I3) := #DEFAULT-AMT
CC-PAYMENT.DUE-AMOUNT(#I2,#I3)     := #CC-AMT
CC-PAYMENT.PAYMENT-NOTE(#I2,#I3)   := #PAYMENT-NOTE
CC-PAYMENT.PAID-TO-DATE(#I2,#I3)   := #PAID-TO-DATE
*
END-SUBROUTINE
*
END
