* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PGM-ID: ATHSSBS       ** FORMAT SBS DATA FROM SCREEN LAYOUTS
* See explanation in PDSDC.ATHCM.PROD.SORC(SBSAPARM) for how the parms
* are handled to make SBS work on under CTG DPL MODE instead of TD MODE
*
*******************************************
*                       MODIFICATION LOG
* USER DATE    TAG  REASON
* DRW 01192006 DW1  Create
* SAG 03282006 RH1  AS - Replaced HEX constant '05' with HEX '09' ASCII
* DRW 08162006 DW2  escape bottom in loop if 2 blank lines
* DRW 08172006 DW3  Add 'PIPE' (|) to end of comment thots
* DRW 08192006 DW4  Remove access to Files for SBS
* DRW 08282006 DW5  Add "P" to FAMD and FAMT etc if doing former fam
* DRW 08012006 DW6  Allow for 5-digit Active-Duty Pays for Generals
* DRW 09212006 DW7  Chg 'Member's death' to 'Soldier's death'
* DRW 09212006 DW8  Create no FAM records if all lines are 0.
* DRW 10122006 DW9  Put curr Pay Tbl YEAR in Hi-36 Tot # of days
* DRW 10162006 DW10 Chg Rp Last Pay Layout to match D3660SRP
* DRW 12112006 DW11 Chg layout of hi-35 to handle larger act duty pay
*******************************************
*
* BA/RP PROGRAMS which have SBS logic    ATHPSBS/ATHSSBS
* D3000SBA/D3400SBA/D3160SBA/D3151DBA/D3152PBA/D3152SBA
* D3154PBA/D3154SBA
* D3660PRP/D3660SRP
*
DEFINE DATA
PARAMETER USING BMASTABA
PARAMETER
*
1 #SBS-TYPE    (A3) /* FAM/SBP(EDUC)/DEA(EDUC)/REP(EDUC)/***(Final)
1 #CGA-FMR-SPS-PROCESS  (L)
1 #SCR-LINES-X  (55)   /* RPL(RP Last Pay)/RPH(RP High 36)
 2 #SCR-LINES         (A78)
 2 REDEFINE #SCR-LINES    /* FAMILY BA Layout
  3 #SBS-REASON   (A24)
  3 #SBS-FIL1     (A1)
  3 #SBS-DT       (A8)
  3 #SBS-FIL2     (A1)
  3 #SBS-SSA      (A12)
  3 #SBS-FIL3     (A1)
  3 #SBS-DIC      (A7)
  3 #SBS-FIL4     (A1)
  3 #SBS-SBP      (A7)
  3 #SBS-FIL5     (A1)
  3 #SBS-MON-TOT  (A6)
  3 #SBS-FIL6     (A1)
  3 #SBS-ANN-TOT  (A8)
 2 REDEFINE #SCR-LINES    /* Student DEA/SBP BA Layout
  3 #SBS-NAME     (A19)
  3 #SBS-FIL11    (A1)
  3 #SBS-FR-DT    (A11)
  3 #SBS-FIL12    (A2)
  3 #SBS-FR-AGE   (A2)
  3 #SBS-FIL13    (A2)
  3 #SBS-TO-DT    (A11)
  3 #SBS-FIL14    (A2)
  3 #SBS-TO-AGE   (A2)
  3 #SBS-FIL15    (A1)
  3 #SBS-MONS-AND-AMT (A13)
  3 #SBS-FIL16    (A2)
  3 #SBS-TOTAL    (A9)
  3 #SBS-FIL17    (A1)
 2 REDEFINE #SCR-LINES    /* Last Pay RP Layout
  3 #SBS-LP-FIL1       (A1)
  3 #SBS-LP-FIL1B      (A1)
  3 #SBS-LP-RANK       (A3)
  3 #SBS-LP-FIL2       (A3)
  3 #SBS-LP-YRS-SVC    (A5)
  3 #SBS-LP-FIL3       (A1)
  3 #SBS-LP-PAY-TBL    (A11)
* 3 #SBS-LP-FIL4       (A2)    /* DW6
* 3 #SBS-LP-ACT-PAY    (A7)
  3 #SBS-LP-FIL4       (A1)
  3 #SBS-LP-ACT-PAY    (A8)    /* DW6
  3 #SBS-LP-MAX        (A3)
  3 #SBS-LP-FIL5       (A2)
  3 #SBS-LP-PCT        (A5)
  3 #SBS-LP-FIL6       (A4)   /* DW10
  3 #SBS-LP-BCPI       (A5)   /* DW10
  3 #SBS-LP-FIL7       (A3)
  3 #SBS-LP-COLA       (A5)
  3 #SBS-LP-FIL8       (A8)
  3 #SBS-LP-RET-PAY    (A5)
  3 #SBS-LP-AST        (A3)
  3 #SBS-LP-FIL9       (A1)
 2 REDEFINE #SCR-LINES    /* High 36 RP Layout
  3 #SBS-HI3-RANK      (A5)
  3 #SBS-HI3-YRS-SVC   (A5)
  3 #SBS-HI3-AVG-MN-PA (A10)
  3 #SBS-HI3-PCT       (A6)
  3 #SBS-HI3-BCPI      (A6)
  3 #SBS-HI3-CPI       (A5)
  3 #SBS-HI3-ACPI      (A6)
  3 #SBS-HI3-ANN-PAY   (A7)
  3 #SBS-HI3-12-36     (A2)
  3 #SBS-HI3-TOT-PAY   (A10)
  3 #SBS-HI3-TOT-DAYS (A5) /* On 10/12/06 Cur pay Tbl Yr is put here DW9
  3 #SBS-HI3-AVG-D-PA  (A6)
  3 #SBS-HI3-FIL1      (A5)
 2 REDEFINE #SCR-LINES    /* High 36 RP 2nd screen Layout
  3 #SBS-HI3D-OCC    (3)
   4 #SBS-HI3D-DATA   (A26)
*
LOCAL USING GONERLXX
LOCAL
*
1 PT-V  VIEW OF A-MILITARY-PAY   /* DW9
  2 EFF-DATE     (P9)
*
1 #HI3-DATA   (A27)   /* 27 + 2  /* DW9
1 REDEFINE #HI3-DATA
* 2 #HI3-FIL3  (A3)
 2 #HI3-FIL3  (A2)    /* DW11
 2 #HI3-DATE  (A6)
 2 REDEFINE #HI3-DATE
  3 #HI3-MONTH-AND-DASH  (A4)
  3 #HI3-YY              (A2)
* 2 #HI3-REMAINING        (A16)
 2 #HI3-REMAINING        (A17)    /* DW11
 2 #HI3-EXTRA-2          (A2)
*
1 CM-V VIEW OF A-COMMANDS
 2 NUM-ACCESSES
 2 NUM-ACCESSES-SVC
*
1 #YYYYMMDD    (N8)
1 REDEFINE #YYYYMMDD
 2 #YYYY    (A4)
 2 #MM      (A2)
 2 #DD      (A2)
*
1 #SBS-OUT   /* To be able to handle 3276 bytes (78 * 42) 250*14=3500
 2 #SBS-OUT-1     (A250)
 2 #SBS-OUT-2     (A250)
 2 #SBS-OUT-3     (A250)
 2 #SBS-OUT-4     (A250)
 2 #SBS-OUT-5     (A250)
 2 #SBS-OUT-6     (A250)
 2 #SBS-OUT-7     (A250)
 2 #SBS-OUT-8     (A250)
 2 #SBS-OUT-9     (A250)
 2 #SBS-OUT-10    (A250)
 2 #SBS-OUT-11    (A250)
 2 #SBS-OUT-12    (A250)
 2 #SBS-OUT-13    (A250)
 2 #SBS-OUT-14    (A250)
1 REDEFINE #SBS-OUT
 2 #SBS-OUT-X  (A125/28)
*
1 #SBS-250   (A250)
1 REDEFINE #SBS-250
 2 #SBS-125-1 (A125)
 2 #SBS-125-2 (A125)
*
1 #SBS-LINES    (A85/42)
1 REDEFINE #SBS-LINES
 2 #SBS-LINES-OCC  (42)
  3 #SBS-LINES-1ST-78   (A78)
  3 REDEFINE #SBS-LINES-1ST-78
   4 #SBS-LINES-1ST-POS   (A1)
  3 #SBS-LINES-LST-PART (A7)
1 #SBS-SSA-X   (A12)
1 #SBS-DIC-X   (A12)
1 #SBS-SBP-X   (A12)
1 #SBS-MON-TOT-X (A12)
1 #SBS-ANN-TOT-X (A12)
*
1 #SBS-TYPE-X  (A5)     /* FAMD/FAMT  where D is data T is text
1 #COBOL-READ-WRITE-IND (A2)
1 #I1   (I2)
1 #I2   (I2)
1 #I3   (I2)
1 #I4   (I2)
1 #SBW-X (I2)
1 #HAS-FAM-DATA   (L)
* 1 #TAB     (A1) INIT <H'05'>     /* SAG RH1 03282006 AS
1 #TAB       (A1) INIT <H'09'>     /* SAG RH1 03282006 AS
1 #EOL  (A1) INIT <'~'>
1 #FND-1ST-SBS  (L)
1 #FND-LST-SBS  (L)
1 #FND-FUNDS    (L)
1 #FND-DASHES   (L)
1 #FND-1ST-TEXT (L)
1 #ISN   (P8)
1 #TIMN   (N7)
1 REDEFINE #TIMN
 2 #TIMN-5    (N5)
 2 #TIMN-2    (N2)
1 #CGA-NEXT-PROGRAM (A8)
*
END-DEFINE
* * * * * * * * *
INCLUDE GONERCSB     /* SBS ON ERROR
*  WRITE 'TOP OF ATHSSBS SUFFIX' #CGA-SCR-SUFFIX #SBS-TYPE 'TIME=' *TIMN
*
IF #SBS-TYPE = '***'   /* Final Processng
  IF #CGA-ORIG-SUFFIX NE 'SBW' /* To prevent 'RECORD in USE' for SBW
    FIND (1) CM-V WITH COMMAND = 'SB'
      ADD 1 TO NUM-ACCESSES-SVC
      UPDATE (0204)
      END TRANSACTION
    END-FIND
  END-IF
*
  IF #CGA-ORIG-SUFFIX = 'SBW' /* Go directly to ATHSSBSW
    ESCAPE ROUTINE
  END-IF
*
*  WRITE 'ATHSSBS *** TIME=' *TIMN
*
  RESET #CGA-ORIG-SUFFIX #CGA-SCR-SUFFIX
  ESCAPE ROUTINE
END-IF
*
IF #CGA-SCR-SUFFIX NE 'SBW'
  WRITE 'ATHSSBS' #SBS-TYPE 'time=' *TIMN
END-IF
*
IF #SBS-TYPE = 'FAM'   /* Coming from D3152SBA
* WRITE 'top of FAM logic FMR-SW=' #CGA-FMR-SPS-PROCESS
  IF  (#CGA-ORIG-SUFFIX = 'SBW')   /* DW5
   AND #CGA-FMR-SPS-PROCESS
*   WRITE 'Get prior info for prior family'
*   WRITE 'SBS-out-x (1)=' #SBS-OUT-X (1) (EM=XXXXXXXXXXXXXXXXXXXXXXX)
    MOVE 'R2' TO #COBOL-READ-WRITE-IND   /* Get preceeding INFO
    CALL 'SBSI02' #COBOL-READ-WRITE-IND #SBS-OUT
*
    RESET #SBW-X   /* Used to store last line of data index
    FOR #I1 1 TO 42   /* Find last line to add more
      IF #SBS-OUT-X (#I1) = ' '
        ESCAPE BOTTOM
      END-IF
*
      ADD 1 TO #SBW-X
    END-FOR
*
    IF #SBW-X = 0  /* In case nothing preceeds   /* DW8
      MOVE 1 TO #SBW-X
    END-IF
    RESET #I2   /* So it starts at 1 for SBS processing
*   IF #SBW-X GE 1
*   WRITE #SBW-X 'Lst lin read =' #SBS-OUT-X (#SBW-X) (EM=XXXXXXXXXXXXX)
*   END-IF
  END-IF
*
  MOVE 'FAMD' TO #SBS-TYPE-X
*
  IF #CGA-FMR-SPS-PROCESS    /* DW5
    COMPRESS 'P' #SBS-TYPE-X INTO #SBS-TYPE-X LEAVING NO
  END-IF
* WRITE 'sbs-type-x='  #SBS-TYPE-X
*
  RESET #SBS-LINES (*) #HAS-FAM-DATA  /* DW8
  FOR #I1 1 TO 55
*   WRITE 'ATHSSBS FAM' #I1 #SCR-LINES (#I1) (EM=XXXXXXXXXXXXXX)
    IF #SBS-REASON (#I1) = 'Member"s death'              /* DW7
      MOVE 'Soldier"s death' TO #SBS-REASON (#I1)
    END-IF
*
    IF #SCR-LINES (#I1) = MASK ('Reason for Change')
      MOVE TRUE TO #FND-1ST-SBS
*     WRITE 'Found Reason'
      ESCAPE TOP
    END-IF
*
    IF  (NOT #FND-1ST-SBS)
     OR (#SCR-LINES (#I1) = ' ')
      ESCAPE TOP
    END-IF
*
    IF #SCR-LINES (#I1) = MASK ('Funds')
*     WRITE 'Found Funds'
      MOVE TRUE TO #FND-FUNDS
      MOVE 'FAMT' TO #SBS-TYPE-X
*
      IF #CGA-FMR-SPS-PROCESS    /* DW5
        COMPRESS 'P' #SBS-TYPE-X INTO #SBS-TYPE-X LEAVING NO
      END-IF
      ESCAPE TOP
    END-IF
*
    IF #FND-FUNDS    AND (#SCR-LINES (#I1)     = ' ')  /* /*DW2
     AND (#I1 LT 55) AND (#SCR-LINES (#I1 + 1) = ' ')
      ESCAPE BOTTOM
    END-IF
*
    IF #FND-FUNDS AND (#SCR-LINES (#I1) = MASK ('    '))
      ESCAPE TOP
    END-IF
*
    ADD 1 TO #I2
    IF #FND-FUNDS
      COMPRESS #SBS-TYPE-X #TAB #SCR-LINES (#I1) #EOL
         INTO #SBS-LINES (#I2) LEAVING NO
*
      IF   (#I1 = 55)                          /* DW3
       OR  ((#I1 LT 55)
       AND  ((#SCR-LINES (#I1 + 1) = ' ')
        OR   (#SBS-LP-FIL1 (#I1 + 1) NE ' ')))
        COMPRESS #SBS-LINES (#I2) '|' INTO #SBS-LINES (#I2) LEAVING NO
      END-IF
    ELSE
      MOVE LEFT #SBS-SSA (#I1) TO #SBS-SSA-X
      MOVE LEFT #SBS-DIC (#I1) TO #SBS-DIC-X
      MOVE LEFT #SBS-SBP (#I1) TO #SBS-SBP-X
      MOVE LEFT #SBS-MON-TOT (#I1) TO #SBS-MON-TOT-X
      MOVE LEFT #SBS-ANN-TOT (#I1) TO #SBS-ANN-TOT-X
*
      IF #SBS-ANN-TOT-X NE '0'    /* DW8
        MOVE TRUE TO #HAS-FAM-DATA
      END-IF
*
      COMPRESS #SBS-TYPE-X
       #TAB #SBS-REASON (#I1)
       #TAB #SBS-DT (#I1)
       #TAB #SBS-SSA-X
       #TAB #SBS-DIC-X
       #TAB #SBS-SBP-X
       #TAB #SBS-MON-TOT-X
       #TAB #SBS-ANN-TOT-X
       #EOL
        INTO #SBS-LINES (#I2) LEAVING NO
    END-IF
*
    IF #CGA-ORIG-SUFFIX = 'SBS'     /* DW4
      WRITE #SBS-LINES-1ST-78 (#I2)
      IF #SBS-LINES-LST-PART (#I2) NE ' '
        WRITE #SBS-LINES-LST-PART (#I2)
      END-IF
    END-IF
  END-FOR
*
*  WRITE 'HAS-FAM-DATA=' #HAS-FAM-DATA
  IF   (#CGA-ORIG-SUFFIX = 'SBW')
   AND #HAS-FAM-DATA               /* DW8
    IF #CGA-FMR-SPS-PROCESS        /* DW3
      IF #SBW-X = 0
        RESET #I3 #SBS-250
      ELSE
        COMPUTE #I3 = #SBW-X - 1  /* To start where we left off
        MOVE #SBS-OUT-X (#SBW-X) TO #SBS-250
      END-IF
    END-IF
    PERFORM COMPRESS-AND-SEND-TO-SBSI02
*
    ESCAPE ROUTINE
  END-IF
*
  ESCAPE ROUTINE   /* DW4
END-IF
*
IF #SBS-TYPE = 'DEA' OR = 'SBP' OR = 'REP'   /* Coming from D3154SBA
* WRITE 'top of stud logic' #SBS-TYPE
  IF #CGA-ORIG-SUFFIX = 'SBW'
    MOVE 'R2' TO #COBOL-READ-WRITE-IND   /* Get preceeding INFO
    CALL 'SBSI02' #COBOL-READ-WRITE-IND #SBS-OUT
*   WRITE 'after get preceeding info call to SBSI02'
*
    RESET #SBW-X   /* Used to store last line of data
    FOR #I1 1 TO 42   /* Find last line to add more
      IF #SBS-OUT-X (#I1) = ' '
        ESCAPE BOTTOM
      END-IF
*
      ADD 1 TO #SBW-X
    END-FOR
*
    IF #SBW-X = 0  /* In case nothing preceeds   /* DW8
      MOVE 1 TO #SBW-X
    END-IF
*
    RESET #I2   /* So it starts at 1 for SBS processing
*  IF #SBW-X GE 1
*  WRITE #SBW-X 'Lst lin read =' #SBS-OUT-X (#SBW-X) (EM=XXXXXXXXXXXXX)
*  END-IF
  END-IF
*
  COMPRESS #SBS-TYPE 'D' INTO #SBS-TYPE-X LEAVING NO
*
  IF #CGA-FMR-SPS-PROCESS    /* DW5
    COMPRESS 'P' #SBS-TYPE-X INTO #SBS-TYPE-X LEAVING NO
  END-IF
*
  FOR #I1 1 TO 55
*   DISPLAY #I1 #I2 #SCR-LINES (#I1) (EM=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
*
    IF #SCR-LINES (#I1) = MASK ('  Recipient')
      MOVE TRUE TO #FND-1ST-SBS
      ESCAPE TOP
    END-IF
*
    IF #SBS-TOTAL (#I1) = MASK ('  -------')
      MOVE TRUE TO #FND-DASHES
      IF #I2 GE 41   /* Needs 2 lines
        IF #CGA-ORIG-SUFFIX NE 'SBW'
          WRITE 'index I2 ge 42' #I2 #SCR-LINES(#I1)(EM=XXXXXXXXXXXXXXX)
        END-IF
        ESCAPE BOTTOM
      END-IF
*
      ADD 1 TO #I2
      COMPRESS #SBS-TYPE-X #TAB #TAB #TAB #TAB #TAB #TAB #TAB
         '  -------' #EOL INTO #SBS-LINES (#I2) LEAVING NO
      ADD 1 TO #I1
      COMPRESS #SBS-TYPE-X #TAB #TAB #TAB #TAB #TAB #TAB #TAB
         #SBS-TOTAL (#I1) #EOL INTO #SBS-LINES (#I2) LEAVING NO
      RESET #SBS-TOTAL (#I1) /* This will make the screen not have a tot
      COMPRESS #SBS-TYPE 'T' INTO #SBS-TYPE-X LEAVING NO /*Start of text
*
      IF #CGA-FMR-SPS-PROCESS    /* DW5
        COMPRESS 'P' #SBS-TYPE-X INTO #SBS-TYPE-X LEAVING NO
      END-IF
    END-IF
*
    IF #FND-DASHES   AND (#SCR-LINES (#I1)     = ' ')  /* DW2
     AND (#I1 LT 55) AND (#SCR-LINES (#I1 + 1) = ' ')
      ESCAPE BOTTOM
    END-IF
*
    IF  (NOT #FND-1ST-SBS)
     OR (#SCR-LINES (#I1) = ' ')
      ESCAPE TOP
    END-IF
*
    IF #I2 GE 42
      IF #CGA-ORIG-SUFFIX NE 'SBW'
        WRITE 'index I2 ge 42' #I2 #SCR-LINES(#I1)(EM=XXXXXXXXXXXXXXX)
      END-IF
      ESCAPE BOTTOM
    END-IF
*
    ADD 1 TO #I2
*
    IF #FND-DASHES
      COMPRESS #SBS-TYPE-X
       #TAB #SCR-LINES (#I1) #EOL INTO #SBS-LINES (#I2) LEAVING NO
*
      IF   (#I1 = 55)                          /* DW3
       OR  ((#I1 LT 55)
       AND  ((#SCR-LINES (#I1 + 1) = ' ')
        OR   (#SBS-LP-FIL1 (#I1 + 1) NE ' ')))
        COMPRESS #SBS-LINES (#I2) '|' INTO #SBS-LINES (#I2) LEAVING NO
      END-IF
    ELSE
      COMPRESS #SBS-TYPE-X
       #TAB #SBS-NAME    (#I1)
       #TAB #SBS-FR-DT   (#I1)
       #TAB #SBS-FR-AGE  (#I1)
       #TAB #SBS-TO-DT   (#I1)
       #TAB #SBS-TO-AGE  (#I1)
       #TAB #SBS-MONS-AND-AMT(#I1)
       #TAB #SBS-TOTAL   (#I1)
       #EOL
        INTO #SBS-LINES (#I2) LEAVING NO
    END-IF
*
    IF #CGA-ORIG-SUFFIX = 'SBS'     /* DW4
      WRITE #SBS-LINES-1ST-78 (#I2)
      IF #SBS-LINES-LST-PART (#I2) NE ' '
        WRITE #SBS-LINES-LST-PART (#I2)
       END-IF
    END-IF
  END-FOR
*
  IF #CGA-ORIG-SUFFIX = 'SBW'
    COMPUTE #I3 = #SBW-X - 1  /* To start where we left off
*
    IF #SBW-X GT 28 WRITE 'sx < 28' SUBTRACT 1 FROM #SBW-X END-IF
    MOVE #SBS-OUT-X (#SBW-X) TO #SBS-250
    PERFORM COMPRESS-AND-SEND-TO-SBSI02
  END-IF
*
  ESCAPE ROUTINE     /* DW4
END-IF
*
IF #SBS-TYPE = 'RPL'   /* Coming from D3660SRP RP Last Pay
  MOVE 'RPLDC' TO #SBS-TYPE-X  /* RP Last Pay Data Current
  RESET #SBS-LINES (*)
  FOR #I1 1 TO 55
    IF #SCR-LINES (#I1) = ' '
      ESCAPE TOP
    END-IF
*
    IF  (#SCR-LINES (#I1) = MASK ('***'))
     OR (#SCR-LINES (#I1) = MASK (' This calculation is for'))
     OR (#SCR-LINES (#I1) = MASK ('This calculation is for'))
      MOVE TRUE TO #FND-1ST-TEXT
      MOVE 'RPLT' TO #SBS-TYPE-X
    END-IF
*
    IF #FND-1ST-TEXT
      ADD 1 TO #I2
      COMPRESS #SBS-TYPE-X #TAB #SCR-LINES (#I1) #EOL
         INTO #SBS-LINES (#I2) LEAVING NO
      ESCAPE TOP
    END-IF
*
    IF #SCR-LINES (#I1) = MASK ('CURRENT PAY TABLE')
      MOVE 'RPLDC' TO #SBS-TYPE-X
      ESCAPE TOP
    END-IF
*
    IF #SCR-LINES (#I1) = MASK ('SAVE PAY')
      MOVE 'RPLDS' TO #SBS-TYPE-X
      ESCAPE TOP
    END-IF
*
    IF #SCR-LINES (#I1) = MASK ('TOWER AMENDMENT')
      MOVE 'RPLDT' TO #SBS-TYPE-X
      ESCAPE TOP
    END-IF
*
    MOVE LEFT #SBS-LP-ACT-PAY (#I1) TO #SBS-LP-ACT-PAY (#I1)
    MOVE LEFT #SBS-LP-BCPI    (#I1) TO #SBS-LP-BCPI    (#I1)
    MOVE LEFT #SBS-LP-RET-PAY (#I1) TO #SBS-LP-RET-PAY (#I1)
    ADD 1 TO #I2
    COMPRESS #SBS-TYPE-X
     #TAB #SBS-LP-RANK    (#I1)
     #TAB #SBS-LP-YRS-SVC (#I1)
     #TAB #SBS-LP-PAY-TBL (#I1)
     #TAB #SBS-LP-ACT-PAY (#I1)
     #TAB #SBS-LP-MAX     (#I1)
     #TAB #SBS-LP-PCT     (#I1)
     #TAB #SBS-LP-BCPI    (#I1)
     #TAB #SBS-LP-COLA    (#I1)
     #TAB #SBS-LP-RET-PAY (#I1)
     #TAB #SBS-LP-AST     (#I1)
     #EOL
      INTO #SBS-LINES (#I2) LEAVING NO
*
    IF #CGA-ORIG-SUFFIX = 'SBS'     /* DW4
      WRITE #SBS-LINES-1ST-78 (#I2)
      IF #SBS-LINES-LST-PART (#I2) NE ' '
        WRITE #SBS-LINES-LST-PART (#I2)
      END-IF
    END-IF
  END-FOR
*
  IF #CGA-ORIG-SUFFIX = 'SBW'
    RESET #I3 #SBS-OUT
    PERFORM COMPRESS-AND-SEND-TO-SBSI02
    ESCAPE ROUTINE
  END-IF
*
  ESCAPE ROUTINE     /* DW4
END-IF
*
IF #SBS-TYPE = 'RPH'   /* Coming from D3660SRP RP High-36
  MOVE 'RPHD1' TO #SBS-TYPE-X  /* RP High 36 Data 1
  RESET #SBS-LINES (*)
*
  ADD 1 TO #I2
  READ PT-V /* Get most Current pay table YYYY          /* DW9
  END-READ
*
  MOVE EFF-DATE TO #YYYYMMDD                           /* DW9
  MOVE #YYYY TO #SBS-HI3-TOT-DAYS (#I2)
*
  MOVE LEFT #SBS-HI3-BCPI (#I2) TO #SBS-HI3-BCPI (#I2)
  MOVE LEFT #SBS-HI3-ACPI (#I2) TO #SBS-HI3-ACPI (#I2)
  MOVE LEFT #SBS-HI3-ANN-PAY(#I2) TO #SBS-HI3-ANN-PAY(#I2)
  COMPRESS #SBS-TYPE-X
   #TAB #SBS-HI3-RANK      (#I2)
   #TAB #SBS-HI3-YRS-SVC   (#I2)
   #TAB #SBS-HI3-AVG-MN-PA (#I2)
   #TAB #SBS-HI3-PCT       (#I2)
   #TAB #SBS-HI3-BCPI      (#I2)
   #TAB #SBS-HI3-CPI       (#I2)
   #TAB #SBS-HI3-ACPI      (#I2)
   #TAB #SBS-HI3-ANN-PAY   (#I2)
   #TAB #SBS-HI3-12-36     (#I2)
   #TAB #SBS-HI3-TOT-PAY   (#I2)
   #TAB #SBS-HI3-TOT-DAYS  (#I2) /* Is now current pay Tbl YYYY /* DW9
   #TAB #SBS-HI3-AVG-D-PA  (#I2)
   #EOL
    INTO #SBS-LINES (#I2) LEAVING NO
*
  IF #CGA-ORIG-SUFFIX = 'SBS'     /* DW4
    WRITE #SBS-LINES-1ST-78 (#I2)
    IF #SBS-LINES-LST-PART (#I2) NE ' '
      WRITE #SBS-LINES-LST-PART (#I2)
    END-IF
  END-IF
*
  ADD 1 TO #I2
  MOVE 'RPHD2' TO #SBS-LINES (#I2)
  RESET #I4
X1. FOR #I1 1 TO 3
    FOR #I3 2 TO 17
      IF #SBS-HI3D-DATA (#I3, #I1) = ' '
        IF #I3 GT 1
          SUBTRACT 1 FROM #I3   /* TO SETUP THE
        END-IF
        ESCAPE BOTTOM (X1.)
      END-IF
*
      ADD 1 TO #I4
*
      IF #I4 GT 3   /* put 3 on a line
        IF #CGA-ORIG-SUFFIX = 'SBS'     /* DW4
          WRITE #SBS-LINES-1ST-78 (#I2)
          IF #SBS-LINES-LST-PART (#I2) NE ' '
            WRITE #SBS-LINES-LST-PART (#I2)
          END-IF
        END-IF
*
        MOVE 1 TO #I4
        ADD 1 TO #I2
      END-IF
*
      MOVE #SBS-HI3D-DATA (#I3, #I1) TO #HI3-DATA    /* DW9
*     WRITE 'B4' #I1 #I2 #I3 #HI3-DATA 'YY=' #HI3-YY
      IF #HI3-DATE = MASK (...'-'NN)                 /* DW9
        IF #HI3-YY GT '70'
          COMPRESS #HI3-MONTH-AND-DASH '19' #HI3-YY #HI3-REMAINING
              INTO #HI3-DATA LEAVING NO
        ELSE
          COMPRESS #HI3-MONTH-AND-DASH '20' #HI3-YY #HI3-REMAINING
              INTO #HI3-DATA LEAVING NO
        END-IF
      END-IF
*     WRITE 'Ft' #I1 #I2 #I3 #HI3-DATA
*
*     COMPRESS #SBS-LINES (#I2) #TAB #SBS-HI3D-DATA (#I3, #I1)
      COMPRESS #SBS-LINES (#I2) #TAB #HI3-DATA     /* DW9
        INTO #SBS-LINES (#I2) LEAVING NO
    END-FOR
  END-FOR
*
  IF   (#CGA-ORIG-SUFFIX = 'SBS')     /* DW4
   AND (#SBS-LINES (#I2) NE ' ')
    WRITE #SBS-LINES-1ST-78 (#I2)
    IF #SBS-LINES-LST-PART (#I2) NE ' '
      WRITE #SBS-LINES-LST-PART (#I2)
    END-IF
  END-IF
*
  COMPRESS #SBS-LINES (#I2) #EOL INTO #SBS-LINES (#I2) LEAVING NO
*
  IF #CGA-ORIG-SUFFIX = 'SBW'
    RESET #I3 #SBS-OUT
    PERFORM COMPRESS-AND-SEND-TO-SBSI02
    ESCAPE ROUTINE
  END-IF
*
  ESCAPE ROUTINE    /* DW4
END-IF
*
* * * * * * * * * * ** * * * * * * * * * * * *
DEFINE SUBROUTINE COMPRESS-AND-SEND-TO-SBSI02
* * * * * * * * * * ** * * * * * * * * * * * *
*
FOR #I2 1 TO 42   /* Compress SBS Output Data
  IF #SBS-LINES (#I2) = ' '
    ESCAPE BOTTOM
  END-IF
*
  COMPRESS #SBS-250 #SBS-LINES (#I2) INTO #SBS-250 LEAVING NO
*
  IF #SBS-125-2 NE ' '
    ADD 1 TO #I3
    IF #I3 GT 28 WRITE 'i3 gtr 28' SUBTRACT 1 FROM #I3 END-IF  /* DW99
    MOVE #SBS-125-1 TO #SBS-OUT-X (#I3)
    MOVE #SBS-125-2 TO #SBS-125-1
    RESET #SBS-125-2
  END-IF
END-FOR
*
IF #SBS-125-1 NE ' '
  ADD 1 TO #I3
  MOVE #SBS-125-1 TO #SBS-OUT-X (#I3)
END-IF
*
MOVE 'W2' TO #COBOL-READ-WRITE-IND  /* Send data to SBSI02
CALL 'SBSI02' #COBOL-READ-WRITE-IND #SBS-OUT
*
END-SUBROUTINE
*
END
