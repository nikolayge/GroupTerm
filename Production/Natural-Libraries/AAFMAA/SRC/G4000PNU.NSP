* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 5
* <Natural Source Header
* PGM-ID: G4000PNU
*     'NU' COMMAND PROCESSING  - NOTE UPDATE
*******************************************
*                       MODIFICATION LOG
* USER DATE     TAG  REASON
* DRW  07112005 DW1  Add prior Enlisted Rank as a Canned Note
* DRW  03072007 DW2  Allow YAK/PAM to delete ** POL Notes
* DRW  05112007 DW3  Do Not allow duplicate 'Alot Pays' or 'is paid by' notes
* DRW  10/01/2007 DW4 Delete AFSC Suffix's (ENL/FLP/IFR/SBD)
* DRW  06/12/2008 DW5 Chg ALOT AUTH to A on selected NU's
* DRW  07/14/2008 DW6 Allow ELB and SKS to update/delete NU * pol iss Notes
* DRW  09/22/2008 DW7 Stop using REC-ISN to match PD file to Note Record
* DRW  02/10/2009 DW8 Add more occurances to Notes file (60 to 500)
* PAM  03/17/2009 PM9 Replaced RLB with CEB
* DRW  10/05/2009 DW10 Add User-company updates to NS records and PD records
* PAM  05/10/2010 PM11 Added allotment linkage checks
* RSE  02/14/2012 RE1 Add '*Do not send to collections'
* VXT  08/23/2012 vt1 Replaced PAM with VXT
* NGG  08/13/2013 NG1 Address normalization
* NGG  09/17/2014 NG2  MS STATISTICS
*******************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL USING GONERLXX     /* WORK FIELDS FOR GONERCXX - ERROR ROUTINE
LOCAL USING G4000LNU
LOCAL USING ADDA0001     /* NG1
LOCAL
*
1 #PROGRAM      (A8)                        /* NG2
1 #USE-TIMX     (L) INIT <TRUE>             /* NG2
1 NT-V VIEW OF A-NOTES                      /* DW8
  2 ID-NUMBER      (N6)        /*      6
  2 DTS-DATN       (P9)        /*      5
  2 DTS-TIMN       (N7)        /*      7
  2 C*NOTE-TABLE
  2 NOTE-DATE      (N8/500)    /*  4,000
  2 NOTE-CLERK-ID  (A3/500)    /*  1,500
  2 NOTE-LINE-NUM  (P1/500)    /*    500
  2 NOTE-TEXT      (A60/500)   /* 30,000
  2 USER-COMPANY   (A1/500)    /*    500   /* DW10
*                           =    36,500
1 NT-UPD-V VIEW OF A-NOTES
  2 ID-NUMBER      (N6)
  2 DTS-DATN       (P9)
  2 DTS-TIMN       (N7)
  2 C*NOTE-TABLE
  2 NOTE-DATE      (N8/500)
  2 NOTE-CLERK-ID  (A3/500)
  2 NOTE-LINE-NUM  (P1/500)
  2 NOTE-TEXT      (A60/500)
  2 USER-COMPANY   (A1/500)                  /* DW10
*
1 #NOTE-TEXT-PAC-INFO    (A60)
1 REDEFINE #NOTE-TEXT-PAC-INFO
  2 #NOTE-TEXT-PAC-1ST-3    (A3)
  2 #NOTE-TEXT-PAC-MM       (A2)
  2 #NOTE-TEXT-PAC-FL-1     (A1)
  2 #NOTE-TEXT-PAC-DD       (A2)
  2 #NOTE-TEXT-PAC-FL-2     (A1)
  2 #NOTE-TEXT-PAC-YYYY     (A4)
  2 #NOTE-TEXT-PAC-FL-3     (A47)
*
1 #MAX-NT-NOTES     (N3)  INIT <500>     /* DW10
1 #NOTE-DATE        (A8)
1 REDEFINE #NOTE-DATE
  2 #ND-YYYY     (A4)
  2 #ND-MM        (A2)
  2 #ND-DD        (A2)                        /* END DW8
*
1 #FORCE-A     (L)                         /* DW5
1 #PRIOR-ENL-RANK     (A3)   /* DW1
1 REDEFINE #PRIOR-ENL-RANK
  2 #PRIOR-ENL-RANK-A1  (A1)
  2 #PRIOR-ENL-RANK-N1  (N1)
1 #PRIOR-ENL-RANK-DOP (A8)
1 #NAME   (A25)
1 #RANK   (A3)
1 #ADD  (A1)
1 #CHG  (A1)
1 #PEN  (A1)
1 #COP-IND  (A1) INIT <'N'>
1 #COPY-NOTE  (L)
1 #BEN  (A1)
1 #ATT  (A1)
1 #CCI  (A1)
1 #BKT  (A1)
1 #REF  (A1)
1 #NOT  (A1)   /* create pending 'do noT SEnd CrEDiT' NOTE FOR 60 DAYS
1 #LOP  (A1)   /* lack of payment
1 #RTL  (A1)
1 #RTI  (A1)
1 #POS  (A1)
1 #CNV  (A1)
1 #DNS  (A1)   /* RE1
1 #PAID-BY (A1)
1 #PAYS    (A1)
1 #CN   (P6)
1 #UPDATE-USER-DATE   (A1) INIT <'Y'>
1 #PAC-TEXT    (A30) INIT <'enter change'>
*
1 #ALOT-CN-PAID-BY (N6)
1 REDEFINE #ALOT-CN-PAID-BY
  2 #ALOT-CN-PAID-BY-A (A6)
1 #ALOT-CN-PAYS    (N6)
1 REDEFINE #ALOT-CN-PAYS
  2 #ALOT-CN-PAYS-A  (A6)
*
1 #PEN-DT (A8) INIT <'MMDDYYYY'>
1 REDEFINE #PEN-DT
  2 #PEN-DT-MM (A2)
  2 #PEN-DT-DD (A2)
  2 #PEN-DT-YYYY (A4)
*
1 ST-ALOT-V VIEW OF A-STATUS  /* to check for alot paid by/for
*
1 MBRSHIP-MTD-DET-V VIEW OF A-MBRSHIP-MTD-DETAIL
  2 ID-NUMBER        (N6)
  2 ENTRY-DATE       (N8)
  2 REC-ISN          (N8)
  2 CODE             (A1)
  2 ISSUE-DATE       (N8)
  2 NUM-MBRSHIPS     (N3)
  2 USER             (A3)
  2 USER-COMPANY              /* DW10
*
1 #SCR-PAC-DT       (A10) INIT <'MM/DD/YYYY'>
1 #SCR-MAX-MSG      (A60)
1 #OLD-PAC-DATE     (N8/14)
1 #DELETE-PEND-PD   (L/14)
1 #NT-ISN           (P8)
1 #SCR-COPY-CN-1    (P6/20)
1 #BAD-COPY-IND-1   (L/20)
1 #SCR-COPY-CN-2    (P6/20)
1 #BAD-COPY-IND-2   (L/20)
1 #SCR-COPY-CN-3    (P6/20)
1 #BAD-COPY-IND-3   (L/20)
1 #BAD-COPY         (L)
*
1 #SCR-NOT-MSG   (A76)
*
1 #FIRST-TIME (L)  INIT <TRUE>
1 #NO-NOTES   (L)
1 #UPDATE     (L)
1 #ST-UPDATE  (L)
1 #FIRST-SCN  (L)
*
1 #I1         (I2)
1 #I2         (I2)
1 #I3         (I2)
1 #ICOP       (I2)
1 #INDEXX     (I2)    /* USED TO HOLD NEXT AVAIL INDEX
1 #INDEXT     (I2)
1 #INDEXN     (I2)
1 #INDEX1     (I2)
1 #INDEXB     (I2)
1 #IFINAL     (I2)
1 #ISCR       (I2)
1 #LAST-NAME    (A25)
1 #FIRST-MID    (A25)
1 #SUFFIX       (A25)
1 #SUP-MESSAGE  (A76)
1 #HOLD-NAME    (A50)
1 #LINE-NUM     (N1)
1 #NUM-IN-MSSG  (N1)
1 #NUM-CRIT-NOTES (P2)
*
1 #DOD-DISP-GR
  2 #DOD-DISP-MM   (N2)
  2 #DOD-SL1       (A1) INIT <'/'>
  2 #DOD-DISP-DD   (N2)
  2 #DOD-SL2       (A1) INIT <'/'>
  2 #DOD-DISP-YYYY (N4)
1 REDEFINE #DOD-DISP-GR
  2 #DOD-DISP       (A10)
*
1 #YYYYMMDD   (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY    (N4)
  2 #MM      (N2)
  2 #DD      (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A  (A4)
  2 #MM-A    (A2)
  2 #DD-A    (A2)
*
1 #WYYYYMMDD
  2 #WYYYY    (N4)
  2 REDEFINE #WYYYY
    3 #WYYYY-A   (A4)
  2 #WMM      (N2)
  2 #WDD      (N2)
  2 REDEFINE #WDD
    3 #WDD-A   (A2)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-N (N8)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-A (A8)
*
1 #WMMDDYYYY
  2 #WMM (N2)
  2 #WDD (N2)
  2 #WYYYY (N4)
1 REDEFINE #WMMDDYYYY
  2 #WMMDDYYYY-A (A8)
*
1 #TODAY-YYYYMMDD (N8)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYY    (N4)
  2 #TODAY-MM      (A2)
  2 #TODAY-DD      (A2)
1 #TODAY-MM-DD-YYYY  (A10)
*
END-DEFINE
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
INCLUDE GONERCXX      /* NATURAL ERROR ROUTINE
*
* WRITE 'top of G4000PNU'
MOVE *DATN TO #TODAY-YYYYMMDD
COMPRESS #TODAY-MM #TODAY-DD #TODAY-YYYY INTO #TODAY-MM-DD-YYYY WITH '/'
MOVE #TODAY-MM-DD-YYYY TO #SCN-ADD-DATE
*
GET ST-V #CGA-ISN
*
IF PLAN (1) = '2SW' OR = '3SW' OR = '2DW' OR = '3DW'
  MOVE NAME-SP TO #NAME
  RESET #RANK
ELSE
  MOVE NAME TO #NAME
  MOVE RANK TO #RANK
END-IF
*
MOVE #CGA-CLERK TO #SCN-ADD-ID
SEPARATE #NAME INTO #LAST-NAME #FIRST-MID #SUFFIX WITH DELIMITER ','
*
COMPRESS #RANK #FIRST-MID INTO #HOLD-NAME LEAVING NO SPACE
COMPRESS #HOLD-NAME #LAST-NAME #SUFFIX INTO #SCN-NAME
*
* do not add PYS or PDB to below list
IF #CGA-SCR-SUFFIX = 'ADD' OR = 'CHG' OR = 'PEN' OR = 'BEN' OR = 'ATT'
    OR = 'BKT' OR = 'CCI' OR = 'NOT'
    OR = 'REF' OR = 'RTL' OR = 'RTI' OR = 'POS' OR = 'LOP'
  IGNORE
ELSE
  MOVE '*' TO #CGA-SCR-COMMAND
  MOVE 'Select type of processing' TO #SCR-NOT-MSG
  INPUT TEXT #SCR-NOT-MSG MARK *#ADD USING MAP 'G4005MNU'
*
  IF #CGA-SCR-COMMAND NE '*'
    FETCH 'G1000PXX'
  END-IF
*
  RESET #SCR-NOT-MSG
  RESET #COPY-NOTE
  DECIDE FOR FIRST CONDITION
    WHEN #ADD NE ' ' MOVE 'ADD' TO #CGA-SCR-SUFFIX
    WHEN #CHG NE ' ' MOVE 'CHG' TO #CGA-SCR-SUFFIX
    WHEN #PEN NE ' '
      IF #PEN-DT NE MASK (MMDDYYYY)
        REINPUT 'date must be format "MMDDYYYY"'
          MARK *#PEN-DT
      END-IF
*
      COMPRESS #PEN-DT-YYYY #PEN-DT-MM #PEN-DT-DD
        INTO #WYYYYMMDD-A LEAVING NO
*
      IF #WYYYYMMDD-N LE *DATN
        REINPUT 'PEN effective date must be in the future'
          MARK *#PEN-DT
      END-IF
*
      IF NOT #COP-IND = 'Y' OR = 'N'
        REINPUT 'Must be "Y" or "N"'
          MARK *#COP-IND
      END-IF
*
      IF #COP-IND = 'Y'
        MOVE TRUE TO #COPY-NOTE
      END-IF
*
      COMPRESS #PEN-DT-MM #PEN-DT-DD #PEN-DT-YYYY
        INTO #SCR-PAC-DT WITH '/'
      MOVE 'PEN' TO #CGA-SCR-SUFFIX
    WHEN #NOT NE ' ' MOVE 'NOT' TO #CGA-SCR-SUFFIX
    WHEN #BEN NE ' ' MOVE 'BEN' TO #CGA-SCR-SUFFIX
    WHEN #ATT NE ' ' MOVE 'ATT' TO #CGA-SCR-SUFFIX
    WHEN #BKT NE ' ' MOVE 'BKT' TO #CGA-SCR-SUFFIX
    WHEN #RTL NE ' ' MOVE 'RTL' TO #CGA-SCR-SUFFIX
    WHEN #RTI NE ' ' MOVE 'RTI' TO #CGA-SCR-SUFFIX
    WHEN #CCI    NE ' ' MOVE 'CCI' TO #CGA-SCR-SUFFIX
    WHEN #REF    NE ' ' MOVE 'REF' TO #CGA-SCR-SUFFIX
    WHEN #POS    NE ' ' MOVE 'POS' TO #CGA-SCR-SUFFIX
    WHEN #CNV    NE ' ' MOVE 'CNV' TO #CGA-SCR-SUFFIX
    WHEN #LOP    NE ' ' MOVE 'LOP' TO #CGA-SCR-SUFFIX
    WHEN #DNS    NE ' ' MOVE 'DNS' TO #CGA-SCR-SUFFIX           /* RE1
    WHEN #PAID-BY NE ' '
      FIND (1) ST-ALOT-V WITH MEMBER-KEY = #ALOT-CN-PAID-BY-A
        IF NO RECORD FOUND
          REINPUT 'CN entered not found'
            MARK *#ALOT-CN-PAID-BY
        END-NOREC
*
        IF ST-V.ID-NUMBER = #ALOT-CN-PAID-BY                    /* PM11
          REINPUT 'Cannot link allotment to same account'       /* PM11
            MARK *#ALOT-CN-PAID-BY                                /* PM11
        END-IF                                                  /* PM11
      END-FIND
      MOVE 'PDB' TO #CGA-SCR-SUFFIX
    WHEN #PAYS NE    ' '
      FIND (1) ST-ALOT-V WITH MEMBER-KEY = #ALOT-CN-PAYS-A
        IF NO RECORD FOUND
          REINPUT 'CN entered not found'
            MARK *#ALOT-CN-PAYS
        END-NOREC
*
        IF ST-V.ID-NUMBER = #ALOT-CN-PAYS                       /* PM11
          REINPUT 'Cannot link allotment to same account'       /* PM11
            MARK *#ALOT-CN-PAYS                                   /* PM11
        END-IF                                                  /* PM11
      END-FIND
      MOVE 'PYS' TO #CGA-SCR-SUFFIX
    WHEN NONE IGNORE
  END-DECIDE
END-IF
*
IF #CGA-SCR-SUFFIX = 'NOT'
  MOVE *DATN TO #YYYYMMDD
  ADD 2 TO #MM
  IF #MM GT 12
    SUBTRACT 12 FROM #MM
    ADD 1 TO #YYYY
  END-IF
*
  IF #MM = 2
    IF #DD GT 28
      MOVE 28 TO #DD
    END-IF
  ELSE
    IF #DD GT 30
      MOVE 30 TO #DD
    END-IF
  END-IF
*
  COMPRESS #MM-A #DD-A #YYYY-A INTO #PEN-DT LEAVING NO
  COMPRESS #MM-A #DD-A #YYYY-A INTO #SCR-PAC-DT WITH '/'
  MOVE 'PEN' TO #CGA-SCR-SUFFIX
  MOVE 'DO NOT REFUND CREDIT' TO #PAC-TEXT
END-IF
*
IF NOT #UPDATE-USER-DATE = 'N' OR = 'Y'
  REINPUT 'Must be "Y" or "N"'
    MARK *#UPDATE-USER-DATE
END-IF
*
IF #CGA-SCR-SUFFIX = 'CHG'
  MOVE (AD=P) TO #SCN-ADD-ATTR
  MOVE (AD=P) TO #SCN-ADD-TEXT-ATTR (*)
ELSE
  IF NOT #COP-IND = 'Y' OR = 'N'
    REINPUT 'Must be "Y" or "N"'
      MARK *#COP-IND
  END-IF
*
  IF #COP-IND = 'Y'
    MOVE TRUE TO #COPY-NOTE
  END-IF
END-IF
*
IF #COPY-NOTE
  MOVE #CGA-SCR-ID TO #SCR-COPY-CN-1 (1)
  MOVE '*' TO #CGA-SCR-COMMAND
  INPUT TEXT 'Enter up to 60 CN"s to receive the subsequent Note'
    MARK *#SCR-COPY-CN-1 (2) USING MAP 'G4001MNU' /* also in E4300PDD
*
  IF #CGA-SCR-COMMAND NE '*'
    FETCH 'G1000PXX'
  END-IF
END-IF
*
IF #CGA-SCR-SUFFIX = 'NOD'
  ASSIGN *CURS-COL = 43
END-IF
*
IF #CGA-SCR-SUFFIX = 'ADD'
  MOVE 'A' TO #SCN-ADD-CODE
  ASSIGN *CURS-LINE = 19
  ASSIGN *CURS-COL = 19
END-IF
*
IF #CGA-SCR-SUFFIX = 'CHG'
  ASSIGN *CURS-LINE = 4
  ASSIGN *CURS-COL = 2
END-IF
*
IF RESTRICT-MBR-SW = 'Y'
  MOVE 'SPC CATEGORY MBR' TO #SCR-NOT-MSG
END-IF
*
IF DATE-OF-DEATH NE 0
  MOVE DOD-MM TO #DOD-DISP-MM
  MOVE DOD-DD TO #DOD-DISP-DD
  MOVE DOD-YYYY TO #DOD-DISP-YYYY
  COMPRESS #SCR-NOT-MSG 'DECEASED' #DOD-DISP  INTO #SCR-NOT-MSG
END-IF
*                                                /* NG1 Start
RESET #PDA-ADDRESS
MOVE ST-V.MEMBER-CONTACT-ID TO #ADD-CONTACT-ID
MOVE 'P' TO #ADD-TYPE
CALLNAT 'ADDN0001' #PDA-ADDRESS
IF #ADD-RETURNED-MAIL = 'Y'
  COMPRESS #SCR-NOT-MSG '-UNDELIVERABLE ADDRESS' INTO #SCR-NOT-MSG
ELSE
  IF #ADD-LINE-1 = ' '
    COMPRESS #SCR-NOT-MSG '-NO ADDRESS' INTO #SCR-NOT-MSG
  ELSE
    IF #ADD-ZIP-CODE = 0
      COMPRESS #SCR-NOT-MSG '-FOREIGN ADDRESS' INTO #SCR-NOT-MSG
    END-IF
  END-IF
END-IF
*                                                   NG1 End
IF ACCESS-AUTH-CODE = 'S'
  COMPRESS #SCR-NOT-MSG 'SPOUSE HAS FILE ACCESS' INTO #SCR-NOT-MSG
ELSE
  IF ACCESS-AUTH-CODE = 'Y'
    COMPRESS #SCR-NOT-MSG 'OK FILE ACCESS' INTO #SCR-NOT-MSG
  END-IF
END-IF
*
IF #COPY-NOTE
  FOR #ICOP 1 TO 20
    RESET #BAD-COPY
    IF #SCR-COPY-CN-1 (#ICOP) NE 0
      MOVE #SCR-COPY-CN-1 (#ICOP) TO #CGA-ID
      PERFORM PROCESS-RECORD
*
      IF #BAD-COPY
        MOVE TRUE TO #BAD-COPY-IND-1 (#ICOP)
      END-IF
    END-IF
  END-FOR
*
  FOR #ICOP 1 TO 20
    RESET #BAD-COPY
    IF #SCR-COPY-CN-2 (#ICOP) NE 0
      MOVE #SCR-COPY-CN-2 (#ICOP) TO #CGA-ID
      PERFORM PROCESS-RECORD
*
      IF #BAD-COPY
        MOVE TRUE TO #BAD-COPY-IND-2 (#ICOP)
      END-IF
    END-IF
  END-FOR
*
  FOR #ICOP 1 TO 20
    RESET #BAD-COPY
    IF #SCR-COPY-CN-3 (#ICOP) NE 0
      MOVE #SCR-COPY-CN-3 (#ICOP) TO #CGA-ID
      PERFORM PROCESS-RECORD
*
      IF #BAD-COPY
        MOVE TRUE TO #BAD-COPY-IND-3 (#ICOP)
      END-IF
    END-IF
  END-FOR
*
  FOR #ICOP 1 TO 20
    IF #BAD-COPY-IND-1 (#ICOP)
      MOVE #SCR-COPY-CN-1 (#ICOP) TO #CN
      PERFORM SHOW-COPY-ERROR
    END-IF
  END-FOR
*
  FOR #ICOP 1 TO 20
    IF #BAD-COPY-IND-2 (#ICOP)
      MOVE #SCR-COPY-CN-2 (#ICOP) TO #CN
      PERFORM SHOW-COPY-ERROR
    END-IF
  END-FOR
*
  FOR #ICOP 1 TO 20
    IF #BAD-COPY-IND-3 (#ICOP)
      MOVE #SCR-COPY-CN-3 (#ICOP) TO #CN
      PERFORM SHOW-COPY-ERROR
    END-IF
  END-FOR
ELSE
  PERFORM PROCESS-RECORD
END-IF
*
IF #COPY-NOTE
  RESET #CGA-SCR-SUFFIX
  MOVE 'All Copied Notes have been added' TO #SUP-MESSAGE
END-IF
*
MOVE (AD=P) TO #SCN-UPDATE-ATTR (*)
MOVE (AD=P) TO #SCN-ADD-ATTR
MOVE (AD=P) TO #SCN-ADD-TEXT-ATTR (*)
*
IF #CGA-SCR-COMMAND = '*'
  MOVE 'NU' TO #CGA-SCR-COMMAND
END-IF
*
INPUT WITH TEXT #SUP-MESSAGE MARK *#CGA-SCR-COMMAND
  USING MAP 'G4000MNU'
*
FETCH 'G1000PXX'
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SHOW-COPY-ERROR
* * * * * * * * * * * * * * * * *
WRITE 'Copied Note for CN' #CN
WRITE 'not applied due to edit errors'
WRITE 'Press ENTER to return to "NU" screen'
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE PROCESS-RECORD
* * * * * * * * * * * * * * * *
*
MOVE #CGA-ID TO #CGA-SCR-ID
RESET #NO-NOTES
  #NUM-CRIT-NOTES
*
FIND (1) NT-V WITH ID-NUMBER = #CGA-ID  /* VIEW USED FOR PROCESSING
END-FIND
*
FIND (1) NT-UPD-V WITH ID-NUMBER = #CGA-ID  /* VIEW USED FOR UPDATE
*
  IF NO RECORDS FOUND
    ASSIGN #NO-NOTES = TRUE
    MOVE #CGA-ID TO NT-V.ID-NUMBER
    ASSIGN #SCN-NUM-NOTES = 0
  END-NOREC
*
  IF #CGA-SCR-SUFFIX = 'BEN'
    MOVE 'A' TO #SCN-ADD-CODE
    COMPRESS 'BENEFICIARY CHANGE/IN VAULT/' #TODAY-MM-DD-YYYY
      '/END SENT' INTO #SCN-ADD-TEXT(1)
    ASSIGN *CURS-LINE = 19
    ASSIGN *CURS-COL = 48
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'PEN'
    MOVE 'Pending format: *@ MM/DD/YYYY instructions'
      TO #SCR-MAX-MSG
    MOVE 'A' TO #SCN-ADD-CODE
    COMPRESS '*@' #SCR-PAC-DT #PAC-TEXT INTO #SCN-ADD-TEXT(1)
    IF #SCR-PAC-DT = 'MM/DD/YYYY'
      ASSIGN *CURS-LINE = 19
      ASSIGN *CURS-COL = 22
    ELSE
      ASSIGN *CURS-LINE = 19
      ASSIGN *CURS-COL = 33   /* was 31
    END-IF
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'POS'
    MOVE 'A' TO #SCN-ADD-CODE
    COMPRESS '  POSTER(S)' INTO #SCN-ADD-TEXT (1)
    ASSIGN *CURS-LINE = 19
    ASSIGN *CURS-COL = 19
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'ATT'
    MOVE 'A' TO #SCN-ADD-CODE
    COMPRESS 'BENEFICIARY CHANGE/IN VAULT/' #TODAY-MM-DD-YYYY
      '/ATTACHED TO POLICY' INTO #SCN-ADD-TEXT(1)
    ASSIGN *CURS-LINE = 19
    ASSIGN *CURS-COL = 48
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'CCI'
    MOVE 'A' TO #SCN-ADD-CODE
    COMPRESS '*CANCEL INSURANCE WHEN CAP LOAN IS PAID OFF'
      INTO #SCN-ADD-TEXT(1)
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'REF'
    MOVE 'A' TO #SCN-ADD-CODE
    COMPRESS 'Refund processed to Finance $'
      INTO #SCN-ADD-TEXT(1)
    ASSIGN *CURS-LINE = 19
    ASSIGN *CURS-COL = 48
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'BKT'
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE '*Mbr in bnkrptcy; no more loans.' TO #SCN-ADD-TEXT(1)
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'RTL'
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE '* MEMBER ELECTS TO LOWER DEATH BENEFIT' TO #SCN-ADD-TEXT(1)
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'RTI'
    MOVE TRUE TO #FORCE-A                  /* DW5
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE '* MEMBER ELECTS TO INCREASE PREMIUM' TO #SCN-ADD-TEXT(1)
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'PYS'
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE   '*#ALOT:PAYS CNxxxxxx' TO #SCN-ADD-TEXT(1)
    MOVE #ALOT-CN-PAYS-A TO #SCN-ADD-TEXT-ALOT-PAYS-CN (1)
    ASSIGN *CURS-LINE = 19
    ASSIGN *CURS-COL = 34
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'PDB'
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE   '*#ALOT:PAID BY CNxxxxxx' TO #SCN-ADD-TEXT(1)
    MOVE #ALOT-CN-PAID-BY-A TO #SCN-ADD-TEXT-ALOT-PAID-BY-CN (1)
    ASSIGN *CURS-LINE = 19
    ASSIGN *CURS-COL = 37
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'CNV'
    MOVE TRUE TO #FORCE-A                  /* DW5
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE '* AUTO CONVERT PENDING FROM LT TO RT' TO #SCN-ADD-TEXT(1)
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'LOP'
    MOVE 'A' TO #SCN-ADD-CODE
    MOVE '* RESIGNED DUE TO LACK OF PAYMENT' TO #SCN-ADD-TEXT(1)
  END-IF
*
  IF #CGA-SCR-SUFFIX = 'DNS'                                    /* RE1
    MOVE 'A' TO #SCN-ADD-CODE                                   /* RE1
    MOVE '*Do not send to collections' TO #SCN-ADD-TEXT(1)      /* RE1
  END-IF                                                        /* RE1
*
  RESET #CGA-SCR-SUFFIX
*
  MOVE NT-V.C*NOTE-TABLE TO #INDEXT  /*LAST FILLED NOTE LINE
  ADD  1 TO #INDEXT                          /*BUMP TO UNUSED ONE
  MOVE #INDEXT TO #INDEXX                    /*HOLD FOR RETURN FROM ERR
  MOVE 1 TO #INDEXN                          /*START OF NOTES
  MOVE '* ' TO #CGA-SCR-COMMAND
*
  IF  #NO-NOTES
      OR (NT-V.C*NOTE-TABLE = 0)
    MOVE (AD=P) TO #SCN-UPDATE-ATTR (*)
*
    IF  (#COPY-NOTE AND #FIRST-TIME)
        OR (NOT #COPY-NOTE)
      INPUT TEXT #SCR-NOT-MSG MARK*#SCN-ADD-CODE USING MAP 'G4000MNU'
*
      IF #CGA-SCR-COMMAND NE '*'
        END TRANSACTION
        FETCH 'G1000PXX'
      END-IF
    END-IF
*
    PERFORM EDIT-ADD-AREA
*
    IF #BAD-COPY
      ESCAPE ROUTINE
    END-IF
  ELSE
    FOR #I1 1 TO NT-V.C*NOTE-TABLE /* COUNT EXISTING CRITICAL NOTES /* DW8
      IF   (NT-V.NOTE-TEXT (#I1) = MASK ('*'))
          AND (NT-V.NOTE-LINE-NUM (#I1) = 1)
        ADD 1 TO #NUM-CRIT-NOTES
        REPEAT
          IF  (#I1 + 1 GT NT-V.C*NOTE-TABLE)
              OR (NT-V.NOTE-LINE-NUM (#I1 + 1) = 1)
            ESCAPE BOTTOM
          ELSE
            ADD 1 TO #I1
            ADD 1 TO #NUM-CRIT-NOTES
          END-IF
        END-REPEAT
      END-IF
    END-FOR
*
    MOVE TRUE TO #FIRST-SCN
    REPEAT UNTIL #INDEXN GT NT-V.C*NOTE-TABLE
      RESET #SCN-UPDATE-ID   (*)
      RESET #SCN-UPDATE-TEXT (*)
      RESET #SCN-UPDATE-DATE (*)
      RESET #SCN-UPDATE-CODE (*)
      MOVE (AD=P) TO #SCN-UPDATE-ATTR (*)
      PERFORM FILL-SCREEN
*
      RESET #FIRST-SCN
      MOVE NT-V.C*NOTE-TABLE TO #SCN-NUM-NOTES
*
      IF #SCN-NUM-NOTES GT (#MAX-NT-NOTES - 5) /* WAS 55             /* DW8
        COMPUTE #I2 = #SCN-NUM-NOTES - (#MAX-NT-NOTES - 5) /* Was 55 /* DW8
        COMPUTE #I3 = 5 - #I2
        COMPRESS 'MAX LINES AVAIL=' #I3 'DELETE LINES TO'
          'ADD MORE THAN' #I3 INTO #SCR-MAX-MSG
        MOVE 5 TO #I3
        FOR #I1 1 TO #I2
          MOVE (AD=IP) TO #SCN-ADD-TEXT-ATTR (#I3)
          SUBTRACT 1 FROM #I3
        END-FOR
      END-IF
*
      IF  (#COPY-NOTE AND #FIRST-TIME)
          OR (NOT #COPY-NOTE)
        IF #COPY-NOTE
          MOVE (AD=P) TO #SCN-UPDATE-ATTR (*)
        END-IF
*
        IF   (#UPDATE-USER-DATE = 'N')
          MOVE 'USER and Date-last-update will not be changed on UPDATES'
            TO #SCR-NOT-MSG
        END-IF
*
        INPUT TEXT #SCR-NOT-MSG MARK *#SCN-ADD-CODE
          USING MAP 'G4000MNU'
*
        IF #CGA-SCR-COMMAND NE '*'
          END TRANSACTION
          FETCH 'G1000PXX'
        END-IF
      END-IF
*
      PERFORM EDIT-ADD-AREA
*
      IF #BAD-COPY
        ESCAPE ROUTINE
      END-IF
*
      IF NOT #COPY-NOTE
        PERFORM EDIT-UPDATE-AREA
      END-IF
*
      IF #UPDATE
        ESCAPE BOTTOM
      END-IF
*
      RESET #SCN-ADD-CODE
      RESET #SCN-ADD-TEXT (1:5)
*
    END-REPEAT
  END-IF
*
  RESET #CGA-SCR-SUFFIX
*
  IF #UPDATE
    IF #NO-NOTES
      MOVE 'INITIAL NOTES ADDED' TO #SUP-MESSAGE
      MOVE BY NAME NT-V TO NT-UPD-V
      STORE NT-UPD-V
      MOVE *ISN (0756) TO #NT-ISN
    ELSE
      PERFORM CLEAR-DELETED-LINES
      PERFORM RESEQUENCE-NOTES
*
      MOVE 'UPDATE TRANSACTION COMPLETED' TO #SUP-MESSAGE
*
      IF #IFINAL GT 0       /* IF THERE ARE AT LEAST 1 NOTE LINE
        UPDATE
        MOVE *ISN TO #NT-ISN
      ELSE
        DELETE
        MOVE *ISN TO #NT-ISN
      END-IF
    END-IF
*
    IF   (#SCN-ADD-CODE = 'A')
        AND (#SCN-ADD-TEXT (1) = MASK ('*@'))
      COMPRESS #SCN-ADD-TEXT-PAC-MM (1) #SCN-ADD-TEXT-PAC-DD (1)
        #SCN-ADD-TEXT-PAC-YYYY (1) INTO #WMMDDYYYY-A LEAVING NO
      RESET MBRSHIP-MTD-DET-V                /* create 'pd' entry
      MOVE #WYYYYMMDD-N  TO ENTRY-DATE
      MOVE #NT-ISN       TO REC-ISN
      MOVE 'S'           TO CODE
      MOVE #CGA-ISN      TO MBRSHIP-MTD-DET-V.ISSUE-DATE
      MOVE #CGA-ID       TO MBRSHIP-MTD-DET-V.ID-NUMBER
      MOVE #CGA-CLERK    TO USER
      MOVE 'I'           TO MBRSHIP-MTD-DET-V.USER-COMPANY    /* DW15
      STORE MBRSHIP-MTD-DET-V
*
      MOVE *PROGRAM TO #PROGRAM
      CALLNAT 'MSSNL003'           /* NG2
        MBRSHIP-MTD-DET-V.ID-NUMBER
        MBRSHIP-MTD-DET-V.CODE
        MBRSHIP-MTD-DET-V.USER-COMPANY
        MBRSHIP-MTD-DET-V.ISSUE-DATE
        #PROGRAM
        #USE-TIMX
    END-IF
*
    FOR #I1 1 TO 14
      IF   (#SCN-UPDATE-CODE (#I1) = 'U' OR = 'D')
          AND ((#SCN-UPDATE-TEXT (#I1) = MASK ('*@'))
          OR  (#DELETE-PEND-PD (#I1)))   /* PD TO BE DELETED
        IF #SCN-UPDATE-TEXT (#I1) = MASK ('*@')
          COMPRESS #SCN-UPD-TEXT-PAC-YYYY(#I1) #SCN-UPD-TEXT-PAC-MM(#I1)
            #SCN-UPD-TEXT-PAC-DD (#I1) INTO #WYYYYMMDD-A LEAVING NO
        END-IF
*
        READ MBRSHIP-MTD-DET-V BY ENTRY-DATE
            FROM #OLD-PAC-DATE (#I1)
            THRU #OLD-PAC-DATE (#I1)
          IF  ((REC-ISN = #NT-ISN)
              OR  (MBRSHIP-MTD-DET-V.ID-NUMBER = NT-UPD-V.ID-NUMBER))    /* DW7

              AND (CODE = 'S')
*           IF   (#SCN-UPDATE-CODE (#I1) = 'D')
            IF #DELETE-PEND-PD (#I1)
              DELETE (0806)
            ELSE
              IF #UPDATE-USER-DATE = 'Y'
                MOVE #CGA-CLERK   TO USER
              END-IF
*
              MOVE #WYYYYMMDD-N TO ENTRY-DATE
              UPDATE (0806)
            END-IF
            ESCAPE BOTTOM
          END-IF
        END-READ
*
      END-IF
    END-FOR
  ELSE
    MOVE 'NO UPDATES REQUESTED' TO #SUP-MESSAGE
  END-IF
END-FIND
*
IF #UPDATE
  FIND (1) ST-V WITH MEMBER-KEY = #CGA-ID-G
    IF #IFINAL GT 0          /* IF THERE ARE AT LEAST 1 NOTE LINE
      IF NOTE-REC-IND = 'Y'
        IGNORE
      ELSE
        MOVE 'Y' TO NOTE-REC-IND
        MOVE TRUE TO #ST-UPDATE
      END-IF
    ELSE
      IF NOTE-REC-IND NE  ' '
        RESET NOTE-REC-IND
        MOVE TRUE TO #ST-UPDATE
      END-IF
    END-IF
*
    IF #ST-UPDATE
      UPDATE (0836)
    END-IF
  END-FIND
END-IF
*
END TRANSACTION
*
IF #FORCE-A                                     /* DW5
  CALLNAT 'GAUTHSXX' ST-V.ID-NUMBER     /*Set ALOT-CHG-AUTH to A
    #CGA-CLERK  #FORCE-A
END-IF
*
END-SUBROUTINE
*
MOVE (AD=P) TO #SCN-UPDATE-ATTR (*)
MOVE (AD=P) TO #SCN-ADD-TEXT-ATTR (*)
MOVE (AD=P) TO #SCN-ADD-ATTR
*
* * * * * * * * * * * * * * *
DEFINE SUBROUTINE FILL-SCREEN
* * * * * * * * * * * * * * *
*
MOVE #INDEXN TO #INDEXB       /* START OF TABLE TO FILL SCRN
MOVE #INDEXN TO #INDEX1       /* START OF FIRST LINE OF FIRST MSG
*
FOR #ISCR 1 TO 14
  IF #INDEXN GT NT-V.C*NOTE-TABLE
    ESCAPE BOTTOM
  END-IF
*
  IF NT-V.NOTE-LINE-NUM(#INDEXN) = 1
    RESET #NUM-IN-MSSG                     /* DETERMINE NUMBER OF LINES
    FOR #I1 #INDEXN TO #MAX-NT-NOTES /* WAS 60   IN THIS NOTE    /* DW8
      ADD 1 TO #NUM-IN-MSSG
*
      IF  ((#I1 + 1) GT #MAX-NT-NOTES)  /* WAS 60           /* DW8
          OR (NT-V.NOTE-LINE-NUM (#I1 + 1) = 1)
          OR (NT-V.NOTE-TEXT     (#I1 + 1) = ' ')
        ESCAPE BOTTOM
      END-IF
    END-FOR
*
    IF #ISCR + #NUM-IN-MSSG GT 14   /* WE"RE DONE IF NOT ENOUGH ROOM
      ESCAPE BOTTOM
    END-IF
  END-IF
*
  IF NT-V.NOTE-LINE-NUM(#INDEXN) = 1
    MOVE NT-V.NOTE-CLERK-ID(#INDEXN) TO #SCN-UPDATE-ID(#ISCR)
    MOVE NT-V.NOTE-DATE (#INDEXN) TO #NOTE-DATE                    /* DW8
*    COMPRESS ND-MM(#INDEXN) '/' ND-DD(#INDEXN) '/' ND-YYYY(#INDEXN) /* DW8
*                      INTO #SCN-UPDATE-DATE(#ISCR) LEAVING NO SPACE
    COMPRESS #ND-MM '/' #ND-DD '/' #ND-YYYY                         /* DW8
      INTO #SCN-UPDATE-DATE(#ISCR) LEAVING NO SPACE
  END-IF
*
  MOVE NT-V.NOTE-TEXT(#INDEXN) TO #SCN-UPDATE-TEXT(#ISCR)
  RESET #SCN-UPDATE-ATTR (#ISCR)
*
  ADD 1 TO #INDEXN
END-FOR
*
IF #INDEXN GT NT-V.C*NOTE-TABLE
  IF #FIRST-SCN
    IGNORE
*   RESET #SCR-NOT-MSG
  ELSE
    MOVE 'LAST NOTE SCREEN' TO #SCR-NOT-MSG
  END-IF
ELSE
  MOVE 'MORE NOTES FOLLOW' TO #SCR-NOT-MSG
END-IF
*
END-SUBROUTINE
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE EDIT-ADD-AREA
* * * * * * * * * * * * * * * *
*
RESET #FIRST-TIME
*
IF #COPY-NOTE
  FIND (1) ST-V WITH MEMBER-KEY = #CGA-ID-G
    IF NO RECORDS FOUND
      MOVE TRUE TO #BAD-COPY
      ESCAPE ROUTINE
    END-NOREC
    MOVE *ISN TO #CGA-ISN
  END-FIND
END-IF
*
IF #SCN-ADD-CODE = ' '
  ESCAPE ROUTINE
END-IF
*
IF #SCN-ADD-CODE NE 'A'
  REINPUT WITH 'INVALID ADD CODE, MUST BE A OR BLANK'
    MARK *#SCN-ADD-CODE
END-IF
*
IF NT-V.C*NOTE-TABLE = #MAX-NT-NOTES   /* WAS 60              /* DW8
  IF #COPY-NOTE
    MOVE TRUE TO #BAD-COPY
    ESCAPE ROUTINE
  ELSE
    REINPUT WITH 'MAX LIMIT OF 500 NOTES REACHED - DELETE OLD NOTES'  /* DW8
      MARK *#CGA-SCR-COMMAND
  END-IF
END-IF
*
MOVE 1 TO #LINE-NUM
*
RESET #NUM-IN-MSSG     /* DETERMINE NUMBER OF LINES TO ADD
*
FOR #I1 1 TO 5
  IF #SCN-ADD-TEXT (#I1) = ' '
    ESCAPE TOP
  END-IF
*
  ADD 1 TO #NUM-IN-MSSG
END-FOR
*
IF #NUM-IN-MSSG = 0
  REINPUT WITH 'NO MESSAGES TO ADD'
    MARK *#SCN-ADD-TEXT (1)
END-IF
*
IF #INDEXT + #NUM-IN-MSSG - 1  GT #MAX-NT-NOTES    /* WAS 60      /* DW8
  IF #COPY-NOTE
    MOVE TRUE TO #BAD-COPY
    ESCAPE ROUTINE
  ELSE
    REINPUT WITH 'MAXIMUM NUMBER OF MESSAGES WILL BE GREATER THAN 500' /* DW8
      MARK *#SCN-ADD-TEXT (1)
  END-IF
END-IF
*
IF  (#CGA-SCR-SUFFIX = 'PEN')
    OR (#SCN-ADD-TEXT (1) = MASK ('*@'))
  IF #SCN-ADD-TEXT (1) NE MASK ('*@ 'MM'/'DD'/'YYYY' ')
    REINPUT 'Format of 1st 11 PEN chars must be "*@ MM/DD/YYYY"'
      MARK *#SCN-ADD-TEXT (1)
  END-IF
*
  COMPRESS #SCN-ADD-TEXT-PAC-YYYY (1) #SCN-ADD-TEXT-PAC-MM (1)
    #SCN-ADD-TEXT-PAC-DD (1) INTO #WYYYYMMDD-A LEAVING NO
  IF #WYYYYMMDD-N LE *DATN
    REINPUT 'PEN effective date must be in the future'
      MARK *#SCN-ADD-TEXT (1)
  END-IF
END-IF
*
IF  (#SCN-ADD-TEXT (1) = MASK ('*#ALOT:PAYS'))    /* DW3
    OR (#SCN-ADD-TEXT (1) = MASK ('*#ALOT:PAID BY'))
  FOR #I2 1 TO #MAX-NT-NOTES   /* WAS 60                      /* DW8
    IF NT-V.NOTE-TEXT (#I2) = #SCN-ADD-TEXT (1)
      MOVE 'NS' TO #CGA-SCR-COMMAND
      INPUT TEXT 'Exact Note already exists' USING MAP 'G1000MXX'
      FETCH 'G1000PXX'
    END-IF
  END-FOR
*
  IF #SCN-ADD-TEXT (1) = MASK ('*#ALOT:PAID BY')
    FOR #I2 1 TO #MAX-NT-NOTES    /* WAS 60                     /* DW8
      IF NT-V.NOTE-TEXT (#I2) = MASK ('*#ALOT:PAID BY')
        MOVE 'NS' TO #CGA-SCR-COMMAND
        INPUT TEXT 'Allotment is already paid by another Member'
          USING MAP 'G1000MXX'
        FETCH 'G1000PXX'
      END-IF
    END-FOR
  END-IF
END-IF
*
FOR #I1 1 TO 5
  IF #SCN-ADD-TEXT (#I1) GT ' '
    IF  (#I1 NE 1) AND (#SCN-ADD-TEXT (#I1) = MASK ('*@'))
      REINPUT '*@ only allowed on 1st line'
        MARK *#SCN-ADD-TEXT (#I1)
    END-IF
*
    MOVE #SCN-ADD-TEXT (#I1) TO NT-V.NOTE-TEXT     (#INDEXT)
    MOVE *DATN               TO NT-V.NOTE-DATE     (#INDEXT)
    MOVE #LINE-NUM           TO NT-V.NOTE-LINE-NUM (#INDEXT)
    MOVE #SCN-ADD-ID         TO NT-V.NOTE-CLERK-ID (#INDEXT)
    MOVE 'I'                 TO NT-V.USER-COMPANY  (#INDEXT)    /* DW10
    MOVE #INDEXT TO #IFINAL             /* FOR USES AS FINAL LINE
    ADD 1 TO #LINE-NUM
    ADD 1 TO #INDEXT
    MOVE TRUE TO #UPDATE
  END-IF
END-FOR
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE EDIT-UPDATE-AREA
* * * * * * * * * * * * * * * * *
*
MOVE #INDEXB TO #I3     /* RESET 1ST NOTE OF SCREEN
FOR #ISCR 1 TO 14
  IF #SCN-UPDATE-CODE (#ISCR) = 'D' OR = 'U' OR = ' '
    IGNORE
  ELSE
    REINPUT 'INVALID ACTION CODE; MUST BE D, U OR BLANK'
      MARK *#SCN-UPDATE-CODE (#ISCR)
  END-IF
*
  RESET #DELETE-PEND-PD (#ISCR)
  IF #SCN-UPDATE-CODE (#ISCR) = 'U'
    IF  ((NT-V.NOTE-TEXT (#I3) = MASK ('*@'))
        AND (#SCN-UPDATE-TEXT (#ISCR) NE MASK ('*@')))
      MOVE TRUE TO #DELETE-PEND-PD (#ISCR)
    END-IF
*
    IF  ((NT-V.NOTE-TEXT (#I3) NE MASK ('*@'))
        AND (#SCN-UPDATE-TEXT (#ISCR) = MASK ('*@')))
      REINPUT 'An existing note cannot be made pending'
        MARK *#SCN-UPDATE-TEXT (#ISCR)
    END-IF
*
    IF #SCN-UPDATE-TEXT (#ISCR) = MASK ('*@')
      IF #SCN-UPDATE-TEXT (#ISCR) NE MASK ('*@ 'MM'/'DD'/'YYYY' ')
        REINPUT 'Format of 1st 13 PEN chars must be "*@ MM/DD/YYYY"'
          MARK *#SCN-UPDATE-TEXT (#ISCR)
      END-IF
*
      IF #SCN-UPD-TEXT-PAC-YYYY (#ISCR) GT '2060'
        REINPUT 'Format of 1st 13 PEN chars must be "*@ MM/DD/YYYY"'
          MARK *#SCN-UPDATE-TEXT (#ISCR)
      END-IF
*
      COMPRESS #SCN-UPD-TEXT-PAC-YYYY(#ISCR) #SCN-UPD-TEXT-PAC-MM(#ISCR)
        #SCN-UPD-TEXT-PAC-DD (#ISCR) INTO #WYYYYMMDD-A LEAVING NO
*
      IF #WYYYYMMDD-N LE *DATN
        REINPUT 'PEN effective date must be in the future'
          MARK *#SCN-UPDATE-TEXT (#ISCR)
      END-IF
    END-IF
  END-IF
*
  IF   (#SCN-UPDATE-CODE (#ISCR) = 'U' OR = 'D')
      AND NOT (#CGA-CLERK = 'DRW' OR = 'VXT' OR = 'KHB'    /* vt1 removed 'MBW'
      OR = 'YAK'  OR = 'SKS' OR = 'ELB')  /* DW2 DW6 /* vt1
      AND ((NT-V.NOTE-TEXT (#I3) = MASK ('* POL ISS'))
      OR  (NT-V.NOTE-TEXT (#I3) = MASK ('*1035 EXCH')))
    REINPUT '"* POL ISS" or these Notes may not be UPDATED or DELETED'
      MARK *#SCN-UPDATE-CODE (#ISCR)
  END-IF
*
  IF   (#SCN-UPDATE-CODE (#ISCR) = 'U' OR = 'D')
      AND (NT-V.NOTE-TEXT (#I3) = MASK ('*@'))
    MOVE NT-V.NOTE-TEXT (#I3) TO #NOTE-TEXT-PAC-INFO             /* DW8
*  COMPRESS NT-V.NOTE-TEXT-PAC-YYYY (#I3) NT-V.NOTE-TEXT-PAC-MM (#I3) /* DW8
*       NT-V.NOTE-TEXT-PAC-DD (#I3) INTO #WYYYYMMDD-A LEAVING NO
    COMPRESS #NOTE-TEXT-PAC-YYYY #NOTE-TEXT-PAC-MM #NOTE-TEXT-PAC-DD /* DW8
      INTO #WYYYYMMDD-A LEAVING NO
    MOVE #WYYYYMMDD-N TO #OLD-PAC-DATE (#ISCR)
*
    IF #SCN-UPDATE-CODE (#ISCR) = 'D'
      MOVE TRUE TO #DELETE-PEND-PD (#ISCR)
    END-IF
  END-IF
*
  IF #SCN-UPDATE-CODE(#ISCR) = 'U'
    IF  ((NT-V.NOTE-TEXT (#I3) = MASK ('##'))
        OR (NT-V.NOTE-TEXT (#I3) = MASK ('*#')))
        AND NOT (#CGA-CLERK = 'DRW' OR = 'TDM' OR = 'KHB'     /* vt removed 'MBW'
        OR = 'BMG' OR = 'CEB' OR = 'VXT' OR = 'YAK')   /* DW2 PM9 /* vt1
      REINPUT '## or *# NOTES MAY NOT BE UPDATED'
        MARK *#SCN-UPDATE-CODE (#ISCR)
    END-IF
*
    MOVE #SCN-UPDATE-TEXT (#ISCR) TO NT-V.NOTE-TEXT (#I3)
    ASSIGN #UPDATE = TRUE
*
    IF #UPDATE-USER-DATE = 'Y'
      MOVE *DATN TO NT-V.NOTE-DATE          (#INDEX1)
      MOVE #CGA-CLERK TO NT-V.NOTE-CLERK-ID (#INDEX1)
    END-IF
  END-IF
*
  IF #SCN-UPDATE-CODE(#ISCR) = 'D'
    MOVE TRUE TO #DELETE-PEND-PD (#ISCR)
    IF  ((NT-V.NOTE-TEXT (#I3) = MASK ('##'))
        OR (NT-V.NOTE-TEXT (#I3) = MASK ('*#')))
        AND NOT (#CGA-CLERK = 'DRW' OR = 'KHB'  OR = 'BMG'   /* vt removed 'MBW'
        OR = 'CEB' OR = 'VXT')   /* PM9 /* vt1
      REINPUT '## NOTES MAY NOT BE DELETED'
        MARK *#SCN-UPDATE-CODE (#ISCR)
    END-IF
*
    IF NT-V.NOTE-LINE-NUM (#I3) = 1
      COMPUTE #I1 = #I3 + 1
      COMPUTE #I2 = #ISCR   + 1
      REPEAT
*
        IF  (#I1 GT NT-V.C*NOTE-TABLE)
            OR (NT-V.NOTE-LINE-NUM (#I1) = 1)
          ESCAPE BOTTOM
        END-IF
*
        MOVE 'D' TO #SCN-UPDATE-CODE (#I2)
        ADD 1 TO #I1
        ADD 1 TO #I2
      END-REPEAT
    END-IF
*
    MOVE NT-V.NOTE-LINE-NUM (#I3) TO #LINE-NUM
*
    IF #LINE-NUM LT 5
      COMPUTE #I1 = #I3 + 1    /* RESET THE LINE NUMBER
*
      FOR #I2 #LINE-NUM TO 5
        IF  (#I1 GT NT-V.C*NOTE-TABLE)
            OR (NT-V.NOTE-LINE-NUM (#I1) = 1)
          ESCAPE BOTTOM
        END-IF
*
        SUBTRACT 1 FROM NT-V.NOTE-LINE-NUM (#I1)
        ADD 1 TO #I1
      END-FOR
    END-IF
*
    RESET NT-V.NOTE-TEXT     (#I3)
    RESET NT-V.NOTE-DATE     (#I3)
    RESET NT-V.NOTE-CLERK-ID (#I3)
    MOVE 0 TO  NT-V.NOTE-LINE-NUM (#I3)
    RESET NT-V.USER-COMPANY  (#I3)                /* DW10
    MOVE TRUE TO #UPDATE
  END-IF
*
  ADD 1 TO #I3
*
  IF   (#I3 LT (#MAX-NT-NOTES + 1))          /* WAS 61           /* DW8
      AND (NT-V.NOTE-LINE-NUM (#I3) = 1)
    MOVE #I3 TO #INDEX1
  END-IF
*
END-FOR
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CLEAR-DELETED-LINES
* * * * * * * * * * * * * * * * * * *
*
MOVE 1 TO #INDEXN
SUBTRACT 1 FROM #INDEXT              /* TOTAL NUMBER OF LINES
*
IF #INDEXT GT #MAX-NT-NOTES   /* WAS 60                     /* DW8
  REINPUT WITH 'ERROR ON ROUTINE CLEAR-DELETED; CALL EDS'
    MARK *#CGA-SCR-COMMAND
END-IF
*
FOR #I1 1 TO #INDEXT
  IF NT-V.NOTE-TEXT(#I1) = ' '
    ESCAPE TOP
  END-IF
*
  MOVE NT-V.NOTE-TEXT     (#I1) TO NT-V.NOTE-TEXT     (#INDEXN)
  MOVE NT-V.NOTE-CLERK-ID (#I1) TO NT-V.NOTE-CLERK-ID (#INDEXN)
  MOVE NT-V.NOTE-DATE     (#I1) TO NT-V.NOTE-DATE     (#INDEXN)
  MOVE NT-V.NOTE-LINE-NUM (#I1) TO NT-V.NOTE-LINE-NUM (#INDEXN)
  MOVE NT-V.USER-COMPANY  (#I1) TO NT-V.USER-COMPANY  (#INDEXN)    /* DW10
  ADD 1 TO #INDEXN
END-FOR
*
IF #INDEXN LT (#MAX-NT-NOTES + 1)   /* WAS 61                  DW8
  FOR #I1 #INDEXN TO #MAX-NT-NOTES      /* 60                /* DW8
    RESET NT-V.NOTE-TEXT     (#I1)
    RESET NT-V.NOTE-DATE     (#I1)
    MOVE 0 TO NT-V.NOTE-LINE-NUM (#I1)
    RESET NT-V.NOTE-CLERK-ID (#I1)
    RESET NT-V.USER-COMPANY  (#I1)                /* DW10
  END-FOR
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE RESEQUENCE-NOTES
* * * * * * * * * * * * * * * * *
*
RESET NT-UPD-V.NOTE-DATE     (*)  /* PUT IMPORTANT NOTES AT
  NT-UPD-V.NOTE-CLERK-ID (*)  /* BEGINNING
  NT-UPD-V.NOTE-TEXT     (*)
MOVE 0 TO NT-UPD-V.NOTE-LINE-NUM (*) /* SEEMS TO BE A PROBLEM WITH
*            RESETTING A PACKED P1 HERE
RESET NT-UPD-V.USER-COMPANY (*)                 /* DW10
RESET #I2
FOR #I1 1 TO #MAX-NT-NOTES       /* WAS 60                   /* DW8
  IF  (#I1 GT #MAX-NT-NOTES)     /* WAS 60                   /* DW8
      OR (NT-V.NOTE-TEXT (#I1) = ' ')
    ESCAPE BOTTOM
  END-IF
*
  IF   (NT-V.NOTE-TEXT     (#I1) = MASK ('*')) /* IMPORTANT NOTES
      AND (NT-V.NOTE-LINE-NUM (#I1) = 1)  /* ARE PRECEDED BY "*"
    REPEAT
      ADD 1 TO #I2
      MOVE NT-V.NOTE-DATE     (#I1) TO NT-UPD-V.NOTE-DATE    (#I2)
      MOVE NT-V.NOTE-CLERK-ID (#I1) TO NT-UPD-V.NOTE-CLERK-ID(#I2)
      MOVE NT-V.NOTE-LINE-NUM (#I1) TO NT-UPD-V.NOTE-LINE-NUM(#I2)
      MOVE NT-V.NOTE-TEXT     (#I1) TO NT-UPD-V.NOTE-TEXT    (#I2)
      MOVE NT-V.USER-COMPANY  (#I1) TO NT-UPD-V.USER-COMPANY (#I2)    /* DW10
      MOVE #I2 TO #IFINAL                /* FOR USES AS FINAL LINE
*
      IF  (#I1 + 1) GT #MAX-NT-NOTES   /* Was 60              /* DW8
          OR (NT-V.NOTE-LINE-NUM (#I1 + 1) = 1)
          OR (NT-V.NOTE-TEXT     (#I1 + 1) = ' ')
        ESCAPE BOTTOM
      END-IF
*
      ADD 1 TO #I1
    END-REPEAT
  END-IF
END-FOR
*
FOR #I1 1 TO #MAX-NT-NOTES   /* WAS 60 /* PUT NEW OR UPDATED NOTES NEXT  DW8
  IF  (#I1 GT #MAX-NT-NOTES)   /* WAS 60                          /* DW8
      OR (NT-V.NOTE-TEXT (#I1) = ' ')
    ESCAPE BOTTOM
  END-IF
*
  IF   (NT-V.NOTE-DATE     (#I1) = *DATN)  /* 1ST LINE OF NOTE
      AND (NT-V.NOTE-TEXT     (#I1) NE MASK ('*')) /* IMPORTANT NOTES
      AND (NT-V.NOTE-LINE-NUM (#I1) = 1)  /* ADDED OR CHANGED TODAY
    REPEAT
      ADD 1 TO #I2
      MOVE NT-V.NOTE-DATE     (#I1) TO NT-UPD-V.NOTE-DATE    (#I2)
      MOVE NT-V.NOTE-CLERK-ID (#I1) TO NT-UPD-V.NOTE-CLERK-ID(#I2)
      MOVE NT-V.NOTE-LINE-NUM (#I1) TO NT-UPD-V.NOTE-LINE-NUM(#I2)
      MOVE NT-V.NOTE-TEXT     (#I1) TO NT-UPD-V.NOTE-TEXT    (#I2)
      MOVE NT-V.USER-COMPANY  (#I1) TO NT-UPD-V.USER-COMPANY (#I2)    /* DW10
      MOVE #I2 TO #IFINAL                /* FOR USES AS FINAL LINE
*
      IF  (#I1 + 1) GT #MAX-NT-NOTES   /* WAS 60          /* DW8
          OR (NT-V.NOTE-LINE-NUM (#I1 + 1) = 1)
          OR (NT-V.NOTE-TEXT     (#I1 + 1) = ' ')
        ESCAPE BOTTOM
      END-IF
*
      ADD 1 TO #I1
    END-REPEAT
  END-IF
END-FOR
*
FOR #I1 1 TO #MAX-NT-NOTES /* WAS 60 /* PUT THE REST OF THEM ON RECORD  DW8
  IF  (#I1 GT #MAX-NT-NOTES)   /* WAS 60                             /* DW8
      OR (NT-V.NOTE-TEXT (#I1) = ' ')
    ESCAPE BOTTOM
  END-IF
*
  IF   (NT-V.NOTE-DATE     (#I1) NE *DATN)  /* 1ST LINE OF ALL
      AND (NT-V.NOTE-LINE-NUM (#I1) = 1)  /* OTHER NOTES
      AND (NT-V.NOTE-TEXT     (#I1) NE MASK ('*')) /* IMPORTANT NOTES
    REPEAT
      ADD 1 TO #I2
      MOVE NT-V.NOTE-DATE     (#I1) TO NT-UPD-V.NOTE-DATE    (#I2)
      MOVE NT-V.NOTE-CLERK-ID (#I1) TO NT-UPD-V.NOTE-CLERK-ID(#I2)
      MOVE NT-V.NOTE-LINE-NUM (#I1) TO NT-UPD-V.NOTE-LINE-NUM(#I2)
      MOVE NT-V.NOTE-TEXT     (#I1) TO NT-UPD-V.NOTE-TEXT    (#I2)
      MOVE NT-V.USER-COMPANY  (#I1) TO NT-UPD-V.USER-COMPANY (#I2)    /* DW10
      MOVE #I2 TO #IFINAL                /* FOR USES AS FINAL LINE
*
      IF  (#I1 + 1) GT #MAX-NT-NOTES   /* Was 60                    /* DW8
          OR (NT-V.NOTE-LINE-NUM (#I1 + 1) = 1)
          OR (NT-V.NOTE-TEXT     (#I1 + 1) = ' ')
        ESCAPE BOTTOM
      END-IF
*
      ADD 1 TO #I1
    END-REPEAT
  END-IF
END-FOR
*
END-SUBROUTINE /*(1231)
*
END
