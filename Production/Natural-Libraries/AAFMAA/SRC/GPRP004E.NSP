* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
************************************************************************
* NAME         : GPRP004E - clone of GPRP0004 for E-CHECKs             *
* DESCRIPTION  : Create daily reports for financial management         *
*                1. Nightly peachtree file with E-CHECK AR records     *
*                   sorted by Account number                           *
*                2. Nightly peachtree file with E-CHECK AR records     *
*                   sorted by CN number                                *
*                3. Nightly reconcilliation report sorted by           *
*                   Account number / grouped by Clerk id               *
*                4. Add records to daily email input file for e-mail   *
*                   driver/automated e-mail processing                 *
************************************************************************
*        MODIFICATION LOG                                              *
************************************************************************
* USER   DATE        TAG     REASON                                    *
* YAK    04/10/2014  None    Program Written                           *
*                            cloned from GPRP0004 for E-CHECKs         *
*                            Replaced hardcoding for new GL accounts   *
*                            with table entries and function           *
* YAK    07/25/2014  YK1     Changes in Email PDA (add clerk fields,   *
*                            rename CC-CHARGE to E-CHARGE )            *
* vxt    12/08/2014  vt1     Add account-description field             *
* vxt    01/05/2015  vt2     Ticket 3270 - change the layout of the    *
*                            account file.                             *
* YAK    06/10/2015  YK2     Add logic to get policy owner for         *
*                            salutation in the notification email)     *
* vxt   02/25/2016   vt3     /Ticket 4263 - separate daily CC email    *
*                            from daily e-mail/                        *
* vxt   03/23/2016   vt4    /Ticket 4252 - new GL code for services    *
* bz    07/07/2017   bz-name Fine Names                                *
* YAK   11/08/2017   YK3     Send email to Owner/Payer                 *
* YF    12/13/2017   YF1     /Ticket 6743 - Update to Owner/Payer email*
************************************************************************
*
DEFINE DATA
LOCAL USING GPRL0001       /* Property file
LOCAL USING OBJLACRG       /* Accounting Register
LOCAL USING GPRA0005       /* E-mail Information
*
LOCAL
*
1 #OUTPUT-RECORD
  2 #ACCOUNT-NUMBER         (A4)
  2 #ACCOUNT-DESCRIPTION    (A25)
  2 #AMOUNT                 (N7.2)
  2 #AMOUNT-DISPLAY         (A11)
  2 ID-NUMBER               (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A           (A6)
  2 #NAME                   (A25)
  2 TXN-CODE                (A4)
  2 CLERK-ID                (A3)
  2 #SG-CATEGORY-1          (A2)
  2 CASH-CODE               (A1)
  2 MONTH-END               (A1)
  2 POLICY-NUMBER           (A16)
  2 POLICY-SEGMENT          (N1)
*
1 #PEACHTREE-DYNAMIC-FIELDS
  2 #PEACHTREE              (A150)
  2 #PEACH-ACCOUNT-NUMBER   (A9)
  2 #DESCRIPTION-1          (A25)
  2 #DESCRIPTION-2          (A25)
  2 #PEACHTREE-AMOUNT       (A20)
  2 #PEACH-ACC-NBR          (a9)             /* vt2
*
1 #PEACHTREE-STATIC-FIELDS
  2 #PEACHTREE-DATE         (A10)
  2 #PEACHTREE-REC-CNT      (N8)
  2 #PEACH-REC-CNT-NEW      (n8)             /* vt2
*
1 #DATN                     (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY              (N4)
  2 #DATN-MM                (A2)
  2 #DATN-DD                (A2)
1 #I                        (I2)
1 #CNT                      (N7)
1 #CNT-1                    (N7)
1 #CNT-2                    (N7)
1 #TXN-CODE                 (A6)
1 #IGNORE-TRAN              (A4) INIT <'5655'>    /* FLNF
1 #WRITE-OFF-TRAN           (A4) INIT <'5476'>
1 #NAME-D                   (A)  DYNAMIC
1 #COMMA                    (A1) INIT <','>
1 #TAB                      (A1) INIT <H'09'>
1 #TOTAL-AMOUNT             (N9.2)
1 #GRAND-TOTAL-AMOUNT       (N9.2)
1 #USER-TOTAL               (N9.2/*)
1 #TRAN-USER-TOTAL          (A/*) DYNAMIC
1 #WORK-AMOUNT              (A) DYNAMIC
1 #REPORT-OUTPUT            (A150)
1 #CLERK-ID                 (A3)
1 #CLERK-SEQ                (N2)
1 #WORK-FIELD               (A) DYNAMIC
1 #EMPTY-FILE-CMD           (A) DYNAMIC INIT <'>'>
1 #WEB-ECHECK-SUCCESSFUL-TEMPLATE    (A3) INIT <'WES'>     /* WebCheck successful charge
1 #WEB-ECHECK-SUCCESSFUL-TEMPLATE-C  (A3) INIT <'WEC'>     /* WebCheck credit
1 #DEFAULT-USER             (A3) CONST <'DFT'>
1 #DAILY-ECHECK-TRAN  (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/ECheckDailyTran.txt'>
1 #PEACHTREE-DAILY-EC-TRAN-BY-ACCOUNT (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/ECheckTranByAccount.txt'>
1 #PEACHTREE-DAILY-EC-TRAN-BY-TRANSACTION (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/ECheckTranByTrans.txt'>
1 #REC-DAILY-EC-TRAN-BY-CLERK (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/ECheckRecTranByClerk.txt'>
1 #TRAN-USER-ARRAY           (A3/*)
1 #NEW-GL-ACCOUNT (A4/10) CONST <'PREP','PRER','FPFP','FPFR','FPRP','RIDP','RIDR','DUEP','DUER','DISC'>
1 #GL-ACCOUNT     (A/2) DYNAMIC
1 #Dynamic_Name     (A) DYNAMIC
* YK3 >
1 #OWNER-CI     (N8)
1 #PAYER-CI     (N8)
1 #OWNER-EMAIL  (A) DYNAMIC
1 #EMAIL-DEL    (A1) CONST <','>
* < YK3
END-DEFINE
*
ON ERROR
  WRITE ACCT-REG-V.ID-NUMBER
END-ERROR
WRITE 'process started'
DEFINE WORK FILE 1 #DAILY-ECHECK-TRAN TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 2 #PEACHTREE-DAILY-EC-TRAN-BY-ACCOUNT TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 3 #PEACHTREE-DAILY-EC-TRAN-BY-TRANSACTION TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 4 #REC-DAILY-EC-TRAN-BY-CLERK TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 5 #EMAIL-CC-DAILY-FILE TYPE 'ASCII-COMPRESSED' ATTRIBUTES 'APPEND'   /* vt3 was #email-daily-file
*
* Delete old transaction file
CALLNAT 'GPRN0002' #EMPTY-FILE-CMD #DAILY-ECHECK-TRAN
* Write Header to report files
#PEACHTREE := '1,2,3,4,5,6'
* WRITE WORK FILE 2 #PEACHTREE                      /* vt2
WRITE WORK FILE 3 #PEACHTREE
#PEACHTREE := '1,2,3,4,5,6,7,8'                     /* vt2
WRITE WORK FILE 2 #PEACHTREE                        /* vt2
*
#DATN := *DATN
IF *TIMN < 1200000
  #WORK-FIELD := FUNCTION-CALENDAR(<#DATN,'H'>)
  #DATN   := VAL(#WORK-FIELD)
END-IF
*
RESET #PEACHTREE
#WORK-FIELD := FUNCTION-CALENDAR(<#DATN,'D'>)
COMPRESS 'Daily R/C  -  ECheck' #WORK-FIELD INTO #REPORT-OUTPUT
WRITE WORK FILE 4 #REPORT-OUTPUT
RESET #PEACHTREE #REPORT-OUTPUT
*
EXPAND ARRAY #TRAN-USER-ARRAY TO (*:50)
FIND ACCT-REG-V WITH TRANSACTION-DATN = #DATN
  IF NO RECORDS FOUND
    WRITE 'There are no ECheck accounting transaction records for ' #DATN
  END-NOREC
  IF ACCT-REG-V.CLERK-ID = ' '
    ACCT-REG-V.CLERK-ID := #DEFAULT-USER
  END-IF
  IF ACCT-REG-V.CASH-CODE = 'H'
    #CNT := #CNT + 1
    RESET #OUTPUT-RECORD
    #NAME-D := ACCT-REG-V.NAME
    #NAME := FUNCTION-FORM-NAME(<#NAME-D,'U'>)
    MOVE BY NAME ACCT-REG-V TO #OUTPUT-RECORD
*   #POL-SEG := F_POLICY_SEGMENT(<#OUTPUT-RECORD.POLICY-NUMBER,#OUTPUT-RECORD.ID-NUMBER-A>)
    #OUTPUT-RECORD.POLICY-SEGMENT := F_POLICY_SEGMENT(<#OUTPUT-RECORD.POLICY-NUMBER,#OUTPUT-RECORD.ID-NUMBER-A>)
    EXAMINE #TRAN-USER-ARRAY(*) FOR #OUTPUT-RECORD.CLERK-ID INDEX #I
    IF #I = 0
      #CLERK-SEQ := #CLERK-SEQ + 1
      #TRAN-USER-ARRAY(#CLERK-SEQ) := #OUTPUT-RECORD.CLERK-ID
    END-IF
    IF C*SUNGARD-INFO = 0
      IF ACCT-REG-V.CREDIT-AMOUNT NE 0
        #AMOUNT := ACCT-REG-V.CREDIT-AMOUNT * -1
      ELSE
        #AMOUNT := ACCT-REG-V.DEBIT-AMOUNT
      END-IF
      PERFORM WRITE-OUTPUT-RECORD
    ELSE
      FOR #I = 1 TO C*SUNGARD-INFO
        #SG-CATEGORY-1 := SG-CATEGORY-1(#I)
        IF #SG-CATEGORY-1 = '**'
          RESET #SG-CATEGORY-1
        END-IF
        IF ACCT-REG-V.CREDIT-AMOUNT NE 0
          #AMOUNT := ACCT-REG-V.SG-AMOUNT(#I) * -1
        ELSE
          #AMOUNT := ACCT-REG-V.SG-AMOUNT(#I)
        END-IF
        PERFORM WRITE-OUTPUT-RECORD
      END-FOR
    END-IF
* common code in subroutine
**=======================================
    DEFINE SUBROUTINE WRITE-OUTPUT-RECORD
**=======================================
    COMPRESS ACCT-REG-V.TXN-CODE #SG-CATEGORY-1 INTO #TXN-CODE LEAVING NO
    #ACCOUNT-NUMBER := FUNCTION-ACCT-NUMBER(<#TXN-CODE>)(1)
    #ACCOUNT-DESCRIPTION := FUNCTION-ACCT-NUMBER(<#TXN-CODE>)(2)
* New General Ledger Account numbers for some transactions
    IF #DATN GE 20140101 AND ACCT-REG-V.TXN-CODE = #NEW-GL-ACCOUNT(*) AND POLICY-SEGMENT <> 0 AND #SG-CATEGORY-1 <> 'SS'
      #GL-ACCOUNT(*)       := F-GL-ACCOUNT(<ACCT-REG-V.ID-NUMBER,POLICY-SEGMENT,#SG-CATEGORY-1>)(*)
      IF #GL-ACCOUNT(*) <> ' '
        #ACCOUNT-NUMBER      := #GL-ACCOUNT(1)
        #ACCOUNT-DESCRIPTION := #GL-ACCOUNT(2)
************* TEMPORARY FIX 12/05/2014 *************
        IF #SG-CATEGORY-1 = 'SP' AND SG-CATEGORY-2(#I) = 'AL'
          #ACCOUNT-NUMBER      := '4028'
          #account-description := 'First Year Premiums - AL'     /* vt1
        END-IF
*
        if #DATN GE 20160301 and #sg-category-1 = 'SS'         /* vt4 \/
          #ACCOUNT-NUMBER      := '4115'
          #account-description := 'SAS Service'
        end-if                                                 /* vt4 /\
      END-IF
    END-IF
*
    IF #ACCOUNT-NUMBER = #IGNORE-TRAN
      ESCAPE ROUTINE
    END-IF
    MOVE EDITED #AMOUNT (EM=-ZZZZZZ9.99) TO #AMOUNT-DISPLAY
    WRITE WORK FILE 1 VARIABLE #OUTPUT-RECORD
    END-SUBROUTINE
  END-IF
END-FIND
IF #CLERK-SEQ > 0
  RESIZE ARRAY #TRAN-USER-ARRAY TO (*:#CLERK-SEQ)
END-IF
*
IF #CNT = 0
  WRITE 'There are no ECheck transaction records for ' #DATN
  ESCAPE ROUTINE
END-IF
*
CLOSE WORK FILE 1
PERFORM CREATE-EC-PEACHTREE-FILE-BY-ACCOUNT
PERFORM CREATE-EC-PEACHTREE-FILE-BY-TRANSACTION
PERFORM CREATE-EC-FILE-BY-CLERK
WRITE 'Process ended'
*
*********************************************************
DEFINE SUBROUTINE CREATE-EC-PEACHTREE-FILE-BY-ACCOUNT
*********************************************************
*
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
* Count number of rows first
SORT BY #ACCOUNT-NUMBER USING #AMOUNT
  AT BREAK OF #ACCOUNT-NUMBER
    #CNT-1 := #CNT-1 + 1
  END-BREAK
  AT END OF DATA
    #CNT-1 := #CNT-1 + 1                   /* Add summary line
    #CNT-2 := COUNT(#AMOUNT) + 1
  END-ENDDATA
END-SORT
*
#PEACHTREE-DATE       := FUNCTION-CALENDAR(<#DATN,'D'>)
#PEACHTREE-REC-CNT    := #CNT-1
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
SORT BY #ACCOUNT-NUMBER USING #ACCOUNT-DESCRIPTION #AMOUNT #OUTPUT-RECORD.TXN-CODE
  #TOTAL-AMOUNT := #TOTAL-AMOUNT + #AMOUNT
  AT BREAK OF #ACCOUNT-NUMBER
    #PEACH-ACCOUNT-NUMBER := OLD(#ACCOUNT-NUMBER)
    #DESCRIPTION-1        := OLD(#ACCOUNT-DESCRIPTION)
    COMPRESS 'ECHK' #PEACHTREE-DATE INTO #DESCRIPTION-2
*   IF #ACCOUNT-NUMBER = #WRITE-OFF-TRAN          /* PM7
    IF OLD(#ACCOUNT-NUMBER) = #WRITE-OFF-TRAN     /* PM7
      COMPRESS #PEACH-ACCOUNT-NUMBER '- 07' INTO #PEACH-ACCOUNT-NUMBER
    ELSE
      COMPRESS #PEACH-ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
    END-IF
    MOVE EDITED #TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
    MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
    #PEACH-REC-CNT-NEW := #PEACHTREE-REC-CNT -1         /* vt2
    #PEACH-ACC-NBR     := '1010 - 00'                   /* vt2
    COMPRESS #PEACHTREE-DATE #COMMA
      #DESCRIPTION-2 #COMMA                             /* vt2
      #PEACH-REC-CNT-NEW #COMMA                         /* vt2
      #PEACH-ACCOUNT-NUMBER #COMMA
      #DESCRIPTION-1 #COMMA                             /* vt2
      #PEACHTREE-AMOUNT #COMMA                          /* vt2
      #PEACH-ACC-NBR  #COMMA                            /* vt2
      #DESCRIPTION-2                                    /* vt2
      INTO #PEACHTREE LEAVING NO
    WRITE WORK FILE 2 #PEACHTREE
    #GRAND-TOTAL-AMOUNT := #GRAND-TOTAL-AMOUNT + #TOTAL-AMOUNT
    RESET #TOTAL-AMOUNT #PEACHTREE-DYNAMIC-FIELDS
  END-BREAK
END-SORT
*
END-SUBROUTINE
*
*********************************************************
DEFINE SUBROUTINE CREATE-EC-PEACHTREE-FILE-BY-TRANSACTION
*********************************************************
*
RESET #PEACHTREE-DYNAMIC-FIELDS
#PEACHTREE-REC-CNT    := #CNT-2
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
SORT BY #OUTPUT-RECORD.ID-NUMBER #OUTPUT-RECORD.POLICY-NUMBER
    USING #ACCOUNT-NUMBER #AMOUNT ID-NUMBER-A
    #NAME #OUTPUT-RECORD.TXN-CODE  #OUTPUT-RECORD.CLERK-ID #OUTPUT-RECORD.POLICY-SEGMENT
  RESET #DESCRIPTION-1 #DESCRIPTION-2
  IF #ACCOUNT-NUMBER = #WRITE-OFF-TRAN
    COMPRESS #ACCOUNT-NUMBER '- 07' INTO #PEACH-ACCOUNT-NUMBER
  ELSE
    COMPRESS #ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
  END-IF
  COMPRESS #OUTPUT-RECORD.TXN-CODE #DATN-MM #DATN-DD 'CN' #OUTPUT-RECORD.ID-NUMBER-A
    INTO #DESCRIPTION-1 LEAVING NO
  IF #OUTPUT-RECORD.TXN-CODE NE 'APFP'
    COMPRESS #NAME #OUTPUT-RECORD.POLICY-NUMBER INTO #DESCRIPTION-2
  ELSE
    #DESCRIPTION-2 := #NAME
  END-IF
  #TOTAL-AMOUNT := #TOTAL-AMOUNT + #AMOUNT
  MOVE EDITED #AMOUNT (EM=-ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
  MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
  COMPRESS #PEACHTREE-DATE #COMMA
    #DESCRIPTION-1  #COMMA
    #PEACHTREE-REC-CNT #COMMA
    #PEACH-ACCOUNT-NUMBER #COMMA
    #DESCRIPTION-2 #COMMA
    #OUTPUT-RECORD.CLERK-ID #COMMA
    #PEACHTREE-AMOUNT INTO #PEACHTREE LEAVING NO
  WRITE WORK FILE 3 #PEACHTREE
  RESET #PEACHTREE-DYNAMIC-FIELDS
*
  AT BREAK OF #OUTPUT-RECORD.POLICY-NUMBER
    IF OLD(#OUTPUT-RECORD.CLERK-ID) <> 'MBR'
      RESET EMAIL-INFORMATION #OWNER-EMAIL                                                 /* YF1
      EMAIL-INFORMATION.E-CHARGE-AMOUNT := SUM(#AMOUNT)   /* YK1
      EMAIL-INFORMATION.DAL-CN := EMAIL-INFORMATION.PENDING-CN := OLD(#OUTPUT-RECORD.ID-NUMBER)
      EMAIL-INFORMATION.POLICY-NUMBER    := OLD(#OUTPUT-RECORD.POLICY-NUMBER)
* YK3 >
*       IF OLD(#OUTPUT-RECORD.POLICY-SEGMENT) NE 0
*         #POLICY-SEGMENT := OLD(#OUTPUT-RECORD.POLICY-SEGMENT)
*         PERFORM GET-OWNER-EMAIL-SALUTATION
*         EMAIL-INFORMATION.OWNER-EMAIL := FUNCTION-OWNER-EMAIL(<EMAIL-INFORMATION.DAL-CN,#POLICY-SEGMENT>)
*       END-IF
      #OWNER-CI := GET-POL-OWNER-CI(<EMAIL-INFORMATION.POLICY-NUMBER>)(1)                  
      #PAYER-CI := GET-POL-PAYER-CI(<EMAIL-INFORMATION.POLICY-NUMBER>)
      IF #OWNER-CI <> 0                                                                    /* YF1
        #OWNER-EMAIL := F-PREF-EMAIL(<#OWNER-CI>)
      END-IF                                                                               /* YF1
      IF (#OWNER-CI <> #PAYER-CI) AND (#PAYER-CI <> 0)                                     /* YF1
        COMPRESS #OWNER-EMAIL F-PREF-EMAIL(<#PAYER-CI>) INTO #OWNER-EMAIL WITH DELIMITER #EMAIL-DEL
      END-IF
      EMAIL-INFORMATION.OWNER-EMAIL := #OWNER-EMAIL                                        
* < YK3
    IF EMAIL-INFORMATION.OWNER-EMAIL = ' '
      EMAIL-INFORMATION.OWNER-EMAIL   := FUNCTION-MEMBER-EMAIL(<EMAIL-INFORMATION.DAL-CN>)
    END-IF
    IF EMAIL-INFORMATION.OWNER-EMAIL = ' '
      EMAIL-INFORMATION.OWNER-EMAIL   := FUNCTION-CN-EMAIL(<EMAIL-INFORMATION.DAL-CN>)
    END-IF
*
    IF EMAIL-INFORMATION.OWNER-EMAIL <> ' '
      IF EMAIL-INFORMATION.E-CHARGE-AMOUNT GT 0          /* YK1
        EMAIL-INFORMATION.TEMPLATE-TYPE    := #WEB-ECHECK-SUCCESSFUL-TEMPLATE-C
      ELSE
        EMAIL-INFORMATION.TEMPLATE-TYPE    := #WEB-ECHECK-SUCCESSFUL-TEMPLATE
      END-IF
      WRITE WORK FILE 5 EMAIL-INFORMATION
    END-IF
  END-IF
END-BREAK
*
AT END OF DATA
  #ACCOUNT-NUMBER := FUNCTION-ACCT-NUMBER(<'CASH  '>)(1)
  COMPRESS #ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
  #DESCRIPTION-1  := FUNCTION-ACCT-NUMBER(<'CASH  '>)(2)
  COMPRESS #PEACHTREE-DATE #DESCRIPTION-1 INTO #DESCRIPTION-1
  RESET #DESCRIPTION-2
  COMPRESS 'ECHK' #PEACHTREE-DATE INTO #DESCRIPTION-2
  MOVE EDITED #TOTAL-AMOUNT (EM=ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
  MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
  COMPRESS #PEACHTREE-DATE #COMMA
    #DESCRIPTION-1  #COMMA
    #PEACHTREE-REC-CNT #COMMA
    #PEACH-ACCOUNT-NUMBER #COMMA
    #DESCRIPTION-2 #COMMA
    #PEACHTREE-AMOUNT INTO #PEACHTREE LEAVING NO
  WRITE WORK FILE 3 #PEACHTREE
END-ENDDATA
END-SORT
*
END-SUBROUTINE
*
*****************************************
DEFINE SUBROUTINE CREATE-EC-FILE-BY-CLERK
*****************************************
*
* Create all columns header for clerks first
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
SORT BY #OUTPUT-RECORD.TXN-CODE #OUTPUT-RECORD.CLERK-ID USING #AMOUNT
  AT START OF DATA
    COMPRESS 'Row Labels' #TRAN-USER-ARRAY(*) 'Total' INTO #REPORT-OUTPUT WITH #TAB
    WRITE WORK FILE 4 #REPORT-OUTPUT
    IF #CLERK-SEQ > 0
      EXPAND ARRAY #USER-TOTAL TO (*:#CLERK-SEQ)
      EXPAND ARRAY #TRAN-USER-TOTAL TO (*:#CLERK-SEQ)
    ELSE
      ESCAPE ROUTINE IMMEDIATE
    END-IF
    RESET #REPORT-OUTPUT
    #REPORT-OUTPUT   := #OUTPUT-RECORD.TXN-CODE
    #TRAN-USER-TOTAL(*) := '0.00'
  END-START
  AT BREAK OF #OUTPUT-RECORD.CLERK-ID
    #TOTAL-AMOUNT := SUM(#AMOUNT)
    #CLERK-ID := OLD(#OUTPUT-RECORD.CLERK-ID)
    EXAMINE #TRAN-USER-ARRAY(*) FOR #CLERK-ID INDEX #I
    #USER-TOTAL(#I) := #USER-TOTAL(#I) + #TOTAL-AMOUNT
    MOVE EDITED #TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #TRAN-USER-TOTAL(#I)
    #TRAN-USER-TOTAL(#I) := *TRIM(#TRAN-USER-TOTAL(#I))
  END-BREAK
  AT BREAK OF #OUTPUT-RECORD.TXN-CODE
    #TOTAL-AMOUNT := SUM(#AMOUNT)
    MOVE EDITED #TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #WORK-AMOUNT
    #WORK-AMOUNT := *TRIM(#WORK-AMOUNT)
    COMPRESS #REPORT-OUTPUT #TRAN-USER-TOTAL(*) #WORK-AMOUNT
      INTO #REPORT-OUTPUT WITH #TAB
    WRITE WORK FILE 4 #REPORT-OUTPUT
    RESET #REPORT-OUTPUT
    #REPORT-OUTPUT := #OUTPUT-RECORD.TXN-CODE
    #TRAN-USER-TOTAL(*) := '0.00'
  END-BREAK
  AT END OF DATA
    #GRAND-TOTAL-AMOUNT := TOTAL(#AMOUNT)
    #REPORT-OUTPUT := 'Grand Total'
    FOR #I = 1 TO #CLERK-SEQ
      MOVE EDITED #USER-TOTAL(#I) (EM=-ZZZZZZZZ9.99) TO #WORK-AMOUNT
      #WORK-AMOUNT := *TRIM(#WORK-AMOUNT)
      COMPRESS #REPORT-OUTPUT #WORK-AMOUNT INTO #REPORT-OUTPUT WITH #TAB
    END-FOR
    MOVE EDITED #GRAND-TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #WORK-AMOUNT
    #WORK-AMOUNT := *TRIM(#WORK-AMOUNT)
    COMPRESS #REPORT-OUTPUT #WORK-AMOUNT INTO #REPORT-OUTPUT WITH #TAB
    WRITE WORK FILE 4 #REPORT-OUTPUT
  END-ENDDATA
END-SORT
END-SUBROUTINE
*
********************************************
DEFINE SUBROUTINE GET-OWNER-EMAIL-SALUTATION
********************************************
*
* CALLNAT 'GOWNRSXX' #ID-NUMBER
*   #NON-INS-OWNER
*   #MULTIPLE-OWNER
*   #OWNER-OCC-9 (1:9)
*
* #OWNER-CONTACT-ID := F-GET-CONTACT-ID(<#OWNER-CN(#POLICY-SEGMENT,1)>)
* EMAIL-INFORMATION.OWNER-EMAIL := F-PREF-EMAIL(<#OWNER-CONTACT-ID>)
*
#Dynamic_Name := 'S1'
CALLNAT 'GPRS0CNT' #PAYER-CI #Dynamic_Name
* #Dynamic_Name := EDIT_NAME_LOWCASE (< #Dynamic_Name >) /* bz-Name
#Dynamic_Name := *TRIM(#Dynamic_Name)
EMAIL-INFORMATION.SALUTATION := #Dynamic_Name
END-SUBROUTINE
*
END
