* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* PGM-ID: C2400PLM  LOAN MAINT SCN
*****************************************************************************
*    MODIFICATION LOG
* USER DATE    TAG  REASON
* PAM 07122004 PM1  Changed LM xxxxxxx to load CAP members
*              PM2  in alpha order. No TPP for RPU - RLB
* PAM 08102004 PM3   Use TPP for CAP pols
* PAM 12072004 PM4  If no monthly loan pmt calculated, use 107.25
* DRW 12272004 DW5  Incr Var loan to handle 999,999.99
* PAM 03112005 PM6   Reset display fields for GRANKSXX
* DRW 05152005 DW7  Add face Amt & TPP linkage to CVALUSXX
* DRW 07082005 DW8  Allow ATH overloans up to qtr prems
* DRW 07272005 DW9  Protect Loan Eff Date
* PAM 01132006 PM10 Change MEC 1099 processing to 'L' instead of 'M'
* DRW 05072006 DW11 Remove ALOT-SW logicto 'L' instead of 'M'
* SAG 01202006 RH1  AS - Added NOTITLE option to display statement, to
*                   prevent page no. and date from appearing on screen
* DRW 12112006 DW12 Add name to Amortization Schedule
* DRW 01082007 DW13 Find ST-V for amort Schedule so read by at SSN works
* YAK 06052007 YK1  Count CAP/GUARD members when loan is issued
* PAM 07302007 PM14 Always default CAP loans to current month
* DRW 09122007 DW15 Allow LM CAP to scrool to next screen and sorted by CN
* YAK 12052007 YK2  Remove hardcording for interest rates
*                   (Read GEN-TABLE through OBJNGENT)
* DRW 01/29/2008 DW16 Fix Term pol & CAP test in new loan edit
* YAK 02/05/2008 YK3 Change code to use FUNCTION-INT-RATE
*                         to get rate from GEN-TABLE
* DRW 03/28/2008 DW17 Add CASH CODE To tr (CASH)
* DRW 06/24/2008 DW18 Indicate CAP in SG-CAT1 if a CAP MEMBER (CP**)
* DRW 07/07/2008 DW19 Add Policy-number to ACCT-REG
* DRW 07/07/2008 DW20 Bypass NEWL col & 2 if debit and credit amts are zero
* PAM 10/22/2008 PM21 Do not issue loans if EIL/AIL
* DRW 10/22/2008 DW22 Make date at top of letters be current date (even CAPs)
* DRW 12/29/2008 DW23 Incr size of #SCN-ANN-INTR fron 4.2 to 5.2 for CN49317
* DRW 03/11/2009 DW24 Increase Notes occurance from 60 to 500
* PAM 09/02/2009 PM25 Adjust loan value processing
* PAM 11/24/2009 PM26 Allow ATH processing for selected users per BMG
* RSE 09/08/2011 RE1  Populate screen with correct name/address formats
* PAM 09/22/2011 PM27 Get Name and address information when doing LM online
* VXT 11/04/2011 vt1  Put the sign on the interest field.
* vxt 01/24/2012 vt2  Change the cash code value from "$" to "L"(loan policy
*                     and to "M" (Cap loan).
* YAK 10/15/2012 YK4  Use function to identify Level Term II plans*
* NGG 11/29/2012 NG1  CAP loan ticket 1618
* TMT 05/08/2014 TT1  Added Fixed Loan Interest rate for GPL policY
* TMT 06/11/2014 TT1  Contact Normalization - Gender and DOB
* vxt 04/07/2016 vt3  /Ticket 4401- add a pop-up window for MEC policy/
* vxt 10/19/2016 vt4  /Ticket 4335/
* TMT 07/11/2017 TT2  Multiple cap Project
*****************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL USING C2400LLM
LOCAL USING G3500AAD
LOCAL USING GONERLXX
LOCAL USING CAPA0001               /* TT2
LOCAL
* 1 #CURR-VAR-INT-RATE (P2.3) INIT <8.10>          /* YK2
1 #CURR-VAR-INT-RATE (P2.3)                        /* YK2
1 GPL-INTEREST-RATE  (P2.3) CONSTANT <5.00>        /* TT1
*
1 #POL-NUM     (A16)      /* DW19
1 #LAST            (A25)  /* DW12
1 #FIRST/MID       (A25)
1 #SUFF            (A25)
1 #NAME-OVRFLO     (A25)
1 #AMO-NAME        (A30)
*
1 #AMT (N7.2)    /* TT1
1 #AMT2(N7.2)    /* TT1
1 #SUFFIX     (A3)
1 #AS-OF-DT   (N8)
1 #LOAN-BAL   (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT    (N7.2/9)
1 #ACC-INT-2  (N7.2/9)
1 #CSV-X      (N7.2/9)
1 #CVALUE     (N7.2/9)
1 #LVALUE     (N7.2/9)
1 #MCSV       (N7.2/9)
1 #DB         (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #FACE-AMT    (N7.2/9)  /* DW7
1 #TPP         (N7.2/9)  /* DW7
*
1 #NEW-FLDS   (L)
1 #SUBTYPE    (A1)
1 #CAP-CONV-ACV (P7.2)
1 #CAP-CSV      (P7.2)
1 #WORK-CAP-CONV-ACV (P9.2)
1 #CAP-LOAN-END-DATE (N8)
1 #CAP-LOAN-MONS   (N3)
1 #CAP-CSV-MONS    (N3)
1 #CAP-REMAIN-MONS (N3)
1 #CURR-COST-BASIS (N7.2)
*
1 AT-V VIEW OF A-APPL-TRACKING
  2 NAME     /* DW12
  2 RANK
  2 SSN
  2 INTRO-FLAG
  2 ACTION-FLAG
  2 CAP-IND
  2 CAP-LOAN-AMT
1 #FOUND-AT (L)
*
1 VA-V VIEW OF A-VA-HISTORY
  2 YEAR-MONTH-M        (P7/13)
  2 PREMIUM-M           (P7.2/13)
  2 ACCUM-CASH-VALUE-M  (P7.2/13)
  2 INTEREST-M          (P5.2/13)
  2 COST-OF-INSURANCE-M (P7.2/13)
  2 PRORAT-LOAN-BAL-M   (P5.2/13)
  2 PRORAT-LN-ACC-INT-M (P5.2/13)
*
1 #PREV-ACV  (P7.2)
1 #NEW-ACV   (P7.2)
1 #ACV-DIFF  (P7.2)
1 #REAL-PREM (N6.2)
*
1 #HIST-KEY    (N15)
1 REDEFINE #HIST-KEY
  2 #HIST-KEY-ID  (N6)
  2 #HIST-KEY-ISS (N8)
  2 #HIST-KEY-SPL (N1)
*
1 #KEY-1099    (A14)
1 REDEFINE #KEY-1099
  2 #KEY-1099-YYYY (N4)
  2 #KEY-1099-ID   (A1)
  2 #KEY-1099-SSN  (N9)
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 SSN
  2 NAME
  2 INTRO-FLAG
  2 X-LOAN-AMOUNT (9)
  2 X-LOAN-DATE   (9)
  2 X-ALT-LP-AMT  (9)
  2 CONV-DURATION (9)
  2 ISSUE-DATE    (9)
*
1 #ID-N     (N6)
1 REDEFINE #ID-N
  2 #ID-A   (A6)
1 #NUM-READ   (P5)
1 #FOUND-CAP  (L)
1 #SECURITY-ERROR (L)
1 #SCN-TITLE    (A30)
1 #SCN-FIRST-LAST  (A78)
1 #CAP-INT      (A7)
1 #CAP-LOAN     (A11)
1 #ORIG-PRIN  (N5.2) INIT <5000>
1 #INT-RATE   (N2.3) INIT <1.5>
1 #FIRST-PMT-DATE (A6)
1 REDEFINE #FIRST-PMT-DATE
  2 #FIRST-PMT-MM   (N2)
  2 #FIRST-PMT-YYYY (N4)
1 #ISS-DT-DISP  (A10)
1 #ISS-DT-DISP-PER  (A11)
1 #LON-DT-DISP (A10)
1 #PMT-YYYY    (N4)
1 #PMT-MM      (N2)
1 #PMT-DAYS    (N2)
1 #TOT-MON-PMT (N5.2)
1 #DAILY-INT   (N3.4)
1 #INT-PMT     (N3.4)
1 #TOT-INT     (N9.2)
1 #PRIN-PMT    (N5.2)
1 #FINAL-PMT   (N5.2)
1 #TBL-PMT-NUM (N3/400)
1 #TBL-YYYY    (N4/400)
1 #TBL-MM      (N2/400)
1 #TBL-PRIN-BAL (N5.2/400)
1 #TBL-INT   (N3.2/400)
1 #TBL-PRIN  (N3.2/400)
*
1 #ENCLOSED-CHK (A14) INIT <'Enclosed check'>
1 #TEXT      (A75)
1 #RQST-ID   (N6)
1 #NUM-LOANS (P2)
1 #NO-NX (L)
1 #ILNS  (I2)
1 #I2    (I2)
1 #I3    (I2)
1 #I4    (I2)
1 #X1    (I2)
1 #LTR-ISS-DT  (P8/15)
1 #LTR-LON-DT  (P8/15)
1 #LTR-FIXED-RATE  (P2.3/15)
1 #LTR-FIXED-LOAN  (P7.2/15)
1 #LTR-FIXED-AN-IN (P5.2/15)
*
1 #LTR-VAR-LOAN    (P7.2/15)
1 #LTR-VAR-ACC-INT (P5.2/15)
1 #LTR-VAR-AN-IN   (P5.2/15)
*
1 #LTR-THIS-LOAN  (P7.2/15)
1 #LTR-THIS-AN-IN (P5.2/15)
*
1 #LTR-NEW-LOAN   (P7.2/15)
1 #LTR-NEW-AN-IN  (P5.2/15)
1 #LTR-NEW-AN-F-IN(P5.2/15)        /* TT1
*
1 #LTR-LOANS-LINES (A78/6)
1 REDEFINE #LTR-LOANS-LINES
  2 #LTR-LOANS-LINES-TBL (6)
    3 #LTR-LBL-1      (A24)                 /* vt1 was a25
    3 #LTR-RATE       (A11)
    3 #LTR-LOAN-AMT   (A12)                 /* vt1 was a11
    3 #LTR-INT-LBL    (A21)
    3 #LTR-INTEREST   (A10)
*
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER
  2 NOTE-TEXT  (60)
*
  2 REDEFINE NOTE-TEXT
    3 SUNGARD-AP-OCC    (500)
      4 SUNGARD-CHECK-TYPE (A1)
      4 SUNGARD-CN         (N6)
*
  2 REDEFINE NOTE-TEXT
    3 LOAN-LTR-TBL     (60)
      4 LL-ID          (N6)
      4 REDEFINE LL-ID
        5 LL-ID-A       (A6)
      4 LL-ISS-DT      (P8)
      4 LL-LON-DT      (P8)
      4 LL-FIXED-RATE  (P2.3)
      4 LL-FIXED-LOAN  (P7.2)
      4 LL-FIXED-AN-IN (P5.2)
*
      4 LL-VAR-LOAN    (P7.2)
      4 LL-VAR-ACC-INT (P5.2)
      4 LL-VAR-AN-IN   (P5.2)
*
      4 LL-THIS-LOAN  (P7.2)
      4 LL-THIS-AN-IN (P5.2)
*
      4 LL-NEW-LOAN   (P7.2)
      4 LL-NEW-AN-IN  (P5.2)
*
1 NT-V1 VIEW OF A-NOTES
  2 ID-NUMBER   (N6)
  2 NOTE-DATE   (N8/1)
  2 NOTE-TEXT   (A60/40)
  2 REDEFINE NOTE-TEXT
    3 CAPS-CONV-BY-YEAR  (10)
      4 CAPS-CONV-BY-ORIGIN (13)
        5 CAPS-CONV-ORIG   (N5)
*
    3 CAPS-CONV-BY-MON  (12)
      4 CAPS-CONV-MON    (N5)
    3 ATS-CONV-BY-FU  (5)    /* 5 FOLLOW-UP (IN CASE THERE WILL BE 5)
      4 ATS-CONV-FU      (N5)
*
    3 CAPS-AT-M-S (N5)
    3 CAPS-AT-P1  (N5)  /* PR/PM/PO/PX
    3 CAPS-AT-P2  (N5)  /* P1/P2/P3
    3 CAPS-AT-P3 (N5)   /* PI/PC/PP
    3 CAPS-AT-P4 (N5)   /* PY
    3 CAPS-AT-U  (N5)
    3 CAPS-AT-W  (N5)
    3 CAPS-AT-D  (N5)
    3 CAPS-AT-A  (N5)
    3 CAPS-AT-UNUSED-1 (N5)
    3 CAPS-AT-UNUSED-2 (N5)
    3 CAPS-AT-NCO (N5)
    3 CAPS-AT-OFF (N5)
*
    3 CAPS-IM-S  (N5)
    3 CAPS-IM-M  (N5)
    3 CAPS-IM-I  (N5)
    3 CAPS-IM-C  (N5)
    3 CAPS-IM-P  (N5)
    3 CAPS-IM-X  (N5)
    3 CAPS-IM-Y  (N5)
    3 CAPS-IM-Z  (N5)
*
    3 AT-M-S-0FU  (N5)
    3 AT-M-S-1FU  (N5)
    3 AT-M-S-2FU  (N5)
    3 AT-M-S-3FU  (N5)
    3 AT-M-S-4FU  (N5)
    3 AT-P      (N5)
    3 AT-U      (N5)
    3 AT-W      (N5)
    3 AT-A      (N5)
*
    3 AT-SPS    (N5)
    3 AT-CHILD  (N5)
    3 AT-GRANDCHILD (N5)
*
    3 CAPS-CONV-BY-MON-ADDL(12)  /* 12 LAST MONTHS (JAN THRU DEC) /* YK1
      4 CAPS-CONV-MON-A  (N5)                                     /* YK1
      4 CAPS-CONV-MON-GR (N5)                                     /* YK1
*
1 NT-V2 VIEW OF A-NOTES
  2 ID-NUMBER   (N6)
  2 NOTE-DATE   (N8/1)
  2 NOTE-TEXT   (A60/500)                  /* DW24
*
1 #HAS-MEC-POL (L)
1 #XXX      (A3) INIT <'XXX'>
1 #INDEXS   (I2)
1 #INDEXI   (I2)
1 #INDEXSC  (I2)
1 #INDEXD   (I2)
1 #I1       (I2)
1 #EDIT-INVALID   (L) INIT<FALSE>
1 #FORCED-PRORATION (L)
1 #ADDL-LOAN         (P6.2)
1 #COST-BASIS-GROWTH (P6.2)
1 #LIMIT             (P2)
1 #INT-SIGN        (A1)
1 #ISN-TAB         (P8/15)
1 #HOLD-INT-TRANS  (N5.2)
1 #TEST-LOAN-VALUE (N6.2)
1 #HOLD-DAILY-RATE (P3.7)
1 #HOLD-TOTAL-LOAN-VALUE (P7.2)
1 #HOLD-NEW-LOAN-AMT  (N7.2)
1 #HOLD-OLD-LOAN-AMT  (N7.2)
1 #HOLD-ACCTG-DATE    (N8)
1 #HOLD-INTR-RATE     (N2.3)
1 #HOLD-INTR-RATE-COMP (N3.3)
1 #NUMBER-OF-RATES    (N2)
1 #HOLD-EDIT   (A10)
1 #FIRST-MID   (A25)
1 #SUFFIX-NAME (A25)
1 #DEL         (A1)
1 #RETIRED     (A9)
1 #HOLD-NAME   (A50)
1 #RANK-LITERAL (A23)
1 #RANK-DISPLAY (A5)
1 #DISPL        (P2)
1 #PASS-COMMAND (A2)
*
1 #HOLD-CN      (N6)
1 REDEFINE #HOLD-CN
  2 #HOLD-CN-A  (A6)
*
1 #HOLD-SCN-DATE (A15)
1 REDEFINE #HOLD-SCN-DATE
  2 #HSD-DD (A2)
  2 #HSD-MM (A9)
  2 #HSD-YY (A4)
*
1 #ZIP-COMBINE (A10)
1 REDEFINE #ZIP-COMBINE
  2 #ZIP-C1    (A5)
  2 #ZIP-HYPH  (A1)
  2 #ZIP-C2    (A4)
*
1 #SCN-CORR-NAME   (A20)
1 #CLERK-ABB-PASS  (A3)
1 #CLERK-ABB-NAME-PASS (A20)
1 #INVALID (L)
1 #TOT-CSV   (P7.2)
1 #TOT-ACV   (P7.2)
1 #CSV (P7.2)
1 #ACV       (P7.2)
1 #TODAY   (N8)
1 REDEFINE #TODAY
  2 #TODAY-YYYY (N4)
  2 #TODAY-MM   (N2)
  2 #TODAY-DD   (N2)
*
1 #1ST-OF-MONTH  (N8)
1 #YYYYMMDD  (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY   (N4)
    3 #MM     (N2)
  2 #DD     (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A (A4)
  2 #MM-A   (A2)
  2 #DD-A   (A2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A (A8)
*
* BELOW for CALC-PREMS-PAID
1 #PP-DATE-OF-BIRTH  (N8)
1 #PP-ANNUAL-PREM    (N5.2)
1 #PP-PAY-STATUS     (A2)
1 #PP-TOT-PREMIUMS-PAID (N7.2)
1 #PP-PAID-TO-DATE (N8)
1 #PP-ISSUE-DATE   (N8)
1 #PP-MODE         (A1)
1 #PP-PLAN         (A3)
1 #PP-COST-BASIS   (N7.2)
1 #PP-MONTH-ALLOC-AMT (N7.2)  /* NG99
1 #PP-INTRO-FLAG     (A1)
1 #PP-FIRST-PLACE-FEE (N7.2)
1 #PREMS-PAID      (P7.2)
1 #SUB-PREMS-PAID  (P7.2)
1 #PP-BADJ         (P5.2)
*
1 #CAP-PLUS1-DATE  (N6)      /* YK1
1 REDEFINE #CAP-PLUS1-DATE   /* YK1
  2 #CAP-PLUS1-YYYY (N4)     /* YK1
  2 #CAP-PLUS1-MM   (N2)     /* YK1
1 #MBR-SINCE       (N6)      /* YK1
1 #CAP-ENTRY-MM    (N2)      /* YK1
1 #CAP-GUARD       (L)       /* YK1
1 #N               (N2)      /* YK1
*
1 #SECURITY-CODE   (N2) INIT <93>  /* PM26
1 VAR-INTEREST-RATE    (A)DYNAMIC CONST<'Variable interest rate'>   /* TT1
1 FIX-INTEREST-RATE    (A)DYNAMIC CONST<'Fixed Interest Rate'>      /* TT1
1 MAP-INTEREST-TYPE    (A22)                                        /* TT1
1 PREVIOUS-LOAN-EXISTS (L)                                          /* TT1
1 #DATE-OF-BIRTH       (N8.0)
1 #replay              (a1)         /* vt3
*
1 #CONTACT-ID          (N8)                             /* VT4  \/
1 STAT VIEW OF A-STATUS
  2 SSN
  2 ID-NUMBER
  2 MEMBER-CONTACT-ID
1 #OWNER-CONTACT-ID    (N8)
1 #insured-contact-id  (n8)
1 #owner-ssn           (N9)
1 #in-v-ssn            (p8)
1 #found-rec           (l)                              /* VT4  /\
*
END-DEFINE
******************************************************************************
*
IF #CGA-ORIG-SUFFIX = 'TRN'
  FETCH 'C2490PLM'
END-IF
*
INCLUDE GONERCXX
*
DEFINE WINDOW Replay                             /* vt3  \/
  SIZE 9 * 42
  BASE 5/14
  FRAMED ON POSITION SYMBOL AUTO                 /* vt3  /\

*
IF #CGA-ORIG-SUFFIX = 'CAP'
  MOVE 'CAP LOAN DISBURSEMENTS' TO #SCN-TITLE
ELSE
  MOVE 'LOAN DISBURSEMENTS' TO #SCN-TITLE
END-IF
*
IF #CGA-ORIG-SUFFIX = 'AMO' OR = 'AMS'
  MOVE *DATN TO #TODAY
  FIND (1) ST-V WITH MEMBER-KEY = #CGA-ID-G  /* DW13
  END-FIND
*
  PERFORM AMORTIZATION
  IF *DEVICE = 'BATCH' /* ATHPCAPD
    ESCAPE ROUTINE
  END-IF
END-IF
*
MOVE *DATN TO #TODAY #HOLD-CONVERT-DATE
COMPRESS #HCD-MM-A #HCD-DD-A #HCD-YYYY-A INTO #HOLD-MMDDYYYY
  LEAVING NO SPACE
MOVE '  ' TO #CGA-SCR-COMMAND
MOVE #CGA-CLERK TO #CLERK-ABB-PASS
MOVE ' ' TO #CLERK-ABB-NAME-PASS
CALLNAT 'GCKNMSXX' #CLERK-ABB-PASS
  #INVALID
  #CLERK-ABB-NAME-PASS
MOVE #CLERK-ABB-NAME-PASS TO #SCN-CORR-NAME
*
#CURR-VAR-INT-RATE := FUNCTION-INT-RATE(<'RATE5AB'>)  /* YK3
*
IF #CGA-ORIG-SUFFIX = 'LTR'
  MOVE '*' TO #CGA-SCR-COMMAND
  MOVE #CGA-SCR-ID TO #RQST-ID
*
  FIND (1) NT-V WITH ID-NUMBER = 800104
    FOR #ILNS 1 TO 60
      IF   (#RQST-ID NE 0)
          AND (#RQST-ID NE LL-ID (#ILNS))
        ESCAPE TOP
      END-IF
*
      IF LL-ID (#ILNS) = 0
        ESCAPE BOTTOM
      END-IF
*
      RESET #X1
      FIND (1) A-STATUS-VIEW WITH MEMBER-KEY = LL-ID-A (#ILNS)
        FOR #I1 1 TO 9
          IF   (A-STATUS-VIEW.ISSUE-DATE (#I1) = LL-ISS-DT (#ILNS))
*             AND (NOT A-STATUS-VIEW.PLAN (#I1) = 'LT' OR = 'RT')            /* YK4
*             AND ((A-STATUS-VIEW.PLAN-A1 (#I1) LT 'U')                      /* YK4
*             OR  (A-STATUS-VIEW.PLAN-A1 (#I1) GT 'Z'))                      /* YK4
              AND (NOT FUNCTION-TERM-POLICY(<A-STATUS-VIEW.PLAN(#I1)>))        /* YK4
            MOVE #I1 TO #X1
            ESCAPE BOTTOM
          END-IF
        END-FOR
      END-FIND
*
      IF #I1 GT 9
        MOVE 1 TO #X1
      END-IF
*
      MOVE 1 TO #INDEXS
      PERFORM GET-NAME-ADDR
*
      MOVE LL-ID         (#ILNS) TO #CGA-SCR-ID
      MOVE LL-ID         (#ILNS) TO #SCN-ID         (1)
      MOVE LL-ISS-DT     (#ILNS) TO #LTR-ISS-DT     (1)
      MOVE LL-LON-DT     (#ILNS) TO #LTR-LON-DT     (1)
      MOVE LL-FIXED-RATE (#ILNS) TO #LTR-FIXED-RATE (1)
      MOVE LL-FIXED-LOAN (#ILNS) TO #LTR-FIXED-LOAN (1)
      MOVE LL-FIXED-AN-IN(#ILNS) TO #LTR-FIXED-AN-IN(1)
      MOVE LL-VAR-LOAN   (#ILNS) TO #LTR-VAR-LOAN   (1)
      MOVE LL-VAR-ACC-INT(#ILNS) TO #LTR-VAR-ACC-INT(1)
      MOVE LL-VAR-AN-IN  (#ILNS) TO #LTR-VAR-AN-IN  (1)
      MOVE LL-THIS-LOAN  (#ILNS) TO #LTR-THIS-LOAN  (1)
      MOVE LL-THIS-AN-IN (#ILNS) TO #LTR-THIS-AN-IN (1)
      MOVE LL-NEW-LOAN   (#ILNS) TO #LTR-NEW-LOAN   (1)
      MOVE LL-NEW-AN-IN  (#ILNS) TO #LTR-NEW-AN-IN  (1)
*
      MOVE LL-THIS-LOAN   (#ILNS) TO #SCN-NEW-LOAN-AMT (1)
      COMPUTE #SCN-NEW-WIRE-AMT (1) = #SCN-NEW-LOAN-AMT (1) - 15.00
      MOVE LL-THIS-LOAN   (#ILNS) TO #SCN-TOTAL-LOAN   (1)
      MOVE #CURR-VAR-INT-RATE     TO #SCN-INTR-RATE    (1)
      MOVE LL-THIS-AN-IN  (#ILNS) TO #SCN-ANN-INTR     (1)
*
      MOVE 1 TO #INDEXS
      PERFORM FILL-LETTER
*
      IF   (#LTR-FIXED-LOAN (1) = 0)
          AND (#LTR-VAR-LOAN   (1) = 0)
          AND (#LTR-VAR-ACC-INT (1) = 0)
        INPUT USING MAP 'C2404MLM'    /* new loan
      ELSE
        INPUT USING MAP 'C2403MLM'    /* additional loan
      END-IF
      PERFORM CHK-AST
    END-FOR
  END-FIND
*
  FIND (1) A-STATUS-VIEW WITH MEMBER-KEY = #CGA-ID-G
    IF A-STATUS-VIEW.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
      FOR #I1 1 TO 9
        IF A-STATUS-VIEW.CONV-DURATION (#I1) = 999
          MOVE #I1 TO #X1
          ESCAPE BOTTOM
        END-IF
      END-FOR
*
      IF #I1 GT 9
        MOVE 1 TO #X1
      END-IF
*
      MOVE 1 TO #INDEXS
      PERFORM GET-NAME-ADDR
*
      MOVE X-INTEREST-RATE (#X1) TO #SCN-INTR-RATE (1)
*     MOVE 5000.00   TO #SCN-NEW-LOAN-AMT (1)              /* NG1 Start
*     MOVE 4985.00   TO #SCN-NEW-WIRE-AMT (1)
      MOVE 4000.00   TO #SCN-NEW-LOAN-AMT (1)
      MOVE 3985.00   TO #SCN-NEW-WIRE-AMT (1)              /* NG1 End
      MOVE 1 TO #INDEXS
      PERFORM FILL-LETTER
      COMPRESS '(CN' #CGA-ID ')' INTO #SCN-LETR-ID LEAVING NO
*
      MOVE 'A' TO #SCN-LOAN-OWNER-FLAG (1)
      PERFORM CAP-LOAN-LETTERS
      INPUT USING MAP 'C2405MLM'
      PERFORM CHK-AST
*
      MOVE 'X' TO #SCN-LOAN-OWNER-FLAG (1)
      PERFORM CAP-LOAN-LETTERS
      INPUT USING MAP 'C2405MLM'
      PERFORM CHK-AST
*
      MOVE 'Y' TO #SCN-LOAN-OWNER-FLAG (1)
      PERFORM CAP-LOAN-LETTERS
      INPUT USING MAP 'C2405MLM'
      PERFORM CHK-AST
*
      MOVE 'Z' TO #SCN-LOAN-OWNER-FLAG (1)
      PERFORM CAP-LOAN-LETTERS
      INPUT USING MAP 'C2405MLM'
      PERFORM CHK-AST
*
      MOVE '<enter Bank Name here>' TO #SCN-LETR-NAME
      MOVE '<enter address here>' TO #SCN-ADDR1
      RESET #SCN-ADDR2 #SCN-ADDR3
      INPUT USING MAP 'C2406MLM'
      PERFORM CHK-AST
*
      MOVE 'LM' TO #CGA-SCR-COMMAND
      FETCH 'G1000PXX'
    END-IF
  END-FIND
*
  MOVE 'LM' TO #CGA-SCR-COMMAND
  MOVE 'No more loan letters' TO #TEXT
  INPUT TEXT #TEXT MARK *#CGA-SCR-COMMAND USING MAP 'C2403MLM'
*
  FETCH 'G1000PXX'
END-IF
*
IF #CGA-ORIG-SUFFIX = 'PLN'
  RESET #CGA-ORIG-SUFFIX
  INPUT USING MAP 'C2403MLM'
  FETCH 'G1000PXX'
END-IF
*
IF #CGA-ORIG-SUFFIX = 'FLN'
  RESET #CGA-ORIG-SUFFIX
  INPUT USING MAP 'C2404MLM'
  FETCH 'G1000PXX'
END-IF
*
IF (#CGA-SCR-SUFFIX = 'CAP') AND (#CGA-SCR-ID NE 0)
  MOVE #CGA-SCR-ID TO #ID-N  /* start at entered cn
  MOVE *DATN TO #YYYYMMDD
  MOVE 01 TO #DD
  MOVE #YYYYMMDD TO #1ST-OF-MONTH
*
  CALLNAT 'C2401SLM' /* pulls in CAP members - PM1
    #ID-N
    #SCN-ID (*)
    #SCN-NAME (*)
    #SCN-EFF-DT(*)
END-IF
*
MOVE '*' TO #CGA-SCR-COMMAND
RESET #CGA-SCR-ID
*
INPUT MARK *#SCN-ID(1) USING MAP 'C2400MLM'
PERFORM CHK-AST
*
MOVE #CGA-SCR-SUFFIX TO #CGA-ORIG-SUFFIX
RESET #CGA-SCR-SUFFIX
ASSIGN #TOTAL-NEW-LOAN-AMT = 0
ASSIGN #TOTAL-OLD-LOAN-AMT = 0
ASSIGN #TOTAL-INT-TRANS = 0
*
FOR #INDEXS 1 TO 15
  IF #SCN-ID(#INDEXS) = 0
    RESET #SCN-ID          (#INDEXS)
    RESET #SCN-NAME        (#INDEXS)
    RESET #SCN-EFF-DT      (#INDEXS)
    RESET #SCN-LOAN-DATE   (#INDEXS)
    RESET #SCN-OLD-LOAN-AMT(#INDEXS)
    RESET #SCN-INT-TRANS   (#INDEXS)
    RESET #SCN-NEW-LOAN-AMT(#INDEXS)
    RESET #SCN-NEW-WIRE-AMT(#INDEXS)
    RESET #ISN-TAB         (#INDEXS)
    MOVE (AD=P) TO #SCN-ID-ATTR  (#INDEXS)
    MOVE (AD=P) TO #SCN-NAME-ATTR(#INDEXS)
    MOVE (AD=P) TO #SCN-ATTR     (#INDEXS)
    MOVE (AD=P) TO #SCN-OLD-LOAN-AMT-ATTR(#INDEXS)
  ELSE
    PERFORM GET-AND-EDIT-RECORD
    MOVE (AD=P) TO #SCN-ID-ATTR(#INDEXS)
    MOVE (AD=P) TO #SCN-NAME-ATTR(#INDEXS)
  END-IF
END-FOR
*
FOR #INDEXS = 1 TO 15
  IF #SCN-ID(#INDEXS) = 0
    IGNORE
  ELSE
    COMPUTE #LIMIT = #INDEXS - 1
    FOR #INDEXSC 1 TO #LIMIT
      IF   (#SCN-ID     (#INDEXSC) = #SCN-ID     (#INDEXS))
          AND (#SCN-EFF-DT (#INDEXSC) = #SCN-EFF-DT (#INDEXS))
        REINPUT 'Duplicate ID and ISS-Date'
          MARK *#SCN-ID(#INDEXS)
      END-IF
    END-FOR
  END-IF
END-FOR
*
MOVE '*' TO #CGA-SCR-COMMAND
* INPUT MARK *#SCN-LOAN-DATE(1) USING MAP 'C2401MLM' NO ERASE
*************INPUT MARK *#SCN-NEW-LOAN-AMT(1) USING MAP 'C2401MLM' NO ERASE   /* DW9      /* vt3
INPUT MARK *#SCN-NEW-LOAN-AMT(1) USING MAP 'C2401MLM'     /* vt3
PERFORM CHK-AST
*
FOR #INDEXS 1 TO 15
  IF #SCN-ID(#INDEXS) NE 0
    GET A-STATUS-VIEW #ISN-TAB(#INDEXS)
    PERFORM CALL-CVALUSXX
*
    MOVE #EFF-X (#INDEXS) TO #X1   /* save loan to process index
    IF   #CGA-ORIG-SUFFIX NE 'CAP'       /* VAR LOAN NOT USED FOR CAP LOAN
        AND A-STATUS-VIEW.PLAN(#X1) <> 'GPL' /* TT1 - VAR LOAN NOT USED FOR LEGACY GPL POLICY
        AND A-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) NE
        #SCN-OLD-LOAN-AMT(#INDEXS)
      REINPUT 'Old loan amount recheck failed, Redo command'
        MARK *#SCN-LOAN-DATE (#INDEXS)
    END-IF
*
    IF #SCN-ID (#INDEXS) NE A-STATUS-VIEW.ID-NUMBER
      REINPUT 'ID number recheck failed, redo command'
        MARK *#SCN-LOAN-DATE (#INDEXS)
    END-IF
*
    IF #SCN-NAME (#INDEXS) NE A-STATUS-VIEW.NAME-3
      REINPUT 'Name recheck failed, redo command'
        MARK *#SCN-LOAN-DATE (#INDEXS)
    END-IF
*
    PERFORM EDIT-RECORD
  END-IF
END-FOR
*
ASSIGN #HOLD-INT-TRANS = 0
ASSIGN #HOLD-NEW-LOAN-AMT = 0
ASSIGN #HOLD-OLD-LOAN-AMT = 0
*
FOR #INDEXS 1 TO 15
  IF #SCN-ID (#INDEXS) NE 0
    COMPUTE #HOLD-INT-TRANS = #HOLD-INT-TRANS + #SCN-INT-TRANS(#INDEXS)
    COMPUTE #HOLD-NEW-LOAN-AMT = #HOLD-NEW-LOAN-AMT +
      #SCN-NEW-LOAN-AMT(#INDEXS)
    COMPUTE #HOLD-OLD-LOAN-AMT = #HOLD-OLD-LOAN-AMT +
      #SCN-OLD-LOAN-AMT(#INDEXS)
  END-IF
END-FOR
*
IF #HOLD-OLD-LOAN-AMT NE #TOTAL-OLD-LOAN-AMT
  REINPUT 'Old loan total does not match, redo command'
    MARK *#TOTAL-OLD-LOAN-AMT
END-IF
*
IF #HOLD-NEW-LOAN-AMT NE #TOTAL-NEW-LOAN-AMT
  REINPUT 'New loan total does not match'
    MARK *#TOTAL-NEW-LOAN-AMT
END-IF
*
IF #HOLD-INT-TRANS NE #TOTAL-INT-TRANS
  REINPUT 'Int Trans total does not match'
    MARK *#TOTAL-INT-TRANS
END-IF
*
FOR #INDEXS 1 TO 15
  IF #SCN-ID (#INDEXS) NE 0
    ADD 1 TO #NUM-LOANS
    PERFORM UPDATE-RECORD
  END-IF
END-FOR
*
FIND (1) NT-V WITH ID-NUMBER = 800104
  IF NO RECORDS FOUND
    MOVE TRUE TO #NO-NX
    ESCAPE BOTTOM
  END-NOREC
*
  MOVE 60 TO #I2   /* chged to 60 11/18/2001 (was 40)
  COMPUTE #I3 = #I2 - #NUM-LOANS
*
  IF #NUM-LOANS NE 0
    FOR #ILNS #I3 TO 1 STEP -1      /* SHIFT DOWN PREVIOUS Loans
      IF  LL-ID (#ILNS) NE 0
        MOVE LL-ID          (#ILNS) TO LL-ID           (#I2)
        MOVE LL-ISS-DT      (#ILNS) TO LL-ISS-DT       (#I2)
        MOVE LL-FIXED-RATE  (#ILNS) TO LL-FIXED-RATE   (#I2)
        MOVE LL-FIXED-LOAN  (#ILNS) TO LL-FIXED-LOAN   (#I2)
        MOVE LL-FIXED-AN-IN (#ILNS) TO LL-FIXED-AN-IN  (#I2)
        MOVE LL-VAR-LOAN    (#ILNS) TO LL-VAR-LOAN     (#I2)
        MOVE LL-VAR-ACC-INT (#ILNS) TO LL-VAR-ACC-INT  (#I2)
        MOVE LL-VAR-AN-IN   (#ILNS) TO LL-VAR-AN-IN    (#I2)
        MOVE LL-THIS-LOAN   (#ILNS) TO LL-THIS-LOAN    (#I2)
        MOVE LL-THIS-AN-IN  (#ILNS) TO LL-THIS-AN-IN   (#I2)
        MOVE LL-NEW-LOAN    (#ILNS) TO LL-NEW-LOAN     (#I2)
        MOVE LL-NEW-AN-IN   (#ILNS) TO LL-NEW-AN-IN    (#I2)
      END-IF
*
      SUBTRACT 1 FROM #I2
    END-FOR
*
    FOR #ILNS 1 TO #NUM-LOANS        /* FILL IN NEW Loans
      MOVE #SCN-ID          (#ILNS) TO LL-ID           (#ILNS)
      MOVE #LTR-ISS-DT      (#ILNS) TO LL-ISS-DT       (#ILNS)
      MOVE #LTR-LON-DT      (#ILNS) TO LL-LON-DT       (#ILNS)
      MOVE #LTR-FIXED-RATE  (#ILNS) TO LL-FIXED-RATE   (#ILNS)
      MOVE #LTR-FIXED-LOAN  (#ILNS) TO LL-FIXED-LOAN   (#ILNS)
      MOVE #LTR-FIXED-AN-IN (#ILNS) TO LL-FIXED-AN-IN  (#ILNS)
      MOVE #LTR-VAR-LOAN    (#ILNS) TO LL-VAR-LOAN     (#ILNS)
      MOVE #LTR-VAR-ACC-INT (#ILNS) TO LL-VAR-ACC-INT  (#ILNS)
      MOVE #LTR-VAR-AN-IN   (#ILNS) TO LL-VAR-AN-IN    (#ILNS)
      MOVE #LTR-THIS-LOAN   (#ILNS) TO LL-THIS-LOAN    (#ILNS)
      MOVE #LTR-THIS-AN-IN  (#ILNS) TO LL-THIS-AN-IN   (#ILNS)
      MOVE #LTR-NEW-LOAN    (#ILNS) TO LL-NEW-LOAN     (#ILNS)
      MOVE #LTR-NEW-AN-IN   (#ILNS) TO LL-NEW-AN-IN    (#ILNS)
    END-FOR
*
    UPDATE
  END-IF
END-FIND
*
IF    #NO-NX
    AND (#NUM-LOANS NE 0)
  MOVE 800104 TO NT-V.ID-NUMBER
*
  FOR #ILNS 1 TO #NUM-LOANS        /* FILL IN NEW Loans
    MOVE #SCN-ID          (#ILNS) TO LL-ID           (#ILNS)
    MOVE #LTR-ISS-DT      (#ILNS) TO LL-ISS-DT       (#ILNS)
    MOVE #LTR-LON-DT      (#ILNS) TO LL-LON-DT       (#ILNS)
    MOVE #LTR-FIXED-RATE  (#ILNS) TO LL-FIXED-RATE   (#ILNS)
    MOVE #LTR-FIXED-LOAN  (#ILNS) TO LL-FIXED-LOAN   (#ILNS)
    MOVE #LTR-FIXED-AN-IN (#ILNS) TO LL-FIXED-AN-IN  (#ILNS)
    MOVE #LTR-VAR-LOAN    (#ILNS) TO LL-VAR-LOAN     (#ILNS)
    MOVE #LTR-VAR-ACC-INT (#ILNS) TO LL-VAR-ACC-INT  (#ILNS)
    MOVE #LTR-VAR-AN-IN   (#ILNS) TO LL-VAR-AN-IN    (#ILNS)
    MOVE #LTR-THIS-LOAN   (#ILNS) TO LL-THIS-LOAN    (#ILNS)
    MOVE #LTR-THIS-AN-IN  (#ILNS) TO LL-THIS-AN-IN   (#ILNS)
    MOVE #LTR-NEW-LOAN    (#ILNS) TO LL-NEW-LOAN     (#ILNS)
    MOVE #LTR-NEW-AN-IN   (#ILNS) TO LL-NEW-AN-IN    (#ILNS)
  END-FOR
*
  STORE NT-V
END-IF
*
END TRANSACTION
*
COMPUTE ROUNDED #AVG-INT-RATE = ((#HOLD-INTR-RATE-COMP /
  #NUMBER-OF-RATES) / 10) * 10
INPUT WITH TEXT 'TRANSACTION COMPLETED' USING MAP 'C2402MLM' NO ERASE
MOVE '*' TO #CGA-SCR-COMMAND
*
FOR #INDEXS 1 TO 15
  IF #SCN-ID(#INDEXS) NE 0
    GET A-STATUS-VIEW #ISN-TAB(#INDEXS)
    PERFORM GET-NAME-ADDR /* PM27
    RESET #SCN-ADD-ROW1
    RESET #SCN-ADD-ROW2
    RESET #SCN-ADD-ROW3
    RESET #SCN-ADD-ROW4
    RESET #SCN-ADD-ROW5
    RESET #SCN-ADD-ROW6
    RESET #SCN-ADD-ROW7
    PERFORM FILL-LETTER
*
    IF #CGA-ORIG-SUFFIX = 'CAP'
      PERFORM CAP-LOAN-LETTERS
      INPUT USING MAP 'C2405MLM'    /* NEW CAP LOAN LTR TO MEMBER
*
      IF #SCN-LOAN-OWNER-FLAG (#INDEXS) = 'Z'
        MOVE '<ENTER BANK NAME HERE>' TO #SCN-LETR-NAME
        MOVE '<ENTER ADDRESS HERE>' TO #SCN-ADDR1
        RESET #SCN-ADDR2 #SCN-ADDR3
        INPUT USING MAP 'C2406MLM'   /* NEW CAP LOAN LTR TO BANK
      END-IF
    ELSE
      IF   (#LTR-FIXED-LOAN (#INDEXS) = 0)
          AND (#LTR-VAR-LOAN   (#INDEXS) = 0)
          AND (#LTR-VAR-ACC-INT (#INDEXS) = 0)
        INPUT USING MAP 'C2404MLM'    /* NEW LOAN
      ELSE
        INPUT USING MAP 'C2403MLM'    /* ADDITIONAL LOAN
      END-IF
    END-IF
    PERFORM CHK-AST
  END-IF
END-FOR
*
*
IF #CGA-ORIG-SUFFIX = 'CAP'                                       /* DW15
  WRITE  // 'Press enter to Continue LM CAP at CN' #ID-N
END-IF
*
MOVE 'LM' TO #CGA-SCR-COMMAND
IF #CGA-ORIG-SUFFIX = 'CAP'                                       /* PM1
  MOVE #ID-N TO #CGA-SCR-ID                                       /* PM1
  MOVE #CGA-ORIG-SUFFIX TO #CGA-SCR-SUFFIX                        /* PM1
END-IF                                                            /* PM1
FETCH 'G1000PXX'
*
*****************************************************************************
DEFINE SUBROUTINE FILL-LETTER
*****************************************************************************
*
MOVE #LTR-ISS-DT (#INDEXS) TO #YYYYMMDD
COMPRESS #MM-A  #DD-A #YYYY-A INTO #ISS-DT-DISP WITH '/'
COMPRESS #ISS-DT-DISP '.' INTO #ISS-DT-DISP-PER LEAVING NO
MOVE #LTR-LON-DT (#INDEXS) TO #YYYYMMDD
COMPRESS #MM-A  #DD-A #YYYY-A INTO #LON-DT-DISP WITH '/'
ASSIGN #PASS-COMMAND = 'LI' /*SET COMMAND TO THE SAME AS LI FOR RANK
MOVE #SCN-ID(#INDEXS) TO #HOLD-CN
COMPRESS '(CN' #HOLD-CN-A ')' INTO #SCN-LETR-ID LEAVING NO SPACE
MOVE *DATG TO #HOLD-SCN-DATE
*
* IF A-STATUS-VIEW.INTRO-FLAG = 'C' OR = 'B' /* on a C.A.P. mbr use day 1 /* DW22
*     OR = 'P' OR = 'Q'
*   MOVE '01' TO #HSD-DD
* END-IF
*
COMPRESS #HSD-DD #HSD-MM #HSD-YY INTO #SCN-DATE
**ASSIGN #DEL = ','                                                    /* RE1 START
**SEPARATE #HOLD-RECD-NAME(#INDEXS) LEFT INTO #LAST-NAME #FIRST-MID
*  #SUFFIX-NAME WITH DELIMITER #DEL
*
**IF #HOLD-MIL-STATUS(#INDEXS) = 'R'
*  MOVE ', RETIRED' TO #RETIRED
**ELSE
*  RESET #RETIRED
**END-IF
*
**COMPRESS #FIRST-MID #LAST-NAME INTO #SCN-FIRST-LAST
**COMPRESS #HOLD-RANK(#INDEXS) #FIRST-MID #LAST-NAME #SUFFIX-NAME
*  INTO #SCN-LETR-NAME
**COMPRESS #SCN-LETR-NAME #RETIRED INTO #SCN-LETR-NAME LEAVING NO SPACE
**ASSIGN #EDIT-INVALID = FALSE
**RESET #DISPL /* PM6
**CALLNAT 'GRANKSXX' #PASS-COMMAND #HOLD-RANK(#INDEXS) #XXX
*  #EDIT-INVALID #DISPL #RANK-LITERAL #RANK-DISPLAY
*
**COMPRESS #LAST-NAME ':' INTO #HOLD-NAME LEAVING NO SPACE
**COMPRESS #RANK-LITERAL #HOLD-NAME INTO #SCN-SALUT
**ASSIGN #ZIP-HYPH = '-'
**MOVE #ZIP-H1(#INDEXS) TO #ZIP-C1
**MOVE #ZIP-H2(#INDEXS) TO #ZIP-C2
*
**IF #HOLD-ADDR3(#INDEXS) = ' '
*  IF #HOLD-ADDR2(#INDEXS) = ' '
*    IF #HOLD-ADDR1(#INDEXS) = ' '
*      RESET #SCN-ADDR1 #SCN-ADDR2 #SCN-ADDR3
*    ELSE
*      COMPRESS #HOLD-ADDR1(#INDEXS) #ZIP-COMBINE INTO #SCN-ADDR1
*      RESET #SCN-ADDR2 #SCN-ADDR3
*    END-IF
*  ELSE
*    COMPRESS #HOLD-ADDR2(#INDEXS) #ZIP-COMBINE INTO #SCN-ADDR2
*    MOVE #HOLD-ADDR1(#INDEXS) TO #SCN-ADDR1
*    RESET #SCN-ADDR3
*  END-IF
**ELSE
*  COMPRESS #HOLD-ADDR3(#INDEXS) #ZIP-COMBINE INTO #SCN-ADDR3
*  MOVE #HOLD-ADDR2(#INDEXS) TO #SCN-ADDR2
*  MOVE #HOLD-ADDR1(#INDEXS) TO #SCN-ADDR1
**END-IF
*
#SCN-ADDR1 := #HOLD-ADDR1 (#INDEXS)
#SCN-ADDR2 := #HOLD-ADDR2 (#INDEXS)
#SCN-ADDR3 := #HOLD-ADDR3 (#INDEXS)                                   /* RE1 END
*
MOVE EDITED #SCN-OLD-LOAN-AMT(#INDEXS)(EM=ZZZ,ZZZ.99)  /* DW5
  TO #HOLD-EDIT
MOVE RIGHT #HOLD-EDIT TO #SCN-LETR-OLD-LOAN
*
FOR #INDEXD 1 TO 9
  IF #SCN-LETR-OLD-LOAN-D(#INDEXD) NE ' '
    MOVE '$' TO #SCN-LETR-OLD-LOAN-D (#INDEXD - 1)
    ESCAPE BOTTOM
  END-IF
END-FOR
*
MOVE EDITED #SCN-NEW-LOAN-AMT(#INDEXS) (EM=ZZZ,ZZZ.99)  /* DW5
  TO #HOLD-EDIT
MOVE RIGHT #HOLD-EDIT TO #SCN-LETR-NEW-LOAN
*
FOR #INDEXD 1 TO 9
  IF #SCN-LETR-NEW-LOAN-D(#INDEXD) NE ' '
    MOVE '$' TO #SCN-LETR-NEW-LOAN-D (#INDEXD - 1)
    ESCAPE BOTTOM
  END-IF
END-FOR
*
MOVE EDITED #SCN-TOTAL-LOAN(#INDEXS) (EM=ZZZ,ZZZ.99) TO #HOLD-EDIT
MOVE RIGHT #HOLD-EDIT TO #SCN-LETR-TOTAL-LOAN
*
FOR #INDEXD 1 TO 9
  IF #SCN-LETR-TOTAL-LOAN-D(#INDEXD) NE ' '
    MOVE '$' TO #SCN-LETR-TOTAL-LOAN-D (#INDEXD - 1)
    ESCAPE BOTTOM
  END-IF
END-FOR
*
IF #SCN-INT-TRANS(#INDEXS) < 0
  MOVE '-' TO #INT-SIGN
  MOVE 'INTEREST CREDIT' TO #SCN-DB-CR-LBL
ELSE
  MOVE ' ' TO #INT-SIGN
  MOVE 'UNPAID INTEREST' TO #SCN-DB-CR-LBL
END-IF
*
MOVE EDITED #SCN-INT-TRANS(#INDEXS) (EM=ZZZ,ZZZ.99) TO #HOLD-EDIT
MOVE RIGHT #HOLD-EDIT TO #SCN-LETR-INT-TRAN
*
FOR #INDEXD 1 TO 9
  IF #SCN-LETR-INT-TRAN-D(#INDEXD) NE ' '
    MOVE '$' TO #SCN-LETR-INT-TRAN-D (#INDEXD - 1)
    ESCAPE BOTTOM
  END-IF
END-FOR
*
MOVE EDITED #SCN-ANN-INTR(#INDEXS) (EM=ZZZ,ZZZ.99) TO #HOLD-EDIT
* Size of #scn-letr-ann-int below was increased from a9 to a10 in C2400LLM DW23
MOVE RIGHT #HOLD-EDIT TO #SCN-LETR-ANN-INT
*
FOR #INDEXD 1 TO 10                             /* DW23
  IF #SCN-LETR-ANN-INT-D(#INDEXD) NE ' '
    MOVE '$' TO #SCN-LETR-ANN-INT-D (#INDEXD - 1)
    ESCAPE BOTTOM
  END-IF
END-FOR
*
IF #SCN-INTR-RATE(#INDEXS) = 12
  MOVE '12%   ' TO #SCN-LETR-INT-RATE
ELSE
  MOVE EDITED #SCN-INTR-RATE(#INDEXS) (EM=Z9.99) TO #SCN-LETR-INT-RATE-N
  MOVE '%' TO #SCN-LETR-INT-RATE-P
END-IF

IF #SCN-INTR-RATE(#INDEXS) = 5.0   /* TT1.
  MAP-INTEREST-TYPE := FIX-INTEREST-RATE
ELSE
  MAP-INTEREST-TYPE := VAR-INTEREST-RATE
END-IF
*
RESET #LTR-LOANS-LINES (*)
RESET #I1
RESET PREVIOUS-LOAN-EXISTS
*
IF  (#LTR-VAR-LOAN (#INDEXS) NE 0)
    OR (#LTR-VAR-ACC-INT (#INDEXS) NE 0)
    OR (#LTR-FIXED-LOAN (#INDEXS) NE 0)
  PREVIOUS-LOAN-EXISTS := TRUE
END-IF
*
ADD 1 TO #I1
*
IF PREVIOUS-LOAN-EXISTS
  IF #LTR-FIXED-LOAN (#INDEXS) NE 0
    MOVE 'Previous Fixed loan:   ' TO #LTR-LBL-1 (#I1)
    MOVE EDITED #LTR-FIXED-LOAN (#INDEXS) (EM=ZZZ,ZZZ.99) TO #LTR-LOAN-AMT (#I1)  /* TT1 PLACEHOLDER
  ELSE
    MOVE 'Previous variable loan:' TO #LTR-LBL-1 (#I1)
    MOVE EDITED #LTR-VAR-LOAN   (#INDEXS) (EM=ZZZ,ZZZ.99)   TO #LTR-LOAN-AMT (#I1)
  END-IF
  COMPRESS '$' #LTR-LOAN-AMT (#I1) INTO #LTR-LOAN-AMT (#I1) LEAVING NO
  ADD 1 TO #I1
*
  MOVE 'Interest due/credit:' to #ltr-lbl-1 (#i1)               /* vt1
  MOVE edited #ltr-var-acc-int (#indexs) (em=szzz,zzz.99) TO #LTR-LOAN-AMT (#I1)       /* vt1
  COMPRESS '$' #LTR-LOAN-AMT (#I1) INTO #LTR-LOAN-AMT (#I1) leaving no
  ADD 1 TO #I1                                                       /* vt1
*
END-IF

MOVE 'Enclosed check:' TO #LTR-LBL-1 (#I1)
MOVE EDITED #LTR-THIS-LOAN (#INDEXS) (EM=ZZZ,ZZZ.99) TO #LTR-LOAN-AMT (#I1)
COMPRESS '$' #LTR-LOAN-AMT (#I1) INTO #LTR-LOAN-AMT (#I1) LEAVING NO
ADD 1 TO #I1
*
IF #LTR-FIXED-LOAN (#INDEXS) NE 0
  MOVE 'Total fixed loan:   ' TO #LTR-LBL-1 (#I1)
  MOVE EDITED #LTR-FIXED-RATE (#INDEXS) (EM=ZZ.999) TO #LTR-RATE (#I1)
  MOVE EDITED #LTR-NEW-AN-F-IN (#INDEXS) (EM=Z,ZZZ.99)            /* TT1
    TO #LTR-INTEREST (#I1)
ELSE
  MOVE 'Total variable loan:' TO #LTR-LBL-1 (#I1)
  MOVE EDITED #CURR-VAR-INT-RATE (EM=ZZ.999) TO #LTR-RATE (#I1)
  MOVE EDITED #LTR-NEW-AN-IN (#INDEXS) (EM=Z,ZZZ.99)
    TO #LTR-INTEREST (#I1)
END-IF
*
COMPRESS '(' #LTR-RATE (#I1) '%)' INTO #LTR-RATE  (#I1) LEAVING NO
MOVE EDITED #LTR-NEW-LOAN (#INDEXS) (EM=ZZZ,ZZZ.99) TO #LTR-LOAN-AMT (#I1)
COMPRESS '$' #LTR-LOAN-AMT (#I1) INTO #LTR-LOAN-AMT (#I1) LEAVING NO
COMPRESS '$' #LTR-INTEREST (#I1) INTO #LTR-INTEREST (#I1) LEAVING NO
MOVE ' Annual interest:'          TO #LTR-INT-LBL (#I1)
ADD 1 TO #I1
*
IF NOT PREVIOUS-LOAN-EXISTS
  IF #LTR-FIXED-LOAN (#INDEXS) NE 0
    MOVE 'This fixed loan:' TO #LTR-LBL-1 (#I1)
    MOVE EDITED #LTR-FIXED-RATE (#INDEXS)(EM=ZZ.999) TO #LTR-RATE (#I1)
    MOVE EDITED #LTR-NEW-AN-F-IN (#INDEXS) (EM=Z,ZZZ.99) TO #LTR-INTEREST (#I1)
  ELSE
    MOVE 'This variable loan:' TO #LTR-LBL-1 (#I1)
    MOVE EDITED #CURR-VAR-INT-RATE  (EM=ZZ.999) TO #LTR-RATE (#I1)
    MOVE EDITED #LTR-NEW-AN-IN (#INDEXS) (EM=Z,ZZZ.99) TO #LTR-INTEREST (#I1)
  END-IF
  COMPRESS '(' #LTR-RATE (#I1) '%)' INTO #LTR-RATE  (#I1) LEAVING NO
  MOVE EDITED #LTR-NEW-LOAN (#INDEXS) (EM=ZZ,ZZZ.99) TO #LTR-LOAN-AMT (#I1)
  COMPRESS '$' #LTR-LOAN-AMT (#I1) INTO #LTR-LOAN-AMT (#I1) LEAVING NO
  MOVE ' Annual interest:'          TO #LTR-INT-LBL (#I1)
  COMPRESS '$' #LTR-INTEREST (#I1) INTO #LTR-INTEREST (#I1) LEAVING NO
END-IF
*
RESET #HAS-MEC-POL
FOR #I1 1 TO 9
  IF   (A-STATUS-VIEW.STATUS (#I1) = 'D')
      AND (A-STATUS-VIEW.MEC-IND (#I1) = 'Y')
      AND (A-STATUS-VIEW.ISSUE-DATE (#I1) = #LTR-ISS-DT (#INDEXS))
    MOVE TRUE TO #HAS-MEC-POL
  END-IF
END-FOR
*
RESET #SCN-ADD-ROW1 #SCN-ADD-ROW2 #SCN-ADD-ROW3 #SCN-ADD-ROW4
IF #HAS-MEC-POL
  COMPRESS 'This loan has made you subject to TAMRA. Withdrawals'
    'made before age 59 1/2'  INTO #SCN-ADD-ROW1
  COMPRESS 'unless disabled are subject to a 10% penalty tax as'
    'well as ordinary income' INTO #SCN-ADD-ROW2
  COMPRESS 'tax. The IRS priority sequence for withdrawals is interest'
    'earnings first'          INTO #SCN-ADD-ROW3
  COMPRESS 'and then principal. Principal is withdrawn without'
    'taxation and penalty.'   INTO #SCN-ADD-ROW4
END-IF
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE GET-AND-EDIT-RECORD
*****************************************************************************
*
MOVE #SCN-ID(#INDEXS) TO #CGA-ID
FIND (1) A-STATUS-VIEW WITH MEMBER-KEY = #CGA-ID-G
  IF NO RECORDS FOUND
    REINPUT 'ID number not on file'
      MARK *#SCN-ID(#INDEXS)
  END-NOREC
*
  PERFORM CALL-CVALUSXX
  CALLNAT 'GSECURXX'
    A-STATUS-VIEW.ID-NUMBER
    #CGA-CLERK
    #SECURITY-ERROR
*
  IF #SECURITY-ERROR
    REINPUT 'Security Violation - Member is linked to user'
      MARK *#SCN-ID(#INDEXS)
  END-IF
*
  IF #SCN-NAME(#INDEXS) NE NAME-3
    REINPUT 'ID and name verification error'
      MARK *#SCN-ID(#INDEXS)
  END-IF
*
  ASSIGN #ISN-TAB(#INDEXS) = *ISN
*
  IF #SCN-EFF-DT (#INDEXS) NE MASK (MMDDYYYY)
    REINPUT 'Invalid Eff Date'
      MARK *#SCN-EFF-DT (#INDEXS)
  END-IF
*
  COMPRESS #SED-YYYY-A (#INDEXS) #SED-MM-A (#INDEXS) #SED-DD-A (#INDEXS)
    INTO #SCN-EFF-DT-YYYYMMDD-A (#INDEXS) LEAVING NO
*
  RESET #EFF-X (#INDEXS)
  FOR #I1 1 TO 9
    IF (A-STATUS-VIEW.ISSUE-DATE(#I1) = #SCN-EFF-DT-YYYYMMDD(#INDEXS))
*     IF (NOT (A-STATUS-VIEW.PLAN (#I1) = 'LT' OR = 'RT')  /* W/L Pol OK   /* DW16  /* YK4
*         AND ((A-STATUS-VIEW.PLAN-A1 (#I1) LT 'U')                                 /* YK4
*         OR  (A-STATUS-VIEW.PLAN-A1 (#I1) GT 'Z')))                                /* YK4
*
      IF (NOT FUNCTION-TERM-POLICY(<A-STATUS-VIEW.PLAN(#I1)>))               /* YK4
          OR  ((#CGA-ORIG-SUFFIX = 'CAP')   /* CAP pol OK if  suffix is CAP  /* DW16
          AND (A-STATUS-VIEW.X-LOAN-AMOUNT (*) = 0))
        /* AND (A-STATUS-VIEW.CONV-DURATION (#I1) = 999))           /* TT2
        A-STATUS-VIEW.CONV-DURATION (#I1) := 999                    /* TT2
        MOVE #I1 TO #EFF-X (#INDEXS)
        ESCAPE BOTTOM
      END-IF
    END-IF
  END-FOR
*
  IF #EFF-X (#INDEXS) = 0
    REINPUT 'Issue Date does NOT match any eligible Member Policies'    /* DW16
      MARK *#SCN-EFF-DT (#INDEXS)
  END-IF
*
  if a-status-view.mec-ind(#i1) = 'Y'                                              /* vt3 \/
    SET WINDOW 'Replay'
    REPEAT
      move '?' to #replay
      INPUT WINDOW ='Replay' USING MAP 'C2399MCI'
      if #replay = ' '
        reinput  'Must Enter (Y)es or (N)o'
          mark *#replay
      end-if
      if #replay = 'Y'
        escape bottom
      end-if
      if #replay = 'N'
        fetch 'C2400PLM'
      end-if
    end-repeat
    set window off
  end-if                                                                            /* vt3 /\
*
  MOVE #EFF-X (#INDEXS) TO #X1  /* save loan to process index
  IF A-STATUS-VIEW.X-INTEREST-RATE (#X1) > 12.000
    REINPUT 'Interest rate greater than 12.00, Call E.D.S'
      MARK *#SCN-ID(#INDEXS)
  END-IF
*
  IF #CGA-ORIG-SUFFIX = 'CAP'
    IF  (A-STATUS-VIEW.X-LOAN-AMOUNT    (#X1) NE 0)
        OR (A-STATUS-VIEW.X-ACCUM-INTEREST (#X1) NE 0)
      REINPUT 'No loan or interest can exist prior to a Cap loan'
        MARK *#SCN-ID (#INDEXS)
    END-IF
*
    IF  (NOT A-STATUS-VIEW.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
        OR (A-STATUS-VIEW.CONV-DURATION (#X1) NE 999)
      REINPUT 'Member or policy is not CAP'
        MARK *#SCN-ID (#INDEXS)
    END-IF
*
    IF A-STATUS-VIEW.X-ALT-LP-IND (#X1) = 'L' OR = 'E'   /* PM99
      REINPUT 'AIL or EIL must be removed to issue loan' /* PM99
        MARK *#SCN-ID (#INDEXS)                            /* PM99
    END-IF                                               /* PM99
  END-IF
*
  MOVE (AD=P) TO #SCN-OLD-LOAN-AMT-ATTR(#INDEXS)
  MOVE #HOLD-MMDDYYYY TO #SCN-LOAN-DATE(#INDEXS)
*
  IF #CGA-ORIG-SUFFIX = 'CAP'
*    IF #SLD-DD (#INDEXS) GT 26               /* PM14
*      ADD 1 TO #SLD-MM (#INDEXS)             /* PM14
*      IF #SLD-MM (#INDEXS) GT 12             /* PM14
*        MOVE 1 TO #SLD-MM (#INDEXS)          /* PM14
*        ADD 1 TO #SLD-YYYY (#INDEXS)         /* PM14
*      END-IF                                 /* PM14
*    END-IF                                   /* PM14
*
    MOVE '01' TO #SLD-DD-A (#INDEXS)
*   MOVE 5000 TO #SCN-NEW-LOAN-AMT (#INDEXS)      /* NG1 Start
*   MOVE 4985 TO #SCN-NEW-WIRE-AMT (#INDEXS)
    MOVE 4000 TO #SCN-NEW-LOAN-AMT (#INDEXS)
    MOVE 3985 TO #SCN-NEW-WIRE-AMT (#INDEXS)      /* NG1 End
    MOVE 'A'  TO #SCN-LOAN-OWNER-FLAG (#INDEXS)
  ELSE
    RESET #SCN-LOAN-OWNER-FLAG (#INDEXS)
  END-IF
*
  IF #CGA-ORIG-SUFFIX NE 'CAP' /* VAR LOAN NOT USED FOR CAP LOAN    /* TT1 BEGIN
    IF A-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) = 0
      IF A-STATUS-VIEW.PLAN(#X1) = 'GPL' THEN
        ASSIGN #SCN-OLD-LOAN-AMT(#INDEXS) =
          A-STATUS-VIEW.X-LOAN-AMOUNT (#X1)
        COMPUTE #TOTAL-OLD-LOAN-AMT = A-STATUS-VIEW.X-LOAN-AMOUNT(#X1) +
          #TOTAL-OLD-LOAN-AMT
        COMPUTE ROUNDED #HOLD-DAILY-RATE =
          A-STATUS-VIEW.X-LOAN-AMOUNT (#X1) *
          (GPL-INTEREST-RATE / 365) / 100
        COMPUTE ROUNDED #HOLD-INT-TRANS = #ACC-INT(#X1)
      ELSE
        RESET #SCN-OLD-LOAN-AMT(#INDEXS)
        COMPUTE #HOLD-INT-TRANS = A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1)
          +  A-STATUS-VIEW.X-ACCUM-INTEREST-2 (#X1)
      END-IF                                                          /* TT1 END
    ELSE
      ASSIGN #SCN-OLD-LOAN-AMT(#INDEXS) =
        A-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1)
      COMPUTE #TOTAL-OLD-LOAN-AMT = A-STATUS-VIEW.X-LOAN-AMOUNT-2(#X1) +
        #TOTAL-OLD-LOAN-AMT
      COMPUTE ROUNDED #HOLD-DAILY-RATE =
        A-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) *
        (#CURR-VAR-INT-RATE / 365) / 100
*
      IF   (A-STATUS-VIEW.X-LD-MM-2 (#X1) = #HN-MM)
          AND (A-STATUS-VIEW.X-LD-YYYY-2 (#X1) = #HN-YYYY)
        COMPUTE ROUNDED #HOLD-INT-TRANS =
          ((#HN-DD - A-STATUS-VIEW.X-LD-DD-2 (#X1) ) * #HOLD-DAILY-RATE)
          + A-STATUS-VIEW.X-ACCUM-INTEREST-2 (#X1)
          + A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1)
      ELSE
        COMPUTE ROUNDED #HOLD-INT-TRANS =
          ((#HN-DD - 1) * #HOLD-DAILY-RATE)
          + A-STATUS-VIEW.X-ACCUM-INTEREST-2   (#X1)
          + A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1)
      END-IF
    END-IF
  END-IF
*
  MOVE #HOLD-INT-TRANS TO #SCN-INT-TRANS (#INDEXS)
  ADD  #HOLD-INT-TRANS TO #TOTAL-INT-TRANS
*
  PERFORM GET-NAME-ADDR
*
  IF #CGA-ORIG-SUFFIX = 'MAX'
    PERFORM CALCULATE-LOAN-VALUE
    COMPUTE #TOTAL-LOAN-VALUE (#INDEXS) = #HOLD-TOTAL-LOAN-VALUE
      - (A-STATUS-VIEW.X-LOAN-AMOUNT      (#X1)
      +  A-STATUS-VIEW.X-LOAN-AMOUNT-2    (#X1)
      +  A-STATUS-VIEW.X-ACCUM-INTEREST   (#X1)
      +  A-STATUS-VIEW.X-NXT-YR-ACCUM-INT (#X1))
      -  #SCN-INT-TRANS (#INDEXS)
    COMPUTE #SCN-NEW-LOAN-AMT(#INDEXS) = ((#TOTAL-LOAN-VALUE(#INDEXS)
      -  #SCN-INT-TRANS(#INDEXS)) / 100) * 100
*
    IF #SCN-NEW-LOAN-AMT(#INDEXS) > 0
      ADD #SCN-NEW-LOAN-AMT(#INDEXS) TO #TOTAL-NEW-LOAN-AMT
    ELSE
      MOVE 0 TO #SCN-NEW-LOAN-AMT(#INDEXS)
    END-IF
  END-IF
END-FIND
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE CALCULATE-LOAN-VALUE
*****************************************************************************
*
RESET #TOT-CSV    /* DW8
IF  (A-STATUS-VIEW.ISS-DATE-DD (#X1) = 01)
    OR (#TODAY-DD GE A-STATUS-VIEW.ISS-DATE-DD (#X1))
  MOVE A-STATUS-VIEW.CASH-VALUE (#X1) TO #CSV
ELSE
  MOVE A-STATUS-VIEW.NXT-MON-CASH-VALUE (#X1) TO #CSV /* LAST-MON
*
  MOVE A-STATUS-VIEW.ID-NUMBER TO #HIST-KEY-ID
  MOVE A-STATUS-VIEW.ISSUE-DATE (#X1) TO #HIST-KEY-ISS
  MOVE A-STATUS-VIEW.SPLIT-IND (#X1) TO #HIST-KEY-SPL
  MOVE *DATN TO #YYYYMMDD
  SUBTRACT 1 FROM #MM
  IF #MM LT 1
    MOVE 12 TO #MM
    SUBTRACT 1 FROM #YYYY
  END-IF
  FIND VA-V WITH RECORD-KEY = #HIST-KEY
    IF   (YEAR-MONTH-M (13) = #YYYYMM)
      ADD PREMIUM-M (13) TO #CSV
    END-IF
  END-FIND
END-IF
*
MOVE A-STATUS-VIEW.ACC-CASH-VALUE    (#X1) TO #ACV
IF A-STATUS-VIEW.MTD-ACV-PREM-ADJ    (#X1) NE 9999999.99
  ADD A-STATUS-VIEW.MTD-ACV-PREM-ADJ (#X1) TO #CSV
  ADD A-STATUS-VIEW.MTD-ACV-PREM-ADJ (#X1) TO #ACV
END-IF
*
IF A-STATUS-VIEW.MTD-ACV-INT-ADJ (#X1) NE 99999.99
  ADD A-STATUS-VIEW.MTD-ACV-INT-ADJ (#X1) TO #CSV
  ADD A-STATUS-VIEW.MTD-ACV-INT-ADJ (#X1) TO #ACV
END-IF
*
IF A-STATUS-VIEW.MTD-ACV-COI-ADJ    (#X1) NE 99999.99
  ADD A-STATUS-VIEW.MTD-ACV-COI-ADJ (#X1) TO #CSV
  ADD A-STATUS-VIEW.MTD-ACV-COI-ADJ (#X1) TO #ACV
END-IF
*
PERFORM CALC-PREMS-PAID-SETUP
* IF   (A-STATUS-VIEW.ISSUE-DATE (#X1) GE 19970101) /* nxt policy    PM3
* AND (MONTH-ALLOC-AMT  (#X1) NE 999.99)                             PM3
* AND ((A-STATUS-VIEW.CONV-DURATION (#X1) NE 999)                    PM3
*                                      /* cAPS AFTER 1/1/1999 DO NOT USE
* OR  (A-STATUS-VIEW.ISSUE-DATE (#X1) LT 19990101))   /* TOT PREMS PAID
IF (#PREMS-PAID GT #CSV)                /* reset csv if nxy pol      PM3
    AND (X-FIRST-PLACE-FEE (#X1) = 0)
    AND (A-STATUS-VIEW.PAY-STATUS (#X1) NE '45')         /* RPU      /* PM2
    AND (A-STATUS-VIEW.PROCESS-IND NE 'S')                 /* AFSC MEMBER
  MOVE #PREMS-PAID TO #CSV
END-IF
*
IF A-STATUS-VIEW.CONV-DURATION (#X1) = 999    /* CAP MBR POLICY
  MOVE CAP-CONV-ACV  TO #CAP-CONV-ACV
  PERFORM CALC-CAP-CSV
  MOVE #CAP-CSV TO #CSV
END-IF
*
ADD #CSV TO #TOT-CSV
ADD #ACV TO #TOT-ACV
*
MOVE #LVALUE (#X1) TO #HOLD-TOTAL-LOAN-VALUE            /* PM25
* ADD #LVALUE (#X1) TO #HOLD-TOTAL-LOAN-VALUE           /* PM25
* SUBTRACT #ACC-INT   (#X1) FROM #HOLD-TOTAL-LOAN-VALUE
* SUBTRACT #ACC-INT-2 (#X1) FROM #HOLD-TOTAL-LOAN-VALUE
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE EDIT-RECORD
*****************************************************************************
*
IF #CGA-ORIG-SUFFIX = 'CAP'
  IF NOT #SCN-LOAN-OWNER-FLAG (#INDEXS) = 'X' OR = 'Y' OR = 'Z' OR = 'A'
    REINPUT USING HELP
      MARK *#SCN-LOAN-OWNER-FLAG (#INDEXS)
  END-IF
END-IF
*
IF #SCN-NEW-LOAN-AMT(#INDEXS) = 0
  REINPUT 'Loan Amount must be entered'
    MARK *#SCN-NEW-LOAN-AMT (#INDEXS)
END-IF
*
MOVE #EFF-X (#INDEXS) TO #X1  /* save loan to process index
PERFORM CALCULATE-LOAN-VALUE                                        /* TT1 PLACEHOLDER
*
IF A-STATUS-VIEW.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
  COMPUTE #TOTAL-LOAN-VALUE (#INDEXS) = #HOLD-TOTAL-LOAN-VALUE
    - (A-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1)
    + A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1))
    - #SCN-INT-TRANS (#INDEXS)
ELSE
  COMPUTE #TOTAL-LOAN-VALUE (#INDEXS) = #HOLD-TOTAL-LOAN-VALUE
    - (A-STATUS-VIEW.X-LOAN-AMOUNT        (#X1)
    + A-STATUS-VIEW.X-LOAN-AMOUNT-2      (#X1)
    + A-STATUS-VIEW.X-ACCUM-INTEREST     (#X1)
    + A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1))
    - #SCN-INT-TRANS (#INDEXS)
END-IF
*
IF A-STATUS-VIEW.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
  COMPUTE #TEST-LOAN-VALUE = #HOLD-TOTAL-LOAN-VALUE
    - (A-STATUS-VIEW.X-LOAN-AMOUNT-2      (#X1)
    +  A-STATUS-VIEW.X-ACCUM-INTEREST-2   (#X1)
    +  A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1))
    -  #SCN-INT-TRANS (#INDEXS)
ELSE
  COMPUTE #TEST-LOAN-VALUE = #HOLD-TOTAL-LOAN-VALUE
    - (A-STATUS-VIEW.X-LOAN-AMOUNT        (#X1)
    +  A-STATUS-VIEW.X-LOAN-AMOUNT-2      (#X1)
    +  A-STATUS-VIEW.X-ACCUM-INTEREST     (#X1)
    +  A-STATUS-VIEW.X-NXT-YR-ACCUM-INT   (#X1)
    +  A-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1))
    -  #SCN-INT-TRANS (#INDEXS)
END-IF
*
* COMPUTE #HOLD-TOTAL-LOAN-VALUE = #SCN-NEW-LOAN-AMT (#INDEXS) +  /* PM25
*   #SCN-INT-TRANS (#INDEXS)                                      /* PM25
*
IF #CGA-ORIG-SUFFIX = 'CAP'
  IF NOT #SCN-NEW-LOAN-AMT (#INDEXS) = 1000 OR = 2000 OR = 2500
      OR = 3000 OR = 4000 OR = 5000
    REINPUT 'Cap loans must be $1K,2K,2.5K,3K,4K,or 5K'
      MARK *#SCN-NEW-LOAN-AMT(#INDEXS)
  END-IF
*
  IF   (#SLD-DD-A (#INDEXS) NE '01')
      OR (#SLD-MM-A (#INDEXS) NE #HCD-MM-A)
    REINPUT 'Loan date must be 1st day of current month'
      MARK *#SCN-LOAN-DATE (#INDEXS)
  END-IF
ELSE
  IF #CGA-ORIG-SUFFIX = 'ATH'                                      /* PM25 PM26
    IF NOT FUNCTION-ACCESS(<*USER,#SECURITY-CODE>) = 'A' OR = 'U'   /*      PM26
      REINPUT 'USER NOT AUTHORIZED FOR "ATH" PROCESS'               /*      PM26
    END-IF                                                          /*      PM26
*  IGNORE  /* comment out below to issue unlimited loans
    COMPUTE #AMT = (A-STATUS-VIEW.ANNUAL-PREM(#X1) / 4) * -1       /* PM25 PM26
    COMPUTE #AMT2 = #TOT-CSV                                       /* PM25 PM26
      - (A-STATUS-VIEW.X-LOAN-AMOUNT      (#X1)                    /* PM25 PM26
      +  A-STATUS-VIEW.X-LOAN-AMOUNT-2    (#X1)                    /* PM25 PM26
      +  A-STATUS-VIEW.X-ACCUM-INTEREST   (#X1)                    /* PM25 PM26
      +  A-STATUS-VIEW.X-NXT-YR-ACCUM-INT (#X1)                    /* PM25 PM26
      +  #SCN-NEW-LOAN-AMT (#INDEXS) + #SCN-INT-TRANS (#INDEXS))   /* PM25 PM26
    IF #AMT2 LE #AMT                     /* DW8                    /* PM25 PM26
      REINPUT 'Total loan amount exceeds cash value plus QTR prem' /* PM25 PM26
        MARK *#SCN-NEW-LOAN-AMT(#INDEXS)                           /* PM25 PM26
    END-IF                                                         /* PM25 PM26
  ELSE
*  write '=' #total-loan-value(#indexs) #scn-new-loan-amt(#indexs)                                                            /* PM25 PM26
    IF #SCN-NEW-LOAN-AMT (#INDEXS) GT #TOTAL-LOAN-VALUE (#INDEXS)
      REINPUT 'Total loan amount exceeds loan value'
        MARK *#SCN-NEW-LOAN-AMT(#INDEXS)
    END-IF
*
    IF #TEST-LOAN-VALUE LE 1.00
      REINPUT 'Current loan value is less than $1.00'
        MARK *#SCN-NEW-LOAN-AMT (#INDEXS)
    END-IF
  END-IF                                                           /* PM25 PM26
END-IF
*
IF #SCN-LOAN-DATE(#INDEXS) NE MASK(MMDDYYYY)
  REINPUT 'Invalid Loan Date'
    MARK *#SCN-LOAN-DATE(#INDEXS)
END-IF
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE UPDATE-RECORD
*****************************************************************************
*
RESET #MBR-SINCE #CAP-PLUS1-DATE #CAP-ENTRY-MM        /* YK1
MOVE #EFF-X (#INDEXS) TO #X1   /* save loan to process index
GET U-STATUS-VIEW #ISN-TAB (#INDEXS)
MOVE U-STATUS-VIEW.ISSUE-DATE (#X1) TO #LTR-ISS-DT (#INDEXS)
*
MOVE CAP-ENTRY-DATE TO #CAP-PLUS1-DATE                /* YK1
MOVE MBR-SINCE      TO #MBR-SINCE                     /* YK1
*
IF #SCN-ID (#INDEXS) NE U-STATUS-VIEW.ID-NUMBER
  INPUT TEXT 'TEXT ID"S DO NOT MATCH, REDO COMMAND'
    MARK *#SCN-INTR-RATE (#INDEXS)
    USING MAP 'C2402MLM'
  FETCH 'G1000PXX'
END-IF
*
ASSIGN #HOLD-ACCTG-DATE = U-STATUS-VIEW.DATE-ACCT-UPDATE
ASSIGN #HOLD-INTR-RATE = U-STATUS-VIEW.X-INTEREST-RATE (#X1)
COMPUTE #SCN-TOTAL-LOAN (#INDEXS) = #SCN-NEW-LOAN-AMT (#INDEXS) +
  #SCN-OLD-LOAN-AMT (#INDEXS) + #SCN-INT-TRANS (#INDEXS)
COMPUTE #ADDL-LOAN =#SCN-NEW-LOAN-AMT(#INDEXS) + #SCN-INT-TRANS(#INDEXS)
*
IF #CGA-ORIG-SUFFIX = 'CAP'
  MOVE 1.5 TO #SCN-INTR-RATE (#INDEXS)
ELSE
  IF U-STATUS-VIEW.PLAN(#X1) = 'GPL' THEN  /* TT1
    #SCN-INTR-RATE (#INDEXS) := GPL-INTEREST-RATE
  ELSE
    MOVE #CURR-VAR-INT-RATE TO #SCN-INTR-RATE (#INDEXS)
  END-IF
END-IF
*
* Size of #scn-ann-intr below was increased from 4.2 to 5.2 in C2400LLM DW23
COMPUTE ROUNDED #SCN-ANN-INTR (#INDEXS) = #SCN-TOTAL-LOAN (#INDEXS) *
  (#SCN-INTR-RATE (#INDEXS) / 100)
*
IF U-STATUS-VIEW.X-LOAN-AMOUNT (#X1) NE 0
  MOVE U-STATUS-VIEW.X-LOAN-AMOUNT (#X1)   TO #LTR-FIXED-LOAN (#INDEXS)
  MOVE U-STATUS-VIEW.X-INTEREST-RATE (#X1) TO #LTR-FIXED-RATE (#INDEXS)
  COMPUTE ROUNDED #LTR-FIXED-AN-IN (#INDEXS) =
    U-STATUS-VIEW.X-LOAN-AMOUNT (#X1)
    * U-STATUS-VIEW.X-INTEREST-RATE (#X1) / 100
END-IF
*
IF  (U-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) NE 0)
    OR (#SCN-INT-TRANS (#INDEXS) NE 0)
  MOVE U-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) TO #LTR-VAR-LOAN (#INDEXS)
  MOVE #SCN-INT-TRANS (#INDEXS) TO #LTR-VAR-ACC-INT (#INDEXS)
  COMPUTE ROUNDED #LTR-VAR-AN-IN (#INDEXS) =
    U-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) * #CURR-VAR-INT-RATE / 100
END-IF
*
MOVE #SCN-NEW-LOAN-AMT (#INDEXS) TO #LTR-THIS-LOAN (#INDEXS)
COMPUTE ROUNDED #LTR-THIS-AN-IN (#INDEXS) =
  #SCN-NEW-LOAN-AMT (#INDEXS)  * #CURR-VAR-INT-RATE / 100

COMPUTE ROUNDED #LTR-NEW-AN-F-IN (#INDEXS) =               /* TT1
  #SCN-TOTAL-LOAN (#INDEXS)  * GPL-INTEREST-RATE /100      /* TT1
*
MOVE #SCN-TOTAL-LOAN (#INDEXS) TO #LTR-NEW-LOAN (#INDEXS)

COMPUTE ROUNDED #LTR-NEW-AN-IN (#INDEXS) =
  #SCN-TOTAL-LOAN (#INDEXS)  * #CURR-VAR-INT-RATE / 100
*
MOVE #SLD-MM-A(#INDEXS)   TO #HCD-MM-A
MOVE #SLD-DD-A(#INDEXS)   TO #HCD-DD-A
MOVE #SLD-YYYY-A(#INDEXS) TO #HCD-YYYY-A
MOVE #HOLD-CONVERT-DATE TO #LTR-LON-DT (#INDEXS)
*
IF #CGA-ORIG-SUFFIX = 'CAP'
  MOVE 1.5 TO U-STATUS-VIEW.X-INTEREST-RATE (#X1)
  ASSIGN U-STATUS-VIEW.X-LOAN-DATE (#X1) = #HOLD-CONVERT-DATE
  COMPUTE U-STATUS-VIEW.X-CAP-AMT(#X1) = U-STATUS-VIEW.X-CAP-AMT(#X1) +
    ((#SCN-INT-TRANS(#INDEXS) / 10) * 10)
  ASSIGN U-STATUS-VIEW.X-LOAN-AMOUNT (#X1) = #SCN-TOTAL-LOAN (#INDEXS)
  RESET  U-STATUS-VIEW.X-ACCUM-INTEREST (#X1)
  RESET  U-STATUS-VIEW.X-NXT-YR-ACCUM-INT (#X1)
  RESET  U-STATUS-VIEW.X-INTEREST-RECEIVED (#X1)
  RESET  U-STATUS-VIEW.X-BILL-INTEREST-AMT (#X1)
  MOVE '0' TO U-STATUS-VIEW.X-BILL-SW  (#X1)
ELSE IF U-STATUS-VIEW.PLAN(#X1) = 'GPL' THEN  /* TT1   BEGIN
    MOVE GPL-INTEREST-RATE TO U-STATUS-VIEW.X-INTEREST-RATE (#X1)
    ASSIGN U-STATUS-VIEW.X-LOAN-DATE (#X1) = #HOLD-CONVERT-DATE
    COMPUTE U-STATUS-VIEW.X-CAP-AMT(#X1) = U-STATUS-VIEW.X-CAP-AMT(#X1) +
      ((#SCN-INT-TRANS(#INDEXS) / 10) * 10)
    ASSIGN U-STATUS-VIEW.X-LOAN-AMOUNT (#X1) = #SCN-TOTAL-LOAN (#INDEXS)  /* TT1
    RESET  U-STATUS-VIEW.X-ACCUM-INTEREST (#X1)
    RESET  U-STATUS-VIEW.X-NXT-YR-ACCUM-INT (#X1)
    RESET  U-STATUS-VIEW.X-INTEREST-RECEIVED (#X1)
    RESET  U-STATUS-VIEW.X-BILL-INTEREST-AMT (#X1)
    MOVE '0' TO U-STATUS-VIEW.X-BILL-SW  (#X1)   /* TT1 END
  ELSE
    ASSIGN U-STATUS-VIEW.X-LOAN-DATE-2 (#X1) = #HOLD-CONVERT-DATE
    COMPUTE U-STATUS-VIEW.X-CAP-AMT-2 (#X1) =
      U-STATUS-VIEW.X-CAP-AMT-2 (#X1) +
      ((#SCN-INT-TRANS(#INDEXS) / 10) * 10)
    ASSIGN U-STATUS-VIEW.X-LOAN-AMOUNT-2 (#X1) = #SCN-TOTAL-LOAN (#INDEXS)
    RESET  U-STATUS-VIEW.X-ACCUM-INTEREST-2 (#X1)
    RESET  U-STATUS-VIEW.X-NXT-YR-ACCUM-INT-2 (#X1)
    RESET  U-STATUS-VIEW.X-INTEREST-RECEIVED-2 (#X1)
    RESET  U-STATUS-VIEW.X-BILL-INTEREST-AMT-2 (#X1)
    MOVE '0' TO U-STATUS-VIEW.X-BILL-SW-2 (#X1)
*
  END-IF
END-IF
*
ASSIGN U-STATUS-VIEW.DATE-ACCT-UPDATE = *DATN
ASSIGN U-STATUS-VIEW.DTS-DATN = *DATN
ASSIGN U-STATUS-VIEW.DTS-TIMN = *TIMN
*
* HANDLE MECS PDUP AND LOAN CONDITION * *
*
IF  (U-STATUS-VIEW.ISS-DATE-DD (#X1) = 01)
    OR (#TODAY-DD GE U-STATUS-VIEW.ISS-DATE-DD (#X1))
  MOVE U-STATUS-VIEW.CASH-VALUE (#X1) TO #CSV
ELSE
  MOVE U-STATUS-VIEW.NXT-MON-CASH-VALUE (#X1) TO #CSV
*
  MOVE A-STATUS-VIEW.ID-NUMBER TO #HIST-KEY-ID
  MOVE A-STATUS-VIEW.ISSUE-DATE (#X1) TO #HIST-KEY-ISS
  MOVE A-STATUS-VIEW.SPLIT-IND (#X1) TO #HIST-KEY-SPL
  MOVE *DATN TO #YYYYMMDD
  SUBTRACT 1 FROM #MM
  IF #MM LT 1
    MOVE 12 TO #MM
    SUBTRACT 1 FROM #YYYY
  END-IF
*
  FIND VA-V WITH RECORD-KEY = #HIST-KEY
    IF   (YEAR-MONTH-M (13) = #YYYYMM)
      MOVE ACCUM-CASH-VALUE-M (12) TO #PREV-ACV
      COMPUTE #NEW-ACV = #PREV-ACV + PREMIUM-M  (13)
        + INTEREST-M       (13)
        - COST-OF-INSURANCE-M (13)
*
      IF   (#X1 LE 9)
          AND (ISSUE-DATE (#X1) GE 19970101) /* 1997 pol
          AND (MONTH-ALLOC-AMT (#X1) NE 999.99) /* not FORCED 96 PREMS
        SUBTRACT PRORAT-LOAN-BAL-M   (13) FROM #NEW-ACV
        SUBTRACT PRORAT-LN-ACC-INT-M (13) FROM #NEW-ACV
      END-IF
*
      IF #NEW-ACV GT ACCUM-CASH-VALUE-M (13)
        COMPUTE #ACV-DIFF = #NEW-ACV - ACCUM-CASH-VALUE-M(13)
      ELSE
        COMPUTE #ACV-DIFF = ACCUM-CASH-VALUE-M(13) - #NEW-ACV
      END-IF
*
      MOVE PREMIUM-M (13) TO #REAL-PREM
*
      IF #ACV-DIFF NE 0
        PERFORM CALC-REAL-PREM
      END-IF
    END-IF
*
    ADD #REAL-PREM TO #CSV
  END-FIND
END-IF
*
IF COST-BASIS (#X1) = 0
  MOVE #PREMS-PAID TO #CURR-COST-BASIS
ELSE
  COMPUTE #CURR-COST-BASIS = COST-BASIS (#X1)
    + (#PREMS-PAID - TOT-PREMIUMS-PAID (#X1))
END-IF
*
IF   (#CGA-ORIG-SUFFIX NE 'CAP')
    AND (U-STATUS-VIEW.MEC-IND (#X1) = 'Y')
  COMPUTE #COST-BASIS-GROWTH = #CSV - #CURR-COST-BASIS
*
  IF #ADDL-LOAN LT #COST-BASIS-GROWTH
    MOVE #ADDL-LOAN TO #COST-BASIS-GROWTH
  END-IF
*
  ADD #COST-BASIS-GROWTH TO U-STATUS-VIEW.COST-BASIS (#X1)
*
* * PUT OUT INT-1099 REC *
*

  IF #COST-BASIS-GROWTH GT 0
    MOVE U-STATUS-VIEW.ID-NUMBER           TO #CGA-SCR-ID
    MOVE U-STATUS-VIEW.MEMBER-CONTACT-ID   TO #CONTACT-ID                /* VT4
    move U-STATUS-VIEW.MEMBER-CONTACT-ID   to #insured-contact-id        /* vt4
    MOVE #X1 TO #CONTACT-SEG
    CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD /* get owner ssn
    MOVE 'L'               TO #KEY-1099-ID                       /* PM10
    MOVE #TODAY-YYYY       TO #KEY-1099-YYYY
*
    MOVE #SSN TO #KEY-1099-SSN
    find (1) stat with ssn = #ssn                                      /* vt4 \/
      move stat.member-contact-id to #owner-contact-id
      move stat.ssn               to #owner-ssn
    end-find                                                           /* vt4 /\
*
*   WRITE 'key=' #KEY-1099
    reset #found-rec                                                   /* vt4
    FIND   IN-V WITH YEAR-INT-TYPE-ID-KEY = #KEY-1099                  /* vt4   was find(1)
      IF NO RECORD FOUND
*       WRITE 'rec not found'
        RESET IN-V #in-v-ssn
        MOVE #SSN                            TO IN-V.SSN     /* NG99
        MOVE #SLD-YYYY (#INDEXS)             TO IN-V.YEAR
        MOVE 'S'                             TO IN-V.SSN-TAX-ID-IND
        MOVE #COST-BASIS-GROWTH               TO IN-V.AMOUNT
        MOVE #ADDL-LOAN                       TO IN-V.GROSS-AMT
        MOVE 'L'                              TO IN-V.INT-TYPE                /* PM10
        move u-status-view.id-number          to in-v.related-id-number      /* vt4 \/
        move #insured-contact-id              to In-v.contact-id
        MOVE #OWNER-CONTACT-ID                TO IN-V.CLAIMANT-ID
        move #owner-ssn                       to in-v.owner-ssn
        MOVE U-STATUS-VIEW.POLICY-ID(#INDEXs) TO in-V.POLICY-NUMBER
        move *datn                            to in-v.DATE-ENTERED
        move #CGA-CLERK                       to in-v.last-upd-user          /* vt4 /\
        STORE IN-V
        move *isn to #in-v-ssn                                               /* vt4
        ESCAPE BOTTOM
      END-NOREC
*
      if in-v.policy-number = U-STATUS-VIEW.POLICY-ID(#x1)                  /* vt4  \/
        move TRUE                             to #found-rec
        move *isn                             to #in-v-ssn
        escape bottom
      else
        reset #found-rec
      end-if
    end-find
    if #found-rec                                                           /* vt4  /\
      get in-v #in-v-ssn
      ADD #COST-BASIS-GROWTH                 TO IN-V.AMOUNT
      ADD #ADDL-LOAN                         TO IN-V.GROSS-AMT
      MOVE #OWNER-CONTACT-ID                 TO IN-V.CLAIMANT-ID            /* VT4 \/
      move #insured-contact-id               to in-v.contact-id
      move #owner-ssn                        to in-v.owner-ssn
      move *datn                             to in-v.last-upd-date
      move #CGA-CLERK                        to in-v.last-upd-user
      move *timn                             to in-v.last-upd-time          /* vt4 /\
      UPDATE /*  (1687)
    else                                                                    /* vt4  \/
      RESET IN-V #in-v-ssn
      MOVE #SSN                            TO IN-V.SSN
      move u-status-view.id-number         to in-v.related-id-number
      MOVE #SLD-YYYY (#INDEXS)             TO IN-V.YEAR
      MOVE 'S'                             TO IN-V.SSN-TAX-ID-IND
      MOVE #COST-BASIS-GROWTH              TO IN-V.AMOUNT
      MOVE #ADDL-LOAN                      TO IN-V.GROSS-AMT
      MOVE 'L'                             TO IN-V.INT-TYPE
      move #insured-contact-id             to in-v.contact-id                /* vt4
      MOVE #OWNER-CONTACT-ID               TO IN-V.CLAIMANT-ID
      move #owner-ssn                      to in-v.owner-ssn                 /* vt4
      MOVE U-STATUS-VIEW.POLICY-ID(#x1)    TO in-V.POLICY-NUMBER
      move *datn                           to in-v.DATE-ENTERED
      move #CGA-CLERK                      to in-v.last-upd-user
      STORE IN-V
      move *isn                             to #in-v-ssn
    end-if                                                                   /* vt4 /\
****    END-FIND
  END-IF
END-IF
RESET #CGA-SCR-ID
*
*  UPDATE STATUS REC* * * *
*
UPDATE (1494)
*
if #in-v-ssn ne 0                           /* vt4  \/
  get in-v #in-v-ssn
  end transaction
end-if                                      /* vt4  /\
*
ASSIGN ACCT-REG.ID-NUMBER = #SCN-ID(#INDEXS)
ASSIGN ACCT-REG.NAME = U-STATUS-VIEW.NAME
CALLNAT 'GPLNMSXX' #POL-NUM U-STATUS-VIEW.ID-NUMBER #X1      /* DW19
ASSIGN ACCT-REG.POLICY-NUMBER = #POL-NUM            /* DW19
*
IF #HOLD-ACCTG-DATE > 0
  ASSIGN ACCT-REG.DATE-LAST-ACCT-UPDATE = #HOLD-ACCTG-DATE
ELSE
  ASSIGN ACCT-REG.DATE-LAST-ACCT-UPDATE = *DATN
END-IF
*
ASSIGN ACCT-REG.TRANSACTION-DATN = *DATN
ASSIGN ACCT-REG.TRANSACTION-TIMN = *TIMN
ASSIGN ACCT-REG.CLERK-ID = #CGA-CLERK
ASSIGN ACCT-REG.TERMINAL-ID = *INIT-ID
* ASSIGN ACCT-REG.ACCT-DATE = U-STATUS-VIEW.X-LOAN-DATE (#X1)
COMPRESS #SLD-YYYY-A (#INDEXS) #SLD-MM-A (#INDEXS) #SLD-DD-A (#INDEXS)
  INTO #YYYYMMDD-A LEAVING NO
MOVE #YYYYMMDD TO ACCT-REG.ACCT-DATE
ASSIGN ACCT-REG.DESC-LIT = 'IRT '
ASSIGN ACCT-REG.DESC-RATE = #HOLD-INTR-RATE
COMPRESS #SED-MM-A (#INDEXS) #SED-DD-A (#INDEXS) #SED-YYYY-A (#INDEXS)
  INTO DESC-ISSUE-DATE LEAVING NO
*
IF #SCN-OLD-LOAN-AMT(#INDEXS) = 0
  ASSIGN ACCT-REG.TXN-CODE = 'NEWL'
ELSE
  ASSIGN ACCT-REG.TXN-CODE = 'ADDL'
END-IF
*
ASSIGN ACCT-REG.DEBIT-AMOUNT = 0
ASSIGN ACCT-REG.CREDIT-AMOUNT = #SCN-OLD-LOAN-AMT(#INDEXS)
ASSIGN ACCT-REG.SEQUENCE-NUM = 1
MOVE 110 TO ACCT-REG.TXN-ACCT-NUMBER
* MOVE '$' TO ACCT-REG.CASH-CODE                     /* DW17  /* vt2
*
IF #CGA-ORIG-SUFFIX = 'CAP'                     /* vt2 \/
  move 'M' to ACCT-REG.CASH-CODE
else
  move 'L' to acct-reg.cash-code
end-if                                          /* vt2 /\
*
MOVE ACCT-REG.CREDIT-AMOUNT TO SG-AMOUNT (1)                  /* DW18
*
IF #CGA-ORIG-SUFFIX = 'CAP'                     /* DW18
  MOVE 'CP' TO ACCT-REG.SG-CATEGORY-1 (1)
  MOVE '**' TO ACCT-REG.SG-CATEGORY-2 (1)
END-IF
*
IF  (ACCT-REG.CREDIT-AMOUNT NE 0)                    /* DW20
    OR (ACCT-REG.DEBIT-AMOUNT NE 0)
  STORE ACCT-REG
END-IF
*
ASSIGN ACCT-REG.CREDIT-AMOUNT = #SCN-INT-TRANS(#INDEXS)
ASSIGN ACCT-REG.TXN-ACCT-NUMBER = 410
ASSIGN ACCT-REG.SEQUENCE-NUM = 2
* MOVE '$' TO ACCT-REG.CASH-CODE                     /* DW17    /* vt2
MOVE ACCT-REG.CREDIT-AMOUNT TO SG-AMOUNT (1)                   /* DW18
*
IF #CGA-ORIG-SUFFIX = 'CAP'                     /* vt2 \/
  move 'M' to ACCT-REG.CASH-CODE
else
  move 'L' to acct-reg.cash-code
end-if                                          /* vt2 /\
*
IF  (ACCT-REG.CREDIT-AMOUNT NE 0)                    /* DW20
    OR (ACCT-REG.DEBIT-AMOUNT NE 0)
  STORE ACCT-REG
END-IF
*
ASSIGN ACCT-REG.DESC-RATE = #SCN-INTR-RATE(#INDEXS)
ASSIGN ACCT-REG.CREDIT-AMOUNT = 0
ASSIGN ACCT-REG.DEBIT-AMOUNT = #SCN-TOTAL-LOAN(#INDEXS)
ASSIGN ACCT-REG.TXN-ACCT-NUMBER = 110
ASSIGN ACCT-REG.SEQUENCE-NUM = 3
* MOVE '$' TO ACCT-REG.CASH-CODE                     /* DW17  /* vt2
MOVE ACCT-REG.DEBIT-AMOUNT TO SG-AMOUNT (1)               /* DW18
*
IF #CGA-ORIG-SUFFIX = 'CAP'                     /* vt2 \/
  move 'M' to ACCT-REG.CASH-CODE
else
  move 'L' to acct-reg.cash-code
end-if                                          /* vt2 /\
*
STORE ACCT-REG
*
END TRANSACTION
*
COMPUTE #TOTAL-LOAN-AMT = #TOTAL-LOAN-AMT + #SCN-TOTAL-LOAN(#INDEXS)
COMPUTE #TOTAL-ANN-INT = #TOTAL-ANN-INT + #SCN-ANN-INTR(#INDEXS)
COMPUTE #HOLD-INTR-RATE-COMP = #HOLD-INTR-RATE-COMP
  + #SCN-INTR-RATE(#INDEXS)
COMPUTE #NUMBER-OF-RATES = #NUMBER-OF-RATES + 1
*
IF #CGA-ORIG-SUFFIX = 'CAP'                  /* YK1 BEGIN
  #CAP-ENTRY-MM := #CAP-PLUS1-MM
  IF #CAP-PLUS1-MM = 12
    #CAP-PLUS1-MM := 1
    #CAP-PLUS1-YYYY := #CAP-PLUS1-YYYY + 1
  ELSE
    #CAP-PLUS1-MM := #CAP-PLUS1-MM + 1
  END-IF
  IF #CAP-PLUS1-DATE = #MBR-SINCE
    RESET #CAP-GUARD
    FIND NT-V2 WITH ID-NUMBER = #SCN-ID(#INDEXS)
      EXAMINE NOTE-TEXT(*) FOR 'GUARD' GIVING #N
      IF #N > 0
        #CAP-GUARD := TRUE
      END-IF
    END-FIND
    IF #CAP-GUARD
      FIND (1) NT-V1 WITH ID-NUMBER = 800106   /* UPDATE "CAP" 800106 REC
        ADD 1 TO CAPS-CONV-MON-GR (#CAP-ENTRY-MM)
        UPDATE (1872)
        END TRANSACTION
      END-FIND
    END-IF
  END-IF
END-IF                                    /* YK1 END
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE AMORTIZATION
*****************************************************************************
*
RESET #FOUND-AT
READ AT-V BY SSN FROM ST-V.SSN
  IF AT-V.SSN NE ST-V.SSN
    ESCAPE BOTTOM
  END-IF
*
  IF   (AT-V.INTRO-FLAG NE 'V')
      AND (AT-V.ACTION-FLAG = 'A')
      AND (AT-V.CAP-IND = 'Y')
    MOVE TRUE TO #FOUND-AT
    ESCAPE BOTTOM
  END-IF
END-READ
*
IF #FOUND-AT   /* override 5000 with actual cap loan amt
  MOVE AT-V.CAP-LOAN-AMT TO #ORIG-PRIN
END-IF
*
IF #CGA-SCR-ID NE 0
  FIND (1) ST-V WITH MEMBER-KEY = #CGA-ID-G
    FOR #I1 1 TO 9
      IF CONV-DURATION (#I1) = 999
        MOVE X-ALT-LP-AMT (#I1) TO #TOT-MON-PMT
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
END-IF
*
IF #TOT-MON-PMT = 0 /* PM4
  MOVE 107.25 TO #TOT-MON-PMT
END-IF
*
MOVE #TODAY-MM   TO #FIRST-PMT-MM
MOVE #TODAY-YYYY TO #FIRST-PMT-YYYY
*
IF *DEVICE NE 'BATCH'
  MOVE '*' TO #CGA-SCR-COMMAND
  INPUT MARK *#TOT-MON-PMT USING MAP 'C2410MLM'
  PERFORM CHK-AST
END-IF
*
REPEAT
  RESET #TBL-YYYY     (*)
  RESET #TBL-MM       (*)
  RESET #TBL-PRIN-BAL (*)
  RESET #TBL-INT      (*)
  RESET #TBL-PRIN     (*)
*
  IF #TOT-MON-PMT = 0
      AND (*DEVICE NE 'BATCH')
    REINPUT 'Monthly Pmt must be entered'
      MARK *#TOT-MON-PMT
  END-IF
*
  IF #ORIG-PRIN GE 99000
      AND (*DEVICE NE 'BATCH')
    REINPUT 'Exceeds Maximum'
      MARK *#ORIG-PRIN
  END-IF
*
  IF #FIRST-PMT-DATE NE MASK (MMYYYY)
      AND (*DEVICE NE 'BATCH')
    REINPUT 'Format must be MMYYYY'
      MARK *#FIRST-PMT-DATE
  END-IF
*
  IF ((#INT-RATE LT  1.50)
      OR (#INT-RATE GT 15.00))
      AND (*DEVICE NE 'BATCH')
    REINPUT 'Int Rate not in valid range'
      MARK *#INT-RATE
  END-IF
*
  MOVE #ORIG-PRIN TO #TBL-PRIN-BAL (1)
  MOVE #FIRST-PMT-YYYY TO #PMT-YYYY
  MOVE #FIRST-PMT-MM   TO #PMT-MM
  SUBTRACT 1 FROM #PMT-MM
  IF #PMT-MM LT 1
    MOVE 12 TO #PMT-MM
    SUBTRACT 1 FROM #PMT-YYYY
  END-IF
*
  FOR #I1 1 TO 399   /* was 59
    MOVE #I1 TO #TBL-PMT-NUM (#I1)
*
    RESET #DAILY-INT #INT-PMT
    IF #I1 NE 1   /* 1st pmt has no int
      IF #PMT-MM = 2
        MOVE 28 TO #PMT-DAYS
      ELSE
        IF #PMT-MM = 4 OR = 6 OR = 9 OR = 11
          MOVE 30 TO #PMT-DAYS
        ELSE
          MOVE 31 TO #PMT-DAYS
        END-IF
      END-IF
*
      COMPUTE ROUNDED #DAILY-INT =
        #TBL-PRIN-BAL (#I1) * (#INT-RATE / 100) / 365
*
      COMPUTE ROUNDED #INT-PMT =
        #DAILY-INT * #PMT-DAYS
      ADD #INT-PMT TO #TOT-INT
    END-IF
*
    MOVE #PMT-YYYY TO #TBL-YYYY (#I1)
    MOVE #PMT-MM   TO #TBL-MM   (#I1)
    MOVE ROUNDED #INT-PMT TO #TBL-INT (#I1)
    COMPUTE #TBL-PRIN (#I1) = #TOT-MON-PMT - #TBL-INT (#I1)
    IF #I1 LT 400   /* was 60
      COMPUTE #TBL-PRIN-BAL (#I1 + 1) =
        #TBL-PRIN-BAL (#I1) - #TBL-PRIN (#I1)
    END-IF
*
    IF #TBL-PRIN-BAL (#I1 + 1) LT 0
        AND (#I1 LT 400)    /* was 60
      MOVE  #TBL-PRIN-BAL (#I1) TO #TBL-PRIN (#I1)
      COMPUTE #FINAL-PMT = #TBL-INT (#I1) + #TBL-PRIN (#I1)
      IF #I1 LT 400
        RESET #TBL-PRIN-BAL (#I1 + 1)
      END-IF
      ESCAPE BOTTOM
    END-IF
*
    ADD 1 TO #PMT-MM
    IF #PMT-MM GT 12
      MOVE 1 TO #PMT-MM
      ADD 1 TO #PMT-YYYY
    END-IF
  END-FOR
*
  SEPARATE AT-V.NAME LEFT INTO #LAST #FIRST/MID #SUFF     /* DW12
    #NAME-OVRFLO WITH DELIMITER ','
  COMPRESS AT-V.RANK #FIRST/MID #LAST #SUFF INTO #AMO-NAME
*
  IF #CGA-ORIG-SUFFIX = 'AMO'
    IF *DEVICE = 'BATCH'
      EJECT (7)
      WRITE (7) NOTITLE USING FORM 'C2411FLM'
      ESCAPE BOTTOM
    ELSE
      INPUT MARK *#TOT-MON-PMT USING MAP 'C2411MLM'
      PERFORM CHK-AST
*
      IF #TBL-YYYY (31) NE 0
        INPUT MARK *#TOT-MON-PMT USING MAP 'C2412MLM'
        PERFORM CHK-AST
      END-IF
*
      IF #TBL-YYYY (71) NE 0
        INPUT MARK *#TOT-MON-PMT USING MAP 'C2413MLM'
        PERFORM CHK-AST
      END-IF
*
      IF #TBL-YYYY (111) NE 0
        INPUT MARK *#TOT-MON-PMT USING MAP 'C2414MLM'
        PERFORM CHK-AST
      END-IF
*
      IF #TBL-YYYY (151) NE 0
        INPUT MARK *#TOT-MON-PMT USING MAP 'C2415MLM'
        PERFORM CHK-AST
      END-IF
*
      IF #TBL-YYYY (171) NE 0
        INPUT MARK *#TOT-MON-PMT USING MAP 'C2416MLM'
        PERFORM CHK-AST
      END-IF
*
      WRITE 'Total Interest paid =' #TOT-INT (EM=$ZZZ,ZZZ.99)
    END-IF
  ELSE
    DISPLAY NOTITLE #TBL-PMT-NUM   (1:100)    /* SAG RH1 01202006 AS
**  DISPLAY #TBL-PMT-NUM   (1:100)            /* SAG RH1 01202006 AS
      #TBL-YYYY     (1:100)
      #TBL-MM       (1:100)
      #TBL-PRIN-BAL (1:100)
      #TBL-INT      (1:100)
      #TBL-PRIN     (1:100)
*
    FETCH 'G1000PXX'
  END-IF
END-REPEAT /*(1928)
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE CAP-LOAN-LETTERS
*****************************************************************************
*
MOVE #LTR-ISS-DT (#INDEXS) TO #YYYYMMDD
COMPRESS #MM-A  #DD-A #YYYY-A INTO #ISS-DT-DISP WITH '/' /*used on maps
COMPRESS #ISS-DT-DISP '.' INTO #ISS-DT-DISP-PER LEAVING NO
RESET #SCN-ADD-ROW1 #SCN-ADD-ROW2 #SCN-ADD-ROW3 #SCN-ADD-ROW4
  #SCN-ADD-ROW5 #SCN-ADD-ROW6
COMPRESS #SCN-LETR-NEW-LOAN '.' INTO #CAP-LOAN LEAVING NO
MOVE #SCN-LETR-INT-RATE TO #CAP-INT
MOVE EDITED #SCN-NEW-WIRE-AMT(#INDEXS) (EM=Z,ZZZ.99) TO #HOLD-EDIT
COMPRESS '$' #HOLD-EDIT INTO #HOLD-EDIT LEAVING NO
*
IF #SCN-LOAN-OWNER-FLAG (#INDEXS) = 'X'
  COMPRESS 'In response to your request for a loan under our Career'
    'Assistance Program,' INTO #SCN-ADD-ROW1
  COMPRESS 'enclosed is our check for' #CAP-LOAN 'Interest will'
    'be charged at the rate' INTO #SCN-ADD-ROW2
  COMPRESS  'of' #CAP-INT 'on the outstanding balance.'
    INTO #SCN-ADD-ROW3
END-IF
*
IF #SCN-LOAN-OWNER-FLAG (#INDEXS) = 'Y'
  COMPRESS 'In response to your request for a' #SCN-LETR-NEW-LOAN
    'loan under our Career' INTO #SCN-ADD-ROW1
  COMPRESS 'Assistance Program, we have wired the balance of'
    #HOLD-EDIT '(after wire' INTO #SCN-ADD-ROW2
  COMPRESS 'fee deducted) directly to your bank for credit to your'
    'account. Interest' INTO #SCN-ADD-ROW3
  COMPRESS 'will be charged at the rate of' #CAP-INT 'on the'
    'outstanding balance.'      INTO #SCN-ADD-ROW4
END-IF
*
IF #SCN-LOAN-OWNER-FLAG (#INDEXS) = 'Z'
  COMPRESS 'In response to your request for a loan under our Career'
    'Assistance Program,' INTO #SCN-ADD-ROW1
  COMPRESS 'we have mailed the' #SCN-LETR-NEW-LOAN 'loan check'
    'directly to your bank for credit' INTO #SCN-ADD-ROW2
  COMPRESS 'to your account. Interest will be charged at the rate of'
    #CAP-INT 'on the' INTO #SCN-ADD-ROW3
  MOVE 'outstanding balance.' TO #SCN-ADD-ROW4
  COMPRESS #SCN-FIRST-LAST '   Account Number <enter acct number>'
    INTO #SCN-FIRST-LAST
END-IF
*
IF #SCN-LOAN-OWNER-FLAG (#INDEXS) = 'A'
  COMPRESS 'In response to your request for a' #SCN-LETR-NEW-LOAN
    'loan under our Career' INTO #SCN-ADD-ROW1
  COMPRESS 'Assistance Program, we have deposited the funds into'
    'your new account at' INTO #SCN-ADD-ROW2
  COMPRESS 'Armed Forces Bank. Interest will be charged at the rate'
    'of' #CAP-INT 'on the ' INTO #SCN-ADD-ROW3
  COMPRESS 'outstanding balance. You should have received a packet'
    'from Armed Forces' INTO #SCN-ADD-ROW4
  COMPRESS 'Bank with instructions on opening your checking account.'
    'Please contact' INTO #SCN-ADD-ROW5
  COMPRESS 'the bank with any checking account questions at'
    '(703) 351-8080.' INTO #SCN-ADD-ROW6
END-IF
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE CALC-PREMS-PAID-SETUP
*****************************************************************************
*
RESET #PREMS-PAID #DATE-OF-BIRTH                                                   /* TT1
#DATE-OF-BIRTH    := GET-DATE-OF-BIRTH(<A-STATUS-VIEW.MEMBER-CONTACT-ID>)          /* TT1
*
MOVE #DATE-OF-BIRTH           TO #PP-DATE-OF-BIRTH                                 /* TT1
MOVE ANNUAL-PREM (#X1)       TO #PP-ANNUAL-PREM
MOVE PAY-STATUS (#X1)        TO #PP-PAY-STATUS
MOVE TOT-PREMIUMS-PAID (#X1) TO #PP-TOT-PREMIUMS-PAID
MOVE PAID-TO-DATE (#X1)      TO #PP-PAID-TO-DATE
MOVE A-STATUS-VIEW.ISSUE-DATE (#X1) TO #PP-ISSUE-DATE
MOVE MODE (#X1)              TO #PP-MODE
MOVE PLAN (#X1)              TO #PP-PLAN
MOVE COST-BASIS (#X1)        TO #PP-COST-BASIS
MOVE MONTH-ALLOC-AMT (#X1)   TO #PP-MONTH-ALLOC-AMT
MOVE A-STATUS-VIEW.INTRO-FLAG TO #PP-INTRO-FLAG
MOVE X-FIRST-PLACE-FEE (#X1)  TO #PP-FIRST-PLACE-FEE
MOVE X-BILL-ADJUST     (#X1)  TO #PP-BADJ
*
CALLNAT 'GPRPDSCO'
  #PP-DATE-OF-BIRTH
  #PP-ANNUAL-PREM
  #PP-PAY-STATUS
  #PP-TOT-PREMIUMS-PAID
  #PP-PAID-TO-DATE
  #PP-ISSUE-DATE
  #PP-MODE
  #PP-PLAN
  #PP-COST-BASIS
  #PP-MONTH-ALLOC-AMT
  #PP-INTRO-FLAG
  #PP-FIRST-PLACE-FEE
  #PREMS-PAID
  #SUB-PREMS-PAID
  #PP-BADJ
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE CALC-CAP-CSV
*****************************************************************************
*
IF A-STATUS-VIEW.PAY-STATUS (#I1) GE '40'
  MOVE #CSV TO #CAP-CSV
  ESCAPE ROUTINE
END-IF
*
IF A-STATUS-VIEW.FACE-AMOUNT (#X1) GT 10000.00
  COMPUTE ROUNDED #WORK-CAP-CONV-ACV =
    ((#CSV - #CAP-CONV-ACV) * (A-STATUS-VIEW.FACE-AMOUNT (#X1) - 10000))
    / A-STATUS-VIEW.FACE-AMOUNT (#X1)
  ADD #WORK-CAP-CONV-ACV TO #CAP-CONV-ACV
END-IF
*
IF A-STATUS-VIEW.X-LOAN-AMOUNT (#X1) = 0
  MOVE A-STATUS-VIEW.X-LOAN-DATE (#X1) TO #CAP-LOAN-END-DATE
ELSE
  RESET #CAP-LOAN-END-DATE
END-IF
*
CALLNAT 'CCAPCSVP'
  A-STATUS-VIEW.ID-NUMBER
  A-STATUS-VIEW.ISSUE-DATE (#X1)
  #CAP-LOAN-END-DATE
  #TODAY
  #CAP-CONV-ACV
  #CSV
  #CAP-CSV
  #CAP-LOAN-MONS
  #CAP-CSV-MONS
  #CAP-REMAIN-MONS
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE CHK-AST
*****************************************************************************
*
IF #CGA-SCR-COMMAND NE '*'
  FETCH 'G1000PXX'
END-IF
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE CALC-REAL-PREM
*****************************************************************************
*
FOR #I4 1 TO 800
  IF   (#ACV-DIFF GT ((#I4 * 1000) - 10))
      AND (#ACV-DIFF LT ((#I4 * 1000) + 10))
    IF #NEW-ACV LT ACCUM-CASH-VALUE-M (13)
      ADD (#I4 * 1000) TO #REAL-PREM
    ELSE
      SUBTRACT (#I4 * 1000) FROM #REAL-PREM
    END-IF
*
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE GET-NAME-ADDR
*****************************************************************************
*
MOVE A-STATUS-VIEW.ID-NUMBER TO #CGA-SCR-ID
MOVE #X1 TO #CONTACT-SEG                                                /* RE1 START
CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD /*get owner nam/addr
**MOVE #NAME TO #HOLD-RECD-NAME(#INDEXS)
MOVE #EXT-NAME TO #SCN-FIRST-LAST
MOVE #EXT-FORMATED-NAME TO #SCN-LETR-NAME
COMPRESS #EXT-DEAR-FORMATED-NAME ':' TO #SCN-SALUT LEAVING NO
MOVE #FIRST-ADDRESS TO #HOLD-ADDR1(#INDEXS)
MOVE #SECOND-ADDRESS TO #HOLD-ADDR2(#INDEXS)
MOVE #THIRD-ADDRESS TO #HOLD-ADDR3(#INDEXS)
**MOVE #ADDR-2 TO #HOLD-ADDR2(#INDEXS)
**MOVE #ADDR-3 TO #HOLD-ADDR3(#INDEXS)
**MOVE #ZIP-CODE TO #HOLD-ZIP-CODE(#INDEXS)
**MOVE #RANK TO #HOLD-RANK(#INDEXS)
**MOVE A-STATUS-VIEW.MILITARY-STATUS TO #HOLD-MIL-STATUS(#INDEXS)       /* RE2 START
*
END-SUBROUTINE
*
*****************************************************************************
DEFINE SUBROUTINE CALL-CVALUSXX
*****************************************************************************
*

MOVE *DATN TO #AS-OF-DT
MOVE 'NTP' TO #SUFFIX /* do not replace w tpp
MOVE FACE-AMOUNT (*) TO #FACE-AMT (*)   /* DW7
CALLNAT 'CVALUSXX'
  A-STATUS-VIEW.ID-NUMBER
  #SUFFIX
  #AS-OF-DT
  #LOAN-BAL   (1:9)
  #LOAN-BAL-2 (1:9)
  #ACC-INT    (1:9)
  #ACC-INT-2  (1:9)
  #CSV-X      (1:9)
  #CVALUE     (1:9)
  #LVALUE     (1:9)
  #MCSV       (1:9)
  #DB         (1:9)
  #ANN-PREMIUM  (1:9)
  #FACE-AMT (1:9) /* DW7
  #TPP      (1:9) /* DW7

*
END-SUBROUTINE
*
END
