* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* * * * * * * * * * * * * * * * * * * * * * * *
* Subprogram TBMNGENT - executes action passed
* from the Main Table maintenance Screen
***********************************************
* MODIFICATION LOG
***********************************************
* USER   DATE      TAG  REASON
* YAK    12142007  YAK  Initial Creation
* * * * * * * * * * * * * * * * * * * * * * * *
*
DEFINE DATA
PARAMETER USING OBJAGENT
PARAMETER 1 #USER-ACTION (A8)
PARAMETER 1 #HEADER-1    (A50)
*
LOCAL
1 #HEADER-2             (A20) INIT <' Details'>
1 #GEN-DESCRIPTION      (A60)
1 #GEN-ALPHA-VALUE      (A50)
1 #ADDL-INFO-LINES      (A150)
1 REDEFINE #ADDL-INFO-LINES
  2 #ADDL-INFO          (A75)
  2 #ADDL-INFO-CONT     (A75)
1 #GEN-SECURITY-CODE    (N2)
1 #GEN-KEY              (A4)
1 #GEN-SUB-KEY          (A3)
1 #OWNER-ID             (A3)
1 #ALT-OWNER-ID         (A3)
1 #APPROVAL-IND         (A1)
1 #VALUE-TYPE           (A3)
1 #SCREEN-ARRAY (12)
  2 #ACTIVE-YEAR        (A4)
  2 #GEN-VALUE          (A12)
  2 #EFFECTIVE-DATE     (N8)
  2 REDEFINE #EFFECTIVE-DATE
    3 #EFFECTIVE-DATE-A  (A8)
  2 #END-DATE           (N8)
  2 REDEFINE #END-DATE
    3 #END-DATE-A        (A8)
  2 #APPROVED-FLAG      (A8)
  2 #LAST-CLERK-UPDATE  (A3)
  2 #LAST-DATE-UPDATE   (N8)
*
1 #POS(I4)
1 #I1 (I2)
1 #I  (I2)
1 #I2 (I2)
1 #IND(I2)
1 #MAX-ENTRY  (N2) INIT <12>
1 #LINE-COUNT (N2)
1 #SCREEN     (N2)
1 #SCREEN-COUNT (N2)
1 #DATX      (D)
1 #DATN      (N8)
1 #FULL-ACCESS  (L)
1 #NEW-DATA     (L)
1 ##VALUE-TYPE   (A1)
1 #PERCENT-VALUE (N3.2)
1 #CHECK-NUMERIC-VALUE (N7.4)
1 #CURRENT-PEND-IND   (N3)
*
1 #TEXT (A78)
1 #WINDOW-TEXT (A25)
1 #FIELD-NAME-APPROVAL-IND  (A20) INIT <'Approval Indicator  '>
1 #FIELD-NAME-SECURITY-CODE (A20) INIT <'Security Screen Code'>
1 #CV-APPR-MODIFIED (L)
1 #CV-LINE-PR  (C/12)
1 #CV-LINE-2   (C)
1 #CV-DESC     (C)
1 #CV-CODE     (C)
1 #CV-OWNER    (C)
1 #CV-APPR     (C)
1 #CV-SEC      (C)
*
END-DEFINE
*
* Main Processing
*
SET KEY PF7 NAMED 'Up'
SET KEY PF8 NAMED 'Down'
SET KEY PF12 NAMED 'Quit'
SET KEY PF3 NAMED 'Retrn'
SET KEY PF1 = Help
IF #USER-ACTION = 'UPDATE'
  SET KEY PF2 NAMED 'Save'
  SET KEY PF4 NAMED 'Add'
END-IF
*
DEFINE WINDOW CONFIRMATION
  SIZE 20*35
  BASE 64/38
*
PERFORM INIT-SCREEN
*
REPEAT
  IF #NEW-DATA
    RESET #NEW-DATA
    PERFORM POPULATE-MAP-FIELDS
  END-IF
  INPUT WITH TEXT #TEXT USING MAP 'TBUMGENT'
  RESET #TEXT
  IF #CV-APPR MODIFIED
    #CV-APPR-MODIFIED := TRUE
  END-IF
  DECIDE ON FIRST VALUE *PF-KEY
    VALUE 'PF12'
      SET KEY OFF
      FETCH 'G1000PXX'
    VALUE 'PF3'
      ESCAPE ROUTINE
    VALUE 'PF2'
      PERFORM EDIT-CHECK
      DECIDE ON FIRST VALUE #ACTION
        VALUE 'ADD-HIST'
          #NEW-DATA := TRUE
          PERFORM PROCESS-RECORD
          #TEXT := 'History Record Added successfully'
        VALUE 'UPDATE'
          #NEW-DATA := TRUE
          PERFORM PROCESS-RECORD
          #TEXT := 'Record Updated successfully'
        VALUE 'BROWSE'
          PERFORM PROCESS-RECORD
          #TEXT := ' '
        NONE
          IGNORE
      END-DECIDE
    VALUE 'PF4'
      #ACTION := 'ADD-HIST'
      PERFORM ADD-HISTORY-RECORD
    VALUE 'PF8', 'PF7'
      PERFORM NEXT-SCREEN
    NONE
      PERFORM EDIT-CHECK
  END-DECIDE
END-REPEAT
*
*****************************
DEFINE SUBROUTINE INIT-SCREEN
*****************************
*
#NEW-DATA := TRUE
#CV-SEC   := (AD=N)
#CV-LINE-PR(*) := #CV-DESC := #CV-CODE := #CV-OWNER := #CV-APPR := (AD=P)
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE PROCESS-RECORD
********************************
*
PERFORM POPULATE-PARAMETER-FIELDS
CALLNAT 'OBJNGENT' PARM-GEN-TABLE #CURRENT-PEND-IND
*
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE ADD-HISTORY-RECORD
************************************
*
#NUMBER-OF-RECORDS := #NUMBER-OF-RECORDS + 1
RESIZE ARRAY PARM-ARRAY TO (*:#NUMBER-OF-RECORDS)
FOR #I = #NUMBER-OF-RECORDS TO 2 STEP -1
  #I1 := #I - 1
  MOVE BY NAME PARM-GEN-TABLE.PARM-ARRAY(#I1) TO PARM-GEN-TABLE.PARM-ARRAY(#I)
END-FOR
*
IF #LINE-COUNT < #MAX-ENTRY 
  #LINE-COUNT := #LINE-COUNT + 1
END-IF
*
FOR #I = #LINE-COUNT TO 2 STEP -1
  #I1 := #I - 1
  MOVE BY NAME #SCREEN-ARRAY(#I1) TO #SCREEN-ARRAY(#I)
END-FOR
*
#APPROVED-FLAG (1) := 'Pending'
RESET #LAST-CLERK-UPDATE(1) #LAST-DATE-UPDATE(1)
#DATX := *DATX + 1
MOVE EDITED #DATX (EM=MMDDYYYY) TO #EFFECTIVE-DATE-A(1)
#END-DATE(1)   := 99999999
#CV-LINE-PR(1) := (AD=I)
*
END-SUBROUTINE
*
****************************
DEFINE SUBROUTINE EDIT-CHECK
****************************
*
ON ERROR
  IF *ERROR-NR = 1320
    #TEXT := 'Wrong value entered, the value has to be numeric'
    #POS := POS(#GEN-VALUE(1))
    REINPUT FULL WITH TEXT #TEXT MARK #POS
    ESCAPE ROUTINE
  END-IF
END-ERROR
*
#CHECK-NUMERIC-VALUE := VAL(#GEN-VALUE(1));
*
DECIDE FOR FIRST CONDITION
  WHEN #OWNER-ID = #ALT-OWNER-ID
    #TEXT := 'Owner and alternate owner can not be the same person'
    #POS := POS(#ALT-OWNER-ID)
  WHEN #EFFECTIVE-DATE(1) NE MASK(MMDDYYYY)
    #TEXT := 'Date format should be "MMDDYYYY"'
    #POS := POS(#EFFECTIVE-DATE(1))
  WHEN #END-DATE(2) NE MASK(MMDDYYYY)
      AND (#END-DATE(2) NE 0)
    #TEXT := 'Date format should be "MMDDYYYY"'
    #POS := POS(#END-DATE(2))
  WHEN #END-DATE(1) NE MASK(MMDDYYYY)
    #TEXT := 'Date format should be "MMDDYYYY"'
    #POS := POS(#END-DATE(1))
  WHEN #OWNER-ID = #ALT-OWNER-ID
    #TEXT := 'Owner and alternate owner can not be the same person'
    #POS := POS(#ALT-OWNER-ID)
  WHEN (#APPROVAL-IND NE 'A') AND (#APPROVAL-IND NE 'N') AND
      (#APPROVAL-IND NE 'P') AND (#APPROVAL-IND NE ' ')
    #TEXT := 'Approval indicator has to be "A", "N" or "P" '
    #POS := POS(#APPROVAL-IND)
  WHEN ANY
    REINPUT FULL WITH TEXT #TEXT MARK #POS
  WHEN NONE
    ESCAPE ROUTINE
END-DECIDE
*
END-SUBROUTINE
*
*************************************
DEFINE SUBROUTINE POPULATE-MAP-FIELDS
*************************************
*
PARM-GEN-TABLE.#ACTION := 'HIST-SEC'
CALLNAT 'OBJNGENT' USING PARM-GEN-TABLE
IF #RETURN-CODE NE ' '
  REINPUT WITH TEXT #RETURN-MESSAGE
END-IF
PARM-GEN-TABLE.#ACTION := 'READ-SEC'
CALLNAT 'OBJNGENT' USING PARM-GEN-TABLE
IF #RETURN-CODE NE ' '
  REINPUT WITH TEXT #RETURN-MESSAGE
END-IF
#ACTION := #USER-ACTION
RESET #SCREEN-ARRAY(*)
#CV-LINE-PR(*) := (AD=P)
#HEADER-2 := ' Details'
EXAMINE GEN-ALPHA-VALUE(1) FOR '&' POSITION #I
IF #I NE 0
  #I := #I + 1
  ##VALUE-TYPE := SUBSTR(GEN-ALPHA-VALUE(1),#I,1)
  #I := #I - 2
  COMPRESS SUBSTR(GEN-ALPHA-VALUE(1),1,#I) ' - ' #HEADER-2 INTO #HEADER-2 LEAVING NO
ELSE
  COMPRESS GEN-ALPHA-VALUE(1) ' - ' #HEADER-2 INTO #HEADER-2 LEAVING NO
END-IF
#SCREEN-COUNT := (#NUMBER-OF-RECORDS / #MAX-ENTRY)
IF #SCREEN-COUNT * #MAX-ENTRY < #NUMBER-OF-RECORDS
  #SCREEN-COUNT := #SCREEN-COUNT + 1
END-IF
IF #SCREEN = 0
  #SCREEN := 1
END-IF
*
#GEN-DESCRIPTION    := GEN-DESCRIPTION(1)
#ADDL-INFO-LINES    := ADDL-INFO(1)
#GEN-KEY            := GEN-KEY (1)
#GEN-SUB-KEY        := GEN-SUB-KEY (1)
#OWNER-ID           := OWNER-ID (1)
#ALT-OWNER-ID       := ALT-OWNER-ID (1)
*
* Show security code for Administrator only
IF FUNCTION-ACCESS(<*USER,GEN-SECURITY-CODE(1)>) = 'A'
  #CV-SEC := (AD=D)
END-IF
#GEN-SECURITY-CODE  := GEN-SECURITY-CODE (1)
COMPRESS '(' ##VALUE-TYPE ')' INTO #VALUE-TYPE LEAVING NO
*
IF #USER-ACTION = 'UPDATE'
  RESET #FULL-ACCESS
  IF FUNCTION-ACCESS(<*USER,GEN-SECURITY-CODE(1)>) = 'A'
      OR FUNCTION-ACCESS(<*USER,GEN-SECURITY-CODE(1)>) = 'U'
    #FULL-ACCESS := TRUE
  END-IF
  IF NOT #FULL-ACCESS
    #TEXT := 'User not authorized to modify. Browse access only'
    SET KEY PF2 = OFF
    SET KEY PF4 = OFF
    #USER-ACTION := 'BROWSE'
  END-IF
END-IF
*
PERFORM POPULATE-SCREEN
*
END-SUBROUTINE
*
*******************************************
DEFINE SUBROUTINE POPULATE-PARAMETER-FIELDS
*******************************************
*
IF #USER-ACTION = 'UPDATE'
  #LINE-COUNT := #CURRENT-PEND-IND
ELSE
  IF #ACTION = 'ADD-HIST'
    #LINE-COUNT := 2
  END-IF
END-IF
*
FOR #I = #CURRENT-PEND-IND TO #LINE-COUNT
  GEN-KEY (#CURRENT-PEND-IND) := #GEN-KEY
  GEN-SUB-KEY (#CURRENT-PEND-IND) := #GEN-SUB-KEY
  IF ##VALUE-TYPE = '%'
    GEN-NUMBER-VALUE (#CURRENT-PEND-IND)  :=  VAL(#GEN-VALUE(#I)) / 100
  ELSE
    GEN-NUMBER-VALUE  (#CURRENT-PEND-IND) := VAL(#GEN-VALUE(#I))
  END-IF
  GEN-ALPHA-VALUE   (#CURRENT-PEND-IND) := #GEN-ALPHA-VALUE
  GEN-DESCRIPTION   (#CURRENT-PEND-IND) := #GEN-DESCRIPTION
  ADDL-INFO (#CURRENT-PEND-IND)      := #ADDL-INFO-LINES
  GEN-SECURITY-CODE (#CURRENT-PEND-IND)      := #GEN-SECURITY-CODE
  EFFECTIVE-DATE (#CURRENT-PEND-IND)         := FUNCTION-DATE(<#EFFECTIVE-DATE (#I)>)
  END-DATE (#IND + #CURRENT-PEND-IND)        := FUNCTION-DATE(<#END-DATE (#I)>)
  OWNER-ID (#IND + #I)        := #OWNER-ID
  ALT-OWNER-ID (#IND + #I)    := #ALT-OWNER-ID
  APPROVED-FLAG(#IND + #I)    := #APPROVED-FLAG(#I)
  LAST-DATE-UPDATE (#IND + #I):= *DATN
  LAST-USER-UPDATE (#IND + #I):= *USER
  IF #CV-APPR-MODIFIED
    DATE-APPROVED(#CURRENT-PEND-IND) := *DATN
    USER-APPROVED(#CURRENT-PEND-IND) := *USER
    APPROVED-FLAG(#CURRENT-PEND-IND) := #APPROVAL-IND
    RESET #CV-APPR-MODIFIED #APPROVAL-IND
  ELSE
    RESET DATE-APPROVED(#CURRENT-PEND-IND)
      USER-APPROVED(#CURRENT-PEND-IND)
  END-IF
END-FOR
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE POPULATE-SCREEN
*********************************
*
IF #USER-ACTION = 'UPDATE' AND #FULL-ACCESS
  IF #SCREEN NE 1
    SET KEY PF4 = OFF
    SET KEY PF2 = OFF
  ELSE
    SET KEY PF2 NAMED 'Save'
    SET KEY PF4 NAMED 'Add'
  END-IF
END-IF
#LINE-COUNT := #NUMBER-OF-RECORDS - (#SCREEN - 1)*#MAX-ENTRY
#IND        := (#SCREEN - 1)* #MAX-ENTRY
IF #LINE-COUNT > #MAX-ENTRY
  #LINE-COUNT := #MAX-ENTRY
END-IF
RESET #SCREEN-ARRAY(*)
RESET #CURRENT-PEND-IND
FOR #I = 1 TO #LINE-COUNT
  #ACTIVE-YEAR(#I) := SUBSTR(#EFFECTIVE-DATE-A(#I),5,4)
  IF ##VALUE-TYPE = '%'
    #PERCENT-VALUE := GEN-NUMBER-VALUE (#IND + #I) * 100
    MOVE EDITED #PERCENT-VALUE (EM=ZZ9.99) TO #GEN-VALUE (#I)
  ELSE
    MOVE EDITED GEN-NUMBER-VALUE (#IND + #I) (EM=ZZZZZZ9.9999)
      TO #GEN-VALUE (#I)
  END-IF
  MOVE LEFT #GEN-VALUE (#I) TO #GEN-VALUE (#I)
  #GEN-ALPHA-VALUE       := GEN-ALPHA-VALUE (1)
  DECIDE ON FIRST VALUE APPROVED-FLAG (#IND + #I)
    VALUE 'A' #APPROVED-FLAG (#I)  := 'Approved'
    VALUE 'N' #APPROVED-FLAG (#I)  := 'N/A'
    VALUE 'P' #APPROVED-FLAG (#I)  := 'Pending'
      #CURRENT-PEND-IND := (#I)
    NONE IGNORE
  END-DECIDE
  #EFFECTIVE-DATE (#I)   := FUNCTION-DATE(<EFFECTIVE-DATE (#IND + #I)>)
  #END-DATE (#I)         := FUNCTION-DATE(<END-DATE (#IND + #I)>)
  #ACTIVE-YEAR (#I)      := SUBSTR(#END-DATE-A(#I),5,4)
  IF DATE-APPROVED (#IND + #I) NE 0
    #LAST-DATE-UPDATE (#I)  := DATE-APPROVED (#IND + #I)
    #LAST-CLERK-UPDATE (#I) := FUNCTION-CLERK(<USER-APPROVED (#IND + #I)>)
  ELSE
    #LAST-DATE-UPDATE (#I)  := LAST-DATE-UPDATE (#IND + #I)
    #LAST-CLERK-UPDATE (#I) := FUNCTION-CLERK(<LAST-USER-UPDATE (#IND + #I)>)
  END-IF
END-FOR
*
#CV-APPR  := (AD=NP)
IF (#USER-ACTION = 'UPDATE') AND #SCREEN = 1 AND #FULL-ACCESS
  #CV-OWNER := (AD=PI)
*
* Check if rate was approved.
* If rate is 'pending approval', unprotect indicator for approval
* if the user is not the one who updated the record
  IF (#CURRENT-PEND-IND NE 0) AND (APPROVED-FLAG (#CURRENT-PEND-IND) = 'P')
      AND (LAST-USER-UPDATE(#CURRENT-PEND-IND) NE *USER)
    #APPROVAL-IND := APPROVED-FLAG (#CURRENT-PEND-IND)
    #CV-APPR := (AD=I)
  ELSE
    RESET #APPROVAL-IND
    #CURRENT-PEND-IND := 1
  END-IF
  IF APPROVED-FLAG (#CURRENT-PEND-IND) NE 'A'
    #CV-LINE-PR(#CURRENT-PEND-IND)  := (AD=I)
  ELSE
    #CV-LINE-PR(#CURRENT-PEND-IND)  := (AD=P)
  END-IF
END-IF
*
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE NEXT-SCREEN
*****************************
IF *PF-KEY = 'PF8'
  IF #SCREEN = #SCREEN-COUNT
    #TEXT := 'Last Screen'
    REINPUT WITH TEXT #TEXT
  ELSE
    #SCREEN := #SCREEN + 1
  END-IF
ELSE
  IF #SCREEN = 1
    #TEXT := 'First Screen'
    REINPUT WITH TEXT #TEXT
  ELSE
    #SCREEN := #SCREEN - 1
  END-IF
END-IF
PERFORM POPULATE-SCREEN
*
END-SUBROUTINE
END
