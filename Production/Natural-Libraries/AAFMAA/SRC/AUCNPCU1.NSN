* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNPCU1'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   null
*   using PARSE XML statement and datastructure 'AUCAPXNT'
*
****** MODIFICATIONS ***********************************************
* NAME    DATE     TAG  DESCRIPTION
* YAK   20170619   YK1  Add tag "MovePaymentMethodFromInsured"
********************************************************************
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC /*BY VALUE  /* INPUT
1 #XML_OUTPUT            (A) DYNAMIC           /* OUTPUT
LOCAL USING AUCAPXNT
* LOCAL USING AUCAPCNT
LOCAL USING ERROR_L
*
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
1 #CX                          (I4)
1 #CY                          (I4)
1 #CZ                          (I4)
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 #LEN                         (I4)
* 1 #PARSE-ERROR                 (I4) CONSTANT <-7>
1 BLANK                  (A1) CONSTANT <' '>
1 #UPDATE                (I4) CONSTANT <2>
1 #OUTPUT (A5000)
END-DEFINE
*
* RESET PolicyContactsUpdate
* IF #LEN <= 0
*   PolicyContactsUpdate.ErrorCode := #PARSE-ERROR
*   PolicyContactsUpdate.ErrorDescription := F-ERROR-DESCRIPTION(<#PARSE-ERROR>)
*   ESCAPE ROUTINE
* END-IF
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
/*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
PolicyContactsUpdate.ErrorCode := #PARSE-ERROR
PolicyContactsUpdate.ErrorDescription :=  F-ERROR-DESCRIPTION(<#PARSE-ERROR>)
CALLNAT 'AUCNPVS1' #XML_OUTPUT PolicyContactsUpdate
ESCAPE ROUTINE
*
END-SUBROUTINE
/*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE
*
IF PolicyContactsUpdate.ErrorCode = BLANK
  IF POLICYCONTACTSUPDATE.PolicyNumber <> ' '
*     PolicyContactsUpdate.ActionType := #UPDATE
    CALLNAT 'AUCNPCG1' PolicyContactsUpdate
    CALLNAT 'AUCNPVS1' #XML_OUTPUT PolicyContactsUpdate
  ELSE
    PolicyContactsUpdate.ErrorCode        := #MISSING-POLICY-NUMBER
    PolicyContactsUpdate.ErrorDescription :=  F-ERROR-DESCRIPTION(<#MISSING-POLICY-NUMBER>)
  END-IF
END-IF

* ------------------------------------------------- CALL THE PARSER
DEFINE SUBROUTINE PARSE-DOCUMENT
*
DECIDE ON FIRST #XML_PATH
  VALUE 'PolicyContactsDetails'
    RESET INITIAL PolicyContactsUpdate
  VALUE 'PolicyContactsDetails/ErrorCode/$'
    PolicyContactsUpdate.ErrorCode := #XML_VALUE
  VALUE 'PolicyContactsDetails/ErrorDescription/$'
    PolicyContactsUpdate.ErrorDescription := #XML_VALUE
*   VALUE 'PolicyContactsUpdate/LastUpdatedDate//'
*     IGNORE
*   VALUE 'PolicyContactsUpdate/LastUpdatedDate'
*     IGNORE
*   VALUE 'PolicyContactsUpdate/LastUpdatedDate/$'
*     PolicyContactsUpdate.LastUpdatedDate := VAL(#XML_VALUE)
*   VALUE 'PolicyContactsUpdate/LastUpdatedTime//'
*     IGNORE
*   VALUE 'PolicyContactsUpdate/LastUpdatedTime'
*     IGNORE
*   VALUE 'PolicyContactsUpdate/LastUpdatedTime/$'
*     PolicyContactsUpdate.LastUpdatedTime := VAL(#XML_VALUE)
*   VALUE 'PolicyContactsUpdate/LastUpdatedUser//'
*     IGNORE
*   VALUE 'PolicyContactsUpdate/LastUpdatedUser'
*     IGNORE
*   VALUE 'PolicyContactsUpdate/LastUpdatedUser/$'
*     PolicyContactsUpdate.LastUpdatedUser := #XML_VALUE
  VALUE 'PolicyContactsDetails/PolicyNumber/$'
    PolicyContactsUpdate.PolicyNumber := #XML_VALUE
  VALUE 'PolicyContactsDetails/InsuredContactID/$'
    PolicyContactsUpdate.InsuredContactID := VAL(#XML_VALUE)

  VALUE 'PolicyContactsDetails/OwnershipTransferDate/$'
    PolicyContactsUpdate.OWNERSHIPTRANSFERDATE := val(#XML_VALUE)

  VALUE 'PolicyContactsDetails/OwnershipRestricted/$'
    IF #XML_VALUE = 'true' OR = 'TRUE'
      PolicyContactsUpdate.OwnershipRestricted := TRUE
    ELSE
      PolicyContactsUpdate.OwnershipRestricted := FALSE
    END-IF

  VALUE 'PolicyContactsDetails/OwnershipRestrictedDate/$'
    PolicyContactsUpdate.OwnershipRestrictedDate := val(#XML_VALUE)

  VALUE 'PolicyContactsDetails/InsuredContactID/$'
    PolicyContactsUpdate.SystemSource := #XML_VALUE
  VALUE 'PolicyContactsDetails/User/$'
    PolicyContactsUpdate.User := #XML_VALUE
  VALUE 'PolicyContactsDetails/ActionType/$'
    PolicyContactsUpdate.ActionType := VAL(#XML_VALUE)
  VALUE 'PolicyContactsDetails/ReadOnly/$'
    IF #XML_VALUE = 'TRUE'                         /* YK1
      PolicyContactsUpdate.ReadOnly := TRUE
    ELSE
      PolicyContactsUpdate.ReadOnly := FALSE
    END-IF
* YK1 >
  VALUE 'PolicyContactsDetails/MovePaymentMethodFromInsured/$'
    IF #XML_VALUE = 'TRUE'
      PolicyContactsUpdate.MovePaymentMethodFromInsured := TRUE
    ELSE
      PolicyContactsUpdate.MovePaymentMethodFromInsured := FALSE
    END-IF
* < YK1
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/ContactID/$'
    ADD 1 TO PolicyContactsUpdate.C@PolicyContact
    #CX := PolicyContactsUpdate.C@PolicyContact
    EXPAND ARRAY PolicyContactsUpdate.PolicyContact TO (1:#CX)
    PolicyContactsUpdate.ContactID(#CX) := VAL(#XML_VALUE)
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/CN/$'
    PolicyContactsUpdate.CN(#CX) := VAL(#XML_VALUE)
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/DOB/$'
    PolicyContactsUpdate.DOB(#CX) := VAL(#XML_VALUE)
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/ContactName/$'
    PolicyContactsUpdate.ContactName(#CX) := #XML_VALUE
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/Relationship/$'
    PolicyContactsUpdate.Relationship(#CX) := #XML_VALUE
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/Roles/Role'
    ADD 1 TO PolicyContactsUpdate.C@PolicyRole(#CX)
    #CY := PolicyContactsUpdate.C@PolicyRole(#CX)
    EXPAND ARRAY PolicyContactsUpdate.PolicyRole TO (*,1:#CY)
    ignore
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/Roles/Role/ID/$'
    ADD 1 TO PolicyContactsUpdate.C@PolicyRole(#CX)
    #CY := PolicyContactsUpdate.C@PolicyRole(#CX)
    EXPAND ARRAY PolicyContactsUpdate.PolicyRole TO (*,1:#CY)
    PolicyContactsUpdate.RoleID(#CX,#CY) := VAL(#XML_VALUE)
  VALUE 'PolicyContactsDetails/PolicyContacts/PolicyContact/Roles/Role/Name/$'
    PolicyContactsUpdate.RoleName(#CX,#CY) := #XML_VALUE
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
