* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* PGM-ID: C2V50PVP CONTROL TRADED POLICY VP TRA
**    MODIFICATIONS  ***************************************************
*  WHO   DATE   TAG    COMMENTS
*  SAG 10282005 RH1 AB Replace CALL to Cobol with CALLNAT to Natural
*  SAG 12012005 RH1  SS - Replaced the HEX constant '05' (Tab position)
*                    EBCDIC to HEX code '09' ASCII
* YAK  12052007 YK1  Remove hardcording for interest rates
*                    (Read GEN-TABLE through OBJNGENT)
* YAK  02052008 YK2  Change code to use FUNCTION-INT-RATE
*                         to get rate from GEN-TABLE
* DRW 08/28/2008 DW3 Gen Plus Processing
* RSE  10022009 RE1  Change 600k logic for Unification
* YAK  10152012 YK3  Use function to identify Level Term II plans
* NGG  20130917 NG1  Addres normalization
* TMT  20131028 TT1  Stability Project for $1M Policy                  *
* JNT  20131101 JT1  1M Policy support                                 *
* TMT  20131230 TT1  ADDED GP2 POLICY                                  *
* TMT  20140618 TT2  Contact Normalization - DOB and Sex               *
************************************************************************
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL USING GC2V5LVP
LOCAL USING G3500AAD
LOCAL USING GONERLXX
LOCAL USING ADDA0001  /* NG1
LOCAL
*
1 #PARM-INPUT         (A63)
1 REDEFINE #PARM-INPUT
  2 #PARM-FILLER-1     (A7)
  2 #PARM-PROCESS-FILE (A1)
  2 #PARM-FILLER-2     (A15)
  2 #PARM-DO-PROJS     (A1)
  2 #PARM-FILLER-3     (A13)
  2 #PARM-MONTH        (N2)
  2 #PARM-FILLER-4     (A18)
  2 #PARM-MEMBER-KEY   (A6)
*
* 1 #CURR-VAR-INT-RATE (P2.3) INIT <8.10>   /* YK1
* 1 #GROWTH-RATE       (N2.3) INIT <7.10>   /* YK1
1 #GROWTH-RATE       (N2.3)                 /* YK1
1 #DO-PROJS (L)
1 #NO-CHANGES (L)
*
1 #PROCESS-DATE  (N6)
1 #AS-OF-DT (N8)
1 #LOAN-BAL (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT (N7.2/9)
1 #ACC-INT-2 (N7.2/9)
1 #CSV (N7.2/9)
1 #CVALUE (N7.2/9)
1 #LVALUE (N7.2/9)
1 #MCSV (N7.2/9)
1 #DB (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #FACE-AMT (N7.2/9)
1 #TPP (N7.2/9)
*
1 #NUM-RECS (P5)
1 #REC-OVERFLOW (A250)
1 REDEFINE #REC-OVERFLOW
  2 #REC-OVF-1ST-125 (A125)
  2 #REC-OVF-2ND-125 (A125)
*
1 #EXTRACT-625
  2 #EXT-125-1 (A125)
  2 #EXT-125-2 (A125)
  2 #EXT-125-3 (A125)
  2 #EXT-125-4 (A125)
  2 #EXT-125-5 (A125)
1 #EXTRACT-125 (A125)
*
1 #CASE-CONV  (A25)
1 REDEFINE #CASE-CONV
  2 #CASE-CONV-X (A1/23)
*
1 #LETTER-TABLE
  2 #1T (A26) INIT <'AaBbCcDdEeFfGgHhIiJjKkLlMm'>
  2 #2T (A26) INIT <'NnOoPpQqRrSsTtUuVvWwXxYyZz'>
1 REDEFINE #LETTER-TABLE
  2 #LETTER-OCC (26)
    3 #UPPER (A1)
    3 #LOWER (A1)
*
1 #POLS-1 (P2)
* 1 #TAB     (A1) INIT <H'05'>     /* SAG RH1 12012005 SS
1 #TAB       (A1) INIT <H'09'>     /* SAG RH1 12012005 SS
1 #DEAR-NAME (A38)
* 1 #SPLIT (A1)                    /* NG1
1 #STREET   (A25)
1 #STREET-2 (A25)
1 #STREET-L (A) DYNAMIC
* 1 #CITY (A22)
* 1 #STATE (A2)
1 #ERR-MSG (A60)
1 #AMT-10 (A10)
1 #ZIP-10 (A10)
1 #CNT-2 (P5)
1 #CNT-3 (P5)
1 #MEC (L)
1 #NON-MEC (L)
1 #BYPASS-PRT (L)
1 #CRITICAL-ERROR (L)
1 #ALREADY-SENT-CNT (P5)
1 #NUM-MEC (P5)
1 #NUM-PROJS (P5)
1 #VP-FLX-CALC-FACE (P5)
1 #VP-FLX-CALC-PREM (P5)
1 #NUM-OVER-AGE-80 (P5)
1 #NUM-NO-WL-POLS (P5)
1 #NUM-SPS-GEN (P5)
1 #NUM-NON-GRAND (P5)
1 #NUM-CAP (P5)
1 #NUM-LOW-GROWTH (P5)
1 #NUM-UNDELIVERABLE (P5)
1 #NUM-LOW-CURR-DB (P5)
1 #NUM-NONMEMBER (P5)
1 #NUM-LT-MIN-FACE (P5)
1 #CUR-GROWTH (P7.2)
1 #AMT-5 (A5)
1 #TOT-INT (P5.2)
1 #TOT-PRIN (P5.2)
1 #TOT-P-I (P5.2)
*
1 #MULTIPLE-OWNER (L)
1 #NON-INS-OWNER  (L)
1 #OWNER-OCC-9 (9)
  2 #OWNER-FLAG (A1)
  2 #OWNER-CN (N6/10)
*
  2 #OWNER-CN-BY-POL (N6)
  2 #OWNER-CN-SEG (I2/9)
  2 #ISS-DATE (N8/9)
  2 #ISS-DATE-DISP (A10/9)
*
  2 #BENE-TYPE (A1/2)
  2 #BENE-TEXT (A60/10)
*
1 #FILE-TRADE-DESC (A50/10)
*
1 #SCR-LINE (A78/10)
1 REDEFINE #SCR-LINE
  2 #SCR-LINE-OCC (10)
    3 #SCR-LINE-78 (A78)
    3 REDEFINE #SCR-LINE-78
      4 #SCR-LEFT-AREA (A51)
      4 REDEFINE #SCR-LEFT-AREA
        5 #SCR-TRADE-DESC (A33)
        5 #SCR-PAY-TO-AGE (A8)
        5 #SCR-TRA-PREM (A10)
      4 #SCR-TRA-DB-AREA (A27)
      4 REDEFINE #SCR-TRA-DB-AREA
        5 #SCR-TRA-DB-FL1 (A4)
        5 #SCR-TRA-DB-AGE-1 (A3)
        5 #SCR-TRA-DB-AGE (A11)
        5 #SCR-TRA-DB-AGE-2 (A3)
      4 REDEFINE #SCR-TRA-DB-AREA
        5 #SCR-TRA-DB-1 (A13)
        5 #SCR-TRA-DB-FILL (A1)
        5 #SCR-TRA-DB-2 (A13)
1 #SCR-LINE-CV (C/10)
*
1 #FACE-AMT-GRID   /* 3rd face ignored below
  2 #FAG-1  (A15) INIT <'000000,050,100,'>
  2 #FAG-2  (A15) INIT <'031000,100,150,'>
  2 #FAG-3  (A15) INIT <'076000,150,200,'>
  2 #FAG-4  (A15) INIT <'131000,200,250,'>
  2 #FAG-5  (A15) INIT <'176000,250,300,'>
  2 #FAG-6  (A15) INIT <'231000,300,350,'>
  2 #FAG-7  (A15) INIT <'276000,350,400,'>
  2 #FAG-8  (A15) INIT <'331000,400,450,'>
  2 #FAG-9  (A15) INIT <'376000,450,500,'>
  2 #FAG-10 (A15) INIT <'431000,500,550,'>
  2 #FAG-11 (A15) INIT <'476000,550,600,'>
  2 #FAG-12 (A15) INIT <'531000,600,650,'>
  2 #FAG-13 (A15) INIT <'576000,700,800,'>
  2 #FAG-14 (A15) INIT <'600000,800,000,'>
  2 #FAG-15 (A15) INIT <'799999,000,000,'>
1 REDEFINE #FACE-AMT-GRID
  2 #NEW-FACE-OCC-1 (15)
    3 #FACE-BREAK (N6)
    3 #FILL12     (A1)
    3 #NEW-FACE-OCC-2 (2)
      4 #NEW-FACE  (N3)
      4 #FILL2     (A1)
*
1 #LIF-EXP-NON-SMOK
  2 #LEN-00-09 (A30) INIT <'79,78,77,76,76,75,74,73,72,71,'>
  2 #LEN-10-19 (A30) INIT <'70,69,68,67,66,65,64,63,62,61,'>
  2 #LEN-20-29 (A30) INIT <'60,59,58,57,56,55,54,53,52,51,'>
  2 #LEN-30-39 (A30) INIT <'50,49,48,47,46,46,45,44,43,42,'>
  2 #LEN-40-49 (A30) INIT <'41,40,39,38,37,36,35,34,33,33,'>
  2 #LEN-50-59 (A30) INIT <'32,31,30,29,28,28,27,26,25,25,'>
  2 #LEN-60-69 (A30) INIT <'24,23,23,22,21,21,20,20,19,18,'>
  2 #LEN-70-79 (A30) INIT <'17,17,17,16,15,14,13,12,12,11,'>
  2 #LEN-80    (A03) INIT <'10,'>
1 REDEFINE #LIF-EXP-NON-SMOK
  2 #LIF-EXP-NON-SMOK-OCC (81)
    3 #LIF-EXP-NON-SMK  (N2)
    3 #LIF-EXP-NS-COMMA (A1)
*
1 #LIF-EXP-SMOK
  2 #LES-00-09 (A30) INIT <'74,73,72,71,70,69,68,67,66,65,'>
  2 #LES-10-19 (A30) INIT <'64,63,62,61,61,59,58,57,56,55,'>
  2 #LES-20-29 (A30) INIT <'54,54,53,52,51,50,49,48,47,46,'>
  2 #LES-30-39 (A30) INIT <'45,44,43,42,41,40,40,39,38,37,'>
  2 #LES-40-49 (A30) INIT <'36,35,34,34,33,32,31,30,30,29,'>
  2 #LES-50-59 (A30) INIT <'28,27,27,26,25,25,24,23,23,22,'>
  2 #LES-60-69 (A30) INIT <'22,21,20,20,19,19,18,18,17,17,'>
  2 #LES-70-79 (A30) INIT <'16,15,15,15,14,12,11,10,10,09,'>
  2 #LES-80    (A03) INIT <'08,'>
1 REDEFINE #LIF-EXP-SMOK
  2 #LIF-EXP-SMOK-OCC (81)
    3 #LIF-EXP-SMK  (N2)
    3 #LIF-EXP-SM-COMMA (A1)
*
1 #SCR-NAME (A25)
1 #LIF-EXP (N2)
1 REDEFINE #LIF-EXP
  2 #LIF-EXP-A (A2)
1 #SMOKER-FLAG (A1)
1 #SMOKER-FLAG-X (A3)
1 #CURR-AGE (N4)
1 #NEW-FACE-AMT (N7/2)                                 /* JT1
1 #RECS-READ (P7)
*
1 #DIFF-OPT-2 (P7.2)
1 #DIFF-OPT-3 (P7.2)
*
1 #REMAIN-PREMS (P7.2/9)
1 #TOT-REMAIN-PREMS(P7.2)
1 #NUM-MONS-REMAIN (P5)
1 #TRA-MONS-LEFT (P5)
1 #TRA-YRS-LEFT (P3)
1 #TRA-PAY-TO-AGE (P3)
1 #TOT-REMAIN-PREMS-SMALLEST (P7.2)
1 #TRA-YRS-LEFT-SMALLEST (P3)
*
1 #TRA-AGE (A3/2)
1 #TRA-INFO (5)
  2 #TRA-PREM (N5.2)
  2 #TRA-CSV (N7.2/2)
  2 #TRA-DB (N7.2/2)
*
1 #CURR-LABL (A50)
1 #CURR-LABL-X (A13)
1 #INCR-LABL (A50)
1 #TRA-X (I2)
1 #TRA-STORE-MEM-AGE (P3/27)
1 #TRA-STORE-CSV (P7.2/27)
1 #TRA-STORE-DB (P7.2/27)
*
1 #ONLY-1-WL (L)
1 #POLS-TO-TRADE (N3)
1 #POLS-SELECTED (N3)
1 #TRADE-DESC (A32/6)
1 #TRADE-DESC-2 (A50/6)
1 #PAY-TO-AGE (A7/6)
1 #NON-CAP-WL-POLS (N3)
1 #PROCESS-X (I2)
1 #MEM-AGE (A3)
1 #MAX-YRS (N3)
1 REDEFINE #MAX-YRS
  2 #MAX-YRS-FIL1 (N1)
  2 #MAX-YRS-A2 (A2)
1 REDEFINE #MAX-YRS
  2 #MAX-YRS-FIL2 (N2)
  2 #MAX-YRS-A1 (A1)
1 #SCR-CV (C)
1 #SCR-SEL-CV (C)
1 #SEL (A1/9)
1 #HLD-SEL (A1/9)
1 #SEL-SEG-X (I2/9)
1 #SEL-CV (C/9)
1 #SEL-ALL (A1)
1 #HLD-SEL-ALL (A1)
1 #HLD-SMOKER-FLAG (A1)
1 #ISS-DT-DISP (A10/9)
1 #CSV-DISP (A13/9)
1 #DB-DISP (A13/9)
1 #SMALLEST-CSV (N7.2) INIT <9999999.99>
1 #SMALLEST (A12/9)
1 #SMALLEST-X (I2)
1 #SEG-TO-PROJ (A1/9)
1 #CURR-TOT-ANN-PREM (N7.2)
1 #CURR-TOT-CV (N7.2)
*
1 #PREM-DISP (A9/9)
1 #PREM (N5.2/9)
*
1 #CURR-DB (P7.2/9)
1 #CURR-CV (P6.2/9)
1 #DESIRED-MON-PREM (N5.2)
1 #HLD-DESIRED-MON-PREM (N5.2)
*
1 #CURR-CV-SMALLEST (P6.2)
1 #CURR-DB-SMALLEST (P6.2)
1 #PROJ-DB-SMALLEST (P6.2)
1 #A-PREM-SMALLEST (P5.2)
1 #TOT-CURR-CV (P6.2)
1 #TOT-CURR-DB (P7.2)
1 #TOT-CURR-FACE (P7.2)
1 #TOT-CURR-FACE-TERM (P7.2)
1 #TOT-CURR-A-PREM (P5.2)
1 #TOT-CURR-M-PREM (P5.2)
1 #TOT-CURR-CV-DISP (A13)
1 #TOT-CURR-DB-DISP (A13)
1 #TOT-A-PREM-DISP (A9)
1 #TOT-M-PREM-DISP (A9)
1 #TOT-CURR-CV-SM-DISP (A13)
1 #TOT-CURR-DB-SM-DISP (A13)
1 #TOT-A-PREM-SM-DISP (A9)
1 #TOT-M-PREM-SM-DISP (A9)
1 #KEEP1-WRK-AMT1 (P7.2)
1 #KEEP1-WRK-AMT2 (P6.2)
1 #KEEP1-LABEL (A14)
1 #TEXT (A78)
*
1 ST-BAT-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 MEMBER-CONTACT-ID             /* NG1
*   2 DATE-OF-BIRTH               /* TT2
  2 INTRO-FLAG
*
1 ST-V VIEW OF A-STATUS
  2 INTRO-FLAG
  2 MEMBER-CONTACT-ID
  2 TRAD-UP-SENT-DT
  2 REDEFINE TRAD-UP-SENT-DT
    3 TRADE-YYYY (N4)
    3 TRADE-MM   (N2)
    3 TRADE-DD   (N2)
  2 X-FIRST-PLACE-FEE (9)
  2 X-BILL-ADJUST    (9)
  2 CAP-CONV-ACV
  2 NAME
*   2 SEX                       /* TT2
  2 DEBIT-CREDIT-AMT
  2 X-LOAN-DATE        (9)
  2 REDEFINE X-LOAN-DATE
    3 X-LOAN-DATE-OCC  (9)
      4 X-LOAN-YYYY (N4)
      4 X-LOAN-MM   (N2)
      4 X-LOAN-DD   (N2)
  2 X-LOAN-DATE-2      (9)
  2 REDEFINE X-LOAN-DATE-2
    3 X-LOAN-DATE-2-OCC  (9)
      4 X-LOAN-YYYY-2 (N4)
      4 X-LOAN-MM-2   (N2)
      4 X-LOAN-DD-2   (N2)
  2 X-LOAN-AMOUNT      (9)
  2 X-LOAN-AMOUNT-2    (9)
  2 X-ACCUM-INTEREST   (9)
  2 X-ACCUM-INTEREST-2 (9)
  2 X-NXT-YR-ACCUM-INT   (9)
  2 X-NXT-YR-ACCUM-INT-2 (9)
  2 X-INTEREST-RATE    (9)
  2 REDEFINE X-INTEREST-RATE
    3 X-INTEREST-RATE-OCC  (9)
      4 X-INTEREST-RATE-5  (P5)
  2 LAST-SEG-USED
  2 SPLIT-IND        (9)
  2 MTD-ACV-PREM-ADJ (9)
  2 MTD-ACV-INT-ADJ  (9)
  2 MTD-ACV-COI-ADJ  (9)
  2 C*ACTIVE-SEGMENTS
  2 PREM-RATING      (A1/9)
  2 EXPIRY-DAY       (P3/9)
  2 ORIG-COST-BASIS  (9)
  2 COST-BASIS       (9)
  2 MEC-IND          (9)
  2 TOT-PREMIUMS-PAID  (9)
  2 PAID-UP-DATE     (9)
  2 PAID-TO-DATE     (9)
  2 REDEFINE PAID-TO-DATE
    3 PAID-TO-DATE-TAB  (9)
      4 PAID-TO-YYYYMM   (N6)
      4 REDEFINE PAID-TO-YYYYMM
        5 PAID-TO-DATE-YYYY (N4)
        5 PAID-TO-DATE-MM   (N2)
      4 PAID-TO-DATE-DD    (N2)
  2 ONLINE-ACTION-GN
  2 ONLINE-ACTION      (9)
  2 STATUS             (9)
*
1 ST-TU-V VIEW OF A-STATUS
  2 TRAD-UP-SENT-DT (N8)
*
1 #CAP-LOAN-MONS   (N3)
1 #CAP-CSV-MONS    (N3)
1 #CAP-REMAIN-MONS (N3)
1 #CAP-CONV-ACV    (P7.2)
1 #WORK-CAP-CONV-ACV (P9.2)
1 #CAP-LOAN-END-DATE (N8)
1 #CV     (P7.2)
1 #ACV    (P7.2)
1 #CAP-CSV (P7.2)
1 #I1 (I2)
1 #I2 (I2)
1 #I3 (I2)
1 #I4 (I2)
1 #I5 (I2)
1 #SCR-OPT-X (I2/5)
1 #SCR-X     (I2)
*
1 #YYYYMMDD   (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY   (N4)
    3 #MM     (N2)
  2 #DD     (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A (A4)
  2 #MM-A   (A2)
  2 #DD-A   (A2)
*
1 #TODAY-YYYYMMDD (N8)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYY   (N4)
  2 #TODAY-MM     (N2)
  2 #TODAY-DD     (N2)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYYMM (N6)
  2 #TODAY-DD-2   (N2)
*
1 #CONSOLIDATION (L)
*
1 #PREM-RATING (A1)
1 #COI-ADJ     (N3.2/9)
1 #NXT-X       (I2)
1 #NXT-PRM-ADJ (P1.2)
1 #OO-EFF-DATE (N8)
1 #DEGF-EFF-DATE (N8)
*
1 #DUES-PAID    (P7.2)
1 #DUES-PD-DOLS (P7)
1 #USE-X-CALCS  (L)
*
1 #CSV-W-O-TDIV (P7)
1 #W-AGE       (P8)
1 #NUM-MONTHS   (P5)
1 #HOLD-NAME    (A25)
1 #COMMA   (A1) INIT <','>
1 #DTL-IDX         (I2)
1 #CURR-DATN   (N8)
1 REDEFINE #CURR-DATN
  2 #CURR-YYYY       (N4)
  2 REDEFINE #CURR-YYYY
    3 #CURR-YYYY-A   (A4)
  2 #CURR-MM         (N2)
  2 REDEFINE #CURR-MM
    3 #CURR-MM-A (A2)
  2 #CURR-DD    (N2)
1 #IDX          (I2)
1 #OVFLW-NAME   (A24)
1 #FLEX-POLICY (L)
1 #LUMP-PMT    (N7.2)                                   /* JT1
1 #EXCH-1035   (N7.2)                                   /* JT1
1 #FAC-AMT     (N7.2)
1 #NUM-YEARS   (N3)
1 #ANN-PREM    (N7.2)                                   /* JT1
1 #DUES-PMT    (N3.2)
1 #PREM-AGE    (N2)
1 REDEFINE #PREM-AGE
  2 #PREM-AGE-A  (A2)
1 #PAYS-DUES   (L)
1 #SUFFIX  (A3)
1 #TRADE-UP-DATE (A10)
*
* BELOW for CALC-PREMS-PAID
1 #PP-DATE-OF-BIRTH  (N8)
1 #PP-ANNUAL-PREM    (N5.2)
1 #PP-PAY-STATUS     (A2)
1 #PP-TOT-PREMIUMS-PAID (N7.2)
1 #PP-PAID-TO-DATE   (N8)
1 #PP-ISSUE-DATE     (N8)
1 #PP-MODE           (A1)
1 #PP-PLAN           (A3)
1 #PP-COST-BASIS      (N7.2)
1 #PP-MONTH-ALLOC-AMT (N7.2)       /*TT1
1 #PP-INTRO-FLAG     (A1)
1 #PP-FIRST-PLACE-FEE (N7.2)
1 #PREMS-PAID         (P7.2)
1 #SUB-PREMS-PAID     (P7.2)
1 #PP-BADJ            (P5.2)
* ABOVE for CALC-PREMS-PAID
1 #DOB      (N8)
1 REDEFINE #DOB
  2 #DOB-YYYY (N4)
  2 #DOB-MM   (N2)
  2 #DOB-DD   (N2)
*
1 #FILE-EXTRACT (A80)
1 REDEFINE #FILE-EXTRACT
  2 #CN-ALPHA (A6)
1 REDEFINE #FILE-EXTRACT
  2 #CHARACTER (A1/80)
1 #CN-DIGIT-CNT (P3)
*
1 #MAX-FACE-TOTAL     (P7.2)
1 #MAX-FACE-TERM      (P7.2)
1 #OVERRIDE-MAX-FACE-TOTAL (P7.2)
1 #OVERRIDE-MAX-FACE-TERM  (P7.2)
1 #DATE-OF-BIRTH        (N8.0)                     /* TT2
* 1 REDEFINE #DATE-OF-BIRTH /* REDEF. BEGIN : DATE-OF-BIRTH
*    2 DOB-CENT (N2)
*    2 DOB-YY (N2)
*    2 DOB-MM (N2)
*    2 DOB-DD (N2)
1 REDEFINE #DATE-OF-BIRTH /* REDEF. BEGIN : DATE-OF-BIRTH
  2 DOB-YYYY (N4)
  2 DOB-MMDD (N4)
1 #SEX                  (A1)
*
END-DEFINE
* * * * *
INCLUDE GONERCXX
*
MOVE *DATN TO #CURR-DATN
MOVE *DATN TO #TODAY-YYYYMMDD
*
#GROWTH-RATE := FUNCTION-INT-RATE(<'RATE2AA'>)  /* YK2
*
IF *DEVICE NE 'BATCH'
  IF #CGA-ISN = 0
    MOVE 'CN must be entered' TO #ERR-TEXT
    PERFORM SHOW-ERROR
  END-IF
*
  MOVE TRUE TO #DO-PROJS
  PERFORM PROCESS-MBR
  FETCH 'G1000PXX'
END-IF
*
FORMAT LS=133 PS=76
WRITE  TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Exceptions'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
FORMAT (2) LS=133 PS=76
WRITE  (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'VP Trade-up Detail'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
FORMAT (3) LS=133 PS=76
WRITE  (3) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'VP Trade-up bypassed'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
INPUT #PARM-INPUT
MOVE TRUE TO #DO-PROJS
IF #PARM-DO-PROJS = 'N'
  RESET #DO-PROJS
END-IF
*
COMPRESS
  'CN' #TAB 'Name' #TAB 'Street1' #TAB 'Street2' #TAB 'City'
  #TAB 'ST' #TAB 'Zip' #TAB 'Dear' #TAB 'Loan' #TAB 'Tobacco'
  #TAB 'Services' #TAB 'Age1' #TAB 'Age2'
  #TAB '1Opt' #TAB '1Age' #TAB '1Prem' #TAB '1Bene1' #TAB '1Bene2'
  #TAB '2Opt' #TAB '2Age' #TAB '2Prem' #TAB '2Bene1' #TAB '2Bene2'
  #TAB '3Opt' #TAB '3Age' #TAB '3Prem' #TAB '3Bene1' #TAB '3Bene2'
  #TAB '4Opt' #TAB '4Age' #TAB '4Prem' #TAB '4Bene1' #TAB '4Bene2'
  #TAB '5Opt' #TAB '5Age' #TAB '5Prem' #TAB '5Bene1' #TAB '5Bene2'
  INTO #REC-OVERFLOW LEAVING NO
PERFORM CHECK-OVER-125
PERFORM BUILD-FIXED-FILE   /* to get last chunk
WRITE WORK 2 #EXTRACT-625
RESET #EXT-125-1
RESET #EXT-125-2
RESET #EXT-125-3
RESET #EXT-125-4
RESET #EXT-125-5
*
COMPRESS 'CN' #TAB 'Reason_Bypassed' INTO #EXTRACT-125
WRITE WORK 3 #EXTRACT-125
RESET #EXTRACT-125
*
MOVE 'VP' TO #CGA-SCR-COMMAND #CGA-ORIG-COMMAND
MOVE 'TRA' TO #CGA-SCR-SUFFIX #CGA-ORIG-SUFFIX
*
IF #PARM-PROCESS-FILE = 'Y'
  PERFORM PROCESS-FILE-TRADE-UP
ELSE
  PERFORM PROCESS-MONTHLY-TRADE-UP
END-IF
*
WRITE #NUM-PROJS         'Number Proj"s done'
WRITE #RECS-READ         'Number of members processed'
WRITE #VP-FLX-CALC-FACE  'Number VP-FLX to calc Face (costly)'
WRITE #VP-FLX-CALC-PREM  'Number VP-FLX to calc Prem'
WRITE #NUM-OVER-AGE-80   'Bypassed due to over age 80'
WRITE #NUM-NO-WL-POLS    'Byp due to no whole life policies'
WRITE #NUM-SPS-GEN       'Byp due to sps/gen'
WRITE #NUM-NON-GRAND     'Byp due to non-grandfathered'
WRITE #NUM-CAP           'Byp due to cap w no other W/L'
WRITE #NUM-LOW-GROWTH    'Byp due to low growth'
WRITE #NUM-LOW-CURR-DB   'Byp due to low current death benefit'
WRITE #NUM-MEC           'Byp due to MEC'
WRITE #ALREADY-SENT-CNT  'Byp due to having a sent date'
WRITE #NUM-NONMEMBER     'Byp due to having a non-member owner'
WRITE #NUM-UNDELIVERABLE 'Byp due to undeliverable address'
WRITE #NUM-LT-MIN-FACE   'Byp due to minimum insurance'
*
* * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE PROCESS-MONTHLY-TRADE-UP
* * * * * * * * * * * * * * * * * * * * * *
*
READ ST-BAT-V BY MEMBER-KEY FROM #PARM-MEMBER-KEY
*
  RESET #DATE-OF-BIRTH                                                       /* TT2
  #DATE-OF-BIRTH := GET-DATE-OF-BIRTH(<ST-BAT-V.MEMBER-CONTACT-ID>)          /* TT2
  MOVE #DATE-OF-BIRTH TO #DOB                                                /* TT2
*
  IF NOT #DOB-MM = #PARM-MONTH
*   OR ST-BAT-V.ID-NUMBER GE 600000            RE1
      OR AFFL-ONLY-CLIENT(<ST-BAT-V.ID-NUMBER>)   /* RE1
    ESCAPE TOP
  END-IF
*
  ADD 1 TO #RECS-READ
  MOVE *ISN TO #CGA-ISN
  MOVE ST-BAT-V.ID-NUMBER TO #CGA-SCR-ID #CGA-ORIG-ID #CGA-ID
  PERFORM PROCESS-MBR
END-READ
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE PROCESS-FILE-TRADE-UP
* * * * * * * * * * * * * * * * * * * *
*
READ WORK 1 #FILE-EXTRACT
*
  RESET #CN-DIGIT-CNT
  FOR #I5 1 TO 6
    IF #CHARACTER (#I5) = ' '
      ESCAPE BOTTOM
    ELSE
      ADD +1 TO #CN-DIGIT-CNT
    END-IF
  END-FOR
*
  IF #CN-DIGIT-CNT < 5
    COMPRESS '00' #CN-ALPHA INTO #CN-ALPHA LEAVING NO
  ELSE
    IF #CN-DIGIT-CNT < 6
      COMPRESS '0' #CN-ALPHA INTO #CN-ALPHA LEAVING NO
    END-IF
  END-IF
*
  FIND ST-BAT-V WITH MEMBER-KEY = #CN-ALPHA
    IF NO RECORDS FOUND
      WRITE (7) 'No record found for ' #CN-ALPHA
      ESCAPE TOP
    END-NOREC
*
    ADD 1 TO #RECS-READ
    MOVE *ISN TO #CGA-ISN
    MOVE ST-BAT-V.ID-NUMBER TO #CGA-SCR-ID #CGA-ORIG-ID #CGA-ID
    PERFORM PROCESS-MBR
  END-FIND
*
END-WORK
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * *
DEFINE SUBROUTINE PROCESS-MBR
* * * * * * * * * * * * * * *
*
GET ST-V #CGA-ISN
GET #PR-V #CGA-ISN
IF *DEVICE NE 'BATCH'
  GET ST-BAT-V #CGA-ISN
END-IF
*
RESET #TEXT #BYPASS-PRT #CRITICAL-ERROR #DATE-OF-BIRTH                  /* TT2
#DATE-OF-BIRTH := GET-DATE-OF-BIRTH(<#PR-V.MEMBER-CONTACT-ID>)          /* TT2
*
COMPUTE #CURR-AGE = (*DATN - #DATE-OF-BIRTH) / 10000                    /* TT2
IF #CURR-AGE GE 80
  MOVE 'Over Age 80 - Bypassed' TO #TEXT
  ADD 1 TO #NUM-OVER-AGE-80
  MOVE TRUE TO #BYPASS-PRT #CRITICAL-ERROR
ELSE
  IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    MOVE 'SPS/GEN - Bypassed' TO #TEXT
    ADD 1 TO #NUM-SPS-GEN
    MOVE TRUE TO #BYPASS-PRT
  ELSE
    IF PROCESS-IND NE 'G'
      MOVE 'Non-Grandfathered - Bypassed' TO #TEXT
      ADD 1 TO #NUM-NON-GRAND
      MOVE TRUE TO #BYPASS-PRT
    ELSE
      CALLNAT 'GOWNRSXY' #CGA-ID
        #NON-INS-OWNER
        #MULTIPLE-OWNER
        #OWNER-OCC-9 (1:9)
*
      IF #NON-INS-OWNER
        MOVE 'NON-MBR Owner - Bypassed' TO #TEXT
        ADD 1 TO #NUM-NONMEMBER
        MOVE TRUE TO #BYPASS-PRT
      END-IF
    END-IF
  END-IF
END-IF
*
IF ST-V.TRAD-UP-SENT-DT NE 0
    AND #PARM-PROCESS-FILE NE 'Y'
  COMPRESS TRADE-MM '/' TRADE-DD '/' TRADE-YYYY INTO #TRADE-UP-DATE
    LEAVING NO
  COMPRESS #TEXT 'Trade-Up letter created on ' #TRADE-UP-DATE INTO #TEXT
  ADD +1 TO #ALREADY-SENT-CNT
  MOVE TRUE TO #BYPASS-PRT
END-IF
*
IF   (*DEVICE = 'BATCH')
    AND (#TEXT NE ' ')
  PERFORM WRITE-BYPASSED-FILE
  ESCAPE TOP
END-IF
*
CALLNAT 'GMAXSXX'
  #CGA-ORIG-COMMAND
  #MAX-FACE-TOTAL
  #MAX-FACE-TERM
  #OVERRIDE-MAX-FACE-TOTAL
  #OVERRIDE-MAX-FACE-TERM
  INTRO-FLAG
  #DATE-OF-BIRTH                                        /* TT2
*
MOVE 9999999.99 TO #SMALLEST-CSV
RESET #NON-CAP-WL-POLS #TOT-REMAIN-PREMS #TOT-CURR-A-PREM
  #TOT-CURR-FACE #TOT-CURR-FACE-TERM
  #CURR-TOT-ANN-PREM #A-PREM-SMALLEST #ISS-DT-DISP (*)
  #I2 #ONLY-1-WL #SMALLEST-X #SEL-SEG-X (*)
  #TOT-CURR-DB #TOT-CURR-CV #PREM (*)
  #CURR-DB (*) #CURR-CV (*) #NEW-FACE-AMT (*) #SEG-TO-PROJ (*)
  #TRADE-DESC (*) #TRA-PREM (*) #TRA-DB (*, *) #TRA-CSV (*, *)
  #SCR-LINE (*) #PAY-TO-AGE (*)
  #DIFF-OPT-2  #DIFF-OPT-3 #MEC
  #TOT-INT #TOT-PRIN #TOT-P-I
  #TRADE-DESC-2 (*)
  #PROJ-DB-SMALLEST #TOT-REMAIN-PREMS-SMALLEST
MOVE 'N' TO #SMOKER-FLAG
MOVE 'No' TO #SMOKER-FLAG-X
*
IF #PR-V.PROCESS-IND = 'G'
  MOVE 'Grandfathered Services:' TO #CURR-LABL
  MOVE 'Grandfathered' TO #CURR-LABL-X
ELSE
  MOVE 'Current Services:' TO #CURR-LABL
END-IF
*
MOVE 'Survivor Assistance Services:' TO #INCR-LABL
MOVE (AD=NP) TO #SEL-CV (*)
*
MOVE ST-V.NAME TO #SCR-NAME
SEPARATE ST-V.NAME LEFT INTO #LAST-NAME #FIRST-NAME #OVFLW-NAME
  WITH DELIMITER #COMMA
*
COMPRESS #FIRST-NAME #LAST-NAME INTO #L-SWITCHED-NAME
*
IF #OVFLW-NAME > '   '
  COMPRESS #L-SWITCHED-NAME ',' INTO #HOLD-NAME LEAVING NO SPACE
  COMPRESS #HOLD-NAME #OVFLW-NAME INTO #L-SWITCHED-NAME
END-IF
*
MOVE *DATN TO #AS-OF-DT
MOVE #PR-V.FACE-AMOUNT (*) TO #FACE-AMT (*)
CALLNAT 'CVALUSXX'
  #PR-V.ID-NUMBER
  #CGA-SCR-SUFFIX
  #AS-OF-DT
  #LOAN-BAL   (1:9)
  #LOAN-BAL-2 (1:9)
  #ACC-INT    (1:9)
  #ACC-INT-2  (1:9)
  #CSV        (1:9)
  #CVALUE     (1:9)
  #LVALUE     (1:9)
  #MCSV       (1:9)
  #DB         (1:9)
  #ANN-PREMIUM  (1:9)
  #FACE-AMT   (1:9)   /* DW1
  #TPP        (1:9)   /* DW1
*
FOR #I1 1 TO 9
  IF  (STATUS (#I1) NE 'D')
      OR ((#TEXT NE ' ') AND (*DEVICE = 'BATCH'))
      OR #CRITICAL-ERROR
    ESCAPE TOP
  END-IF
  IF SMOKER-FLAG (#I1) = 'S'
    MOVE 'S' TO #SMOKER-FLAG
    MOVE 'Yes' TO #SMOKER-FLAG-X
  END-IF
*
* IF  (PLAN (#I1) = 'RT' OR = 'LT' OR = 'SO')                  /* YK3
*   OR ((PLAN-1A (#I1) GE 'U') AND (PLAN-1A (#I1) LE 'Z'))     /* YK3
  IF (PLAN (#I1) = 'SO') OR FUNCTION-TERM-POLICY(<PLAN(#I1)>)  /* YK3
    ADD FACE-AMOUNT (#I1) TO #TOT-CURR-FACE
    ADD FACE-AMOUNT (#I1) TO #TOT-CURR-FACE-TERM
    ESCAPE TOP
  END-IF
*
  ADD #LOAN-BAL (#I1) TO #TOT-PRIN
  ADD #LOAN-BAL (#I1) TO #TOT-P-I
  ADD #ACC-INT (#I1) TO #TOT-INT
  ADD #ACC-INT (#I1) TO #TOT-P-I
*
  ADD #LOAN-BAL-2 (#I1) TO #TOT-PRIN
  ADD #LOAN-BAL-2 (#I1) TO #TOT-P-I
  ADD #ACC-INT-2 (#I1) TO #TOT-INT
  ADD #ACC-INT-2 (#I1) TO #TOT-P-I
*
  IF MEC-IND (#I1) = 'Y'
    MOVE TRUE TO #MEC
  ELSE
    MOVE TRUE TO #NON-MEC
  END-IF
*
  ADD 1 TO #I2
  MOVE #I1 TO #SEL-SEG-X (#I2)
*
  IF CONV-DURATION (#I1) NE 999
    ADD 1 TO #NON-CAP-WL-POLS
  END-IF
*
  MOVE #CSV (#I1) TO #CURR-CV (#I2)
  MOVE #DB  (#I1) TO #CURR-DB (#I2)
*
  IF   (#CURR-CV (#I2) LT #SMALLEST-CSV)
      AND (ISSUE-DATE (#I1) LT 20000701)
    MOVE #CURR-CV (#I2) TO #SMALLEST-CSV
    MOVE #I2 TO #SMALLEST-X
  END-IF
*
  RESET #SEL-CV (#I2)
*
  MOVE ISSUE-DATE (#I1) TO #YYYYMMDD
  COMPRESS #MM-A #DD-A #YYYY-A INTO #ISS-DT-DISP (#I2) WITH '/'
  MOVE EDITED #CURR-CV (#I2) (EM=Z,ZZZ,ZZZ.99) TO #CSV-DISP (#I2)
  MOVE EDITED #CURR-DB (#I2) (EM=Z,ZZZ,ZZZ.99) TO #DB-DISP  (#I2)
*
  IF PAY-STATUS (#I1) LE '40'
    MOVE EDITED ANNUAL-PREM (#I1) (EM=ZZ,ZZZ.99) TO #PREM-DISP (#I2)
    MOVE ANNUAL-PREM (#I1) TO #PREM (#I2)
    ADD #PREM    (#I2) TO #TOT-CURR-A-PREM
  END-IF
*
  ADD #CURR-CV (#I2) TO #TOT-CURR-CV
  ADD #CURR-DB (#I2) TO #TOT-CURR-DB
  ADD FACE-AMOUNT (#I1) TO #TOT-CURR-FACE
*
  RESET #REMAIN-PREMS (#I2)
*
  MOVE ST-V.PAID-UP-DATE (#I1) TO #YYYYMMDD
  IF #YYYYMM GE ST-V.PAID-TO-YYYYMM (#I1)
    IF #MM LT ST-V.PAID-TO-DATE-MM (#I1)
      ADD 12 TO #MM
      SUBTRACT 1 FROM #YYYY
    END-IF
    SUBTRACT ST-V.PAID-TO-YYYYMM (#I1) FROM #YYYYMM
    COMPUTE #NUM-MONS-REMAIN = (#YYYY * 12) + #MM
    COMPUTE #REMAIN-PREMS (#I2) = (ANNUAL-PREM (#I1) / 12)
      * #NUM-MONS-REMAIN
  END-IF
*
  ADD #REMAIN-PREMS (#I2) TO #TOT-REMAIN-PREMS
END-FOR /*(0764)
*
MOVE #I2 TO #POLS-TO-TRADE
*
IF NOT #CRITICAL-ERROR
  IF #MEC AND #NON-MEC
    MOVE 'Bypassed - Has MEC and Non-MEC' TO #TEXT
    ADD 1 TO #NUM-MEC
  ELSE
    IF #POLS-TO-TRADE = 0
      MOVE 'No W/L Policies to Trade-up' TO #TEXT
      MOVE TRUE TO #BYPASS-PRT #CRITICAL-ERROR
      ADD 1 TO #NUM-NO-WL-POLS
    ELSE
      IF   (INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
          AND (#NON-CAP-WL-POLS = 0)
        MOVE 'CAP with no other W/L Policies' TO #TEXT
        MOVE TRUE TO #BYPASS-PRT
        ADD 1 TO #NUM-CAP
      END-IF
    END-IF
  END-IF
END-IF
*
IF ((#TEXT = ' ' AND *DEVICE = 'BATCH')
    OR (*DEVICE NE 'BATCH' AND NOT #CRITICAL-ERROR))
*
  MOVE 'X' TO #SEL-ALL
*
  COMPUTE #I1 = #CURR-AGE + 1 /* GET TABLE ENTRY #
  IF #SMOKER-FLAG = 'S'
    COMPUTE #LIF-EXP = #CURR-AGE + #LIF-EXP-SMK (#I1)
  ELSE
    COMPUTE #LIF-EXP = #CURR-AGE + #LIF-EXP-NON-SMK (#I1)
  END-IF
*
  IF #POLS-TO-TRADE = 1
    MOVE TRUE TO #ONLY-1-WL
  ELSE
    IF #SMALLEST-X NE 0
      MOVE 'Smallest CSV' TO #SMALLEST (#SMALLEST-X)
    END-IF
  END-IF
*
  PERFORM CALCULATE-YEARS-TO-PAY
*
  MOVE EDITED #TOT-CURR-CV (EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-CV-DISP
  MOVE EDITED #TOT-CURR-DB (EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-DB-DISP
  MOVE EDITED #TOT-CURR-A-PREM  (EM=ZZ,ZZZ.99)    TO #TOT-A-PREM-DISP
  MOVE EDITED #TOT-CURR-M-PREM  (EM=ZZ,ZZZ.99)    TO #TOT-M-PREM-DISP
*
  PERFORM VP-FLX
*
  PERFORM CALCULATE-NEW-FACE
END-IF
*
IF *DEVICE = 'BATCH'
  IF #TEXT NE ' '
    PERFORM WRITE-BYPASSED-FILE
    ESCAPE ROUTINE
  END-IF
ELSE
  IF #CRITICAL-ERROR
    MOVE (AD=P) TO #SCR-CV #SCR-SEL-CV #SEL-CV(*)
    MOVE 'VP'   TO #CGA-SCR-COMMAND
  ELSE
    MOVE '*' TO #CGA-SCR-COMMAND
  END-IF
*
  RESET #NO-CHANGES
  MOVE 'X' TO #HLD-SEL-ALL
  MOVE #SMOKER-FLAG TO #HLD-SMOKER-FLAG
  REPEAT
    INPUT TEXT #TEXT MARK *#SEL-ALL USING MAP 'C2V50MVP'
    PERFORM CHECK-AST
    PERFORM ON-LINE
    IF #NO-CHANGES
      ESCAPE BOTTOM
    END-IF
  END-REPEAT
END-IF
*
RESET #CURR-CV-SMALLEST #CURR-DB-SMALLEST #A-PREM-SMALLEST
  #PROJ-DB-SMALLEST
*
FOR #I2 1 TO 9
  IF  (#SEL (#I2) NE ' ')
      OR ((#SEL-ALL NE ' ') AND (#ISS-DT-DISP (#I2) NE ' '))
*
    MOVE #SEL-SEG-X (#I2) TO #I3   /* actual segment
    IF #SMALLEST-X = #I2
      MOVE 'S' TO #SEG-TO-PROJ (#I3)
      MOVE #CURR-CV (#I2) TO #CURR-CV-SMALLEST
      MOVE #CURR-DB (#I2) TO #CURR-DB-SMALLEST
      MOVE #PREM    (#I2) TO #A-PREM-SMALLEST
    ELSE
      MOVE 'X' TO #SEG-TO-PROJ (#I3)
    END-IF
  END-IF
END-FOR
*
IF *DEVICE NE 'BATCH'
    AND #DESIRED-MON-PREM NE #TOT-CURR-M-PREM
  PERFORM VP-FLX
  PERFORM CALCULATE-NEW-FACE
END-IF
*
IF #DO-PROJS
  COMPUTE #CUR-GROWTH = #FAC-AMT - #TOT-CURR-DB
  IF (#FAC-AMT - #TOT-CURR-DB) LT 500
    MOVE EDITED #CUR-GROWTH (EM=ZZZ9) TO #AMT-5
    IF #CUR-GROWTH < 0
      COMPRESS '-' #AMT-5 INTO #AMT-5 LEAVING NO
    END-IF
    COMPRESS 'Bypassed *** Only $' #AMT-5 'Current DB Growth' INTO #TEXT
    IF #CUR-GROWTH LE 0
      MOVE TRUE TO #CRITICAL-ERROR
    END-IF
    IF *DEVICE = 'BATCH'
      ADD 1 TO #CNT-3
      ADD 1 TO #NUM-LOW-CURR-DB
      DISPLAY (3) #CNT-3 #PR-V.ID-NUMBER #CURR-AGE #TEXT
      PERFORM WRITE-BYPASSED-FILE
      ESCAPE ROUTINE
    ELSE
      IF #CRITICAL-ERROR
        MOVE (AD=P) TO #SCR-CV #SEL-CV(*)
        MOVE 'VP'   TO #CGA-SCR-COMMAND
      END-IF
      MOVE 'X' TO #SEL-ALL
      INPUT TEXT #TEXT MARK *#SEL-ALL USING MAP 'C2V50MVP'
      PERFORM CHECK-AST
    END-IF
  END-IF
END-IF
*
FOR #PROCESS-X 1 TO 5  /* was  6
  DECIDE ON FIRST VALUE #PROCESS-X
    VALUE 1
      IF #POLS-TO-TRADE = 1
        MOVE EDITED #TRA-PAY-TO-AGE (EM=ZZZZ99) TO #PAY-TO-AGE (1)
        MOVE ' - Keep policy' TO #TRADE-DESC (1)
        MOVE ' - Keep policy' TO #TRADE-DESC-2 (1)
      ELSE
        MOVE 'Various' TO #PAY-TO-AGE (1)
        IF #POLS-TO-TRADE = 2
          MOVE ' - Keep both policies' TO #TRADE-DESC (1)
          MOVE ' - Keep both policies' TO #TRADE-DESC-2 (1)
        ELSE
          COMPRESS ' - Keep all' #POLS-TO-TRADE 'policies'
            INTO #TRADE-DESC (1)
          COMPRESS ' - Keep all' #POLS-TO-TRADE 'policies'
            INTO #TRADE-DESC-2 (1)
        END-IF
      END-IF
    VALUE 2
      IF   #ONLY-1-WL
          OR (#TOT-CURR-CV = 0)
          OR (#SEL-ALL = ' ')
        ESCAPE TOP
      END-IF
*
      MOVE 'Various' TO #PAY-TO-AGE (2)
      COMPUTE #POLS-1 = #POLS-TO-TRADE - 1
      COMPRESS ' - Keep 1 policy, Trade-Up' #POLS-1 INTO #TRADE-DESC (2)
      COMPRESS ' - Keep 1 policy, Trade-Up' #POLS-1
        INTO #TRADE-DESC-2 (2)
      IF #POLS-1 = 1
        COMPRESS #TRADE-DESC-2 (2) 'policy' INTO #TRADE-DESC-2 (2)
      ELSE
        COMPRESS #TRADE-DESC-2 (2) 'policies' INTO #TRADE-DESC-2 (2)
      END-IF
*
    VALUE 3
      MOVE EDITED #TRA-PAY-TO-AGE (EM=ZZZZ99) TO #PAY-TO-AGE (3)
      IF #POLS-TO-TRADE = 1
        COMPRESS ' - Trade-Up 1 policy' INTO #TRADE-DESC (3)
        COMPRESS ' - Trade-Up 1 policy' INTO #TRADE-DESC-2 (3)
      ELSE
        IF #POLS-TO-TRADE = 2
          COMPRESS ' - Trade-Up both policies' INTO #TRADE-DESC (3)
          COMPRESS ' - Trade-Up both policies' INTO #TRADE-DESC-2 (3)
        ELSE
          COMPRESS ' - Trade-Up all' #POLS-TO-TRADE 'policies'
            INTO #TRADE-DESC (3)
          COMPRESS ' - Trade-Up all' #POLS-TO-TRADE 'policies'
            INTO #TRADE-DESC-2 (3)
        END-IF
      END-IF
    VALUE 4
      IF (#NEW-FACE-AMT (1) = 0)
        ESCAPE TOP
      END-IF
*
      MOVE '100' TO #PAY-TO-AGE (4)
      MOVE EDITED #NEW-FACE-AMT (1) (EM=ZZZ,ZZZ) TO #AMT-10
      IF #POLS-TO-TRADE = 1
        COMPRESS ' - Trade-Up 1, Incr to $' INTO #TRADE-DESC(4)
        COMPRESS ' - Trade-Up 1 policy, Increase to $'
          INTO #TRADE-DESC-2 (4)
      ELSE
        IF #POLS-TO-TRADE = 2
          COMPRESS ' - Trade-Up 2, Incr to $'
            INTO #TRADE-DESC (4)
          COMPRESS ' - Trade-Up both policies, Increase to $'
            INTO #TRADE-DESC-2 (4)
        ELSE
          COMPRESS ' - Trade-Up' #POLS-TO-TRADE INTO #TRADE-DESC (4)
          COMPRESS #TRADE-DESC (4) ',' INTO #TRADE-DESC (4) LEAVING NO
          COMPRESS #TRADE-DESC (4) 'Incr to $' INTO #TRADE-DESC (4)
*
          COMPRESS ' - Trade-Up all' #POLS-TO-TRADE 'policies'
            INTO #TRADE-DESC-2 (4)
          COMPRESS #TRADE-DESC-2 (4) ','
            INTO #TRADE-DESC-2 (4) LEAVING NO
          COMPRESS #TRADE-DESC-2 (4) 'Increase to $'
            INTO #TRADE-DESC-2 (4)
        END-IF
      END-IF
      COMPRESS #TRADE-DESC (4) #AMT-10
        INTO #TRADE-DESC (4) LEAVING NO
      COMPRESS #TRADE-DESC-2 (4) #AMT-10
        INTO #TRADE-DESC-2 (4) LEAVING NO
    VALUE 5
      IF (#NEW-FACE-AMT (2) = 0) ESCAPE TOP END-IF
      MOVE '100' TO #PAY-TO-AGE (5)
      IF #POLS-TO-TRADE = 1
        COMPRESS ' - Trade-Up 1, Incr to $' INTO #TRADE-DESC(5)
        COMPRESS ' - Trade-Up 1 policy, Increase to $'
          INTO #TRADE-DESC-2 (5)
      ELSE
        IF #POLS-TO-TRADE = 2
          COMPRESS ' - Trade-Up 2, Incr to $'
            INTO #TRADE-DESC(5)
          COMPRESS ' - Trade-Up both policies, Increase to $'
            INTO #TRADE-DESC-2 (5)
        ELSE
          COMPRESS ' - Trade-Up' #POLS-TO-TRADE INTO #TRADE-DESC (5)
          COMPRESS #TRADE-DESC (5) ',' INTO #TRADE-DESC (5) LEAVING NO
          COMPRESS #TRADE-DESC (5) 'Incr to $' INTO #TRADE-DESC (5)
*
          COMPRESS ' - Trade-Up all' #POLS-TO-TRADE 'policies'
            INTO #TRADE-DESC-2 (5)
          COMPRESS #TRADE-DESC-2 (5) ','
            INTO #TRADE-DESC-2 (5) LEAVING NO
          COMPRESS #TRADE-DESC-2 (5) 'Increase to $'
            INTO #TRADE-DESC-2 (5)
        END-IF
      END-IF
      MOVE EDITED #NEW-FACE-AMT (2) (EM=ZZZ,ZZZ) TO #AMT-10
      COMPRESS #TRADE-DESC (5) #AMT-10
        INTO #TRADE-DESC (5) LEAVING NO
      COMPRESS #TRADE-DESC-2 (5) #AMT-10
        INTO #TRADE-DESC-2 (5) LEAVING NO
    NONE IGNORE
  END-DECIDE
*
  PERFORM PROCESS-PROJ
END-FOR
*
IF (((#TRA-DB (3, 1) - #TRA-DB (1, 1)) LT 500)  /*  curr db growth
    AND (#DO-PROJS))    /* let under $500 cases pass for Keith
    OR ((#TRA-DB (3, 2) - #TRA-DB (1, 2)) LT 2000) /*  life expctncy growth
  IF *DEVICE = 'BATCH'
    MOVE TRUE TO #BYPASS-PRT
    ADD 1 TO #NUM-LOW-GROWTH
    MOVE '** Do not mail Not enough growth **' TO #TEXT
    PERFORM WRITE-BYPASSED-FILE
    ESCAPE ROUTINE
  ELSE
    MOVE '** Do not mail Not enough growth **' TO #TEXT
  END-IF
END-IF
*
IF (((#TRA-DB (2, 1) NE 0 AND #TRA-DB (2,1)-#CURR-DB-SMALLEST LT 10000)
    OR (#TRA-DB (3, 1) NE 0 AND #TRA-DB (3,1) LT 10000))
    AND #TEXT = ' ')
  IF *DEVICE = 'BATCH'
    MOVE TRUE TO #BYPASS-PRT
    ADD 1 TO #NUM-LT-MIN-FACE
    MOVE '** Do not mail - Face amount under $10,000 **' TO #TEXT
    PERFORM WRITE-BYPASSED-FILE
    ESCAPE ROUTINE
  ELSE
    MOVE '** Do not mail - Face amount under $10,000 **' TO #TEXT
  END-IF
END-IF
*
IF ((#TRA-DB (2, 1) - #TRA-DB (1, 1)) LT 0)  /*  curr db growth
    OR ((#TRA-DB (2, 2) - #TRA-DB (1, 2)) LT 0) /*  life expctncy growth
  IF *DEVICE = 'BATCH'
      OR #SEL-ALL = ' '
      OR #POLS-TO-TRADE = 1
    IGNORE
  ELSE
    COMPRESS #TEXT
      '** Keep smallest CSV option not beneficial **' INTO #TEXT
  END-IF
END-IF
*
IF   (#TRA-DB (4, 1) = 0)
    AND (#TRA-DB (5, 1) = 0)
  RESET #INCR-LABL
END-IF
*
MOVE 'VP' TO #CGA-SCR-COMMAND
*
RESET #I2
*
ADD 1 TO #I2
MOVE #TRA-AGE (1) TO #SCR-TRA-DB-AGE-1 (#I2)
MOVE #TRA-AGE (2) TO #SCR-TRA-DB-AGE-2 (#I2)
*
ADD 1 TO #I2
COMPRESS 'Value-Added Whole Life Options Pay to age  Premium  ****'
  'Death Benefit  ****' INTO #SCR-LINE (#I2)
*
ADD 1 TO #I2
MOVE #CURR-LABL TO #SCR-LINE (#I2)
MOVE (AD=I) TO #SCR-LINE-CV (#I2)
*
RESET #SCR-OPT-X (*) #SCR-X
FOR #I1 1 TO 2
  IF #TRADE-DESC (#I1) NE ' '
    ADD 1 TO #I2
    MOVE #TRADE-DESC (#I1) TO #SCR-TRADE-DESC (#I2)
    MOVE #TRADE-DESC-2 (#I1) TO #FILE-TRADE-DESC (#I2)
    MOVE #PAY-TO-AGE  (#I1) TO #SCR-PAY-TO-AGE  (#I2)
    MOVE EDITED #TRA-PREM (#I1) (EM=ZZ,ZZ9.99) TO #SCR-TRA-PREM (#I2)
    MOVE EDITED #TRA-DB(#I1, 1) (EM=Z,ZZZ,ZZ9) TO #SCR-TRA-DB-1 (#I2)
    MOVE EDITED #TRA-DB(#I1, 2) (EM=Z,ZZZ,ZZ9) TO #SCR-TRA-DB-2 (#I2)
    ADD 1 TO #SCR-X
    MOVE #I2 TO #SCR-OPT-X (#SCR-X)
  ELSE
    ADD 1 TO #SCR-X  /* to make file have blenk 2nd slops
    ADD 1 TO #I2     /* to show blank line on screen
  END-IF
END-FOR
*
ADD 2 TO #I2
MOVE #INCR-LABL TO #SCR-LINE (#I2)
MOVE (AD=I) TO #SCR-LINE-CV (#I2)
*
FOR #I1 3 TO 5   /* was 6
  IF #TRADE-DESC (#I1) NE ' '
    ADD 1 TO #I2
    MOVE #TRADE-DESC (#I1) TO #SCR-TRADE-DESC (#I2)
    MOVE #TRADE-DESC-2 (#I1) TO #FILE-TRADE-DESC (#I2)
    MOVE #PAY-TO-AGE  (#I1) TO #SCR-PAY-TO-AGE (#I2)
    MOVE EDITED #TRA-PREM (#I1) (EM=ZZ,ZZ9.99) TO #SCR-TRA-PREM (#I2)
    MOVE EDITED #TRA-DB(#I1, 1) (EM=Z,ZZZ,ZZ9) TO #SCR-TRA-DB-1 (#I2)
    MOVE EDITED #TRA-DB(#I1, 2) (EM=Z,ZZZ,ZZ9) TO #SCR-TRA-DB-2 (#I2)
    ADD 1 TO #SCR-X
    MOVE #I2 TO #SCR-OPT-X (#SCR-X)
  END-IF
END-FOR
*
MOVE #PR-V.ID-NUMBER TO #CGA-SCR-ID
* MOVE #I1 TO #CONTACT-SEG  /* GET OWNER OF THIS POLICY
RESET #CONTACT-SEG  /* Send to Insured address
CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD
*
IF #UNDEL-ADDR
    AND *DEVICE = 'BATCH'
  MOVE TRUE TO #BYPASS-PRT
  ADD 1 TO #NUM-UNDELIVERABLE
  MOVE '** Undeliverable Address **' TO #TEXT
  PERFORM WRITE-BYPASSED-FILE
  ESCAPE ROUTINE
END-IF
*
MOVE #FULL-RANK TO #CASE-CONV
* PERFORM LOWER-UPPER
* MOVE #CASE-CONV TO #FULL-RANK
MOVE #LAST-NAME TO #CASE-CONV
PERFORM LOWER-UPPER
COMPRESS #FULL-RANK #CASE-CONV INTO #DEAR-NAME
*                                                 NG1   Start
* MOVE 'S' TO #SPLIT
* RESET #STREET #STREET-2 #CITY #STATE
* CALLNAT 'GCTSTSXX'  /* split city/state
*  #SPLIT
*  ST-BAT-V.ADDRESS-1
*  ST-BAT-V.ADDRESS-2
*  ST-BAT-V.ADDRESS-3
*  #STREET
*  #STREET-2
*  #CITY
*  #STATE
*  #ERR-MSG
* MOVE EDITED ST-BAT-V.ZIP-CODE (EM=99999-9999) TO #ZIP-10
*
RESET #PDA-ADDRESS
MOVE ST-BAT-V.MEMBER-CONTACT-ID TO #ADD-CONTACT-ID
MOVE 'P' TO #ADD-TYPE
CALLNAT 'ADDN0001' #PDA-ADDRESS
#ZIP-10 := DISPLAY-ZIP (< #ADD-ZIP-CODE >)
#STREET-L := #ADD-LINE-1
#I5 := *LENGTH (#STREET-L)
IF #I5 > 25
  MOVE SUBSTR(#STREET-L,1,25) TO #STREET
  #I5 := #I5 - 25
  IF #I5 > 25 #I5 := 25 END-IF
  MOVE SUBSTR ( #STREET-L,26,#I5) TO #STREET-2
ELSE
  RESET #STREET-2
  #STREET := #STREET-L
END-IF
*                                                NG1    End
IF #TOT-P-I LE 0
  RESET #TOT-P-I
END-IF
*
MOVE EDITED #TOT-P-I (EM=ZZ,ZZ9.99) TO #AMT-10
*
IF *DEVICE = 'BATCH'
  WRITE (6) NOTITLE USING FORM 'C2V52FVP'
  ADD 1 TO #CNT-2
  DISPLAY (2) #CNT-2  (EM=ZZZ9)
    'CN'       #PR-V.ID-NUMBER
    'Name'     NAME  (EM=XXXXXXXXXXXXXXXX)
    'CUR/AGE' #CURR-AGE
    'PAY/TO/AGE' #TRA-PAY-TO-AGE
    'Curr/CSV' #TOT-CURR-CV    (EM=ZZZZ,ZZZ)
    'Curr/DB'  #TOT-CURR-DB    (EM=ZZZZ,ZZZ)
    'T-U/w-o 1' #TRA-DB (2, 1) (EM=ZZZZ,ZZZ)
    'T-U/ALL'   #TRA-DB (3, 1) (EM=ZZZZ,ZZZ)
    'Face 1'    #NEW-FACE-AMT (1) (EM=ZZZ,ZZZ)
    'FC-1 DB'   #TRA-DB (4, 1) (EM=ZZZZ,ZZZ)
    'Face 2'    #NEW-FACE-AMT (2) (EM=ZZZ,ZZZ)
    'FC-1 DB'   #TRA-DB (5, 1) (EM=ZZZZ,ZZZ)
*
  IF #TOT-P-I NE 0
    WRITE (2) '     tot-prin-int =' #TOT-P-I  #TOT-INT #TOT-PRIN
  END-IF
*
  COMPRESS '$' #AMT-10 INTO #AMT-10 LEAVING NO
  COMPRESS
    #PR-V.ID-NUMBER
    #TAB #FORMATED-NAME
    #TAB #STREET
    #TAB #STREET-2
    #TAB #ADD-CITY
    #TAB #ADD-STATE
    #TAB #ZIP-10
    #TAB #DEAR-NAME
    #TAB #AMT-10
    #TAB #SMOKER-FLAG-X
    #TAB #CURR-LABL-X
    #TAB #TRA-AGE (1)
    #TAB #TRA-AGE (2)
    INTO #REC-OVERFLOW LEAVING NO
*
  PERFORM CHECK-OVER-125
*
  FOR #SCR-X 1 TO 5
    IF #SCR-OPT-X (#SCR-X) = 0
      COMPRESS #REC-OVERFLOW
        #TAB #TAB #TAB #TAB #TAB   /* fill 5 slots with nothing
        INTO #REC-OVERFLOW LEAVING NO
    ELSE
      MOVE #SCR-OPT-X (#SCR-X) TO #I4
*
      MOVE LEFT #SCR-TRA-PREM (#I4) TO #SCR-TRA-PREM (#I4)
      COMPRESS '$' #SCR-TRA-PREM (#I4) INTO #SCR-TRA-PREM (#I4)
        LEAVING NO
      MOVE LEFT #SCR-TRA-DB-1 (#I4) TO #SCR-TRA-DB-1 (#I4)
      COMPRESS '$' #SCR-TRA-DB-1 (#I4) INTO #SCR-TRA-DB-1 (#I4)
        LEAVING NO
      MOVE LEFT #SCR-TRA-DB-2 (#I4) TO #SCR-TRA-DB-2 (#I4)
      COMPRESS '$' #SCR-TRA-DB-2 (#I4) INTO #SCR-TRA-DB-2 (#I4)
        LEAVING NO
      COMPRESS #REC-OVERFLOW
        #TAB #FILE-TRADE-DESC (#I4)
        #TAB #SCR-PAY-TO-AGE (#I4)
        #TAB #SCR-TRA-PREM   (#I4)
        #TAB #SCR-TRA-DB-1   (#I4)
        #TAB #SCR-TRA-DB-2   (#I4)
        INTO #REC-OVERFLOW LEAVING NO
    END-IF
*
    PERFORM CHECK-OVER-125   /*
  END-FOR
*
  PERFORM BUILD-FIXED-FILE   /* to get last chunk
  WRITE WORK 2 #EXTRACT-625
  RESET #EXT-125-1
  RESET #EXT-125-2
  RESET #EXT-125-3
  RESET #EXT-125-4
  RESET #EXT-125-5
*
  GET ST-TU-V #CGA-ISN
  MOVE *DATN TO ST-TU-V.TRAD-UP-SENT-DT
  UPDATE (1371)
  END TRANSACTION
*
ELSE
  INPUT TEXT #TEXT USING MAP 'C2V52MVP'
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE PROCESS-PROJ    /* beginning of c2v12cvp
* * * * * * * * * * * * * *
*
FORMAT LS=133
*
IF #PROCESS-X = 1  /* doing current policies
  GET #PR-V #CGA-ISN
  FOR #I1 1 TO 9
    IF STATUS (#I1) NE 'D'
      ESCAPE TOP
    END-IF
*
    IF ST-V.MTD-ACV-PREM-ADJ (#I1) NE 9999999.99
      ADD ST-V.MTD-ACV-PREM-ADJ (#I1) TO #PR-V.ACC-CASH-VALUE (#I1)
      ADD ST-V.MTD-ACV-PREM-ADJ (#I1) TO #PR-V.CASH-VALUE (#I1)
    END-IF
*
    IF ST-V.MTD-ACV-INT-ADJ (#I1) NE 99999.99
      ADD ST-V.MTD-ACV-INT-ADJ (#I1) TO #PR-V.ACC-CASH-VALUE (#I1)
      ADD ST-V.MTD-ACV-INT-ADJ (#I1) TO #PR-V.CASH-VALUE (#I1)
    END-IF
*
    IF ST-V.MTD-ACV-COI-ADJ (#I1) NE 99999.99
      SUBTRACT ST-V.MTD-ACV-COI-ADJ(#I1) FROM #PR-V.ACC-CASH-VALUE (#I1)
      SUBTRACT ST-V.MTD-ACV-COI-ADJ(#I1) FROM #PR-V.CASH-VALUE (#I1)
    END-IF
*
    IF   (#PR-V.ISSUE-DATE (#I1) GT *DATN - 10000)
        AND  (ST-V.X-FIRST-PLACE-FEE (#I1) GT 400.00) /* pusp not yet paid
      MOVE ST-V.TOT-PREMIUMS-PAID (#I1) TO #PR-V.ACC-CASH-VALUE (#I1)
        #PR-V.CASH-VALUE (#I1)
    END-IF
  END-FOR
ELSE   /* doing new flex projections
  RESET STATUS (*)
  RESET LOAN-AMOUNT
  RESET LOAN-AMOUNT-2
  RESET INTEREST-RATE
  RESET ONLINE-ACTION-GN
  RESET RESTRICT-MBR-SW
  MOVE 1 TO NUMBER-MEMBERSHIPS
  MOVE 1 TO ST-V.C*ACTIVE-SEGMENTS
*
  MOVE 1 TO #IDX
  MOVE *DATN  TO ISSUE-DATE (#IDX)
  MOVE 'D'    TO STATUS     (#IDX)
  MOVE #SMOKER-FLAG TO SMOKER-FLAG(#IDX)
  MOVE 'N'    TO CONVERSION-FLAG(#IDX)
  RESET          FACE-AMOUNT(#IDX)
  MOVE '1'    TO ONLINE-ACTION(#IDX)
  MOVE '22'   TO PAY-STATUS (#IDX)
  MOVE 1      TO NUM-MBRSHIPS (#IDX)
  MOVE 'OL'   TO PLAN     (#IDX)
  MOVE 'G'    TO MODE     (#IDX)
  RESET CONV-DURATION     (#IDX)
  RESET LAST-DURATION     (#IDX)
  RESET CASH-VALUE        (#IDX)
  RESET NXT-MON-CASH-VALUE (#IDX)
  RESET LAST-ANN-CASH-VALUE (#IDX)
  RESET DEATH-BENEFIT     (#IDX)
  RESET NXT-MON-DEATH-BENEFIT (#IDX)
  RESET TOT-PREMIUMS-PAID (#IDX)
* RESET MONTH-ALLOC-AMT   (#IDX)
  RESET ACC-CASH-VALUE    (#IDX)
  RESET BEG-CASH-VALUE    (#IDX)
  RESET MIN-CASH-VALUE    (#IDX)
  RESET NXT-YR-MIN-CASH-VALUE (#IDX)
  RESET PREM-DEFICIENCY (#IDX)
  RESET NET-PR-RATIO  (#IDX)
  RESET MONTH-ALLOC-AMT   (#IDX)
  MOVE 1 TO NUM-MBRSHIPS  (#IDX)
*
  RESET #FAC-AMT #PREM-RATING #PREM-AGE #LUMP-PMT #FLEX-POLICY #PAYS-DUES
*
  MOVE '*' TO #CGA-SCR-COMMAND
*
  DECIDE ON FIRST VALUE #PROCESS-X
    VALUE 2  COMPUTE #ANN-PREM =
        #CURR-TOT-ANN-PREM - #A-PREM-SMALLEST
      COMPUTE #EXCH-1035 = #CURR-TOT-CV - #CURR-CV-SMALLEST
      RESET #FAC-AMT
      IF (#TRA-YRS-LEFT-SMALLEST = 0) OR (#ANN-PREM = 0)
        RESET #NUM-YEARS #ANN-PREM
      ELSE
        MOVE #TRA-YRS-LEFT-SMALLEST TO #NUM-YEARS
      END-IF
    VALUE 3  MOVE #TOT-CURR-A-PREM TO #ANN-PREM
      MOVE #TOT-CURR-CV TO #EXCH-1035
      RESET #FAC-AMT
      IF (#TRA-YRS-LEFT = 0) OR (#ANN-PREM = 0)
        RESET #NUM-YEARS #ANN-PREM
      ELSE
        MOVE #TRA-YRS-LEFT TO #NUM-YEARS
      END-IF
    VALUE 4  RESET #ANN-PREM
      MOVE #TOT-CURR-CV TO #EXCH-1035
      MOVE #NEW-FACE-AMT (1) TO #FAC-AMT
      MOVE 99 TO #NUM-YEARS
    VALUE 5  RESET #ANN-PREM
      MOVE #TOT-CURR-CV TO #EXCH-1035
      MOVE #NEW-FACE-AMT (2) TO #FAC-AMT
      MOVE 99 TO #NUM-YEARS
    NONE IGNORE
  END-DECIDE
*
  IF (*DEVICE = 'BATCH')   /* temporary
      AND (#PROCESS-X GT 3)
      AND (NOT #DO-PROJS)
    ESCAPE ROUTINE
  END-IF
*
  IF #FAC-AMT = 0
    ADD 1 TO #VP-FLX-CALC-FACE
*   WRITE ID-NUMBER 'Calc Face Amt - ann prem =' #ANN-PREM
  ELSE
    ADD 1 TO #VP-FLX-CALC-PREM
  END-IF
*
  MOVE 'TRA' TO #SUFFIX
*
  RESET #SEX                                        /* TT2
  #SEX := GET-GENDER(<ST-V.MEMBER-CONTACT-ID>)      /* TT2
*
  CALLNAT 'C1602SCO'
    #CGA-SCR-COMMAND #CGA-SCR-ID #SUFFIX
    #CGA-ORIG-COMMAND #CGA-CLERK
    #PAYS-DUES NAME #DATE-OF-BIRTH                /* TT2
    SMOKER-FLAG (#IDX) #SEX #LUMP-PMT
    #EXCH-1035
    #FAC-AMT /* CHANGED TO P7.2
    #NUM-YEARS
    #ANN-PREM
    #DUES-PMT
    #PREM-AGE
    #FLEX-POLICY #PREM-RATING
*
*
  IF #NUM-YEARS = 0
    IF #LUMP-PMT NE 0
      IF *DEVICE NE 'BATCH'
        WRITE 'For option' #PROCESS-X 'Mbr owes additional ' #LUMP-PMT
      END-IF
    END-IF
*
    MOVE 'SPF' TO PLAN (#IDX)
    MOVE '47'  TO PAY-STATUS (#IDX)
    RESET ANNUAL-PREM (#IDX)
    COMPUTE CASH-VALUE (#IDX) = #EXCH-1035 + #ANN-PREM - #DUES-PMT
      + #LUMP-PMT
  ELSE
*   DISPLAY #PROCESS-X #ANN-PREM
    IF (#PROCESS-X = 4 OR = 5 OR = 6) AND (#ANN-PREM = 0)
      RESET #TRADE-DESC (#PROCESS-X) #PAY-TO-AGE (#PROCESS-X)
*     IF *DEVICE NE 'BATCH'
      WRITE #PR-V.ID-NUMBER 'For option' #PROCESS-X
        '1035 exceeds amt needed for Face'
        'Amount of' #NEW-FACE-AMT (#PROCESS-X - 3)
*     END-IF
      ESCAPE TOP
    END-IF
*
    IF #ANN-PREM GT 99999.99
      WRITE #PR-V.ID-NUMBER 'Ann-Prem of' #ANN-PREM 'exceeds 99999.99'
        'face amt=' #FAC-AMT #NUM-YEARS
      ESCAPE ROUTINE
    END-IF
*
    MOVE #ANN-PREM TO ANNUAL-PREM (#IDX)
    COMPUTE CASH-VALUE (#IDX) = #LUMP-PMT + #EXCH-1035
    COMPRESS #NUM-YEARS 'F' INTO PLAN (#IDX) LEAVING NO
  END-IF
*
  MOVE #PREM-RATING      TO PREM-RATING    (#IDX)
  MOVE #FAC-AMT          TO DEATH-BENEFIT (#IDX)
  MOVE CASH-VALUE (#IDX) TO ACC-CASH-VALUE (#IDX)
  MOVE CASH-VALUE (#IDX) TO TOT-PREMIUMS-PAID (#IDX)
  MOVE #FAC-AMT          TO FACE-AMOUNT       (#IDX)
  MOVE #PREM-AGE-A       TO ISSUE-AGE         (#IDX)
  RESET X-LOAN-AMOUNT (#IDX)  X-LOAN-AMOUNT-2 (#IDX) /* added 8/12/2002
  RESET LAST-ANN-CASH-VALUE (#IDX)
  RESET MIN-CASH-VALUE (#IDX) NXT-YR-MIN-CASH-VALUE (#IDX)
*
  MOVE 1 TO #IDX
  PERFORM SETUP-PROJECTION
  ESCAPE ROUTINE
END-IF
*
FOR #I1 1 TO 9
  IF #SEG-TO-PROJ (#I1) NE ' '
    MOVE #I1 TO #IDX
    PERFORM SETUP-PROJECTION
  END-IF
END-FOR
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE SETUP-PROJECTION
* * * * * * * * * * * * * * * * * *
*
* WRITE 'setup-proj' #PROCESS-X
IF  (*DEVICE = 'BATCH')
    AND NOT #DO-PROJS   /*  no projs if keith run
  MOVE #TOT-CURR-DB TO #TRA-DB (1, 1)
  IF #PROCESS-X = 1
    MOVE #TOT-CURR-DB TO #TRA-DB (1, 1)
*  keep *  WRITE 'batch option 1=' #TRA-DB (1, 1)
  ELSE
    IF #PROCESS-X = 2
      COMPUTE #TRA-DB(2, 1) = #FAC-AMT + #CURR-DB-SMALLEST
*  keep *   WRITE 'batch option 2=' #TRA-DB (2, 1)
    ELSE
      IF #PROCESS-X = 3
        MOVE #FAC-AMT TO #TRA-DB (3, 1)
        MOVE 9999999.99 TO #TRA-DB (3 ,2)  /* to show growth
*  keep *     WRITE 'batch option 3=' #TRA-DB (3, 1)
      END-IF
    END-IF
  END-IF
  ESCAPE ROUTINE
END-IF
*
RESET #L-MISC-INPUT #L-OUTPUT-INFO
RESET #TRA-X #L-ISS-DT (*) #L-OPT-OUT-ADJ
MOVE *DATN TO #YYYYMMDD
COMPRESS #MM-A #DD-A #YYYY-A
  INTO #PARM-DATE WITH '/'
MOVE #IDX                   TO #L-SEGNO
MOVE ST-V.C*ACTIVE-SEGMENTS TO #L-ACTIVE-SEG
MOVE PAID-TO-DATE (#IDX)    TO #L-PAID-THRU
*
FOR #I4 1 TO ST-V.C*ACTIVE-SEGMENTS
  IF STATUS (#I4) = 'D'
    MOVE ISSUE-DATE (#I4) TO #L-ISS-DT (#I4)
  END-IF
END-FOR
*
MOVE 'N'         TO #L-MONTHLY-SW
MOVE #TODAY-YYYY TO #L-MNTHLY-START-YR
COMPRESS 'PJ' #LIF-EXP-A INTO #L-REIN-CODE LEAVING NO
MOVE 99          TO #L-NUM-PROJ-YRS
MOVE 'N'         TO #L-DISPLAY-CALCS
MOVE 'N'         TO #L-SHOW-LOAN-REPAID
COMPUTE #L-GROWTH-RATE = #GROWTH-RATE * 1000
*
IF   (PROCESS-IND = 'O')  /* opted-out of sharing data
    AND (NOT INTRO-FLAG = 'S' OR = 'K' OR = 'G')
  RESET #COI-ADJ (*) #NXT-X #NXT-PRM-ADJ
  MOVE *DATN TO #YYYYMMDD
  MOVE #YYYYMM TO #PROCESS-DATE
*
  CALLNAT 'GOPTOSXX'
    #PR-V.ID-NUMBER
    #PROCESS-DATE
    #PR-V.STATUS          (1:9)
    #PR-V.PAY-STATUS      (1:9)
    #PR-V.ISSUE-DATE      (1:9)
    #PR-V.MONTH-ALLOC-AMT (1:9)
    #PR-V.FACE-AMOUNT     (1:9)
    #PR-V.NUM-MBRSHIPS    (1:9)
    ST-V.EXPIRY-DAY       (1:9)
    #COI-ADJ              (1:9)
    #NXT-X
    #NXT-PRM-ADJ
    #OO-EFF-DATE
    #DEGF-EFF-DATE
*
  IF #IDX = #NXT-X
    MOVE #NXT-PRM-ADJ TO #L-OPT-OUT-ADJ
  ELSE
    MOVE #COI-ADJ (#IDX) TO #L-OPT-OUT-ADJ
  END-IF
END-IF
*
MOVE #PREM-RATING TO #L-PREM-RATING
*
RESET #L-NUM-DTLS
*
* * * *  *  *  *  *
IF  INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
  RESET LOAN-AMOUNT
END-IF
*
IF *DEVICE = 'BATCH'
**                        SAG RH1 10282005 AB START
** CALL 'AOCX2V5B' ID-NUMBER
**   #L-ACTIVE-SEG
**   #L-NUM-DTLS
  CALLNAT 'AOCX2V5B'  #PR-V  #L-MISC-INPUT  #L-OUTPUT-INFO
**                        SAG RH1 10282005 AB END
ELSE
**                        SAG RH1 10282005 AB START
** CALL 'AOCX2V5A' ID-NUMBER
**   #L-ACTIVE-SEG
**   #L-NUM-DTLS
  CALLNAT 'AOCX2V5A'  #PR-V  #L-MISC-INPUT  #L-OUTPUT-INFO
    #SEX
**                        SAG RH1 10282005 AB END
END-IF
ADD 1 TO #NUM-PROJS
*
IF   (#PROCESS-X GT 1)  /* don'y ask me why
    AND (#L-PTY-MIN-DB (1) NE 0)
  RESET #L-PTY-MIN-DB (1)
END-IF
*
MOVE #L-PTY-MEM-AGE (*) TO #TRA-STORE-MEM-AGE (*)
MOVE #L-PTY-PR-CSV  (*) TO #TRA-STORE-CSV     (*)
MOVE #L-PTY-PR-DB   (*) TO #TRA-STORE-DB      (*)
*
PERFORM CALC-PREMS-PAID
*
RESET #USE-X-CALCS
IF   (#PR-V.ISSUE-DATE (#IDX) GE 19970101)
    AND (#PR-V.MONTH-ALLOC-AMT (#IDX) NE 999.99)
  MOVE TRUE TO #USE-X-CALCS
END-IF
*
IF PLAN (#IDX) = 'OL' or = 'GPL' or = 'GP2'          /* TT1          /* DW3
  IF #USE-X-CALCS
    COMPUTE #MAX-YRS = (DOB-YYYY + 100)
      - #PR-V.ISSUE-DATE-YYYY (#IDX)
  ELSE
    COMPUTE #MAX-YRS = (DOB-YYYY + 96)
      - #PR-V.ISSUE-DATE-YYYY (#IDX)
  END-IF
ELSE
  RESET #MAX-YRS
  IF PLAN (#IDX) NE 'SPF'
    IF PLAN-2A (#IDX) = 'P' OR = 'F'
      MOVE PLAN-1A (#IDX) TO #MAX-YRS-A1
    ELSE
      MOVE PLAN-2 (#IDX) TO #MAX-YRS-A2
    END-IF
  END-IF
END-IF
*
MOVE 1 TO #DTL-IDX
REPEAT UNTIL (#DTL-IDX GT #L-NUM-DTLS)
    OR (#DTL-IDX GT 27)
  MOVE *DATN TO #YYYYMMDD
  IF  (#L-PTY-YEAR (#DTL-IDX) = 0)
      OR (#L-PTY-YEAR (#DTL-IDX) LT #YYYY)
    IF #USE-X-CALCS  /* CALC CURR AVL-TDIV
      COMPUTE #L-PTY-MIN-DB (#DTL-IDX) = BEG-CASH-VALUE (#IDX)
        - MONTH-ALLOC-AMT (#IDX)
      IF #L-PTY-MIN-DB (#DTL-IDX) LT 0
        RESET #L-PTY-MIN-DB (#DTL-IDX)
      END-IF
*
      IF #PR-V.ID-NUMBER = 124156
          AND #PR-V.ISSUE-DATE (#IDX) = 20040413
          AND #L-PTY-PR-DB (#DTL-IDX) = 226000
        MOVE 10150.58 TO #L-PTY-MIN-DB (#DTL-IDX)
      END-IF
*
      ADD #L-PTY-MIN-DB (#DTL-IDX) TO #L-PTY-PR-DB (#DTL-IDX)
    END-IF
*
    COMPUTE #W-AGE = *DATN - #DATE-OF-BIRTH                      /* TT2
    DIVIDE 10000 INTO #W-AGE
*
    MOVE EDITED #W-AGE (EM=ZZZ) TO #MEM-AGE
  ELSE
    IF #USE-X-CALCS
      IF #PR-V.ID-NUMBER = 124156
          AND #PR-V.ISSUE-DATE (#IDX) = 20040413
          AND #L-PTY-PR-DB (#DTL-IDX) = 226000
        MOVE 10150.58 TO #L-PTY-MIN-DB (#DTL-IDX)
      END-IF
*
      ADD #L-PTY-MIN-DB (#DTL-IDX) TO #L-PTY-PR-DB (#DTL-IDX)
      ADD #L-PTY-MIN-DB (#DTL-IDX) TO #TRA-STORE-DB (#DTL-IDX)
    END-IF
*
    IF   (#SEX = 'F')                                            /* TT2
        AND (NOT #USE-X-CALCS)
      ADD 3 TO #L-PTY-MEM-AGE (#DTL-IDX)
    END-IF
    MOVE RIGHT #L-PTY-MEM-AGE (#DTL-IDX) TO #MEM-AGE
  END-IF
*
  IF PAY-STATUS (#IDX) = '47' OR = '48' OR = '45'
    IF   (PAY-STATUS (#IDX) = '47')
        AND ((ONLINE-ACTION-GN    = '2')
        OR (ONLINE-ACTION (#IDX) = '1'))
      IF #L-MNTHLY-START-YR NE #CURR-YYYY
        MOVE TOT-PREMIUMS-PAID (#IDX) TO #DUES-PAID
      ELSE
        MOVE #L-PTY-PR-CSV (1) TO #DUES-PAID
      END-IF
    ELSE
      IF PAY-STATUS (#IDX) = '45'
        MOVE #L-PAID-THRU-YYYY TO #YYYY
        MOVE #L-PAID-THRU-MM TO #MM
*
        COMPUTE #NUM-MONTHS =
          (((#YYYY - ISSUE-DATE-YYYY (#IDX)) * 12)
          + (#MM - ISSUE-DATE-MM (#IDX)))
        COMPUTE #DUES-PAID = #NUM-MONTHS * (ANNUAL-PREM (#IDX) / 12)
          + TOT-PREMIUMS-PAID (#IDX)
      ELSE
        MOVE TOT-PREMIUMS-PAID (#IDX) TO #DUES-PAID
      END-IF
    END-IF
  ELSE
    IF #L-PTY-POL-AGE (#DTL-IDX) GT #MAX-YRS
      COMPUTE #DUES-PAID = ANNUAL-PREM (#IDX) * #MAX-YRS
        + TOT-PREMIUMS-PAID (#IDX)
    ELSE
      COMPUTE #DUES-PAID =
        ANNUAL-PREM (#IDX) * #L-PTY-POL-AGE (#DTL-IDX)
        + TOT-PREMIUMS-PAID (#IDX)
    END-IF
  END-IF
*
  IF #PREMS-PAID GT #DUES-PAID  /* added 1/2003 by bmg to never allow
    MOVE #PREMS-PAID TO #DUES-PAID /* vp tpp be less than curr tpp
  END-IF
*
  IF    #USE-X-CALCS
      AND (#PR-V.ISSUE-AGE (#IDX) LT '71')
      AND (#PREM-RATING = ' ')
      AND (ISSUE-DATE (#IDX) LT 20030701)   /* added 5/20/2003 khb
    COMPUTE #CSV-W-O-TDIV = #L-PTY-PR-CSV (#DTL-IDX)
      - #L-PTY-MIN-DB (#DTL-IDX) /* used for tdiv
*
    IF #DUES-PD-DOLS GT #L-PTY-PR-CSV (#DTL-IDX)
      MOVE #DUES-PD-DOLS TO #L-PTY-PR-CSV (#DTL-IDX)
      MOVE #DUES-PD-DOLS TO #TRA-STORE-CSV (#DTL-IDX)
    END-IF
  END-IF
*
  IF #PR-V.CONV-DURATION (#IDX) = 999
    MOVE #L-PTY-PR-CSV (#DTL-IDX) TO #CV
    MOVE ST-V.CAP-CONV-ACV TO #CAP-CONV-ACV
*
    PERFORM CALC-CAP-CSV
    MOVE #CAP-CSV TO #L-PTY-PR-CSV (#DTL-IDX)
*
    IF #L-PTY-POL-AGE (#DTL-IDX) LE 10
      MOVE #CAP-CSV TO #TRA-STORE-CSV (#DTL-IDX)
    END-IF
  END-IF
*
  IF   (#L-PTY-PR-CSV (#DTL-IDX) LE 0)
      OR  ((#PR-V.ISSUE-DATE (#IDX) GE 19910409)
      AND NOT #USE-X-CALCS
      AND (#L-PTY-POL-AGE (#DTL-IDX) LT 2)
      AND (NOT (PAY-STATUS (#IDX) = '47' OR = '48')))
    RESET #L-PTY-PR-CSV (#DTL-IDX) /* FOR TRA
    RESET #TRA-STORE-CSV (#DTL-IDX) /* FOR TRA
  END-IF
*
  IF   (#PR-V.ISSUE-DATE (#IDX) GE 19970101)
      AND (#PR-V.MONTH-ALLOC-AMT (#IDX) NE 999.99)
      AND (LAST-ANN-CASH-VALUE (#IDX) GT
      #L-PTY-PR-DB (#DTL-IDX))
    MOVE LAST-ANN-CASH-VALUE(#IDX) TO #L-PTY-PR-DB (#DTL-IDX) /*FOR TRA
    MOVE LAST-ANN-CASH-VALUE(#IDX) TO #TRA-STORE-DB (#DTL-IDX) /*FOR TRA
  END-IF
*
  IF #PR-V.RESTRICT-MBR-SW = 'Y'
    MOVE #L-PTY-MIN-CSV (#DTL-IDX) TO #L-PTY-PR-CSV (#DTL-IDX)
  END-IF
*
  IF   (#TRA-X LT 2)
      AND ((#DTL-IDX = 1)
      OR (((#SEX = 'M') OR #USE-X-CALCS)                               /* TT2
      AND (#L-PTY-MEM-AGE (#DTL-IDX) = #LIF-EXP))
      OR ((#SEX = 'F') AND (NOT #USE-X-CALCS)                          /* TT2
      AND (#L-PTY-MEM-AGE (#DTL-IDX) = #LIF-EXP + 3)))
    ADD 1 TO #TRA-X
*
    IF #DTL-IDX NE 1        /* PAM - store future DB of smallest policy
        AND #SMALLEST-X NE 0
        AND #SMALLEST-X = #I1
      MOVE #L-PTY-PR-DB (#DTL-IDX) TO #PROJ-DB-SMALLEST
    END-IF
*
    MOVE #MEM-AGE TO #TRA-AGE (#TRA-X)
    DECIDE ON FIRST VALUE #PROCESS-X
      VALUE 1  COMPUTE #TRA-PREM (1) = #TOT-CURR-A-PREM / 12
      VALUE 2  COMPUTE #TRA-PREM (2) =
          (ANNUAL-PREM (#IDX)  + #A-PREM-SMALLEST) / 12
        IF #TRA-X = 1  /* PAM - use proj DB for future values
          ADD  #CURR-DB-SMALLEST TO #TRA-DB (#PROCESS-X, #TRA-X)
        ELSE
          ADD  #PROJ-DB-SMALLEST TO #TRA-DB (#PROCESS-X, #TRA-X)
        END-IF
      VALUE 3  COMPUTE #TRA-PREM (3) = ANNUAL-PREM (#IDX) / 12
      VALUE 4  COMPUTE #TRA-PREM (4) = ANNUAL-PREM (#IDX) / 12
      VALUE 5  COMPUTE #TRA-PREM (5) = ANNUAL-PREM (#IDX) / 12
*     VALUE 6  COMPUTE #TRA-PREM (6) = ANNUAL-PREM (#IDX) / 12
      NONE IGNORE
    END-DECIDE
*
    ADD  #L-PTY-PR-CSV (#DTL-IDX) TO #TRA-CSV (#PROCESS-X, #TRA-X)
    ADD  #L-PTY-PR-DB  (#DTL-IDX) TO #TRA-DB  (#PROCESS-X, #TRA-X)
  END-IF
*
  ADD 1 TO #DTL-IDX
END-REPEAT  /* (1721)
*
MOVE 'VP'  TO #CGA-SCR-COMMAND
*
END-SUBROUTINE  /* (1617)
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE SHOW-ERROR
* * * * * * * * * * * * * *
*
INPUT TEXT #ERR-TEXT MARK *#CGA-SCR-ID USING MAP 'G1000MXX'
FETCH 'G1000PXX'
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-AST
* * * * * * * * * * * * * *
*
IF #CGA-SCR-COMMAND NE '*'
  FETCH 'G1000PXX'
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-CAP-CSV
* * * * * * * * * * * * * * * *
*
IF PAY-STATUS (#I1) GE '40'
  MOVE #CV TO #CAP-CSV
  ESCAPE ROUTINE
END-IF
*
IF FACE-AMOUNT (#I1) GT 10000.00
  COMPUTE ROUNDED #WORK-CAP-CONV-ACV =
    ((#CV - #CAP-CONV-ACV) * (FACE-AMOUNT (#I1) - 10000))
    / FACE-AMOUNT (#I1)
  ADD #WORK-CAP-CONV-ACV TO #CAP-CONV-ACV
END-IF
*
IF ST-V.X-LOAN-AMOUNT (#I1) = 0
  MOVE ST-V.X-LOAN-DATE (#I1) TO #CAP-LOAN-END-DATE
ELSE
  RESET #CAP-LOAN-END-DATE
END-IF
*
CALLNAT 'CCAPCSVP'
  ID-NUMBER
  ISSUE-DATE (#I1)
  #CAP-LOAN-END-DATE
  #TODAY-YYYYMMDD
  #CAP-CONV-ACV
  #CV
  #CAP-CSV
  #CAP-LOAN-MONS
  #CAP-CSV-MONS
  #CAP-REMAIN-MONS
*
END-SUBROUTINE  /* (1911)
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-PREMS-PAID
* * * * * * * * * * * * * * * * *
*
RESET #PREMS-PAID
MOVE #DATE-OF-BIRTH     TO #PP-DATE-OF-BIRTH                        /* TT2
MOVE ANNUAL-PREM (#IDX)      TO #PP-ANNUAL-PREM
MOVE PAY-STATUS (#IDX)       TO #PP-PAY-STATUS
MOVE TOT-PREMIUMS-PAID (#IDX)TO #PP-TOT-PREMIUMS-PAID
MOVE PAID-TO-DATE (#IDX)     TO #PP-PAID-TO-DATE
MOVE ISSUE-DATE (#IDX)       TO #PP-ISSUE-DATE
MOVE MODE (#IDX)             TO #PP-MODE
MOVE PLAN (#IDX)             TO #PP-PLAN
MOVE COST-BASIS (#IDX)       TO #PP-COST-BASIS
MOVE MONTH-ALLOC-AMT (#IDX)  TO #PP-MONTH-ALLOC-AMT
MOVE INTRO-FLAG              TO #PP-INTRO-FLAG
MOVE X-FIRST-PLACE-FEE (#IDX)  TO #PP-FIRST-PLACE-FEE
MOVE X-BILL-ADJUST     (#IDX)  TO #PP-BADJ
*
CALLNAT 'GPRPDSCO'
  #PP-DATE-OF-BIRTH
  #PP-ANNUAL-PREM
  #PP-PAY-STATUS
  #PP-TOT-PREMIUMS-PAID
  #PP-PAID-TO-DATE
  #PP-ISSUE-DATE
  #PP-MODE
  #PP-PLAN
  #PP-COST-BASIS
  #PP-MONTH-ALLOC-AMT
  #PP-INTRO-FLAG
  #PP-FIRST-PLACE-FEE
  #PREMS-PAID
  #SUB-PREMS-PAID
  #PP-BADJ
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-OVER-125
* * * * * * * * * * * * * * * * *
*
IF #REC-OVF-2ND-125 NE ' '
  PERFORM BUILD-FIXED-FILE
  MOVE #REC-OVF-2ND-125 TO #REC-OVF-1ST-125
  RESET #REC-OVF-2ND-125
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * *
DEFINE BUILD-FIXED-FILE
* * * * * * * * * * * *
*
IF #EXT-125-1 = ' '
  MOVE #REC-OVF-1ST-125       TO #EXT-125-1
ELSE
  IF #EXT-125-2 = ' '
    MOVE #REC-OVF-1ST-125     TO #EXT-125-2
  ELSE
    IF #EXT-125-3 = ' '
      MOVE #REC-OVF-1ST-125   TO #EXT-125-3
    ELSE
      IF #EXT-125-4 = ' '
        MOVE #REC-OVF-1ST-125 TO #EXT-125-4
      ELSE
        MOVE #REC-OVF-1ST-125 TO #EXT-125-5
      END-IF
    END-IF
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * *
DEFINE LOWER-UPPER
* * * * * * * * *
*
FOR #I2 2 TO 23
  FOR #I3 1 TO 26
    IF #CASE-CONV-X (#I2) = #UPPER (#I3)
      MOVE #LOWER (#I3) TO #CASE-CONV-X (#I2)
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-FOR
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE WRITE-BYPASSED-FILE
* * * * * * * * * * * * * *
*
COMPRESS #PR-V.ID-NUMBER #TAB #TEXT INTO #EXTRACT-125
WRITE WORK 3 #EXTRACT-125
RESET #EXTRACT-125
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE ON-LINE
* * * * * * * * * * * * * *
*
IF NOT #SMOKER-FLAG = 'S' OR = 'N'
  REINPUT 'Please enter "S" or "N" for tobacco'
    MARK *#SMOKER-FLAG
END-IF
*
RESET #NO-CHANGES
IF #SEL-ALL = #HLD-SEL-ALL
    AND #SEL(1) = #HLD-SEL(1)
    AND #SEL(2) = #HLD-SEL(2)
    AND #SEL(3) = #HLD-SEL(3)
    AND #SEL(4) = #HLD-SEL(4)
    AND #SEL(5) = #HLD-SEL(5)
    AND #SEL(6) = #HLD-SEL(6)
    AND #SEL(7) = #HLD-SEL(7)
    AND #SEL(8) = #HLD-SEL(8)
    AND #SEL(9) = #HLD-SEL(9)
    AND #SMOKER-FLAG = #HLD-SMOKER-FLAG
  MOVE TRUE TO #NO-CHANGES
  RESET #TEXT
  ESCAPE ROUTINE
ELSE
  MOVE #SEL-ALL TO #HLD-SEL-ALL
  MOVE #SEL(*) TO #HLD-SEL(*)
  MOVE #SMOKER-FLAG TO #HLD-SMOKER-FLAG
  MOVE EDITED #TOT-CURR-CV (EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-CV-DISP
  MOVE EDITED #TOT-CURR-DB (EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-DB-DISP
  MOVE EDITED #TOT-CURR-A-PREM  (EM=ZZ,ZZZ.99)    TO #TOT-A-PREM-DISP
  MOVE EDITED #TOT-CURR-M-PREM  (EM=ZZ,ZZZ.99)    TO #TOT-M-PREM-DISP
  MOVE 'Enter more changes or press enter to see results ' TO #TEXT
END-IF
*
IF #SEL-ALL NE ' '
  FOR #I2 1 TO 9
    IF #SEL (#I2) NE ' '
      REINPUT 'Only 1 selection is possible'
        MARK *#SEL-ALL
    END-IF
  END-FOR
END-IF
*
RESET #TOT-CURR-DB #TOT-CURR-CV #TOT-CURR-A-PREM #POLS-SELECTED
RESET #TOT-REMAIN-PREMS
*
FOR #I2 1 TO 9
  IF  (#SEL (#I2) NE ' ')
      OR ((#SEL-ALL NE ' ') AND (#ISS-DT-DISP (#I2) NE ' '))
    ADD #CURR-DB (#I2) TO #TOT-CURR-DB
    ADD #CURR-CV (#I2) TO #TOT-CURR-CV
    ADD #PREM    (#I2) TO #TOT-CURR-A-PREM
    ADD +1 TO #POLS-SELECTED
*
    ADD #REMAIN-PREMS (#I2) TO #TOT-REMAIN-PREMS
  END-IF
END-FOR
*
PERFORM VP-FLX
PERFORM CALCULATE-NEW-FACE
*
IF #POLS-SELECTED = 0
  MOVE 'No policies selected' TO #TEXT
  MOVE (AD=P) TO #SCR-CV #SEL-CV(*)
  MOVE 'VP'   TO #CGA-SCR-COMMAND
  INPUT TEXT #TEXT MARK *#SEL-ALL USING MAP 'C2V50MVP'
  PERFORM CHECK-AST
ELSE
  MOVE #POLS-SELECTED TO #POLS-TO-TRADE
  IF #POLS-TO-TRADE = 1
    MOVE TRUE TO #ONLY-1-WL
  END-IF
*
  PERFORM CALCULATE-YEARS-TO-PAY
END-IF
*
MOVE EDITED #TOT-CURR-CV (EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-CV-DISP
MOVE EDITED #TOT-CURR-DB (EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-DB-DISP
MOVE EDITED #TOT-CURR-A-PREM  (EM=ZZ,ZZZ.99)    TO #TOT-A-PREM-DISP
MOVE EDITED #TOT-CURR-M-PREM  (EM=ZZ,ZZZ.99)    TO #TOT-M-PREM-DISP
*
COMPUTE #I1 = #CURR-AGE + 1 /* GET TABLE ENTRY #
IF #SMOKER-FLAG = 'S'
  COMPUTE #LIF-EXP = #CURR-AGE + #LIF-EXP-SMK (#I1)
  MOVE 'Yes' TO #SMOKER-FLAG-X
ELSE
  COMPUTE #LIF-EXP = #CURR-AGE + #LIF-EXP-NON-SMK (#I1)
  MOVE 'No' TO #SMOKER-FLAG-X
END-IF
*
END-SUBROUTINE
* * * * * * * * * * * * * *
DEFINE SUBROUTINE VP-FLX
* * * * * * * * * * * * * *
*
IF #DESIRED-MON-PREM NE #TOT-CURR-M-PREM
  COMPUTE #TOT-CURR-A-PREM = #DESIRED-MON-PREM * 12
  MOVE #DESIRED-MON-PREM TO #TOT-CURR-M-PREM
END-IF
*
MOVE #TOT-CURR-A-PREM  TO #CURR-TOT-ANN-PREM
MOVE #TOT-CURR-CV TO #CURR-TOT-CV
*
MOVE #TOT-CURR-A-PREM TO #ANN-PREM
MOVE #TOT-CURR-CV TO #EXCH-1035
*
RESET #FAC-AMT
IF (#TRA-YRS-LEFT = 0) OR (#ANN-PREM = 0)
  RESET #NUM-YEARS #ANN-PREM
ELSE
  MOVE #TRA-YRS-LEFT TO #NUM-YEARS
END-IF
MOVE 'TRA' TO #SUFFIX
*
CALLNAT 'C1602SCO'
  #CGA-SCR-COMMAND #CGA-SCR-ID #SUFFIX
  #CGA-ORIG-COMMAND #CGA-CLERK
  #PAYS-DUES NAME #DATE-OF-BIRTH               /* TT2
  #SMOKER-FLAG #SEX #LUMP-PMT                  /* TT2
  #EXCH-1035
  #FAC-AMT /* CHANGED TO P7.2
  #NUM-YEARS #ANN-PREM #DUES-PMT #PREM-AGE
  #FLEX-POLICY #PREM-RATING
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALCULATE-NEW-FACE
* * * * * * * * * * * * * * * * * * * *
*
FOR #I1 1 TO 14
  IF #FAC-AMT LE #FACE-BREAK (#I1 + 1)
    COMPUTE #NEW-FACE-AMT (1) = #NEW-FACE (#I1, 1) * 1000
    COMPUTE #NEW-FACE-AMT (2) = #NEW-FACE (#I1, 2) * 1000
*
    FOR #I3 1 TO 2
      IF (#NEW-FACE-AMT (#I3) + #TOT-CURR-FACE-TERM) GT #MAX-FACE-TOTAL
        RESET #NEW-FACE-AMT (#I3)
      END-IF
    END-FOR
*
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE LOAD-KEEP1-LABEL
* * * * * * * * * * * * * * * * * * * *
*
MOVE 'Keep 1 policy:' TO #KEEP1-LABEL
COMPUTE #KEEP1-WRK-AMT2 = #TOT-CURR-CV - #CURR-CV (#SMALLEST-X)
MOVE EDITED #KEEP1-WRK-AMT2(EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-CV-SM-DISP
COMPUTE #KEEP1-WRK-AMT1 = #TOT-CURR-DB - #CURR-DB (#SMALLEST-X)
MOVE EDITED #KEEP1-WRK-AMT1(EM=Z,ZZZ,ZZZ.99) TO #TOT-CURR-DB-SM-DISP
COMPUTE #KEEP1-WRK-AMT1 = #TOT-CURR-A-PREM - #PREM (#SMALLEST-X)
MOVE EDITED #KEEP1-WRK-AMT1 (EM=ZZ,ZZZ.99) TO #TOT-A-PREM-SM-DISP
COMPUTE #KEEP1-WRK-AMT1 = #KEEP1-WRK-AMT1 / 12
MOVE EDITED #KEEP1-WRK-AMT1 (EM=ZZ,ZZZ.99) TO #TOT-M-PREM-SM-DISP
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALCULATE-YEARS-TO-PAY
* * * * * * * * * * * * * * * * * * * *
*
RESET #TRA-MONS-LEFT #TRA-YRS-LEFT #TRA-PAY-TO-AGE
COMPUTE #TOT-CURR-M-PREM = #TOT-CURR-A-PREM / 12
*
COMPUTE #TRA-MONS-LEFT = #TOT-REMAIN-PREMS / #TOT-CURR-M-PREM
COMPUTE #TRA-YRS-LEFT = #TRA-MONS-LEFT / 12
*
IF (#CURR-AGE + #TRA-YRS-LEFT) GT 100
  COMPUTE #TRA-YRS-LEFT = 100 - #CURR-AGE
END-IF
COMPUTE #TRA-PAY-TO-AGE = #CURR-AGE + #TRA-YRS-LEFT
*
IF #POLS-TO-TRADE > 1
    AND #SMALLEST-X NE 0
    AND #SEL-ALL NE ' '  /* PM99
  COMPUTE #TOT-REMAIN-PREMS-SMALLEST = #TOT-REMAIN-PREMS -
    #REMAIN-PREMS (#SMALLEST-X)
  COMPUTE #KEEP1-WRK-AMT1 = (#TOT-CURR-A-PREM - #PREM(#SMALLEST-X))/12
  COMPUTE #TRA-MONS-LEFT = #TOT-REMAIN-PREMS-SMALLEST / #KEEP1-WRK-AMT1
  COMPUTE #TRA-YRS-LEFT-SMALLEST = #TRA-MONS-LEFT / 12
*
  IF *DEVICE NE 'BATCH'
    PERFORM LOAD-KEEP1-LABEL
  END-IF
ELSE
  MOVE #TRA-YRS-LEFT TO #TRA-YRS-LEFT-SMALLEST
  RESET #KEEP1-LABEL #TOT-CURR-CV-SM-DISP #TOT-CURR-DB-SM-DISP
    #TOT-A-PREM-SM-DISP #TOT-M-PREM-SM-DISP
END-IF
*
IF (#CURR-AGE + #TRA-YRS-LEFT-SMALLEST) GT 100
  COMPUTE #TRA-YRS-LEFT-SMALLEST = 100 - #CURR-AGE
END-IF
*
MOVE #TOT-CURR-M-PREM TO #DESIRED-MON-PREM
*
END-SUBROUTINE
*
END
