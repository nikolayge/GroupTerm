* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
****************************************************************
* SVCNM001 - SERVICE MAINTENANCE SCREEN
****************************************************************
* MODIFICATION LOG
*
* USER   DATE      TAG  REASON
* YAK    01122012  YAK  Initial Creation
* YK1    04202012  YK1  Allow change to quaterly (default)
* NGG    04232012  NG1  Add new 'No Application' status
* YAK    05222012  YK2  Allow change mode to Allotment for retired
*                       OI-1231
* YAK    09202012  YK3  Allow service activation in IAS OI-1498
* TMT    03102014  TT1  Read Services from A-Products table using function
*                       GET-PLAN-INFO.  Membership Expansion Project.
* NGG    20140507  NG2  MEMBERSHIP EXPANSION
* TMT    04142014  TT2  Removed Retirement restriction for Governent allotment.
*                       CHECK-ALLOTMENT now ensures that atleast 1 policies premiums are
*                       paid via allotment in order for dues to also be paid by allotment
* YAK    04012015  YK4  Use new PDA for CC file
* bz-Name-C 07/07/2017     Fine Names. Keep all capital 
****************************************************************
*
DEFINE DATA
PARAMETER
1 #SVC-ID-NUMBER     (N6)
1 #SVC-PLAN          (A3) OPTIONAL
LOCAL USING OBJAMB01
LOCAL USING GPRATR01
LOCAL USING OBJACC01        /* YK4
LOCAL USING SVCA0003
LOCAL
1 MAP-FIELDS
  2 #CONTACT-ID (N8.0)
  2 #HEADER1    (A43)
  2 #HEADER2    (A78)
  2 #MEMBER-NAME (A44)
  2 #SVC-STATUS (A1)
  2 #STATUS-DESCRIPTION (A25)
  2 #SVC-PLAN-DESCRIPTION (A50)
  2 #SVC-AT-NUMBER (A6)
  2 #SVC-MODE (A1)
  2 #MODE-DESCRIPTION (A50)
  2 #SVC-ISSUE-DATE (A10)
  2 #SVC-ISSUE-AGE (A3)
  2 #SVC-MONTHLY-RATE (A10)
  2 #SVC-REACTIVATION-FEE (A10)
  2 #SVC-PAST-DUE (A10)
  2 #SVC-TOTAL-DUE (A10)
  2 #SVC-PAID-TO-DATE (A10)
  2 #SVC-BILL-TO-DATE (A10)
  2 #SVC-DATE-ENTERED (A10)
  2 #SVC-TERMINATION-DATE (A10)
  2 #SVC-CREATED-BY (A3)
  2 #LAST-DATE-UPDATE (A10)
  2 #CLERK-NAME (A20)
  2 #SVC-PAYMENT-TYPE (A15)
  2 #NOTE (A40)
  2 #SERVICE-PAID  (A10)
  2 #SERVICE-DUE   (A10)
  2 #SERVICE-TOTAL (A10)
*
1 #CV-MODE         (C)
1 #CV-STATUS       (C)
1 #CV-MAP          (C)
*
1 #TEXT              (A70)
1 #WORK-FIELD        (A) DYNAMIC
1 #RESPONSE          (A1)
1 #DOB               (A10)
1 #DOD               (A10)
1 #SEX               (A1)
1 #SSN-D             (A11)
1 #SSN               (N9)
*
1 #FIELDS-MODIFIED
  2 #CV-MODE-MODIFIED    (L)
  2 #CV-STAT-MODIFIED    (L)
*
1 #DATX              (D)
1 #DATN              (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY (N4)
  2 #DATN-MM   (N2)
  2 #DATN-DD   (N2)
1 REDEFINE #DATN
  2 #DATN-CC       (N2)
  2 #DATN-YYMM     (N4)
1 REDEFINE #DATN
  2 #DATN-YYYYMM   (N6)
*
1 #DATE              (N8)
1 REDEFINE #DATE
  2 #DATE-N6         (N6)
1 REDEFINE #DATE
  2 #DATE-A          (A8)
1 REDEFINE #DATE
  2 #DATE-YYYY       (N4)
  2 #DATE-MM         (N2)
  2 #DATE-DD         (N2)
*
1 #I                 (N2)
1 #GET-BY-CN         (A) DYNAMIC CONST <'GET-BY-CN'>
1 #GET-BY-PLAN       (A) DYNAMIC CONST <'GET'>
1 #UPDATE            (A) DYNAMIC CONST <'UPDATE'>
1 #WRITE-OFF         (A) DYNAMIC CONST <'WRITE-OFF'>
1 #LOOK-UP-MODE-KEY  (A4)  CONST <'MODE'>
1 #LOOK-UP-STAT-KEY  (A7)  CONST <'CODE061'>
1 #ACTIVE            (A1)  CONST <'A'>
1 #CANCEL            (A1/3)CONST <'C','T'>      /* YK3
1 #MODE-NA           (A3/4)CONST <'3SR','AER','CER','FER'>
1 #NOT-ACTIVATED     (A1/4)CONST <'W','P','S','F'>  /* NG1        /* TT1 ADDED F HERE.
1 #CREDIT-CARD       (A1/4) CONST <'0','1','2','4'>
1 #EZ-PAY            (A1)   CONST <'E'>
1 #ALLOTMENT         (A1)   CONST <'G'>
1 #DIRECT-BILL       (A1/4) CONST <'M','Q','S','A'>
1 #MONTHLY           (A1)   CONST <'M'>
1 TR_FUNCTION_CODE   (A) DYNAMIC CONST <'Service'>
1 #MAX-LENGTH        (N2) CONST <35>
1 #R-FEE             (N7.2)
1 #W-R-FEE           (N7.2)
1 #W                 (N7.2)
1 #WAVED             (A) DYNAMIC CONST <'Waived'>
1 #GET-PAYMENT       (A) DYNAMIC CONST <'GET'>
1 #GET-ARREARS       (A) DYNAMIC CONST <'ARREARS'>
1 #UPDATE-L          (L)
1 #REQUEST           (A) DYNAMIC
1 #MSG               (A) DYNAMIC
1 #DYNAMIC_NAME      (A) DYNAMIC
1 #USER             (A8)
1 #MM                (N2)
1 #TR-DATE-LAST-UPDATE (N8)
1 #SHOW-MESSAGE      (L)
1 #ONE-TIME          (A) DYNAMIC CONST <'One Time'>
1 #RECURRING         (A) DYNAMIC CONST <'Recurring'>
1 #RETIRED           (A) DYNAMIC CONST <'R'>
1 #QUATERLY          (A) DYNAMIC CONST <'Q'>
1 HAS-ALLOTMENT      (L) INIT <FALSE>                   /* TT2
1 i                  (I2) /*INDEX VARIABLE              /* TT2
1 #CLERK              (A3)                               /* TT2
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 MILITARY-STATUS
  2 PAD-ABA-NBR
  2 PAD-ACCT-NUM
  2 C*ACTIVE-SEGMENTS
  2 STATUS (9)                                           /* TT2
  2 MODE   (9)
*
END-DEFINE
*
* Main Processing
*
SET KEY PF1 = HELP
SET KEY PF3  NAMED 'Exit'
SET KEY PF8  NAMED 'Test'
SET KEY ENTR NAMED 'Save'
*
DEFINE WINDOW CONFIRMATION
  SIZE 7*60
  BASE 5/15      /* 10
  TITLE 'Confirmation'
  FRAMED ON
*
#DATN  := *DATN
#USER  := *USER
#CLERK   := FUNCTION-CLERK(<#USER>)               /* TT2
*
PERFORM POPULATE-MAP-FIELDS
REPEAT
  IF NOT (#SHOW-MESSAGE)
    RESET #TEXT
  END-IF
  RESET #SHOW-MESSAGE
  IF #SVC-MEMBER.SVC-PLAN = 'SAS'
    INPUT TEXT #TEXT USING MAP 'SVCMM002'
  ELSE
    INPUT TEXT #TEXT USING MAP 'SVCMM001'
  END-IF
  DECIDE FOR EVERY CONDITION
    WHEN #CV-MAP MODIFIED
      ESCAPE ROUTINE
    WHEN #CV-MODE MODIFIED
      #CV-MODE-MODIFIED := TRUE
    WHEN #CV-STATUS MODIFIED
      #CV-STAT-MODIFIED := TRUE
    WHEN NONE
      IGNORE
  END-DECIDE
  RESET #TEXT
  DECIDE ON FIRST VALUE *PF-KEY
    VALUE 'PF8'
      CALLNAT 'UIXXN001'
        #CONTACT-ID
        #SVC-ID-NUMBER
        #HEADER1
        #HEADER2
    VALUE 'PF3'
      IF #CV-MODE-MODIFIED OR #CV-STAT-MODIFIED
        #RESPONSE := 'N'
        INPUT WINDOW = 'CONFIRMATION'
          '  Your changes have not been saved.' /
          '  Do you want to save them? ' #RESPONSE (AD=UMT)
        IF #RESPONSE = 'N'
          BACKOUT TRANSACTION
          ESCAPE ROUTINE
        ELSE
          PERFORM EDIT-CHECK
          PERFORM PROCESS-REQUEST
          PERFORM SAVE-CHANGES
        END-IF
      END-IF
      CALLNAT 'MBRSVCY'    /* NG2
        #SVC-ID-NUMBER
        #MSG
      ESCAPE ROUTINE
    VALUE 'ENTR'
      IF #CV-MODE-MODIFIED OR #CV-STAT-MODIFIED
        PERFORM EDIT-CHECK
        PERFORM PROCESS-REQUEST
      ELSE
        ESCAPE ROUTINE
      END-IF
    NONE VALUE
      IGNORE
  END-DECIDE
  IF #UPDATE-L
    PERFORM SAVE-CHANGES
    PERFORM POPULATE-MAP-FIELDS
    RESET #UPDATE-L
  END-IF
END-REPEAT
*
****************************
DEFINE SUBROUTINE EDIT-CHECK
****************************
*
* If Help was not used to select a new mode - assign mode description
* #MODE-DESCRIPTION := FUNCTION-PAYMENT-MODE(<#SVC-MODE>)(1)
* IF #SVC-STATUS = #CANCEL(*)
*   IGNORE
* ELSE
*  RESET #CV-MODE #CV-MODE-MODIFIED
IF #SVC-MEMBER.SVC-PLAN <> 'PSM'                                 /* TT1 BEGIN
  DECIDE FOR FIRST CONDITION
    WHEN #SVC-MODE = #CREDIT-CARD(*)
      PERFORM CHECK-CREDIT-CARD
    WHEN NONE
      COMPRESS 'Only valid form of payment for '#SVC-MEMBER.SVC-PLAN 'is Credit Card' into #TEXT
      REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
  END-DECIDE                                                     /* TT1 END
ELSE
  DECIDE FOR FIRST CONDITION
    WHEN #SVC-MODE = ' '
      IF #SVC-STATUS = #CANCEL(*) OR #SVC-MEMBER.SVC-PLAN = #MODE-NA(*)
        IGNORE
      ELSE
        #TEXT := 'Please, enter Payment Method'
        REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
      END-IF
    WHEN #SVC-STATUS = #CANCEL(*)
      IGNORE
    WHEN #SVC-MODE = #CREDIT-CARD(*)
      PERFORM CHECK-CREDIT-CARD
    WHEN #SVC-MODE = #EZ-PAY
      PERFORM CHECK-EZ-PAY
    WHEN #SVC-MODE = #ALLOTMENT
      PERFORM CHECK-ALLOTMENT
*     #TEXT := 'Changes to Allotment Mode are not allowed'
*     REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
    WHEN #SVC-MODE = #MONTHLY
      #TEXT := 'Changes to Monthly Direct Bill Mode are not allowed'
      REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
    WHEN #SVC-MODE = #QUATERLY
      IGNORE
    WHEN #SVC-MODE = #DIRECT-BILL(*)
      PERFORM CHECK-DIRECT-BILL
    WHEN NONE
      #TEXT := 'Service Mode is invalid'
      REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
  END-DECIDE
END-IF
*
IF #SVC-STATUS = #ACTIVE OR #SVC-STATUS = 'C'
  IGNORE
ELSE
  #TEXT := 'Status invalid (only A or C allowed)'
  REINPUT FULL WITH TEXT #TEXT MARK *#SVC-STATUS
END-IF
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE PROCESS-REQUEST
*********************************
*
DECIDE FOR FIRST CONDITION
  WHEN #SVC-MEMBER.SVC-STATUS = #ACTIVE AND #SVC-STATUS = #CANCEL(*)
    PERFORM CANCEL-SERVICE
  WHEN #SVC-MEMBER.SVC-STATUS = #CANCEL(*) AND #SVC-STATUS = #ACTIVE
    PERFORM REACTIVATE-SERVICE
  WHEN #SVC-MEMBER.SVC-STATUS = #NOT-ACTIVATED(*) AND #SVC-STATUS = #ACTIVE         /* YK3
    PERFORM ACTIVATE-SERVICE                                                        /* YK3
  WHEN #SVC-MODE <> #SVC-MEMBER.SVC-MODE OR #SVC-STATUS <> #SVC-MEMBER.SVC-STATUS
    #UPDATE-L := TRUE
  WHEN #CV-STAT-MODIFIED OR #CV-MODE-MODIFIED
    RESET #CV-STAT-MODIFIED #CV-MODE-MODIFIED
  WHEN NONE
    IGNORE
END-DECIDE
SET KEY PF3
*
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE SAVE-CHANGES
******************************
*
PERFORM POPULATE-BEFORE-AFTER-IMAGE
PERFORM WRITE-TRANSACTION-LOG
PERFORM UPDATE-RECORD
RESET #FIELDS-MODIFIED #CV-MODE-MODIFIED #CV-STAT-MODIFIED
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE UPDATE-RECORD
*******************************
*
#REQUEST := #UPDATE
PERFORM POPULATE-PARAMETER-FIELDS
CALLNAT 'OBJNMB01' #REQUEST #MSG #SVC-MEMBER
#SHOW-MESSAGE := TRUE
IF #MSG = ' '
  #TEXT := 'Record updated successfully'
  END TRANSACTION
  PERFORM CRM-SYNC
ELSE
  #TEXT := #MSG
END-IF
*
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE CHECK-EZ-PAY
******************************
*
FIND(1) ST-V WITH ID-NUMBER = #SVC-ID-NUMBER
  IF PAD-ABA-NBR = ' ' OR PAD-ACCT-NUM = ' '
    #TEXT := 'Routing/Account Numbers are not on file. Please, enter it first'
    REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
  END-IF
END-FIND
*
END-SUBROUTINE
*
***********************************
DEFINE SUBROUTINE CHECK-CREDIT-CARD
***********************************
*
IF FUNCTION-CC-NUMBER (<#SVC-ID-NUMBER>) <> ' '
  #DATE-A := FUNCTION-CC-DATE(<#SVC-ID-NUMBER>)     /* Returns in format MMYY
  MOVE EDITED #DATE-A TO #DATX (EM=MMYY)
  #DATX := #DATX - 1
  MOVE EDITED #DATX (EM=YYMM) TO #DATE-A
  IF #DATN-YYMM > #DATE-N6
    #TEXT := 'Credit card on file is expired. Please, update it first'
    REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
  END-IF
ELSE
  #TEXT := 'Credit card info is not on file. Please, enter it first'
  REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
END-IF
END-SUBROUTINE
*
***********************************
DEFINE SUBROUTINE CHECK-DIRECT-BILL
***********************************
*
FIND(1) ST-V WITH ID-NUMBER = #SVC-ID-NUMBER
  FOR #I = 1 TO C*ACTIVE-SEGMENTS
    IF MODE(#I) = #DIRECT-BILL(*)
      ESCAPE ROUTINE
    END-IF
  END-FOR
  #TEXT := 'Allowed only if you have an Insurance Policy with Direct Bill'
  REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
END-FIND
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE CHECK-ALLOTMENT    /* YK2 Start
*********************************
*
IF #CLERK = 'TMT' OR = 'KHB' THEN         /* KEEPING TMT FOR TESTING PURPOSES.
  RESET INITIAL HAS-ALLOTMENT            /* KATHIE IS ONLY OTHER PERSON AUTHORIZED
  RESET i
  FIND(1) ST-V WITH ID-NUMBER = #SVC-ID-NUMBER                            /* TT2 BEGIN
    FOR i 1 TO 9
      IF  ST-V.MODE(i) = #ALLOTMENT AND STATUS(i) = 'D' THEN
        HAS-ALLOTMENT := TRUE
        ESCAPE BOTTOM
      END-IF
    END-FOR
*
    IF NOT HAS-ALLOTMENT
      #TEXT := 'Premiums must be payed by Allotment before Dues can be'   /* TT2 END
      REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
    END-IF
  END-FIND
ELSE
  FIND(1) ST-V WITH ID-NUMBER = #SVC-ID-NUMBER
    IF ST-V.MILITARY-STATUS = #RETIRED AND MODE(*) = #ALLOTMENT
      IGNORE
    ELSE
      #TEXT := 'Allowed only for Retired with Insurance Policy paid by Allotment'
      REINPUT FULL WITH TEXT #TEXT MARK *#SVC-MODE
    END-IF
  END-FIND
END-IF
*
END-SUBROUTINE                       /* YK2 End
*
********************************
DEFINE SUBROUTINE CANCEL-SERVICE
********************************
*
SET KEY PF3=OFF
RESET BEFORE_IMAGE AFTER_IMAGE
#RESPONSE := 'Y'
INPUT WINDOW = 'CONFIRMATION'
  '      Do you really want to cancel ' /
  '           this Service Plan?' #RESPONSE (AD=UMT)
SET WINDOW OFF
IF #RESPONSE = 'Y'
  RESET BEFORE_IMAGE.SVC-TERMINATION-DATE
* Clear FPF? Monthly Rate? Mode? Reactivation Fee if any?
* RESET #SVC-MODE #MODE-DESCRIPTION
* #CV-MODE := (AD=P)                   /* ?????
  RESET #SVC-REACTIVATION-FEE #SVC-TOTAL-DUE #SVC-PAST-DUE
  #UPDATE-L := TRUE
  #SVC-MEMBER.SVC-TERMINATION-DATE := #DATN
  AFTER_IMAGE.SVC-TERMINATION-DATE := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-TERMINATION-DATE,'D'>)
ELSE
  #SVC-STATUS := #SVC-MEMBER.SVC-STATUS
  #SVC-MODE   := #SVC-MEMBER.SVC-MODE
  #MODE-DESCRIPTION := FUNCTION-PAYMENT-MODE(<#SVC-MEMBER.SVC-MODE>)(1)
  RESET #CV-STAT-MODIFIED #CV-MODE-MODIFIED
END-IF
*
END-SUBROUTINE
*
**********************************
DEFINE SUBROUTINE ACTIVATE-SERVICE  /* YK3
**********************************
*
IF #SVC-MEMBER.SVC-TERMINATION-DATE <> 0
  BEFORE_IMAGE.SVC-TERMINATION-DATE := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-TERMINATION-DATE,'D'>)
END-IF
IF #SVC-MEMBER.SVC-PAID-TO-DATE <> 0
  BEFORE_IMAGE.SVC-PAID-TO-DATE := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-PAID-TO-DATE,'D'>)
END-IF
RESET #SVC-TOTAL-DUE #SVC-PAST-DUE #SVC-MEMBER.SVC-TERMINATION-DATE
IF #SVC-MEMBER.SVC-PAID-TO-DATE = 0
  #SVC-MEMBER.SVC-PAID-TO-DATE := #SVC-MEMBER.SVC-ISSUE-DATE
END-IF
PERFORM CALCULATE-ARREARS
AFTER_IMAGE.SVC-PAID-TO-DATE := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-PAID-TO-DATE,'D'>)
#UPDATE-L := TRUE
*
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE REACTIVATE-SERVICE
************************************
*
SET KEY PF3=OFF
RESET BEFORE_IMAGE AFTER_IMAGE
BEFORE_IMAGE.SVC-TERMINATION-DATE := #SVC-TERMINATION-DATE
IF #SVC-MEMBER.SVC-REACTIVATION-FEE <> 0
  MOVE EDITED #SVC-MEMBER.SVC-REACTIVATION-FEE (EM=ZZ9.99)
    TO BEFORE_IMAGE.SVC-REACTIVATION-FEE
END-IF
RESET #SVC-MEMBER.SVC-TERMINATION-DATE AFTER_IMAGE.SVC-TERMINATION-DATE
* Check reactivation fee
RESET #R-FEE
#R-FEE := F-REACTIVATION-FEE(<#SVC-MEMBER.SVC-PLAN>)
IF #R-FEE <> 0
  #RESPONSE := 'N'
  INPUT WINDOW = 'CONFIRMATION'
    ' There is a reactivation fee ' #R-FEE (AD=IO) ' for this plan ' /
    '     Do you want to waive it for this member?' #RESPONSE (AD=UMT)
*
  IF #RESPONSE = 'Y'
    #W-R-FEE := #R-FEE
    RESET #SVC-MEMBER.SVC-REACTIVATION-FEE
    MOVE EDITED #R-FEE (EM=ZZ9.99) TO AFTER_IMAGE.SVC-REACTIVATION-FEE
    COMPRESS 'Reactivation Fee ' AFTER_IMAGE.SVC-REACTIVATION-FEE #WAVED
      INTO AFTER_IMAGE.SVC-REACTIVATION-FEE
  ELSE
    #SVC-MEMBER.SVC-REACTIVATION-FEE := #R-FEE
    MOVE EDITED #SVC-MEMBER.SVC-REACTIVATION-FEE (EM=ZZ9.99)
      TO AFTER_IMAGE.SVC-REACTIVATION-FEE
  END-IF
END-IF
* Check arrears
RESET #R-FEE #W-R-FEE
PERFORM CALCULATE-ARREARS
IF #R-FEE <> 0
  #RESPONSE := 'N'
  REPEAT
    INPUT WINDOW = 'CONFIRMATION'
      '   Customer has ' #R-FEE (AD=IO) ' in arrears. ' /
      '   Do you want to waive ' #W-R-FEE (AD=UM) 'for this member?' #RESPONSE (AD=UMT) /
      '   ' /
      '   ' #TEXT (AD=IO)
*
    IF #RESPONSE = 'Y'
      IF #R-FEE = #W-R-FEE
        BEFORE_IMAGE.SVC-PAID-TO-DATE := #SVC-PAID-TO-DATE
        #DATE := #SVC-MEMBER.SVC-PAID-TO-DATE
        #DATN-DD := #DATE-DD
        #SVC-MEMBER.SVC-PAID-TO-DATE  := #DATN
        #DATN := *DATN                                   /* #DATN - Back to today's date
        AFTER_IMAGE.SVC-PAID-TO-DATE  := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-PAID-TO-DATE,'D'>)
        #MM := #W-R-FEE / #SVC-MEMBER.SVC-MONTHLY-RATE
        COMPRESS AFTER_IMAGE.SVC-PAID-TO-DATE '(' #MM 'months arrears waived)'
          INTO AFTER_IMAGE.SVC-PAID-TO-DATE
        ESCAPE BOTTOM
      ELSE
        #MM := #W-R-FEE / #SVC-MEMBER.SVC-MONTHLY-RATE
        IF #SVC-MEMBER.SVC-MONTHLY-RATE * #MM <> #W-R-FEE
          #TEXT := 'Amount has to be exactly Rate * Month'
          ESCAPE TOP
        ELSE
          BEFORE_IMAGE.SVC-PAID-TO-DATE := #SVC-PAID-TO-DATE
          #DATE := #SVC-MEMBER.SVC-PAID-TO-DATE
          MOVE EDITED #DATE-A TO #DATX (EM=YYYYMMDD)
          #DATX := #DATX + #MM*30
          MOVE EDITED #DATX (EM=YYYYMMDD) TO #DATE-A
          #SVC-MEMBER.SVC-PAID-TO-DATE  := #DATE
          AFTER_IMAGE.SVC-PAID-TO-DATE  := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-PAID-TO-DATE,'D'>)
          COMPRESS AFTER_IMAGE.SVC-PAID-TO-DATE '(' #MM 'months arrears waived)'
            INTO AFTER_IMAGE.SVC-PAID-TO-DATE
          ESCAPE BOTTOM
        END-IF
      END-IF
    ELSE
      ESCAPE BOTTOM
    END-IF
  END-REPEAT
END-IF
*
#UPDATE-L := TRUE
SET WINDOW OFF
*
END-SUBROUTINE
*
***********************************
DEFINE SUBROUTINE CALCULATE-ARREARS
***********************************
*
RESET PARM-SVC
PARM-SVC.ACTION         := #GET-ARREARS
PARM-SVC.SVC-MEMBER-ID  := #SVC-ID-NUMBER
PARM-SVC.SVC-PLAN       := #SVC-MEMBER.SVC-PLAN
IF #SVC-MEMBER.SVC-PLAN = 'SAS'
  PARM-SVC.TRANSACTION-DATN := #DATE
ELSE
  PARM-SVC.TRANSACTION-DATN := #DATN
END-IF
*
CALLNAT 'SVCN0003' PARM-SVC #MSG
#W-R-FEE := #R-FEE := PARM-SVC.SVC-ARREARS-FEE
*
* MOVE EDITED PARM-SVC.SVC-TOTAL-DUE (EM=ZZZZZZ9.99) TO #SVC-AMOUNT-DUE
MOVE EDITED #R-FEE (EM=ZZZZZZ9.99) TO #SVC-PAST-DUE
MOVE LEFT #SVC-PAST-DUE TO #SVC-PAST-DUE
MOVE EDITED PARM-SVC.SVC-TOTAL-DUE (EM=ZZZZZZ9.99) TO #SVC-TOTAL-DUE
MOVE LEFT #SVC-TOTAL-DUE TO #SVC-TOTAL-DUE
*
END-SUBROUTINE
*
DEFINE SUBROUTINE POPULATE-MAP-FIELDS
*************************************
*
RESET MAP-FIELDS
#SVC-MEMBER.SVC-ID-NUMBER := #SVC-ID-NUMBER
IF #SVC-PLAN SPECIFIED
  #REQUEST := #GET-BY-PLAN
  #SVC-MEMBER.SVC-PLAN := #SVC-PLAN
  CALLNAT 'OBJNMB01' #REQUEST #MSG #SVC-MEMBER
ELSE
  #REQUEST := #GET-BY-CN
  CALLNAT 'OBJNMB01' #REQUEST #MSG #SVC-MEMBER
END-IF
*
RESET #MEMBER-NAME #SEX #SSN-D #DOB #DOD
COMPRESS FULL #MEMBER-NAME #SEX #SSN-D #DOB #DOD INTO #HEADER2
#CONTACT-ID           := F-GET-CONTACT-ID(<#SVC-ID-NUMBER>)
#DYNAMIC_NAME := '! S'               /* bz-Name-C
CALLNAT 'GPRS0CNT' #CONTACT-ID #DYNAMIC_NAME 1X #DOB 1X #DOD #SEX #SSN
#MEMBER-NAME          := #DYNAMIC_NAME
MOVE EDITED #SSN (EM=999-99-9999) TO #SSN-D
COMPRESS FULL #MEMBER-NAME #SEX #SSN-D #DOB #DOD INTO #HEADER2
#SVC-STATUS           := #SVC-MEMBER.SVC-STATUS
#WORK-FIELD           := #SVC-STATUS
#STATUS-DESCRIPTION   := F-LOOK-UP-TABLE(<#LOOK-UP-STAT-KEY,#WORK-FIELD>)    /* TT1 PLACEHOLDER
* IF #SVC-STATUS = #NOT-ACTIVATED(*)     /* YK3 start
*   #CV-STATUS := (AD=P)
*   #CV-MODE   := (AD=P)
* ELSE
#CV-STATUS := (AD=U)
#CV-MODE   := (AD=U)
* END-IF                                 /* YK3 end
*
DECIDE ON FIRST VALUE #SVC-MEMBER.SVC-PLAN
  VALUE '3SR'
    RESET #SVC-MODE
    #MODE-DESCRIPTION := 'N/A'
    #CV-MODE   := (AD=P)
    #NOTE      := 'Included in Whole Life calculations'
  VALUE 'AER', 'CER', 'FER'
    RESET #SVC-MODE
    #MODE-DESCRIPTION := 'N/A'
    #CV-MODE   := (AD=P)
  VALUE 'PSM'
    #SVC-MODE             := #SVC-MEMBER.SVC-MODE
    #MODE-DESCRIPTION     := FUNCTION-PAYMENT-MODE(<#SVC-MEMBER.SVC-MODE>)(1)
  VALUE 'SAS'
    #SVC-MODE             := #SVC-MEMBER.SVC-MODE
    #MODE-DESCRIPTION     := FUNCTION-PAYMENT-MODE(<#SVC-MEMBER.SVC-MODE>)(1)
    MOVE EDITED #SVC-MEMBER.SVC-ONE-TIME-FEE (EM=Z(6)9.99) TO #SERVICE-DUE
    MOVE EDITED #SVC-MEMBER.SVC-FIRST-PLACE-FEE (EM=Z(6)9.99) TO #SERVICE-TOTAL
    #W := #SVC-MEMBER.SVC-FIRST-PLACE-FEE - #SVC-MEMBER.SVC-ONE-TIME-FEE
    MOVE EDITED #W (EM=Z(6)9.99) TO #SERVICE-PAID
    IF #SVC-MEMBER.SVC-PAID-TO-DATE > 0
      MOVE #SVC-MEMBER.SVC-PAID-TO-DATE TO #DATE
      ADD 1 TO #DATE-MM
      IF #DATE-MM > 12
        ADD 1 TO #DATE-YYYY
        #DATE-MM := 1
      END-IF
    ELSE
      #DATE := #DATN
    END-IF
    COMPRESS #DATE-MM #DATE-DD #DATE-YYYY INTO #SVC-BILL-TO-DATE
      WITH DELIMITER '/'
    PERFORM CALCULATE-ARREARS
  NONE VALUE
    IGNORE
END-DECIDE

#SVC-PLAN-DESCRIPTION := GET-PLAN-INFO(<#SVC-MEMBER.SVC-PLAN>)(1)   /* TT1
IF #SVC-MEMBER.SVC-ISSUE-AGE <> 0
  #SVC-ISSUE-AGE      := #SVC-MEMBER.SVC-ISSUE-AGE
END-IF
IF #SVC-MEMBER.SVC-AT-NUMBER <> 0
  #SVC-AT-NUMBER := #SVC-MEMBER.SVC-AT-NUMBER
ELSE
  #SVC-AT-NUMBER := 'N/A'
END-IF
MOVE EDITED #SVC-MEMBER.SVC-MONTHLY-RATE (EM=ZZZZZZ9.99) TO #SVC-MONTHLY-RATE
MOVE LEFT #SVC-MONTHLY-RATE TO #SVC-MONTHLY-RATE
IF #SVC-MEMBER.SVC-REACTIVATION-FEE <> 0
  MOVE EDITED #SVC-MEMBER.SVC-REACTIVATION-FEE (EM=ZZZZZZ9.99) TO #SVC-REACTIVATION-FEE
  MOVE LEFT #SVC-REACTIVATION-FEE TO #SVC-REACTIVATION-FEE
END-IF
#SVC-ISSUE-DATE       := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-ISSUE-DATE,'D'>)
IF #SVC-MODE = #DIRECT-BILL(*) AND #SVC-MEMBER.SVC-BILL-TO-DATE <> 0
  #SVC-BILL-TO-DATE   := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-BILL-TO-DATE,'D'>)
END-IF
#SVC-DATE-ENTERED     := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-DATE-ENTERED,'D'>)
IF #SVC-MEMBER.SVC-TERMINATION-DATE <> 0
  #SVC-TERMINATION-DATE := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-TERMINATION-DATE,'D'>)
END-IF
#LAST-DATE-UPDATE     := FUNCTION-CALENDAR(<#SVC-MEMBER.LAST-UPD-DATE,'D'>)
#SVC-CREATED-BY       := FUNCTION-CLERK(<*TRANSLATE(#SVC-MEMBER.SVC-CREATED-BY,UPPER)>)
#CLERK-NAME           := FUNCTION-NAME (<*TRANSLATE(#SVC-MEMBER.LAST-UPD-USER,UPPER)>)
IF #SVC-MEMBER.SVC-PAY-UP = 'Y'
  #SVC-PAYMENT-TYPE := #ONE-TIME
*  RESET #SVC-MONTHLY-RATE
*  #SVC-PAID-TO-DATE := 'N/A'
ELSE
  IF #SVC-MEMBER.SVC-PLAN = #MODE-NA(*)
    IGNORE
  ELSE
    #SVC-PAYMENT-TYPE := #RECURRING
  END-IF
END-IF
IF #SVC-MEMBER.SVC-PAID-TO-DATE <> 0
  #SVC-PAID-TO-DATE := FUNCTION-CALENDAR(<#SVC-MEMBER.SVC-PAID-TO-DATE,'D'>)
END-IF
IF #SVC-STATUS = #ACTIVE
  PERFORM CALCULATE-ARREARS
END-IF
*
#TR-DATE-LAST-UPDATE := #SVC-MEMBER.LAST-UPD-DATE
* #CGA-SCR-COMMAND := '*'
*
END-SUBROUTINE
*
*******************************************
DEFINE SUBROUTINE POPULATE-PARAMETER-FIELDS
*******************************************
*
#SVC-MEMBER.SVC-STATUS := #SVC-STATUS
#SVC-MEMBER.SVC-MODE   := #SVC-MODE
LAST-UPD-USER          := *USER
LAST-UPD-DATE          := #DATN
LAST-UPD-TIME          := *TIMN
*
END-SUBROUTINE
*
*********************************************
DEFINE SUBROUTINE POPULATE-BEFORE-AFTER-IMAGE
*********************************************
*
BEFORE_IMAGE.DATE-LAST-UPDATE     := #TR-DATE-LAST-UPDATE
BEFORE_IMAGE.SVC-STATUS           := #SVC-MEMBER.SVC-STATUS
BEFORE_IMAGE.SVC-MODE             := #SVC-MEMBER.SVC-MODE
AFTER_IMAGE.SVC-STATUS            := #SVC-STATUS
AFTER_IMAGE.SVC-MODE              := #SVC-MODE
*
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE WRITE-TRANSACTION-LOG
***************************************
*
#CONTACT-ID   := F-GET-CONTACT-ID(<#SVC-ID-NUMBER>)
TR_ID_NUMBER  := #SVC-ID-NUMBER
TR_NAME       := FUNCTION-CONTACT-NAME(<#CONTACT-ID>)
TR_CLERK      := #CLERK                                                                /* TT2
CALLNAT 'GPRNTR01' TR_FUNCTION_CODE TRAN_LOG_HEADER BEFORE_IMAGE AFTER_IMAGE
*
END-SUBROUTINE
*
**************************
DEFINE SUBROUTINE CRM-SYNC
**************************
*
CALLNAT 'MBRSVCY' #SVC-MEMBER.SVC-ID-NUMBER #MSG
END-SUBROUTINE
*
END
