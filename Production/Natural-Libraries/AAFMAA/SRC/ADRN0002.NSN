* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 5
* <Natural Source Header
* PROGRAM-ID: ADRN0002
************************************************************************
*                       MODIFICATION LOG                               *
* USER     DATE      TAG     REASON                                    *
*                                                                      *
* NGG    08/17/2010  None    Program written                           *
* NGG    11/15/2010  NG1     Canadian address verification             *
* NGG    02/01/2011  NG2     Remove edits for CASS certified           *
* NGG    02/10/2011  NG3     Change last-update user-id as clerk id    *
* NGG    02/24/2011  NG4     Transaction Registor logging changes      *
*                            ADRNTROF before ADRNTRNF after            *
* bz     04/26/20011 bzTR    Use generic TR Object                     *
* YAK    05/06/2011  YK1     Add missing fields for TR generic module  *
* YAK    05/07/2011  YK2     Change format to match logic in TR module *
* YAK    05/20/2011  YK3     Pass correct CN/name to save TR for shared*
*                            addresses                                 *
* YAK    05/25/2011  YK4     Add last user update to generic program   *
* YAK    06/09/2011  YK5     Correct assigning address fields to update*
*                            Status file
* bz     06/14/2011  bz2     Maps ADRM0001 and ADRM0003 changes        *
* bz     06/14/2011  bz3     Add Other Addr to TR-LOG                  *
* NGG    07/29/2011  NG5     Fix Reinstate issue                       *
*        On CG when you make address reinstated after deleting it, you
*        cannot make it undeliverable. It gives error message that
*        primary/secondary address exists.
* YAK    10/01/2011  YK6     Change/Do not change address based on the
*                            user response
* TMT    10/08/2013  TT1     ADDRESS NORMALIZATION
*************************************************************************
DEFINE DATA
PARAMETER
1 #CONTACT-ID    (N8)
1 #ADDR-POOL-ID  (N8) 1 REDEFINE #ADDR-POOL-ID
  2 #ADDR-POOL-ID-A (A8)
LOCAL USING ADDA0001
LOCAL USING A-CTDATA
LOCAL USING GPRATR00       /*  bzTR

LOCAL
********
1 #CLERK-P            (A20)       /*  bz2
1 #CLERK-R            (A20)       /*  bz2
1 #DATE-UPDATED-R       (A10)     /*  bz2
1 #DATE-UPDATED-P       (A10)     /*  bz2
********
1 #H1                 (A78)
1 #H2                 (A78)
1 #COUNTRY-CODE       (A2)
1 #STATE              (A25)
1 #ATTENTION-LINE     (A50)
1 #HOLD-ATTENTION-LINE(A50)
1 #POSTAL-CODE        (A25)
1 #COUNTRY            (A50)
1 #CLERK              (A20)
1 #ZIP-5              (A5)
1 #ZIP-4              (A4)
1 #ERRORS             (L)
1 #UPDATED            (L)
1 #DELETED            (L)
1 #UPDATED-OR-DELETED (L)
1 #ADDR-ISN           (P8)
1 #REL-ISN            (P8)
1 #D                  (D)
1 #A-LINES            (A25/3)
1 #A-LINES-IND        (A1/3)
1 #DATE-UPDATED       (A10)
1 #VALIDATED-DATE     (A10)
1 #UNDELIVERABLE-DATE (A10)
1 #SHARED             (A11)
*
1 #CODES
  2  #ADDR-INTL        (A1)     /* 001
  2  #ADDR-LOCATION    (A1)     /* 002
  2  #ADDR-OVERRD      (A1)     /* 003   Y/N
  2  #ADDR-PROTECT     (A1)     /* 004
  2  #ADDR-RETURNED    (A1)     /* 005   Y/N
  2  #ADDR-TYPE        (A1)     /* 006
  2  #ADDR-VALID       (A1)     /* 007
  2  #EML-PREF         (A1)     /* 008   Y/N
  2  #EML-PROTECT      (A1)     /* 009   Y/N
  2  #EML-TYPE         (A1)     /* 010
  2  #EML-UNDLV        (A1)     /* 011   Y/N
  2  #PH-INTL          (A1)     /* 012
  2  #PH-PREF          (A1)     /* 013
  2  #PH-TIME          (A1)     /* 014
  2  #PH-TYPE          (A1)     /* 015
  2  #PH-VALID         (A1)     /* 016
  2  #ADDR-SOURCE      (A1)     /* 017
  2  #ADDR-STATUS      (A1)     /* 018
  2  #XXX              (A1)
  2  #EML-STATUS       (A1)     /* 020
1 #CODE-NAMES
  2  #ADDR-INTL-TXT        (A20)
  2  #ADDR-LOCATION-TXT    (A20)
  2  #ADDR-OVERRD-TXT      (A20)
  2  #ADDR-PROTECT-TXT     (A20)
  2  #ADDR-RETURNED-TXT    (A20)
  2  #ADDR-TYPE-TXT        (A20)
  2  #ADDR-VALID-TXT       (A20)
  2  #EML-PREF-TXT         (A20)
  2  #EML-PROTECT-TXT      (A20)
  2  #EML-TYPE-TXT         (A20)
  2  #EML-UNDLV-TXT        (A20)
  2  #PH-INTL-TXT          (A20)
  2  #PH-PREF-TXT          (A20)
  2  #PH-TIME-TXT          (A20)
  2  #PH-TYPE-TXT          (A20)
  2  #PH-VALID-TXT         (A20)
  2  #ADDR-SOURCE-TXT      (A20)
  2  #ADDR-STATUS-TXT      (A20)
  2  #XXX                  (A20)
  2  #EML-STATUS-TXT       (A20)
1 #CHANGE-CODE          (A1)
1 #SECURED              (A1)
1 #CV-STATUS            (C)
1 #STATUS-DATE-CV       (C)
1 #MAP-CV               (C)
1 #ADDR-RETURNED-CV     (C)
1 #CV-SECURED           (C)
1 #A-LINES-CV           (C/3)
1 #CONTACT-ADDR-POOL    (I2/3)
1 #CONTACT-ADDR-POOL-ID (N8/3)
1 #CODE-NAME            (A) DYNAMIC
1 #INTL-REGION    (A50)
1 #URBANIZATION   (A50)
1 #STREET         (A50)
1 #UNIT           (A25)
1 #CITY           (A50)
1 #STATE-CODE     (A2)
1 #ZIP            (A10)
1 #CASS-FLAG      (A1)
1 #CHG-FLAG       (A1)
1 #CONFIRM-DELETE (A1)
1 ZIP             (A10) 1 REDEFINE ZIP
  2 ZIP-5-N    (N5)
  2 FILLER 1X
  2 ZIP-4-N    (N4)
1 #PHONE-ID         (N8)
1 #EMAIL-ID         (N8)
1 #STATUS-DATE      (A8)
1 REDEFINE #STATUS-DATE
  2 #STATUS-DATE-N (N8)
1 REDEFINE #STATUS-DATE
  2 #STATUS-DATE-MM (A2)
  2 #STATUS-DATE-DD (A2)
  2 #STATUS-DATE-YY (A4)
1 #DATE             (N8)
1 REDEFINE #DATE
  2 #DATE-A         (A8)
1 #CGA-ORIG-COMMAND (A2)
1 #CGA-USER-COMPANY (A1)
1 #CGA-CLERK        (A3)
1 #USER             (A8)
1 #MSG              (A72)
1 #MODE             (A1)    /* U - Update, V - View
1 #CN-SYNC-ISNS     (P8/9)
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 MEMBER-CONTACT-ID
  2 NAME
*   2 ADDRESS-1       (A25)           /*TT1 COMENTED OUT
*   2 ADDRESS-2       (A25)
*   2 ADDRESS-3       (A25)
*   2 ZIP-CODE        (N9)
*   2 ADDRESS-CHG-CODE (A1)
*   2 S-ADDRESS-1     (A25)
*   2 S-ADDRESS-2     (A25)
*   2 S-ADDRESS-3     (A25)
*   2 S-ZIP-CODE      (N9.0)
*   2 DATE-LAST-ADDR-UPDT   (N8)

1 CONTACT VIEW OF A-CONTACTS
  2 ID-NUMBER (N6)
  2  FULL-NAME
    3 FIRST-NAME       (A25)
    3 MIDDLE-NAME      (A25)
    3 LAST-NAME        (A25)
    3 SUFFIX           (A10)
1 A-ADD-REL VIEW OF A-ADDRESS-RELATIONSHIP
  2 CONTACT-ID        (N8)
  2 ADDRESS-POOL-ID   (N8)
  2 ATTENTION-LINE    (A50)
  2 ADDR-LOCATION     (A1)
  2 ADDR-TYPE-CD      (A1)
  2 RETURNED-MAIL-IND (A1)
  2 PREVENT-OVER-IND  (A1)
  2 PREVENT-OVER-DATE (N8) 2 REDEFINE PREVENT-OVER-DATE
    3 PREVENT-OVER-DATE-A (A8)
  2 ADDRESS-SOURCE    (A1)
  2 STATUS            (A1)
  2 STATUS-DATE       (N8) 2 REDEFINE STATUS-DATE
    3 STATUS-DATE-A   (A8)
  2 START-DATE        (N8) 2 REDEFINE START-DATE
    3 START-DATE-A    (A8)
  2 END-DATE          (N8) 2 REDEFINE END-DATE
    3 END-DATE-A      (A8)
  2 LAST-DATE-UPD     (N8) 2 REDEFINE LAST-DATE-UPD
    3 LAST-DATE-UPD-A     (A8)
  2 LAST-TIME-UPD     (N7) 2 REDEFINE LAST-TIME-UPD
    3 LAST-TIME-UPD-A     (A7)
  2 RETURNED-MAIL-DATE (N8) 2 REDEFINE RETURNED-MAIL-DATE
    3 RETURNED-MAIL-DATE-A (A8)
  2 LAST-USER-UPD     (A8)

1 A-ADD-POOL VIEW OF A-ADDRESS-POOL
  2 ADDRESS-POOL-ID (N8)
  2 STREET          (A75)
  2 UNIT            (A25)
  2 CITY            (A50)
  2 STATE-CODE      (A2)
  2 ZIP-CODE        (N9) 2 REDEFINE ZIP-CODE
    3 ZIP-5         (N5)
    3 ZIP-4         (N4)
  2 COUNTRY-CODE    (A2)
  2 INTL-REGION     (A50)
  2 POSTAL-CODE     (A25)
  2 URBANIZATION    (A50)
  2 ADDR-FORMAT-TYPE-CD (A1)
  2 ADDR-VALID-IND      (A1)
  2 ADDR-VALID-DATE (N8) 2 REDEFINE ADDR-VALID-DATE
    3 ADDR-VALID-DATE-A (A8)
  2 LAST-DATE-UPD   (N8)2 REDEFINE LAST-DATE-UPD
    3 LAST-DATE-UPD-A   (A8)
  2 LAST-TIME-UPD   (N7) 2 REDEFINE LAST-TIME-UPD
    3 LAST-TIME-UPD-A   (A7)
  2 LAST-USER-UPD   (A8)

1 CNRY view of A-GEN-TABLE
  2 GEN-KEY                           (A4) /*    D
  2 GEN-SUB-KEY                       (A3)
  2 GEN-ALPHA-VALUE                   (A50)
  2 GEN-DESCRIPTION                   (A75)
1 #TABLE-KEY  (A7) 1 REDEFINE #TABLE-KEY
  2 #GEN-KEY         (A4)
  2 #SUB-KEY         (A3)
*
1 TERM VIEW OF A-TERMINALS
  2 CLERK-ID
  2 COMMENTS
  2 SECURITY-CODE   (N2)
  2 USER-COMPANY    (A1)
*
1 #J                (I4)
1 #POS              (I4)
1 #ERROR-NBR        (I4)
1 #ERRORS-TXT       (A72/11) INIT <
  'Street is missing',
  'Status is missing',
  'Invalid date format',
  'Source and type are required',
  'Only Y or N are valid',
  'Primary address already exists',
  'Secondary address already exists',
  'Invalid country code. Please use look-up.',
  'Primary/Secondary address already exists',
  'Valid State for APO/DPO/FPO is AE/AP/AA',
  'Valid City for AE/AP/AA is APO/DPO/FPO'
  >
1 BLANK   (A1) CONST <' '>
1 YES     (A1) CONST <'Y'>
1 NO      (A1) CONST <'N'>
1 #DASH   (A1) CONST <'-'>
1 #TEST   (A8) CONST <'CR249'>
1 USA     (A2) CONST <'US'>
1 CANADA  (A2) CONST <'CA'>
1 PUERTORICO        (A2) CONST <'PR'>
1 PRIMARY           (A1) CONST <'P'>
1 SECONDARY         (A1) CONST <'S'>
1 OTHER             (A1) CONST <'O'>      /*  bz3
1 #PRIMARY-UPDATE   (I4) CONST <2>
1 #SECONDARY-UPDATE (I4) CONST <4>
1 #UPDATE-REQUEST   (I4)
1 #UPDATE-MSG       (A28) CONST <'Address successfully updated'>
1 #DELETE-MSG       (A28) CONST <'Address successfully deleted'>
1 #ADD-MSG          (A26) CONST <'Address successfully added'>
1 #NOUP-MSG         (A10) CONST <'No updates'>
1 #DO-TR-AND-SYNC   (L)
*
1 #TR-CLERK-ID (A3)
1 FUNCTION_CODE             (A) DYNAMIC CONST <'ADDRESS'>
*
1  #PREVENT-OVER-DATE-D   (D)
1  #RETURNED-MAIL-DATE-D  (D)
1  #ADDR-VALID-DATE-D     (D)

END-DEFINE
*
* ON ERROR
*   PRINT NOTITLE  *PROGRAM *ERROR-LINE *ERROR-NR
*   ESCAPE ROUTINE
* END-ERROR

DEFINE WINDOW Confirm-Delete
  SIZE 8 * 70
  BASE 13/2
  FRAMED ON POSITION SYMBOL AUTO
*
SET KEY ENTR NAMED 'Save'
SET KEY PF1 = Help
SET KEY PF2  NAMED 'Val'
SET KEY PF3  NAMED 'Exit'
SET KEY PF4  NAMED 'Add'
SET KEY PF11 NAMED 'Del'
SET KEY PF12 NAMED 'Reln'
*
IF #CONTACT-ID = 0
  ESCAPE ROUTINE
END-IF
*
PERFORM INITIAL-SETTINGS
*
IF #ADDR-POOL-ID-A = 'NEW'
    OR #ADDR-POOL-ID = 0
  RESET #ADDR-POOL-ID
  PERFORM NEW-PRIMARY-ADDRESS
ELSE
  PERFORM UI-ADDRESS
END-IF
*
DEFINE NEW-PRIMARY-ADDRESS
/*     ===================
RESET A-ADD-POOL
ASSIGN A-ADD-POOL.COUNTRY-CODE = USA
PERFORM COLLECT-DATA
MOVE (AD=P) TO #ADDR-RETURNED-CV
*
IF #CONTACT-ADDR-POOL (1) = 0
  #ADDR-TYPE := PRIMARY
ELSE
  IF #CONTACT-ADDR-POOL (2) = 0
    #ADDR-TYPE := SECONDARY
  ELSE
    #ADDR-TYPE := 'O'
  END-IF
END-IF
#CODE-NAME    := 'ADDR-TYPE'
#ADDR-TYPE-TXT := FUNCTION-ADDR-CODES(<#CODE-NAME,#ADDR-TYPE>)
#POS := POS ( #STREET )
*
REPEAT
  PERFORM DO-SCR-ETC                                                    /* bz1
  IF #COUNTRY-CODE = USA
    INPUT WITH TEXT #MSG MARK #POS USING MAP 'ADRM0001'                   /* --M 1
  ELSE
    INPUT WITH TEXT #MSG MARK #POS USING MAP 'ADRM0003'
  END-IF
  DECIDE ON FIRST VALUE OF *PF-KEY
    VALUE 'PF3'
      ESCAPE BOTTOM
    VALUE 'ENTR'
      PERFORM INPUT-VALIDATION
    NONE VALUE IGNORE
  END-DECIDE
  UNTIL NOT #ERRORS
END-REPEAT
IF *PF-KEY NE 'PF3'
  CALLNAT 'ADRNT001' #ADDR-POOL-ID
  RESET A-ADD-POOL
  A-ADD-POOL.ADDRESS-POOL-ID := #ADDR-POOL-ID
  STORE A-ADD-POOL
  #ADDR-ISN := *ISN (0365)
  PERFORM ADD-ADDR-RELATIONSHIP
  IF *APPLIC-ID = #TEST
    print #ADDR-ISN #REL-ISN
  END-IF
  PERFORM DB-UPDATE
  IF #UPDATED
    PERFORM STATUS-UPDATE
    END TRANSACTION
    #MSG := #ADD-MSG
    CALLNAT 'MBRADR' #ADDR-POOL-ID
    CALLNAT 'ADRN0002' #CONTACT-ID #ADDR-POOL-ID
  ELSE
    #MSG := #NOUP-MSG
    BACKOUT TRANSACTION
  END-IF
END-IF
END-SUBROUTINE
*
DEFINE UI-ADDRESS
/*     ==========
RESET #MSG
REPEAT
  FIND A-ADD-POOL WITH ADDRESS-POOL-ID = #ADDR-POOL-ID
    #ADDR-ISN := *ISN
    PERFORM COLLECT-DATA
    #POS := POS ( #STREET )
    REPEAT
      PERFORM DO-SCR-ETC                                            /* bz1
      IF #COUNTRY-CODE = USA
        INPUT WITH TEXT #MSG MARK #POS USING MAP 'ADRM0001'         /* --M 2
      ELSE
        INPUT WITH TEXT #MSG MARK #POS USING MAP 'ADRM0003'
      END-IF
      DECIDE ON FIRST VALUE OF *PF-KEY
        VALUE 'PF3'
          ESCAPE BOTTOM
        VALUE 'PF4'
          IF *CURS-LINE = 3
            CALLNAT 'GUPCISXX'
              #CONTACT-ID
              #CONTACT-ID
              #CGA-ORIG-COMMAND
              CONTACT.ID-NUMBER
              #CGA-USER-COMPANY
              #CGA-CLERK
              #MODE
              #MSG
          ELSE
            #ADDR-POOL-ID-A := 'NEW'
            CALLNAT 'ADRN0002' #CONTACT-ID #ADDR-POOL-ID
            ESCAPE TOP
          END-IF
        VALUE 'PF11'
          PERFORM DELETE-RECORD
        VALUE 'PF12'
          CALLNAT 'ADRN0F12' #CONTACT-ID A-ADD-POOL.ADDRESS-POOL-ID #MODE
          escape top
        VALUE 'ENTR','PF2'
          PERFORM INPUT-VALIDATION
        NONE VALUE IGNORE
      END-DECIDE
      UNTIL NOT #ERRORS
    END-REPEAT
    IF (#CASS-FLAG = 'F' OR = 'N') AND #CHG-FLAG = 'N'     /* YK6
      ESCAPE TOP           /* YK6
    END-IF                 /* YK6
    PERFORM DB-UPDATE
    IF #UPDATED OR #DELETED
      END TRANSACTION
      #DO-TR-AND-SYNC := TRUE
      IF #UPDATED
        #MSG := #UPDATE-MSG
      ELSE
        #MSG := #DELETE-MSG
      END-IF
      RESET #UPDATED #DELETED
    ELSE
      BACKOUT TRANSACTION
      #MSG := #NOUP-MSG
    END-IF
  END-FIND
  UNTIL *PF-KEY = 'PF3'
END-REPEAT
*
IF #DO-TR-AND-SYNC
  PERFORM STATUS-UPDATE
  CALLNAT 'MBRADR' #ADDR-POOL-ID
  END TRANSACTION
END-IF
*
END-SUBROUTINE
*
DEFINE COLLECT-DATA
/*     ============
RESET #A-LINES-IND (*) #A-LINES (*)
MOVE (AD=DU) TO #MAP-CV #A-LINES-CV(*) #ADDR-RETURNED-CV #CV-STATUS #STATUS-DATE-CV
*
PERFORM POOL-STATUS
*
IF #REL-ISN > 0
  FIND A-ADD-REL WITH ADDRESS-POOL-ID = A-ADD-POOL.ADDRESS-POOL-ID
    IF A-ADD-REL.CONTACT-ID = #CONTACT-ID
      #HOLD-ATTENTION-LINE := A-ADD-REL.ATTENTION-LINE
      ESCAPE TOP
    END-IF
    IF A-ADD-REL.PREVENT-OVER-IND = 'S'
      ESCAPE TOP
    END-IF
    #SHARED := '(Shared)'
  END-FIND
  GET A-ADD-REL #REL-ISN
END-IF
*
IF #ADDR-POOL-ID > 0
  RESET #PDA-ADDRESS
  #ADD-CONTACT-ID := #CONTACT-ID
  #ADD-TYPE       := A-ADD-REL.ADDR-TYPE-CD             /* bzTR
  #ADD-OLD-FORMAT := YES
  #ADD-POOL-ID    := #ADDR-POOL-ID
  CALLNAT 'ADDN0001' #PDA-ADDRESS
  #A-LINES  (1) := #ADD-LINE-1
  #A-LINES  (2) := #ADD-LINE-2
  #A-LINES  (3) := #ADD-LINE-3
  #CLERK        := FUNCTION-NAME(<#ADD-LAST-USER-UPD>)  /* YK4
  IF SUBSTR ( #ADD-LINE-1,26,10) NE BLANK
    #A-LINES-IND (1) := '*'
  END-IF
  IF SUBSTR ( #ADD-LINE-2,26,10) NE BLANK
    #A-LINES-IND (2) := '*'
  END-IF
  IF SUBSTR ( #ADD-LINE-3,26,10) NE BLANK
    #A-LINES-IND (3) := '*'
  END-IF
*  PRINT #CONTACT-ID #ADDR-POOL-ID
*    / #ADD-LINE-1
*    / #ADD-LINE-2
*    / #ADD-LINE-3
END-IF
*
#STREET := A-ADD-POOL.STREET
#URBANIZATION := A-ADD-POOL.URBANIZATION
#UNIT   := A-ADD-POOL.UNIT
#CITY   := A-ADD-POOL.CITY
#ATTENTION-LINE := #HOLD-ATTENTION-LINE
*
#GEN-KEY := 'COUN'
#SUB-KEY := A-ADD-POOL.COUNTRY-CODE
FIND CNRY WITH SEC-KEY = #TABLE-KEY
  #COUNTRY := CNRY.GEN-DESCRIPTION
END-FIND
#COUNTRY-CODE := A-ADD-POOL.COUNTRY-CODE
*
#GEN-KEY := 'STCD'
#SUB-KEY := A-ADD-POOL.STATE-CODE
FIND CNRY WITH SEC-KEY = #TABLE-KEY
  #STATE := CNRY.GEN-ALPHA-VALUE
END-FIND
#STATE-CODE := A-ADD-POOL.STATE-CODE
*
IF A-ADD-POOL.LAST-USER-UPD = BLANK
  A-ADD-POOL.LAST-USER-UPD := *INIT-USER
END-IF
*
IF A-ADD-POOL.COUNTRY-CODE = USA OR= PUERTORICO
    AND ZIP-5 > 0
  MOVE EDITED ZIP-5 (EM=99999) TO #ZIP-5
  MOVE EDITED ZIP-4 (EM=9999) TO #ZIP-4
  IF #ZIP-4 NE BLANK
    COMPRESS #ZIP-5 #ZIP-4 INTO #ZIP WITH DELIMITER '-'
  END-IF
  ZIP := #ZIP
ELSE
  #POSTAL-CODE := A-ADD-POOL.POSTAL-CODE
  #INTL-REGION := A-ADD-POOL.INTL-REGION
END-IF
*
FIND CONTACT WITH CONTACT-ID = #CONTACT-ID
END-FIND
*
CALLNAT 'ADRN0004' #CONTACT-ID #H1 #H2
CALLNAT 'ADRN0003'
  #CONTACT-ID
  #ADDR-POOL-ID
  #PHONE-ID       /* 0
  #EMAIL-ID       /* 0
  #CODES #CODE-NAMES
*
IF #ADDR-PROTECT = 'S'
  IF #SECURED = BLANK
    MOVE (AD=NP) TO #CV-SECURED
  ELSE
    MOVE (AD=I) TO #CV-SECURED
    MOVE (AD=P) TO #MAP-CV #A-LINES-CV(*) #ADDR-RETURNED-CV #CV-STATUS #STATUS-DATE-CV
  END-IF
ELSE
  MOVE (AD=NP) TO #CV-SECURED
  MOVE (AD=U)  TO #CV-STATUS #STATUS-DATE-CV
  RESET #SECURED
END-IF
*
IF #ADDR-POOL-ID-A = 'NEW' OR #ADDR-POOL-ID = 0
  IGNORE
ELSE
  IF A-ADD-REL.STATUS = 'D'
    MOVE (AD=P) TO #MAP-CV #A-LINES-CV(*) #ADDR-RETURNED-CV #STATUS-DATE-CV
  END-IF
  IF A-ADD-REL.STATUS-DATE > 0
    MOVE EDITED A-ADD-REL.STATUS-DATE-A TO #D (EM=YYYYMMDD)
    MOVE EDITED #D (EM=MMDDYYYY) TO #STATUS-DATE
  END-IF
END-IF
*
IF #CONTACT-ADDR-POOL (1) = 0
  #MSG := 'There is no primary address for this contact'
END-IF
*
IF A-ADD-REL.LAST-DATE-UPD > 0
  MOVE EDITED A-ADD-REL.LAST-DATE-UPD-A TO #D (EM=YYYYMMDD)
  MOVE EDITED #D (EM=MM/DD/YYYY) TO #DATE-UPDATED-R
END-IF
*
END-SUBROUTINE
/*
DEFINE INPUT-VALIDATION
/*     ================
RESET #ERRORS
*
IF #ADDR-STATUS = 'D'
  ESCAPE ROUTINE
END-IF
*
* print #ADDR-TYPE #CONTACT-ADDR-POOL (1) #CONTACT-ADDR-POOL (2)
*
IF #ADDR-STATUS = 'R'
    AND #ADDR-STATUS NE A-ADD-REL.STATUS                    /* NG5
  IF #ADDR-TYPE EQ PRIMARY AND #CONTACT-ADDR-POOL (1) > 0
    #ERROR-NBR := 9
    #ERRORS := TRUE
    #MSG := #ERRORS-TXT ( #ERROR-NBR )
    #POS := POS ( #ADDR-STATUS )
    ESCAPE ROUTINE
  END-IF
  IF #ADDR-TYPE EQ SECONDARY AND #CONTACT-ADDR-POOL (2) > 0
    #ERROR-NBR := 9
    #ERRORS := TRUE
    #MSG := #ERRORS-TXT ( #ERROR-NBR )
    #POS := POS ( #ADDR-STATUS )
    ESCAPE ROUTINE
  END-IF
END-IF
*
IF #ADDR-TYPE EQ PRIMARY AND #CONTACT-ADDR-POOL (1) > 0
  IF #CONTACT-ADDR-POOL-ID (1) NE #ADDR-POOL-ID
    #ERROR-NBR := 6
    #ERRORS := TRUE
    #MSG := #ERRORS-TXT ( #ERROR-NBR )
    #POS := POS ( #ADDR-TYPE )
    ESCAPE ROUTINE
  END-IF
END-IF
*
IF #ADDR-TYPE EQ SECONDARY AND #CONTACT-ADDR-POOL (2) > 0
  IF #CONTACT-ADDR-POOL-ID (2) NE #ADDR-POOL-ID
    #ERROR-NBR := 7
    #ERRORS := TRUE
    #MSG := #ERRORS-TXT ( #ERROR-NBR )
    #POS := POS ( #ADDR-TYPE )
    ESCAPE ROUTINE
  END-IF
END-IF
*
#MSG := FUNCTION-CV-CHECK (<'006',#ADDR-TYPE>)
IF #MSG NE BLANK
  #ERRORS := TRUE
  #POS := POS ( #ADDR-TYPE )
  ESCAPE ROUTINE
END-IF
*
#MSG := FUNCTION-CV-CHECK (<'017',#ADDR-SOURCE>)
IF #MSG NE BLANK
  #ERRORS := TRUE
  #POS := POS ( #ADDR-SOURCE )
  ESCAPE ROUTINE
END-IF
*
#MSG := FUNCTION-CV-CHECK (<'002',#ADDR-LOCATION>)
IF #MSG NE BLANK
  #ERRORS := TRUE
  #POS := POS ( #ADDR-LOCATION )
  ESCAPE ROUTINE
END-IF
*
#MSG := FUNCTION-CV-CHECK (<'004',#ADDR-PROTECT>)
IF #MSG NE BLANK
  #ERRORS := TRUE
  #POS := POS ( #ADDR-PROTECT )
  ESCAPE ROUTINE
END-IF
*
#MSG := FUNCTION-CV-CHECK (<'005',#ADDR-RETURNED>)
IF #MSG NE BLANK
  #ERRORS := TRUE
  #POS := POS ( #ADDR-RETURNED )
  ESCAPE ROUTINE
END-IF
*                                                  NG2  \/\/
* #MSG := FUNCTION-CV-CHECK (<'007',#ADDR-VALID>)
* IF #MSG NE BLANK
*  #ERRORS := TRUE
*  #POS := POS ( #ADDR-VALID )
*  ESCAPE ROUTINE
* END-IF
*
#MSG := FUNCTION-CV-CHECK (<'018',#ADDR-STATUS>)
IF #MSG NE BLANK
  #ERRORS := TRUE
  #POS := POS ( #ADDR-STATUS )
  ESCAPE ROUTINE
END-IF
*
IF #ADDR-STATUS = ' ' AND #STATUS-DATE NE ' '
  #ERROR-NBR := 2
  #ERRORS := TRUE
  #MSG := #ERRORS-TXT ( #ERROR-NBR )
  #POS := POS ( #ADDR-STATUS )
  ESCAPE ROUTINE
END-IF
*
IF #STATUS-DATE NE ' ' AND #STATUS-DATE NE MASK(MMDDYYYY)
  #ERROR-NBR := 3
  #ERRORS := TRUE
  #MSG := #ERRORS-TXT ( #ERROR-NBR )
  #POS := POS ( #STATUS-DATE )
  ESCAPE ROUTINE
END-IF
*
IF #ADDR-TYPE EQ ' '
  #ERROR-NBR := 4
  #ERRORS := TRUE
  #MSG := #ERRORS-TXT ( #ERROR-NBR )
  #POS := POS ( #ADDR-TYPE )
  ESCAPE ROUTINE
END-IF
*
IF #ADDR-SOURCE EQ ' '
  #ERROR-NBR := 4
  #ERRORS := TRUE
  #MSG := #ERRORS-TXT ( #ERROR-NBR )
  #POS := POS ( #ADDR-SOURCE )
  ESCAPE ROUTINE
END-IF
*
#GEN-KEY := 'COUN'
#SUB-KEY := #COUNTRY-CODE
FIND CNRY WITH SEC-KEY = #TABLE-KEY
  IF NO RECORDS FOUND
    #ERROR-NBR := 8
    #ERRORS := TRUE
    #MSG := #ERRORS-TXT ( #ERROR-NBR )
    #POS := POS ( #COUNTRY-CODE )
    ESCAPE ROUTINE
  END-NOREC
  #COUNTRY := CNRY.GEN-DESCRIPTION
END-FIND
*
IF #COUNTRY-CODE = USA                          /* NG1
  #MSG := FUNCTION-STATE-CHECK (<#STATE-CODE>)
  IF #MSG NE BLANK
    #ERRORS := TRUE
    #POS := POS ( #STATE-CODE )
    ESCAPE ROUTINE
  END-IF
END-IF
*
CALLNAT 'ADRN0005' #CODES #CODE-NAMES
IF #STREET EQ ' '
  #ERROR-NBR := 1
  #ERRORS := TRUE
  #MSG := #ERRORS-TXT ( #ERROR-NBR )
  #POS := POS ( #STREET )
  ESCAPE ROUTINE
END-IF
*
* FIND (1) TERM WITH TERMINAL-ID = A-ADD-REL.LAST-USER-UPD      /* bz2-1
*   #CLERK-R := COMMENTS                                        /* bz2-1
* END-FIND                                                      /* bz2-1
* IF #CLERK-R = BLANK                                           /* bz2-1
*   CLERK-ID := A-ADD-REL.LAST-USER-UPD                         /* bz2-1
*   #CLERK-R := FUNCTION-CLERK-NAME (< CLERK-ID >)              /* bz2-1
* END-IF

IF #COUNTRY-CODE = USA OR= CANADA OR= PUERTORICO
  MOVE *TRANSLATE(#CITY,UPPER) TO #CITY
*  print #STATE-CODE #CITY
  IF #STATE-CODE = 'AA' OR= 'AP' OR= 'AE'
    IF NOT #CITY = 'APO' OR= 'DPO' OR= 'FPO'
      #ERROR-NBR := 11
      #ERRORS := TRUE
      #MSG := #ERRORS-TXT ( #ERROR-NBR )
      #POS := POS ( #CITY )
      ESCAPE ROUTINE
    END-IF
  END-IF
*
  IF #CITY = 'APO' OR= 'DPO' OR= 'FPO'
    IF NOT #STATE-CODE = 'AA' OR= 'AP' OR= 'AE'
      #ERROR-NBR := 10
      #ERRORS := TRUE
      #MSG := #ERRORS-TXT ( #ERROR-NBR )
      #POS := POS ( #STATE-CODE )
      ESCAPE ROUTINE
    END-IF
  END-IF
*
  IF #URBANIZATION NE A-ADD-POOL.URBANIZATION AND #COUNTRY-CODE = PUERTORICO
      OR #STREET NE A-ADD-POOL.STREET
      OR #UNIT NE A-ADD-POOL.UNIT
      OR #CITY NE A-ADD-POOL.CITY
      OR #STATE-CODE NE A-ADD-POOL.STATE-CODE
      OR #ZIP NE ZIP
      OR *PF-KEY = 'PF2'
    CALLNAT 'ADVN0002'
      #CONTACT-ID
      #URBANIZATION
      #STREET
      #UNIT
      #CITY
      #STATE-CODE
      #ZIP
      #CASS-FLAG
      #CHG-FLAG
*
*     IF *USER = 'XZBSL7' or= 'guentch'
*       PRINT #CASS-FLAG #CHG-FLAG / #DUMP
*     END-IF
*    #ADDR-VALID := 'Y'   /* #CASS-FLAG
    #ADDR-VALID := #CASS-FLAG                            /*  bz2
    IF #ADDR-VALID = 'N'                               /*  bz2
      RESET A-ADD-POOL.ADDR-VALID-DATE               /*  bz2
    END-IF                                             /*  bz2
    IF #COUNTRY-CODE = CANADA /* NG1 Fix International
      #POSTAL-CODE := #ZIP
      RESET #ZIP
    END-IF
  END-IF
ELSE
  RESET #ADDR-VALID
END-IF
*
END-SUBROUTINE
/*
DEFINE DB-UPDATE
/*     =========
IF #DELETED
  ESCAPE ROUTINE
END-IF
*
IF #ADDR-STATUS = 'D'
  IF #REL-ISN > 0
    GET A-ADD-REL #REL-ISN
    IF A-ADD-REL.STATUS  NE #ADDR-STATUS
      PERFORM DELETE-RECORD
      ESCAPE ROUTINE
    END-IF
  END-IF
END-IF
*
RESET #UPDATED
if *PF-KEY = 'PF3'
  escape routine
end-if
*
GET A-ADD-POOL #ADDR-ISN
*
IF A-ADD-POOL.STREET NE #STREET
    OR A-ADD-POOL.ADDR-VALID-IND NE #ADDR-VALID
    OR A-ADD-POOL.UNIT NE #UNIT
    OR A-ADD-POOL.CITY NE #CITY
    OR A-ADD-POOL.STATE-CODE NE #STATE-CODE
    OR A-ADD-POOL.COUNTRY-CODE NE #COUNTRY-CODE
    OR A-ADD-POOL.URBANIZATION NE #URBANIZATION
    OR A-ADD-POOL.POSTAL-CODE NE #POSTAL-CODE
    OR A-ADD-POOL.INTL-REGION NE #INTL-REGION
    OR ZIP NE #ZIP
*
  CALLNAT 'ADRN0006' #CONTACT-ID #ADDR-ISN #CN-SYNC-ISNS (*)
*
  A-ADD-POOL.ADDR-VALID-IND      := #ADDR-VALID
  IF #ADDR-VALID = 'N'                              /* bz2
    RESET A-ADD-POOL.ADDR-VALID-DATE               /* bz2
  ELSE                                              /* bz2
    A-ADD-POOL.ADDR-VALID-DATE     := *DATN
  END-IF                                            /* bz2
  A-ADD-POOL.COUNTRY-CODE        := #COUNTRY-CODE
  A-ADD-POOL.STATE-CODE          := #STATE-CODE
  A-ADD-POOL.URBANIZATION        := #URBANIZATION
  MOVE *TRANSLATE(#STREET,UPPER) TO A-ADD-POOL.STREET
  MOVE *TRANSLATE(#UNIT,UPPER)   TO A-ADD-POOL.UNIT
  MOVE *TRANSLATE(#CITY,UPPER)   TO A-ADD-POOL.CITY
  MOVE *TRANSLATE(#POSTAL-CODE,UPPER) TO A-ADD-POOL.POSTAL-CODE
  MOVE *TRANSLATE(#INTL-REGION,UPPER) TO A-ADD-POOL.INTL-REGION
  ZIP   := #ZIP
  ZIP-5 := ZIP-5-N
  ZIP-4 := ZIP-4-N
  #UPDATED := TRUE
END-IF
*
IF #UPDATED
  move edited *DATX (EM=YYYYMMDD) TO A-ADD-POOL.LAST-DATE-UPD-A
  move edited *TIMX (EM=HHIISST) TO A-ADD-POOL.LAST-TIME-UPD-A
  A-ADD-POOL.LAST-USER-UPD   := *USER
  A-ADD-POOL.LAST-USER-UPD := FUNCTION-CLERK (< A-ADD-POOL.LAST-USER-UPD >)  /*NG3
*  PRINT *PROGRAM *LINE A-ADD-POOL.LAST-USER-UPD                   /* --db
  UPDATE (0839)
  RESET #ADDR-RETURNED
END-IF
*
COMPRESS #STATUS-DATE-YY #STATUS-DATE-MM #STATUS-DATE-DD INTO #DATE-A LEAVING NO
*
IF A-ADD-REL.ADDRESS-POOL-ID  NE #ADDR-POOL-ID
    OR A-ADD-REL.ADDR-TYPE-CD NE #ADDR-TYPE
    OR A-ADD-REL.RETURNED-MAIL-IND NE #ADDR-RETURNED
    OR A-ADD-REL.PREVENT-OVER-IND  NE #ADDR-PROTECT
    OR #HOLD-ATTENTION-LINE      NE #ATTENTION-LINE
    OR A-ADD-REL.ADDRESS-SOURCE  NE #ADDR-SOURCE
    OR A-ADD-REL.ADDR-LOCATION   NE #ADDR-LOCATION
    OR A-ADD-REL.STATUS          NE #ADDR-STATUS
    OR A-ADD-REL.STATUS-DATE     NE #DATE
*
  GET A-ADD-REL #REL-ISN
*
  IF A-ADD-REL.RETURNED-MAIL-IND NE #ADDR-RETURNED
    IF #ADDR-RETURNED = 'Y'
      A-ADD-REL.RETURNED-MAIL-DATE := *DATN
    ELSE
      RESET A-ADD-REL.RETURNED-MAIL-DATE
    END-IF
  END-IF
  IF A-ADD-REL.PREVENT-OVER-IND  NE #ADDR-PROTECT
    IF #ADDR-PROTECT = 'Y' OR = 'S'
      A-ADD-REL.PREVENT-OVER-DATE := *DATN
    ELSE
      RESET A-ADD-REL.PREVENT-OVER-DATE
    END-IF
  END-IF
*
  A-ADD-REL.ADDRESS-SOURCE    := #ADDR-SOURCE
  A-ADD-REL.ADDRESS-POOL-ID   := #ADDR-POOL-ID
  A-ADD-REL.ADDR-TYPE-CD      := #ADDR-TYPE
  A-ADD-REL.RETURNED-MAIL-IND := #ADDR-RETURNED
  A-ADD-REL.PREVENT-OVER-IND  := #ADDR-PROTECT
  A-ADD-REL.ADDR-LOCATION     := #ADDR-LOCATION
  A-ADD-REL.ATTENTION-LINE    := #ATTENTION-LINE
  A-ADD-REL.STATUS            := #ADDR-STATUS
  IF #ADDR-STATUS NE ' ' AND #STATUS-DATE-N = 0
    MOVE *DATN TO A-ADD-REL.STATUS-DATE
  ELSE
    IF #STATUS-DATE = ' '
      RESET A-ADD-REL.STATUS-DATE
    ELSE
      COMPRESS #STATUS-DATE-YY #STATUS-DATE-MM #STATUS-DATE-DD INTO A-ADD-REL.STATUS-DATE-A LEAVING NO
    END-IF
  END-IF
  move edited *DATX (EM=YYYYMMDD) TO A-ADD-REL.LAST-DATE-UPD-A
  move edited *TIMX (EM=HHIISST) TO A-ADD-REL.LAST-TIME-UPD-A
  A-ADD-REL.LAST-USER-UPD   := *USER
  A-ADD-REL.LAST-USER-UPD := FUNCTION-CLERK (< A-ADD-REL.LAST-USER-UPD >)  /*NG3
*  PRINT *PROGRAM *LINE A-ADD-REL.LAST-USER-UPD                             /* --db
  UPDATE (0896)
  #UPDATED := TRUE
END-IF
*
END-SUBROUTINE
/*
DEFINE ADD-ADDR-RELATIONSHIP
/*     =====================
move edited *DATX (EM=YYYYMMDD) TO A-ADD-REL.LAST-DATE-UPD-A
move edited *TIMX (EM=HHIISST) TO A-ADD-REL.LAST-TIME-UPD-A
A-ADD-REL.LAST-USER-UPD     := *USER
A-ADD-REL.LAST-USER-UPD     := FUNCTION-CLERK (< A-ADD-REL.LAST-USER-UPD >)  /*NG3
A-ADD-REL.CONTACT-ID        := #CONTACT-ID
A-ADD-REL.ADDRESS-POOL-ID   := #ADDR-POOL-ID
A-ADD-REL.ADDR-TYPE-CD      := #ADDR-TYPE
A-ADD-REL.RETURNED-MAIL-IND := #ADDR-RETURNED
A-ADD-REL.PREVENT-OVER-IND  := #ADDR-OVERRD
A-ADD-REL.ATTENTION-LINE    := #ATTENTION-LINE
A-ADD-REL.STATUS            := #ADDR-STATUS
A-ADD-REL.STATUS-DATE       := #STATUS-DATE-N
STORE A-ADD-REL
#REL-ISN := *ISN (0955)
*
END-SUBROUTINE
/*
DEFINE SUBROUTINE DELETE-RECORD
/*                =============
RESET #CONFIRM-DELETE
IF F-CONTACT-INFO(<#CONTACT-ID,F-CONTACT-DATA>)
  IGNORE
END-IF
SET WINDOW 'Confirm-Delete'
REPEAT
  INPUT WINDOW='Confirm-Delete' USING MAP 'ADRM0002'
  IF *PF-KEY = 'PF3' OR #CONFIRM-DELETE = 'N'
    ESCAPE BOTTOM
  END-IF
  IF #CONFIRM-DELETE = 'Y'
    CALLNAT 'ADRN0006' #CONTACT-ID #ADDR-ISN #CN-SYNC-ISNS (*)
    GET A-ADD-REL #REL-ISN
    MOVE 'D' TO STATUS
    MOVE *DATN TO A-ADD-REL.STATUS-DATE LAST-DATE-UPD
    MOVE *TIMN TO LAST-TIME-UPD
    MOVE *USER TO LAST-USER-UPD
    A-ADD-REL.LAST-USER-UPD := FUNCTION-CLERK (< A-ADD-REL.LAST-USER-UPD >)  /*NG3
    UPDATE (0974)
    #DELETED := TRUE
    ESCAPE BOTTOM
  END-IF
END-REPEAT
SET WINDOW OFF
*
END-SUBROUTINE
*
DEFINE STATUS-UPDATE
/*     =============
IF CONTACT.ID-NUMBER = 0  /* No synchronization from Contact to Member
  ESCAPE ROUTINE
END-IF

IF NOT A-ADD-REL.ADDR-TYPE-CD = PRIMARY OR= SECONDARY
  IF A-ADD-REL.ADDR-TYPE-CD = OTHER                                       /*  bz3
    FIND ST-V WITH ID-NUMBER = CONTACT.ID-NUMBER                         /*  bz3
      TR_ID_NUMBER  := ST-V.ID-NUMBER                                    /*  bz3
      TR_NAME       := FUNCTION-CONTACT-NAME(<ST-V.MEMBER-CONTACT-ID>)   /*  bz3
      #ADD-POOL-ID    := #ADDR-POOL-ID                                   /*  bz3
      CALLNAT 'ADDN0001' #PDA-ADDRESS                                    /*  bz3
      TR_ID_NUMBER := ST-V.ID-NUMBER                                     /*  bz3
      PERFORM TRANS-REG-UPDATE                                           /*  bz3
    END-FIND                                                              /*  bz3
  END-IF                                                                  /*  bz3
  ESCAPE ROUTINE
END-IF
*
IF #DELETED
  RESET
    #ADD-LINE-1
    #ADD-LINE-2
    #ADD-LINE-3
    A-ADD-POOL.ZIP-CODE
ELSE
  #ADD-CONTACT-ID := #CONTACT-ID
  #ADD-TYPE       := A-ADD-REL.ADDR-TYPE-CD             /* bzTR
* #ADD-OLD-FORMAT := YES
  RESET #ADD-OLD-FORMAT                                 /* YK2
  #ADD-POOL-ID    := #ADDR-POOL-ID
  CALLNAT 'ADDN0001' #PDA-ADDRESS
END-IF
*
IF #DELETED
  RESET #CHANGE-CODE
ELSE
  DECIDE FOR FIRST CONDITION
    WHEN #ADDR-PROTECT = 'Y'
      #CHANGE-CODE := 'N'
    WHEN #ADDR-PROTECT = 'S'
      #CHANGE-CODE := 'X'
    WHEN #ADDR-RETURNED = 'Y'
      #CHANGE-CODE := 'U'
    WHEN #ADDR-VALID = 'F'
      #CHANGE-CODE := 'W'
    WHEN NONE
      #CHANGE-CODE := #ADDR-SOURCE
  END-DECIDE
END-IF
*
FIND ST-V WITH ID-NUMBER = CONTACT.ID-NUMBER
  TR_ID_NUMBER  := ST-V.ID-NUMBER                           /* YK3
* TR_NAME       := EDIT_NAME_FMLS(<CONTACT.FULL-NAME>)      /* YK3
  TR_NAME       := FUNCTION-CONTACT-NAME(<ST-V.MEMBER-CONTACT-ID>)   /* YK3

  PERFORM UPDATE-STATUS-RECORD
  PERFORM TRANS-REG-UPDATE
*  MOVE *DATN TO DATE-LAST-ADDR-UPDT     /*TT1
  UPDATE (1041)
END-FIND
*
FOR #J 1 TO 9
  IF #CN-SYNC-ISNS ( #J ) > 0
    GET ST-V #CN-SYNC-ISNS ( #J )
    TR_ID_NUMBER  := ST-V.ID-NUMBER                        /* YK3
    TR_NAME       := FUNCTION-CONTACT-NAME(<ST-V.MEMBER-CONTACT-ID>)  /* YK3
*    PERFORM UPDATE-STATUS-RECORD        /*TT1
    PERFORM TRANS-REG-UPDATE
    UPDATE (1054)
  END-IF
END-FOR
*
END-SUBROUTINE
/*
DEFINE UPDATE-STATUS-RECORD
/*     ====================
DECIDE ON FIRST VALUE OF A-ADD-REL.ADDR-TYPE-CD               /*TT1 START
  VALUE PRIMARY
    IGNORE
*    BEFORE_IMAGE.ADDRESS-CHG-CODE := ST-V.ADDRESS-CHG-CODE            /* YK1
  VALUE SECONDARY
    IGNORE
  NONE VALUE IGNORE                                           /*TT1 END
END-DECIDE
END-SUBROUTINE
/*
DEFINE INITIAL-SETTINGS
/*     ================
RESET #DO-TR-AND-SYNC
#CGA-ORIG-COMMAND := 'CG'
#MODE             := 'U'
MOVE *USER TO #USER
FIND (1) TERM WITH TERMINAL-ID = #USER
  #TR-CLERK-ID := CLERK-ID
  #CGA-CLERK   := CLERK-ID
END-FIND
#SECURED := '?'
MOVE '019'  TO #SUB-KEY
MOVE 'CODE' TO #GEN-KEY
FIND CNRY WITH SEC-KEY = #TABLE-KEY
  IF SUBSTR(GEN-ALPHA-VALUE,1,3) = #TR-CLERK-ID
    RESET #SECURED
    ESCAPE BOTTOM
  END-IF
END-FIND
PERFORM POOL-STATUS
PERFORM TR-BEFORE                         /* bzTR
END-SUBROUTINE
* = = = = = = = = =
DEFINE POOL-STATUS
/*     ===========
IF #ADDR-POOL-ID-A = 'NEW'
  RESET #ADDR-POOL-ID
END-IF
#UPDATE-REQUEST := #PRIMARY-UPDATE
RESET #CONTACT-ADDR-POOL (*)
FIND A-ADD-REL WITH CONTACT-ID = #CONTACT-ID
  DECIDE ON FIRST VALUE OF A-ADD-REL.ADDR-TYPE-CD
    VALUE PRIMARY
*      print A-ADD-REL
      IF A-ADD-REL.STATUS NE 'D'
        ADD 1 TO #CONTACT-ADDR-POOL (1)
        #CONTACT-ADDR-POOL-ID (1) := A-ADD-REL.ADDRESS-POOL-ID
      END-IF
    VALUE SECONDARY
*     print A-ADD-REL
      IF A-ADD-REL.STATUS NE 'D'
        ADD 1 TO #CONTACT-ADDR-POOL (2)
        #CONTACT-ADDR-POOL-ID (2) := A-ADD-REL.ADDRESS-POOL-ID
        IF #ADDR-POOL-ID = #CONTACT-ADDR-POOL-ID (2)
          #UPDATE-REQUEST := #SECONDARY-UPDATE
        END-IF
      END-IF
    NONE VALUE
      ADD 1 TO #CONTACT-ADDR-POOL (3)
  END-DECIDE
  IF #ADDR-POOL-ID = 0   /* NEW ADDRESS REQUEST
    IGNORE
  ELSE
    IF A-ADD-REL.ADDRESS-POOL-ID = #ADDR-POOL-ID
        AND #REL-ISN = 0
      #REL-ISN := *ISN (1107)
    END-IF
  END-IF
END-FIND
IF #REL-ISN > 0
  GET A-ADD-REL #REL-ISN
END-IF
END-SUBROUTINE
*
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE TR-BEFORE
*
IF #ADDR-POOL-ID <> 0
  RESET #PDA-ADDRESS
  #ADD-CONTACT-ID := #CONTACT-ID
  #ADD-TYPE       := A-ADD-REL.ADDR-TYPE-CD             /* bzTR
  #ADD-OLD-FORMAT := NO
  #ADD-POOL-ID    := #ADDR-POOL-ID
  CALLNAT 'ADDN0001' #PDA-ADDRESS
END-IF
BEFORE_IMAGE.ADDRESS-LINE-1    := #ADD-LINE-1        /* TT1 BEGIN
BEFORE_IMAGE.ADDRESS-LINE-2    := #ADD-LINE-2
BEFORE_IMAGE.ADDRESS-LINE-3    := #ADD-LINE-3
BEFORE_IMAGE.ADDR-TYPE-CD      := #ADD-TYPE
BEFORE_IMAGE.ADDR-VALID-IND    := #ADD-VALID-IND
BEFORE_IMAGE.RETURNED-MAIL-IND := #ADD-RETURNED-MAIL
BEFORE_IMAGE.PREVENT-OVER-IND  := #ADD-PREVENT-OVER-IND
BEFORE_IMAGE.ADDR-LOCATION     := #ADD-LOCATION
BEFORE_IMAGE.ADDRESS-SOURCE    := #ADD-ADDRESS-SOURCE
BEFORE_IMAGE.DATE-LAST-UPDATE  := #ADD-LAST-DATE-UPD
*
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE SUBROUTINE TR-AFTER
*
AFTER_IMAGE.ADDRESS-LINE-1    := #ADD-LINE-1
AFTER_IMAGE.ADDRESS-LINE-2    := #ADD-LINE-2
AFTER_IMAGE.ADDRESS-LINE-3    := #ADD-LINE-3
AFTER_IMAGE.ADDR-TYPE-CD      := #ADD-TYPE
AFTER_IMAGE.ADDR-VALID-IND    := #ADD-VALID-IND
AFTER_IMAGE.RETURNED-MAIL-IND := #ADD-RETURNED-MAIL
AFTER_IMAGE.PREVENT-OVER-IND  := #ADD-PREVENT-OVER-IND
AFTER_IMAGE.ADDR-LOCATION     := #ADD-LOCATION
AFTER_IMAGE.ADDRESS-SOURCE    := #ADD-ADDRESS-SOURCE       /* TT1 END
*
END-SUBROUTINE
* = = = = = =  = = = =  = = = = =  = = = = = = = = =  = = = = =
DEFINE TRANS-REG-UPDATE
PERFORM TR-AFTER
TR_CLERK      := #TR-CLERK-ID
CALLNAT 'GPRNTR00' FUNCTION_CODE TRAN_LOG_HEADER BEFORE_IMAGE AFTER_IMAGE
*
END-SUBROUTINE
* = = = = = =  = = = =  = = = = =  = = = = = = = = =  = = = = =
DEFINE DO-SCR-ETC                                     /*  bz2
IF A-ADD-POOL.LAST-DATE-UPD > 0
  MOVE EDITED A-ADD-POOL.LAST-DATE-UPD-A TO #D (EM=YYYYMMDD)
  MOVE EDITED #D (EM=MM/DD/YYYY) TO #DATE-UPDATED-P
END-IF
FIND (1) TERM WITH TERMINAL-ID = A-ADD-POOL.LAST-USER-UPD
  #CLERK-P := COMMENTS
END-FIND
IF #CLERK-P = BLANK
  CLERK-ID := A-ADD-POOL.LAST-USER-UPD
  #CLERK-P := FUNCTION-CLERK-NAME (< CLERK-ID >)
END-IF
FIND (1) TERM WITH TERMINAL-ID = A-ADD-REL.LAST-USER-UPD
  #CLERK-R := COMMENTS
END-FIND
IF #CLERK-R = BLANK
  CLERK-ID := A-ADD-REL.LAST-USER-UPD
  #CLERK-R := FUNCTION-CLERK-NAME (< CLERK-ID >)
END-IF
IF #ADDR-PROTECT = 'N' OR = ' '  RESET PREVENT-OVER-DATE #PREVENT-OVER-DATE-D END-IF
IF PREVENT-OVER-DATE-A = MASK (YYYYMMDD)
  MOVE EDITED PREVENT-OVER-DATE-A  TO #PREVENT-OVER-DATE-D  (EM=YYYYMMDD)
END-IF
IF #ADDR-RETURNED = 'N' OR = ' ' RESET RETURNED-MAIL-DATE #RETURNED-MAIL-DATE-D END-IF
IF RETURNED-MAIL-DATE-A = MASK (YYYYMMDD)
  MOVE EDITED RETURNED-MAIL-DATE-A TO #RETURNED-MAIL-DATE-D (EM=YYYYMMDD)
END-IF
IF #ADDR-VALID = 'N' OR = ' ' RESET  ADDR-VALID-DATE #ADDR-VALID-DATE-D END-IF
IF ADDR-VALID-DATE-A = MASK (YYYYMMDD)
  MOVE EDITED ADDR-VALID-DATE-A TO #ADDR-VALID-DATE-D (EM=YYYYMMDD)
END-IF
END-SUBROUTINE
END
