* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
**********************************************************************************************
*     Program : ATHNCOMB
*     Function : Combine DB/CR, Term Ref and BADJ amounts and apply them toward the Premium
* vxt 04/04/2014  Initial creation
* vxt 04/14/2015  vt1 /Ticket 3460/
* vxt 05/08/2015  vt2 /Ticket 3514/
* vxt 08/25/2016  vt3 /Ticket 4655/
**********************************************************************************************
define data parameter
1 #isn                           (p8)
1 #x-bill-adjust                 (n7.2)
1 #debit-credit-amt              (n7.2)
1 #OUT-TERM-REF-AMOUNT           (n7.2/10)
1 #OUT-TERM-REF-YEAR             (n4/10)
1 #NEW-POL-ISS-DATE              (n8/10)
1 #OUT-TERM-REF-ENTRY-DATE       (n8/10)
1 #NEW-TERM-POL-NBR              (a16/10)
1 #tot-premiums-paid             (n7.2)
1 #billing-adjustment            (n7.2)
1 #pol-num                       (a16)
1 #seg                           (I2)
1 #BADJ-left                     (A1)
1 #PAID-TO-DATE                  (N8)
1 redefine #paid-to-date
  2 #paid-to-date-yyyy            (n4)
  2 #paid-to-date-mm              (n2)
  2 #paid-to-date-dd              (n2)
1 redefine #paid-to-date
  2 #paid-to-date-yyyymm    (n6)
  2 #paid-to-date-dd1        (n2)
1 #2-mons-ago               (n8)
1 redefine #2-mons-ago
  2 #2-mons-ago-yyyymm   (n6)
  2 #2-mons-ago-dd       (n2)
   
local
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 MEMBER-CONTACT-ID
  2 X-BILL-ADJUST        (9)
  2 plan                 (9)
  2 DEBIT-CREDIT-AMT
  2 PROCESS-IND
  2 DATE-ACCT-UPDATE
  2 DTS-DATN
  2 DTS-TIMN
  2 c*out-term-ref-group
  2 OUT-TERM-REF-AMOUNT           (10)
  2 OUT-TERM-REF-YEAR             (10)
  2 NEW-POL-ISS-DATE              (10)
  2 OUT-TERM-REF-ENTRY-DATE       (10)
  2 NEW-TERM-POL-NBR              (10)
*
  2 annual-prem                 (9)
  2 paid-to-date                (n8/9)
  2 redefine paid-to-date
    3 paid-to-date-yyyymm       (n6/9)
    3 paid-to-date-dd           (n2/9)
  2 tot-premiums-paid           (9)
  2 mode                        (a1/9)
  2 pay-status                  (A2/9)
*  2 date-of-birth
  2 status                      (a1/9)
  2 issue-date                  (n8/9)
  2 paid-up-date                (n8/9)
  2 mtd-acv-prem-adj            (9)
  2 month-alloc-amt             (9)
  2 x-bill-dollar               (9)
  2 ownership-flag              (9)
  2 dues-all-paid-ind
  2 dues-balance
  2 dues-fpf
  2 dues-tot-paid
  2 intro-flag
  2 rid-plan                    (9)
  2 rid-eff-dt                  (9)
  2 rid-pd-to                   (9)
*
1 ACCT-REG-V VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER             (N6)
  2 POLICY-NUMBER
  2 PROCESS-IND           (A1)
  2 TRANSACTION-DATN      (P9)
  2 TRANSACTION-TIMN      (P7)
  2 TXN-CODE              (A4)
  2 SEQUENCE-NUM          (N1)
  2 NAME                  (A25)
  2 TXN-ACCT-NUMBER       (N3)
  2 ACCT-DATE             (N8)
  2 DATE-LAST-ACCT-UPDATE (N8)
  2 DEBIT-AMOUNT          (P7.2)
  2 CREDIT-AMOUNT         (P7.2)
  2 DESCRIPTION           (A20)
  2 MESSAGE-CODE          (A1)
  2 AALP-FLAG             (A1)
  2 CLERK-ID              (A3)
  2 TERMINAL-ID           (A8)
  2 CASH-CODE             (A1)
  2 SG-CATEGORY-1         (A2/15)
  2 SG-CATEGORY-2         (A2/15)
  2 SG-AMOUNT             (N6.2/15)
*
1 CT-V VIEW OF A-CONTACTS
  2 CONTACT-ID           (N8)
  2 FIRST-NAME           (A25)
  2 MIDDLE-NAME          (A25)
  2 LAST-NAME            (A25)
  2 SUFFIX               (A10)
*
1 #NAME-FIELDS
  2 #FIRST                (A25)
  2 #MIDDLE               (A25)
  2 #LAST                 (A25)
  2 #SUFFIX               (A10)
  2 #NAME-ACCTG           (A50)
*
1 #plan                 (a3)
1 #I1                   (I2)
1 #TOTAL-trmf           (N7.2)
1 #DATN                 (N8)
1 #TIMN                 (N7)
1 #tran-code            (a4)
1 #tran-amt             (n7.2)
*
1 #DATE-MMDDYYYY           (N8)
1 REDEFINE #DATE-MMDDYYYY
  2 #MMDD                  (N4)
  2 #YYYY                  (N4)
1 REDEFINE #DATE-MMDDYYYY
  2 #DATE-MMDDYYYY-A       (A8)
1 #yyyymmdd                (n8)
1 redefine #yyyymmdd
  2 #yyyy                    (n4)
1 redefine #yyyymmdd
  2 #yyyymm                (n6)
  2 #dd                    (n2)
1 #1-yr-ago                (n8)
1 #monthly-prem            (n7.2)
1 #start-amt               (n7.2)
1 #tot-prep-amt            (n7.2)
1 #total-amt               (n7.2)
1 #cash-code               (a1)
1 #disp-amt                (a11)
1 #cc-x                    (i2)
1 #inp-amt                 (p7.2)
1 #inp-tr-cd               (a4)
1 #iln1                    (i2)
1 #iln2                    (i2)
1 #lx                      (i2)
1 #mode                    (a1)
1 #update-mode             (l) init<TRUE>
*
1 #SG-TBL (15)
  2 #SG-CAT1 (A2)
  2 #SG-CAT2 (A2)
  2 #SG-AMT  (N6.2)
1  #cap-policy             (l)
1  #error-message          (a75)
1  #web-charge             (a1) INIT <'Y'>
1  #issue-date             (n8)
1  #note-text              (A60/10)
1 #int                     (i2)
1 #cga-clerk               (a3)
*
local using c2500aam
END-DEFINE
************************************************************************
*
ON ERROR
  PRINT  (1) "CN:" ST-V.ID-NUMBER  "Err-ln:" *ERROR-LINE "Err:" *ERROR-NR /
END-ERROR
*
#datn          := *datn
#DATE-MMDDYYYY := FUNCTION-DATE(<#DATN>)
#YYYYMMDD      := *datn
SUBTRACT 1 FROM #YYYYMMDD.#YYYY
move #yyyymmdd to #1-yr-ago
#YYYYMMDD      := *datn
#TIMN          := *TIMN
*
G1. get st-v #isn
*
#plan := st-v.Plan(#seg)
* #paid-to-date  := st-v.paid-to-date(#seg)               /* vt2 
#tot-premiums-paid := st-v.tot-premiums-paid(#seg)
#billing-adjustment := st-v.x-bill-adjust(#seg)
*
FIND (1) CT-V WITH CT-V.CONTACT-ID = ST-V.MEMBER-CONTACT-ID
  #LAST       := CT-V.LAST-NAME
  #FIRST      := CT-V.FIRST-NAME
  #MIDDLE     := CT-V.MIDDLE-NAME
  #SUFFIX     := CT-V.SUFFIX
end-find
*
#NAME-ACCTG := FUNCTION-DISP-CT-NAME(<#FIRST,#MIDDLE,#LAST,#SUFFIX>)
*
* process debit-credit-amount
*
if st-v.debit-credit-amt ne 0
  #billing-adjustment := #billing-adjustment + st-v.debit-credit-amt
  st-v.x-bill-adjust(#seg) := st-v.x-bill-adjust(#seg) + st-v.debit-credit-amt
  #x-bill-adjust := st-v.x-bill-adjust(#seg) + st-v.debit-credit-amt
  #tran-amt := st-v.debit-credit-amt
  if #tran-amt lt 0
    compute #tran-amt = #tran-amt * -1
  end-if
  #tran-code := 'RDCR'
  perform store-acct-reg-term
  #tran-code := 'BADJ'
  perform store-acct-reg-term
  reset st-v.debit-credit-amt #debit-credit-amt
end-if
*
* process term refunds
*
for1. FOR #I1 1 TO 10
  if ST-V.OUT-TERM-REF-AMOUNT (#I1) = 0
    escape bottom (for1.)
  else
    #TOTAL-trmf := #total-trmf + st-v.out-term-ref-amount(#i1)
    reset #OUT-TERM-REF-AMOUNT        (#i1)
      #OUT-TERM-REF-YEAR              (#i1)
      #NEW-POL-ISS-DATE               (#i1)
      #OUT-TERM-REF-ENTRY-DATE        (#i1)
      #NEW-TERM-POL-NBR               (#i1)
  end-if
end-for
*
if #total-trmf ne 0
  compute #total-trmf = #total-trmf * (-1)
  #billing-adjustment := #billing-adjustment + #total-trmf
  st-v.X-BILL-ADJUST(#SEG) := st-v.X-BILL-ADJUST(#SEG) -  #total-trmf
  #x-bill-adjust := st-v.X-BILL-ADJUST(#SEG) -  #total-trmf
  if #total-trmf lt 0
    compute  #total-trmf  = #total-trmf * -1
  end-if
  #tran-amt := #total-trmf
  #tran-code := 'RTRC'
  perform store-acct-reg-term
  #tran-code := 'BADJ'
  perform store-acct-reg-term
*
  reset  #OUT-TERM-REF-AMOUNT      (*)
    #OUT-TERM-REF-YEAR        (*)
    #NEW-POL-ISS-DATE         (*)
    #OUT-TERM-REF-ENTRY-DATE  (*)
    #NEW-TERM-POL-NBR         (*)
else
  reset  #OUT-TERM-REF-AMOUNT      (*)
    #OUT-TERM-REF-YEAR        (*)
    #NEW-POL-ISS-DATE         (*)
    #OUT-TERM-REF-ENTRY-DATE  (*)
    #NEW-TERM-POL-NBR         (*)
end-if
*
* apply payments with combined amount from billing adjustment field
*
if #billing-adjustment ne 0
  #monthly-prem := st-v.annual-prem(#seg) / 12
  #plan := st-v.plan(#seg)
  #start-amt := #billing-adjustment
  if #billing-adjustment  lt 0
    #billing-adjustment  := #billing-adjustment  * -1
  end-if
  #BADJ-left := 'Y'
*
  rep.
  repeat while #billing-adjustment  ne 0
    if  #billing-adjustment   ge #monthly-prem
      compute #billing-adjustment  = #billing-adjustment  - #monthly-prem
      compute x-bill-adjust(#seg) := x-bill-adjust(#seg)  - #monthly-prem
      compute #x-bill-adjust := x-bill-adjust(#seg)  - #monthly-prem
      #paid-to-date-dd := 15
      add 1 to #PAID-TO-DATE-MM
      IF #PAID-TO-DATE-MM GT 12
        SUBTRACT 12 FROM #PAID-TO-DATE-MM
        ADD 1 TO #PAID-TO-DATE-YYYY
      END-IF
      add #monthly-prem to #tot-prep-amt
      add #monthly-prem to #total-amt
      #tran-amt    := #monthly-prem
      if #tot-prep-amt = #start-amt
        reset #x-bill-adjust
        reset #debit-credit-amt
        reset  #OUT-TERM-REF-AMOUNT      (*)
          #OUT-TERM-REF-YEAR        (*)
          #NEW-POL-ISS-DATE         (*)
          #OUT-TERM-REF-ENTRY-DATE  (*)
          #NEW-TERM-POL-NBR         (*)
      end-if
      if #billing-adjustment = 0
        move 'N' to #badj-left
        reset #x-bill-adjust  #debit-credit-amt
        reset  #OUT-TERM-REF-AMOUNT      (*)
          #OUT-TERM-REF-YEAR        (*)
          #NEW-POL-ISS-DATE         (*)
          #OUT-TERM-REF-ENTRY-DATE  (*)
          #NEW-TERM-POL-NBR         (*)
      end-if
    else
*      if (#paid-to-date-yyyymm gt #2-mons-ago-yyyymm )      /* vt1
       if (#paid-to-date  gt #2-mons-ago )                   /* vt1
        reset #total-amt
        if #tot-prep-amt ne 0
          st-v.x-bill-adjust(#seg) := #billing-adjustment * -1
          #x-bill-adjust := #billing-adjustment * -1
        end-if
        escape bottom (rep.)
      else
        #cash-code:= 'A'
        #tran-amt    := #billing-adjustment
        add #tran-amt to #total-amt
        #tran-code   := 'PREP'
        perform store-ACCT-REG
        move edited  #billing-adjustment (em=zzz,zz9.99) to #disp-amt
        perform create-note
        compute #tot-premiums-paid := #tot-premiums-paid + #billing-adjustment
        reset #billing-adjustment st-v.x-bill-adjust(#seg) #x-bill-adjust
        reset  #debit-credit-amt
        reset  #OUT-TERM-REF-AMOUNT      (*)
          #OUT-TERM-REF-YEAR        (*)
          #NEW-POL-ISS-DATE         (*)
          #OUT-TERM-REF-ENTRY-DATE  (*)
          #NEW-TERM-POL-NBR         (*)
        #BADJ-left := 'N'                                         
      end-if
    end-if
  end-repeat
*
  if #tot-prep-amt ne 0
    #tran-amt  := #tot-prep-amt
    #tran-code := 'PREP'
    perform store-ACCT-REG
  end-if
*
  if #total-amt ne 0 or #tot-prep-amt ne 0
    if #total-amt ne 0
      #tran-amt := #total-amt
    else
      if #tot-prep-amt ne 0
        #tran-amt := #tot-prep-amt
      end-if
    end-if
    #tran-code := 'BADJ'
    perform store-acct-reg
  end-if
*
else
  reset #debit-credit-amt  x-bill-adjust(#seg) #x-bill-adjust
    #OUT-TERM-REF-AMOUNT      (*)
    #OUT-TERM-REF-YEAR        (*)
    #NEW-POL-ISS-DATE         (*)
    #OUT-TERM-REF-ENTRY-DATE  (*)
    #NEW-TERM-POL-NBR         (*)
    #badj-left := 'N'                       /* vt3  
end-if
*
*****************
define subroutine store-ACCT-REG
*****************
*
RESET ACCT-REG-V
ACCT-REG-V.id-number               := ST-V.id-number
ACCT-REG-V.transaction-datn        := #datn
ACCT-REG-V.transaction-timn        := #timn
ACCT-REG-V.acct-date               := #datn
ACCT-REG-V.cash-code               := 'A'
ACCT-REG-V.name                    := #NAME-ACCTG
ACCT-REG-V.clerk-id                := 'EDS'
ACCT-REG-V.terminal-id             := *init-id
ACCT-REG-V.TXN-CODE                := #tran-code
ACCT-REG-V.PROCESS-IND             := ST-V.PROCESS-IND
ACCT-REG-V.AALP-FLAG               := #SCR-ALP-CODE  (1)
ACCT-REG-V.POLICY-NUMBER           := #POL-Num
ACCT-REG-V.SG-AMOUNT           (1) := #tran-amt
ACCT-REG-V.credit-amount           := #tran-amt
if #tran-code  = 'BADJ'
  ACCT-REG-V.debit-amount            := #tran-amt
  reset ACCT-REG-V.credit-amount
end-if
ACCT-REG-V.MESSAGE-CODE            := '1'
IF #plan = 'SO'
  ACCT-REG-V.txn-code := 'DUEP'
  ACCT-REG-V.sg-category-1(1) := 'SO'
  ACCT-REG-V.TXN-ACCT-NUMBER  := 422
else
  ACCT-REG-V.TXN-ACCT-NUMBER  := 420
end-if
*
if #plan = 'OL' OR= '20P' OR= '30P' OR= '7P' OR= 'SO' OR= 'SPF' OR= 'FSO'
    OR= 'LT' OR= 'RT' OR = 'GPL' OR = 'EZ' or = 'GP2'
  move #plan to ACCT-REG-V.sg-category-2(1)
else
  if f-lt2-true(<#plan>)
    move 'VT' to ACCT-REG-V.sg-category-2(1)
  else
    if (#plan = mask (NN'F'))
        or (#plan = mask (N'PF'))
        or (#plan = 'SPF')
      move 'FL' TO ACCT-REG-V.sg-category-2(1)
    else
      move 'FX' to ACCT-REG-V.sg-category-2(1)
    end-if
  end-if
end-if
*
IF ACCT-REG-V.txn-code = 'BADJ'
  ACCT-REG-V.TXN-ACCT-NUMBER  := 420
END-IF
*
IF #TIMN = 0 AND ACCT-REG-V.TXN-ACCT-NUMBER   NE 999
  ACCT-REG-V.TXN-ACCT-NUMBER  := 999
END-IF
ACCT-REG-V.DESCRIPTION             := 'Pay with BADJ amt'
*
if #TRAN-CODE   = 'PREP'
  IF #ISSUE-DATE GT #1-YR-AGO
    MOVE '1Y' TO ACCT-REG-V.SG-CATEGORY-1 (1)
  ELSE
    MOVE 'RN' TO ACCT-REG-V.SG-CATEGORY-1 (1)
  END-IF
END-IF
*
if #plan = 'SO'
  move #plan to ACCT-REG-V.sg-category-1(1)
end-if
*
STORE ACCT-REG-V
*
end-subroutine
*
*****************
define subroutine create-note
*****************
*
compress '$' #disp-amt into #disp-amt leaving no
COMPRESS 'The amount of'  #DISP-amt 'is coded to premiums/premium-short.'  INTO #NOTE-TEXT(1)
MOVE 1 TO #INT
MOVE 'EDS' TO #CGA-CLERK
CALLNAT 'E4205SDM' ST-V.ID-NUMBER #INT #CGA-CLERK #NOTE-TEXT (1:10)
*
end-subroutine
*
******************
DEFINE SUBROUTINE store-acct-reg-term
******************
*
RESET ACCT-REG-V
ACCT-REG-V.ID-NUMBER                 := ST-V.ID-NUMBER
ACCT-REG-V.PROCESS-IND               := ST-V.PROCESS-IND
ACCT-REG-V.POLICY-number             := #pol-num
ACCT-REG-V.TRANSACTION-DATN          := #DATN
ACCT-REG-V.ACCT-DATE                 := #DATN
ACCT-REG-V.TRANSACTION-TIMN          := 0000001
ACCT-REG-V.TERMINAL-ID               := *INIT-ID
ACCT-REG-V.CLERK-ID                  := 'EDS'
ACCT-REG-V.NAME                      := #NAME-ACCTG
ACCT-REG-V.CASH-CODE                 := 'A'
ACCT-REG-V.TXN-CODE                  := #tran-code
ACCT-REG-V.TXN-ACCT-NUMBER           := 111
ACCT-REG-V.credit-AMOUNT             := #tran-amt
if #tran-code  = 'RDCR' or = 'RTRC'
  ACCT-REG-V.DEBIT-AMOUNT              := #tran-amt
  reset acct-reg-v.credit-amount
end-if
*
if   #tran-code  =   'RTRC'
  ACCT-REG-V.DESCRIPTION               := 'Term Ref moved'
end-if
*
if   #tran-code  =   'RDCR'
  ACCT-REG-V.DESCRIPTION               := 'DB/CR moved'
end-if
*
ACCT-REG-V.DATE-LAST-ACCT-UPDATE     := #DATN
*
STORE ACCT-REG-V
*
END-SUBROUTINE
*

END
