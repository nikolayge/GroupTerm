* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
/** New Program MSCREP.
/**
/** :author nguentchev
/* TODO Enter your code here
DEFINE DATA
LOCAL
1 #OLDDATA (A44) 1 REDEFINE #OLDDATA
  2 #CN     (N6)
  2 #POLID  (A16)
  2 #PLAN   (A3)
  2 #FACE   (N7.2)
  2 #STATUS (A1)
  2 #DBENE  (N7.2)
1 #NEWDATA (A44) 1 REDEFINE #NEWDATA
  2 #CN     (N6)
  2 #POLID  (A16)
  2 #PLAN   (A3)
  2 #FACE   (N7.2)
  2 #STATUS (A1)
  2 #DBENE  (N7.2)
1 #EOF      (L)
1 #PID      (A16/9)
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 INTRO-FLAG        (A1)
  2 MILITARY-STATUS   (A1)
  2 MILITARY-SERVICE  (A3)
  2 C*ACTIVE-SEGMENTS (N3)
  2 PLAN (9)
  2 STATUS (9)
  2 FACE-AMOUNT (9)
  2 DEATH-BENEFIT (9)
1 #CREATE-DIF   (L)
1 #EXIST        (L)
1 J             (I2)
1 RA            (I2)
1 AP-NBR        (N2)
1 #DIF          (A120)
1 BLANK         (A1) CONST <' '>
1 #TS           (A10) CONST <'Timestamp:'>
1 #REASON       (A16)
1 #REASON1      (A16)
1 #PROC-TIME    (A15) 1 REDEFINE #PROC-TIME
  2 #PROC-DATE    (A8)
1 #ISN          (P8)
1 PRODUCT
  2 PRODUCT_ID    (A16)
  2 FACE_AMOUNT   (N7.2)
  2 DEATH_BENEFIT (N7.2)
  2 PRODUCT_CODE  (A3)
  2 ID-NUMBER     (N6.0)
  2 MEMBER_TYPE   (A1)
  2 STATUS_CODE   (A16)
END-DEFINE
*
* DEFINE WORK FILE 1 '/usr/SAG/tmp/MS_OLD_SNAPSHOT.txt' TYPE 'ASCII'
* DEFINE WORK FILE 2 '/usr/SAG/tmp/MS_NEW_SNAPSHOT.txt' TYPE 'ASCII'
* DEFINE WORK FILE 3 '/usr/SAG/tmp/MS_DIF_SNAPSHOT.txt' TYPE 'ASCII'
*
MOVE EDITED *TIMX (EM=YYYYMMDDHHIISST) TO #PROC-TIME
COMPRESS #TS #PROC-TIME INTO #NEWDATA LEAVING NO
WRITE WORK 2 #NEWDATA
*
* READ ST-V BY ID-NUMBER
*     STARTING FROM 1901
*   IF ST-V.ID-NUMBER > 499999
*     ESCAPE BOTTOM
*   END-IF
*   PERFORM PUT-SNAPSHOT-REC
* END-READ
* ESCAPE ROUTINE
*
PERFORM GET-SNAPSHOT-RECORD
IF SUBSTR(#OLDDATA,1,10) = #TS
  MOVE SUBSTR(#OLDDATA,11,15) TO #PROC-TIME
  PERFORM GET-SNAPSHOT-RECORD
ELSE
  INPUT 'PROCESSING DATE (YYYYMMDD):' #PROC-DATE
END-IF
#REASON := #PROC-TIME
COMPRESS #NEWDATA 'Snapshot date' INTO #NEWDATA
WRITE WORK 3 'new' #NEWDATA #REASON
RL.
READ ST-V BY ID-NUMBER
    STARTING FROM 6737
  IF ST-V.ID-NUMBER > 499999
    ESCAPE BOTTOM
  END-IF
  #ISN := *ISN (RL.)
  PERFORM PUT-SNAPSHOT-REC
*   IF #OLDDATA.#CN GE 122035
*     PRINT ST-V.ID-NUMBER #OLDDATA.#CN
*   END-IF
  IF #EOF
    FOR J 1 TO C*ACTIVE-SEGMENTS
      #REASON := 'NU-MBR'
      PERFORM NEW-DIFF  /* NEW POLICY
    END-FOR
    ESCAPE TOP   /* READ NEW STATUS
  END-IF
  DECIDE FOR FIRST CONDITION
    WHEN ST-V.ID-NUMBER < #OLDDATA.#CN
      FOR J 1 TO C*ACTIVE-SEGMENTS
        #REASON := 'NU-MBR'
        PERFORM NEW-DIFF  /* NEW POLICY
      END-FOR
      ESCAPE TOP   /* READ NEW STATUS
    WHEN ST-V.ID-NUMBER > #OLDDATA.#CN /* READ SNAPSHOT
      #REASON := 'PolDeleted'
      WRITE WORK 3 'old' #OLDDATA  #REASON
      PERFORM GET-SNAPSHOT-RECORD
      REPEAT UNTIL ST-V.ID-NUMBER LE #OLDDATA.#CN
          OR #EOF
        IF NOT #EOF
          #REASON := 'PolDeleted'
          WRITE WORK 3 'old' #OLDDATA  #REASON
          PERFORM GET-SNAPSHOT-RECORD
        END-IF
      END-REPEAT
      PERFORM PROCESS-MATCH
    WHEN NONE
      PERFORM PROCESS-MATCH
  END-DECIDE
END-READ
/*
DEFINE PROCESS-MATCH
/*     -------------  READ SNAPSHOT
REPEAT UNTIL ST-V.ID-NUMBER LT #OLDDATA.#CN
    OR #EOF
  RESET #EXIST
  FOR J 1 TO C*ACTIVE-SEGMENTS
    IF #PID (J) = BLANK
      ESCAPE TOP
    END-IF
    #EXIST := TRUE
    IF #PID (J) = #OLDDATA.#POLID
      PERFORM CHECK-FOR-CHANGES
      RESET #PID (J)
      PERFORM GET-SNAPSHOT-RECORD
      ESCAPE BOTTOM
    END-IF
  END-FOR
  IF J > C*ACTIVE-SEGMENTS
    IF #EXIST
      #REASON := 'PolDeleted'
      WRITE WORK 3 'old' #OLDDATA  #REASON
    END-IF
    PERFORM GET-SNAPSHOT-RECORD
  END-IF
END-REPEAT
FOR J 1 TO C*ACTIVE-SEGMENTS
  IF #PID (J) NE BLANK
    #REASON := 'NU-MBR'
    PERFORM NEW-DIFF  /* NEW POLICY
  END-IF
END-FOR
END-SUBROUTINE
/*
DEFINE GET-SNAPSHOT-RECORD
/*     -------------------
READ WORK 1 ONCE RECORD #OLDDATA
AT END OF FILE
  #EOF := TRUE
END-ENDFILE
END-SUBROUTINE
*
DEFINE PUT-SNAPSHOT-REC
/*     ----------------
RESET #PID (*) AP-NBR
FOR J 1 TO C*ACTIVE-SEGMENTS
  CALLNAT 'GPLNMSXX' #PID (J)  ST-V.ID-NUMBER J
  #NEWDATA.#CN    := ST-V.ID-NUMBER
  #NEWDATA.#POLID := #PID (J)
  #NEWDATA.#PLAN  := PLAN (J)
  #NEWDATA.#FACE  := FACE-AMOUNT (J)
  #NEWDATA.#DBENE  := DEATH-BENEFIT (J)
  #NEWDATA.#STATUS := STATUS (J)
  WRITE WORK 2 #NEWDATA
  IF STATUS (J) = 'D'
    ADD 1 TO AP-NBR
  END-IF
END-FOR
END-SUBROUTINE
*
DEFINE CHECK-FOR-CHANGES
/*     -----------------
DECIDE FOR FIRST CONDITION
  WHEN ST-V.FACE-AMOUNT (J) NE #OLDDATA.#FACE
    #REASON := 'FaceChange'
    #CREATE-DIF := TRUE
  WHEN ST-V.PLAN (J) NE #OLDDATA.#PLAN
    #REASON := 'PlanChange'
    #CREATE-DIF := TRUE
  WHEN ST-V.DEATH-BENEFIT (J) NE #OLDDATA.#DBENE
      AND ST-V.DEATH-BENEFIT (J) NE ST-V.FACE-AMOUNT (J)
    #REASON := 'DBChange'
    #CREATE-DIF := TRUE
  WHEN ST-V.STATUS (J) NE #OLDDATA.#STATUS
    RESET #REASON #CREATE-DIF
    IF #OLDDATA.#STATUS = 'D'
      #REASON := 'INS-END'
    END-IF
    IF ST-V.STATUS (J) = 'D'
      #REASON := 'REINSTAT'
    END-IF
    IF #REASON NE BLANK
      #CREATE-DIF := TRUE
    END-IF
  WHEN NONE
    RESET #CREATE-DIF
END-DECIDE
IF #CREATE-DIF
  IF #REASON = 'PlanChange'
    #REASON := 'AD-INS'
    PERFORM NEW-DIFF /* Creates/Updates MD record
*
    #REASON := 'RESIGNS'
    WRITE WORK 3 'old' #OLDDATA #REASON
    ST-V.FACE-AMOUNT (J)   := - #OLDDATA.#FACE
    ST-V.DEATH-BENEFIT (J) := - #OLDDATA.#DBENE
    PERFORM CREATE-PRODUCT-STATUS
  ELSE
    WRITE WORK 3 'old' #OLDDATA #REASON
    ST-V.FACE-AMOUNT (J)   := #NEWDATA.#FACE  - #OLDDATA.#FACE
    ST-V.DEATH-BENEFIT (J) := #NEWDATA.#DBENE - #OLDDATA.#DBENE
    PERFORM NEW-DIFF
  END-IF
END-IF
END-SUBROUTINE
*
DEFINE NEW-DIFF
/*     --------
#NEWDATA.#CN     := ST-V.ID-NUMBER
#NEWDATA.#POLID  := #PID (J)
#NEWDATA.#PLAN   := PLAN (J)
#NEWDATA.#FACE   := FACE-AMOUNT (J)
#NEWDATA.#DBENE  := DEATH-BENEFIT (J)
#NEWDATA.#STATUS := STATUS (J)
WRITE WORK 3 'new' #NEWDATA #REASON
PERFORM CREATE-PRODUCT-STATUS
END-SUBROUTINE
*
DEFINE CREATE-PRODUCT-STATUS
/*     ---------------------
ADD 1 TO RA
RESET PRODUCT
PRODUCT_ID    := #PID (J)
FACE_AMOUNT   := FACE-AMOUNT (J)
DEATH_BENEFIT := DEATH-BENEFIT (J)
DECIDE FOR FIRST CONDITION
  WHEN PLAN (J) = MASK (N'PF')
      OR PLAN (J) =MASK (NN'F')
    PRODUCT_CODE := 'FLX'
  WHEN F-LT2PLUS-TRUE (< PLAN (J) >)
    PRODUCT_CODE := 'LT+'
  WHEN F-LT2L-TRUE (< PLAN (J) >)
    PRODUCT_CODE := 'LT2'
  WHEN NONE
    PRODUCT_CODE := PLAN (J)
END-DECIDE
PRODUCT.ID-NUMBER := ST-V.ID-NUMBER
STATUS_CODE       := #REASON
IF ST-V.INTRO-FLAG = 'S' OR= 'K' OR= 'G'
  PRODUCT.MEMBER_TYPE := ST-V.INTRO-FLAG
ELSE
  PRODUCT.MEMBER_TYPE := 'M'
END-IF
CALLNAT 'MSSNL004'
  PRODUCT
  MILITARY-STATUS
  MILITARY-SERVICE
  #ISN
  #PROC-TIME
IF RA > 5
  END TRANSACTION
  RESET RA
END-IF
END-SUBROUTINE
/*
ON ERROR
  PRINT *ERROR-NR *ERROR-LINE ST-V
END-ERROR
*
END
