* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ATHP0LR0 OI-1268 bz 
* Last mod 06/10/2012
DEFINE DATA LOCAL
1 AR-V  VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER        (N6)      /* D
  2 TRANSACTION-DATN (N9)      /* D
  2 TRANSACTION-TIMN (N7)
  2 TXN-CODE         (A4)     /*  D
  2 REDEFINE TXN-CODE
    3 skip3          (A3)
    3 F_for_FIX      (A1) 
  2 TXN-ACCT-NUMBER  (N3)
  2 DEBIT-AMOUNT     (N7.2)
  2 CREDIT-AMOUNT    (N7.2)
  2 POLICY-NUMBER    (A16)         
  2 MONTH-END        (A1)
 
 1  Line_1 (A125)
 1  Line_2 (A125)
 1  In_Rec_1
   2  CN_1      (A6)  /* 1
   2  Name_1    (A25) /* 2
   2  Cap_1     (A3)  /* 3
   2  Fix_1     (A5)  /* 4
   2  Loan_1    (A12) /* 5
   2  Pol_1     (A16) /* 6
 1  Key_1       (A27)    
 1  Bal_1       (N7.2) (EM=Z,ZZZ,ZZZ.99)
*  
 1  In_Rec_2
   2  CN_2      (A6) 
   2  Name_2    (A25)
   2  Cap_2     (A3)
   2  Fix_2     (A5) 
   2  Loan_2    (A12)   
   2  Pol_2     (A16)
 1  Key_2       (A27)
 1  Bal_2       (N7.2)  (EM=Z,ZZZ,ZZZ.99) 
* 
1 qt             (A1)  INIT  <H'22'>
1 v_D_New        (D)
1 v_D_Old        (D)
1 v_D_New_R      (D)
1 v_D_Old_R      (D)
1 v_Time_New     (A8)
1 v_Time_Old     (A8)

 1 v_Date_From_A    (A8)
 1 REDEFINE v_Date_From_A
   2 v_Date_From_N     (N8) 
  1 v_Date_To_A    (A8)
 1 REDEFINE v_Date_To_A
   2 v_Date_To_N     (N8) 
  1 REDEFINE v_Date_To_A
   2 v_Date_YYYYMM    (N6) 
   2 v_Date_TO_DD     (N2) 
* 
 1 tmp
   2 v_Pol        (A16)
   2 v_Fix        (A5)
   2 v_CAP        (A3)
   2 v_TXN_CODE   (A20)
   2 v_Summ_Iter  (N2)
   2 v_Msg       (A20) 
   2 v_Msg_AR    (A20)   
   2 v_CN         (N6)
   2 v_Diff       (N7.2) (EM=Z,ZZZ,ZZZ.99)
   2 v_SUMM      (N7.2) (EM=Z,ZZZ,ZZZ.99)
   2 v_SUMM_DB   (N7.2) (EM=Z,ZZZ,ZZZ.99)
   2 v_SUMM_CR   (N7.2) (EM=Z,ZZZ,ZZZ.99)
   2 v_Err_Diff  (N7.2) (EM=Z,ZZZ,ZZZ.99)

* 
 1  dm           (A1)  INIT  <H'09'>
 1  nl           (A1)  INIT  <H'0D'>
 1 l_End_1       (L)   INIT  <FALSE>
 1 l_End_2       (L)   INIT  <FALSE>
 1 l_Diff_AR     (L)   INIT  <FALSE>
 1 #i            (N6)
 1 #j            (N5)
 1 c_eq_CN            (N6) (EM=ZZZ,ZZ9)
 1 c_Neq_Loan         (N6) (EM=ZZZ,ZZ9)
 1 c_eq_Loan          (N6) (EM=ZZZ,ZZ9)
 1 c_New              (N6) (EM=ZZZ,ZZ9)
 1 c_Del              (N6) (EM=ZZZ,ZZ9)
 1 c_OK_EQ_NAR        (N6) (EM=ZZZ,ZZ9)
 1 c_OK_EQ_AR         (N6) (EM=ZZZ,ZZ9)
 1 c_OK_Dif_AR        (N6) (EM=ZZZ,ZZ9)
 1 c_OK_Dif_Del_AR    (N6) (EM=ZZZ,ZZ9)
 1 c_OK_Dif_New_AR    (N6) (EM=ZZZ,ZZ9)
 1 c_OK_TOT           (N6) (EM=ZZZ,ZZ9)
 1 c_Err_Dif_New_AR   (N6) (EM=ZZZ,ZZ9)
 1 c_Err_Dif_Del_AR   (N6) (EM=ZZZ,ZZ9)
 1 c_Err_EQ_AR        (N6) (EM=ZZZ,ZZ9)
 1 c_Err_Dif_AR       (N6) (EM=ZZZ,ZZ9)
 1 c_Err_Diff_NAR     (N6) (EM=ZZZ,ZZ9)
 1 c_Err_DEL_NAR      (N6) (EM=ZZZ,ZZ9)
 1 c_Err_New_NAR      (N6) (EM=ZZZ,ZZ9)
 1 c_Err_TOT_AR       (N6) (EM=ZZZ,ZZ9)
 1 c_Err_TOT_NAR      (N6) (EM=ZZZ,ZZ9)
 1 cc_FIX_1           (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_VAR_1           (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_CAP_1           (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_FIX_2           (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_VAR_2           (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_CAP_2           (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_FIX_DIF         (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_VAR_DIF         (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)
 1 cc_CAP_DIF         (N9.2) (EM=ZZZ,ZZZ,ZZ9.99)   
 1 v_A3               (A3)
 1 v_A78              (A78)
 
 1 l_Found_AR   (L)
 1 v_A          (A) DYNAMIC
 1  v_PN         (I1)     INIT  <1>
1  f_Report      (A80)    INIT <'/usr/SAG/AAFMAA/batch/workfiles/WORK/LR_REPORT.TXT'>
*******************
1  LR_Script     (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/PROD/PGM/LR.ksh'>
1  l_ME          (L)
   1  DIR_Reports   (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/PTEST/'> 
   1  f_s1          (A) DYNAMIC INIT <'ALL_LOANS_ME_NEW.TXT'> 
   1  f_s2          (A) DYNAMIC INIT <'ALL_LOANS_ME_OLD.TXT'> 

1  DIR_Work      (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/WORK/'> 
1  f_New         (A) DYNAMIC INIT <'LR_NEW.TXT'> 
1  f_Old         (A) DYNAMIC INIT <'LR_OLD.TXT'> 
*******************
1  f_log         (A80)       INIT <'/usr/SAG/AAFMAA/batch/workfiles/WORK/LR_LOG.TXT'>
1  v_RC          (N3)
1  shcmd         (A) DYNAMIC
*
1  FTP_Script    (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/PROD/PGM/ftpSAS'>
1  f_Win         (A) DYNAMIC
1  DIR_Win       (A) DYNAMIC INIT <'ftp/EDS/AR_EZ_TEST'>
********
1  CN_Test       (A6) INIT   <'999999'>     /*  --db
1  l_Test         (L)  INIT  <FALSE>         /*  --db
********
1 v_Rec_1        (N5)  INIT <0>
1 v_Rec_2        (N5)  INIT <0>
END-DEFINE

ON ERROR
   WRITE NOTITLE  *PROGRAM "Err-ln:" *ERROR-LINE "Err:" *ERROR-NR /
   In_Rec_1 /    '-'(50)  /  In_rec_2 / '-'(50) / *DATX *TIMX 
END-ERROR


  IF *DEVICE <> 'BATCH'
     v_PN := 1    v_RC := PRT_FN_PUT(<v_PN, f_log>)
     v_PN := 2    v_RC := PRT_FN_PUT(<v_PN, f_Report>)
  ELSE 
     IF *DATA <> 0 INPUT v_A78
     PRINT (1) NOTITLE '1' v_A78
        IF v_A78 = SCAN 'Month-End' l_ME := TRUE    END-IF
        IF v_A78 = SCAN  'Test'      l_Test := TRUE END-IF
     END-IF   
     IF *DATA <> 0 INPUT v_A78 PRINT(1) '2' v_A78  DIR_Reports := v_A78  END-IF
     IF *DATA <> 0 INPUT v_A78 PRINT(1) '3' v_A78  f_s1        := v_A78  END-IF   
     IF *DATA <> 0 INPUT v_A78 PRINT(1) '4' v_A78  f_s2        := v_A78  END-IF   
     IF *DATA <> 0 INPUT v_A78 PRINT(1) '5' v_A78  DIR_Win     := v_A78  END-IF   
     
  END-IF
  FORMAT (2) LS=200 PS=200
  FORMAT (1) LS=121 PS=121
  PRINT (1) NOTITLE  *PROGRAM *DATX *TIMX 'Loans reconciliation ver.1.1' /
                     'Parameters' /
        'Month-End:' l_ME (EM=NO/YES) 'Test:' l_Test (EM=NO/YES) DIR_Reports / f_s1 / f_s2 / DIR_Win

   PERFORM sbr_INIT                /*  !!!

  COMPRESS DIR_Work f_New INTO f_New LEAVING NO SPACE
  COMPRESS DIR_Work f_Old INTO f_Old LEAVING NO SPACE
  DEFINE WORK FILE 1 f_New
  DEFINE WORK FILE 2 f_Old 

    READ WORK 1 ONCE Line_1
    PRINT (1) 'New:' Line_1
    v_A := SUBSTRING(Line_1,29,13)   v_A := *TRIM(V_A)
    IF *LENGTH(v_A) < 11 COMPRESS '0' v_A INTO v_A LEAVING NO SPACE END-IF
    MOVE EDITED v_A  TO v_D_New (EM=DD-L(3)-YYYY)
    v_Time_New := SUBSTRING(Line_1,50,8)
    READ WORK 2  ONCE Line_2
    PRINT (1) 'Old:' Line_2
    v_A := SUBSTRING(Line_2,29,13)   v_A := *TRIM(V_A)
    IF *LENGTH(v_A) < 11 COMPRESS '0' v_A INTO v_A LEAVING NO SPACE END-IF
    MOVE EDITED v_A  TO v_D_Old (EM=DD-L(3)-YYYY) 
    v_Time_Old := SUBSTRING(Line_2,50,8)  
    v_D_Old_R := v_D_Old
    v_D_New_R := v_D_New

    v_D_Old := v_D_Old + 1 
    MOVE EDITED v_D_Old (EM=YYYYMMDD) TO v_Date_From_A
    
    IF l_ME 
       v_D_New := v_D_New + 10
       MOVE EDITED v_D_New (EM=YYYYMMDD) TO v_Date_To_A
       v_Date_TO_DD := 01
       MOVE EDITED v_Date_To_A TO v_D_New (EM=YYYYMMDD)
       PRINT (1) 'Account Register Dates for Month-End' v_D_Old (EM=DD-LLL-YYYY) '-'
                                                        v_D_New (EM=DD-LLL-YYYY)
    ELSE     
       MOVE EDITED v_D_New (EM=YYYYMMDD) TO v_Date_To_A
    END-IF

    IF l_ME 
       COMPRESS 'Month-End Transactions' INTO v_A78  
    ELSE
       COMPRESS 'Transactions for period COB' v_D_Old_R '-' 'COB' v_D_New_R  INTO v_A78  
    END-IF

PRINT (2) NOTITLE  'Executed' *DATX *TIMX  2x v_A78
PRINT (2) 'Account Register Dates:' v_D_Old (EM=DD-LLL-YYYY) '-'
                                    v_D_New (EM=DD-LLL-YYYY)

PRINT (2)
     'Description' dm 'CN' dm 'Policy' dm 'Fix/Var' dm 'Cap' dm 
     'Reports Difference' dm 'AR Acct' dm 'Balances - AR' dm '# AR Records' dm 'TXN Codes' dm 'ME'

  PERFORM sbr_Next_1
  PERFORM sbr_Next_2
SETA. SETTIME
 REPEAT 
   DECIDE FOR FIRST CONDITION 
       WHEN Key_1  < Key_2 
          IF l_Test AND CN_2 > CN_Test PRINT 'K1 < K2' CN_1 Pol_1 CN_2 Pol_2  END-IF /*  --db
          IF NOT l_End_1
              v_Msg := 'New'          
              c_New := c_New + 1
              v_Pol := Pol_1
              v_Fix := Fix_1
              v_CN := VAL(CN_1)
              v_Cap := Cap_1
              PERFORM sbr_Report
              PERFORM sbr_Next_1
           ELSE 
              v_Msg := 'Del'          
              c_Del := c_Del + 1
              v_Pol := Pol_2
              v_Fix := Fix_2
              v_CN := VAL(CN_2)
              v_Cap := Cap_2
              PERFORM sbr_Report
              PERFORM sbr_Next_2   
          END-IF 
       WHEN Key_1  > Key_2 
       IF l_Test AND CN_2 > CN_Test PRINT 'K1 > K2' CN_1 Pol_1 CN_2 Pol_2 END-IF /*  --db
          IF NOT l_End_2
            v_Msg := 'Del'
            c_Del := c_Del + 1 
            v_Pol := Pol_2
            v_Fix := Fix_2
            v_CN := VAL(CN_2)
            v_Cap := Cap_2
            PERFORM sbr_Report 
            PERFORM sbr_Next_2  
          ELSE  
            v_Msg := 'New'          
            c_New := c_New + 1
            v_Pol := Pol_1
            v_Fix := Fix_1
            v_CN := VAL(CN_1)
            v_Cap := Cap_1
            PERFORM sbr_Report   
            PERFORM sbr_Next_1
          END-IF   
       WHEN Key_1  = Key_2
       IF l_Test AND CN_2 > CN_Test PRINT 'K1 = K2' CN_1 CN_2 Bal_1 Bal_2 Pol_1 Pol_2 END-IF /*  --db
          v_CN := VAL(CN_1)
          v_Pol := Pol_1
          v_Fix := Fix_2
          v_Cap := Cap_1
          PERFORM sbr_Check_AR
          PERFORM sbr_Report
          PERFORM sbr_Next_1
          PERFORM sbr_Next_2
       WHEN ANY  
        RESET tmp
       WHEN NONE IGNORE
   END-DECIDE  
   #j := #j + 1 
   IF #j > 20000  PRINT (1) 'Too many cycles' PERFORM sbr_Exit  END-IF
 END-REPEAT
PRINT (0) NOTITLE  '-- End of Pgm --'
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 DEFINE sbr_Next_1
  IF l_End_1 AND l_End_2 PERFORM sbr_Exit END-IF
  IF l_End_1 ESCAPE ROUTINE END-IF
      READ WORK 1 ONCE Line_1
      AT END 
         l_End_1 := TRUE
         IF l_End_1 AND l_End_2 PERFORM sbr_Exit END-IF
         ESCAPE ROUTINE
     END-ENDFILE
       v_Rec_1 := v_Rec_1 + 1
       EXAMINE FULL Line_1 FOR qt DELETE          
       SEPARATE Line_1 INTO In_Rec_1 WITH DELIMITER '|'
       COMPRESS CN_1 Pol_1 Fix_1 INTO Key_1 LEAVING NO SPACE
       MOVE EDITED Loan_1  TO Bal_1 (EM=ZZZ,ZZZ.99)
         DECIDE FOR FIRST CONDITION
           WHEN Fix_1 = 'FIXED' AND Cap_1 <> 'CAP' cc_FIX_1 := cc_FIX_1 + Bal_1
           WHEN Fix_1 = 'FIXED' AND Cap_1 = 'CAP' cc_CAP_1 := cc_CAP_1 + Bal_1
           WHEN Fix_1 = 'VAR'                      cc_VAR_1 := cc_VAR_1 + Bal_1
           WHEN NONE IGNORE
         END-DECIDE
       IF l_Test AND CN_1 > CN_Test  PRINT '- Read New' 'CN_1:' CN_1 'Bal_1:' Bal_1 END-IF   /*  --db
   END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 DEFINE sbr_Next_2
   IF l_End_1 AND l_End_2 PERFORM sbr_Exit END-IF
   IF l_End_2  ESCAPE ROUTINE END-IF
   READ WORK 2 ONCE Line_2
        AT END
         l_End_2 := TRUE
         IF l_End_1 AND l_End_2 PERFORM sbr_Exit END-IF     
         ESCAPE ROUTINE 
      END-ENDFILE   
   v_Rec_2 := v_Rec_2 + 1   
   EXAMINE FULL Line_2 FOR qt DELETE
   SEPARATE Line_2 INTO In_Rec_2 WITH DELIMITER '|'
   COMPRESS CN_2 Pol_2 Fix_2 INTO Key_2 LEAVING NO SPACE
   MOVE EDITED Loan_2  TO Bal_2 (EM=ZZZ,ZZZ.99)
     DECIDE FOR FIRST CONDITION
       WHEN Fix_2 = 'FIXED' AND Cap_2 <> 'CAP' cc_FIX_2 := cc_FIX_2 + Bal_2
       WHEN Fix_2 = 'FIXED' AND Cap_2 = 'CAP'  cc_CAP_2 := cc_CAP_2 + Bal_2
       WHEN Fix_2 = 'VAR'                      cc_VAR_2 := cc_VAR_2 + Bal_2
       WHEN NONE IGNORE
     END-DECIDE

   IF l_Test AND CN_2 > CN_Test  PRINT '- Read Old' 'CN_2:' CN_2 'Bal_2:' Bal_2 END-IF   /*  --db
 END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 DEFINE sbr_Report
  FIND AR-V WITH ID-NUMBER = v_CN          /* more detailes to find
            AND TRANSACTION-DATN >= v_Date_FROM_N    /* date assumed today date - 1
            AND TRANSACTION-DATN <= v_Date_To_N
          WHERE POLICY-NUMBER = v_Pol
*                                           /* ?? same fix/var 
      IF NO RECORD FOUND
         l_Found_AR := FALSE
         ESCAPE BOTTOM 
      END-NOREC
       
       IF l_ME  AND MONTH-END <> 'Y' 
          ESCAPE TOP 
       END-IF

       IF NOT l_ME  AND MONTH-END = 'Y' 
          ESCAPE TOP 
       END-IF
          
      IF NOT
        (
          (v_FIX = 'FIXED'  AND ( TXN-CODE = 'PRNF' OR
                                  TXN-CODE = 'UPDF' OR 
*                                  TXN-CODE = 'NEWL' OR
                                  TXN-CODE = 'PADF' OR
                                ( v_Cap ='CAP' AND TXN-CODE = 'NEWL')
                                )
          )
             OR (v_FIX = 'VAR' AND ( TXN-CODE = 'PRNV' OR 
                                     TXN-CODE = 'PADV' OR
                                     TXN-CODE = 'ADDL' OR 
                                     TXN-CODE = 'UPDV' OR
                                     TXN-CODE = 'NEWL'    )
                 )
         )
        OR TXN-ACCT-NUMBER = 410
            ESCAPE TOP
       END-IF
          
     v_Summ_Iter := v_Summ_Iter + 1
     v_SUMM := v_SUMM + DEBIT-AMOUNT - CREDIT-AMOUNT 
     v_SUMM_DB := v_SUMM_DB + DEBIT-AMOUNT
     v_SUMM_CR := v_SUMM_CR + CREDIT-AMOUNT
     COMPRESS v_TXN_CODE TXN-CODE INTO v_TXN_CODE
     l_Found_AR := TRUE
     ESCAPE TOP          
  END-FIND
   IF l_Found_AR
     PERFORM sbr_AR
   ELSE 
     PERFORM sbr_NO_AR  
  END-IF   
 END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_NO_AR
         DECIDE ON FIRST VALUE OF v_Msg
         VALUE '='
            c_OK_EQ_NAR := c_OK_EQ_NAR + 1
         VALUE '<>'
            v_Diff := Bal_1 - Bal_2                         /* Bal Diff
            v_Msg := '*Err Dif No AR'
            c_Err_Diff_NAR := c_Err_Diff_NAR + 1
            PERFORM sbr_PRINT_NAR
         VALUE 'Del'
            v_Diff := 0 - Bal_2                             /* Bal Diff
            v_Msg := '*Err Deleted No AR'
            c_Err_Del_NAR := c_Err_Del_NAR + 1
            PERFORM sbr_PRINT_NAR
         VALUE 'New'
            v_Diff := Bal_1                                 /* Bal Diff
            v_Msg := '*Err New No AR'
            c_Err_New_NAR := c_Err_New_NAR + 1
            PERFORM sbr_PRINT_NAR
         NONE  IGNORE    
         END-DECIDE 
 END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_AR

    DECIDE ON FIRST VALUE OF v_Msg
    VALUE '='         /* equal keys, equal balance, AR found
        v_Diff := 0                          /* Bal Diff
        IF  v_SUMM = 0 
          v_Msg_AR := 'Balances Equal AR=0'
          c_OK_EQ_AR := c_OK_EQ_AR + 1
        ELSE  
          v_Err_Diff :=  v_SUMM                      /* TOT Diff
          v_Msg_AR := '*Err =, AR <> 0' 
          c_Err_EQ_AR := c_Err_EQ_AR + 1
          PERFORM sbr_PRINT_AR
        END-IF  

    VALUE '<>'
        v_Diff := Bal_1 - Bal_2               /* Bal Diff
       IF v_Diff = v_SUMM
          v_Msg_AR := 'Balnce Dif = AR'
          c_OK_Dif_AR := c_OK_Dif_AR + 1 
       ELSE
          v_Err_Diff :=  Bal_1 - Bal_2 - v_SUMM      /* TOT Diff
          v_Msg_AR := '*Err Dif <> AR'
          c_Err_Dif_AR := c_Err_Dif_AR + 1
          PERFORM sbr_PRINT_AR
       END-IF 
    VALUE 'New'
        v_Diff := Bal_1                        /* Bal Diff
        IF Bal_1 = v_SUMM
           v_Msg_AR := 'New balance = AR' 
           c_OK_Dif_New_AR := c_OK_Dif_New_AR + 1 
        ELSE 
           v_Err_Diff :=  Bal_1 - v_SUMM              /* TOT Diff
           v_Msg_AR := '*Err New <> AR'
           c_Err_Dif_New_AR := c_Err_Dif_New_AR + 1
           PERFORM sbr_PRINT_AR
        END-IF  
    VALUE 'Del'
        v_Diff := 0 - Bal_2                    /* Bal Diff
        IF v_Diff = v_SUMM
           v_Msg_AR := 'Deleted balance = AR' 
           c_OK_Dif_Del_AR := c_OK_Dif_Del_AR + 1 
        ELSE 
           v_Err_Diff :=  Bal_2 - v_SUMM              /* TOT Diff
           v_Msg_AR := '*Err Del <> AR'
           c_Err_Dif_Del_AR := c_Err_Dif_Del_AR + 1
          PERFORM sbr_PRINT_AR
        END-IF
     NONE IGNORE
     END-DECIDE     
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_Check_AR
   c_eq_CN := c_eq_CN + 1
   IF Loan_1 <> Loan_2 
      c_Neq_Loan := c_Neq_Loan + 1
      v_Msg := '<>'
   ELSE
      c_eq_Loan := c_eq_Loan + 1 
      v_MSG := '='   
   END-IF     
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 DEFINE sbr_Exit
  PRINT (1) NOTITLE / 
  'Execution Time:' *TIMD(SETA.) (EM=ZZh:99min:99sec:9) /
  f_New  /
  f_Old  /
  'Period' v_D_Old_R v_Time_Old '-' v_D_New_R v_Time_New /
  'Equal Cns ---------------'  c_eq_CN       /
  'Not eq Loans ------------'  c_Neq_Loan    /
  'Loans with no changes ---'  c_eq_Loan     /
  '-- Below is Balance Dif and AR comparison --'  /
  'OK.  No dif No AR  ------'  c_OK_EQ_NAR      /   /* 0
  'OK.  Eq AR = 0           '  c_OK_EQ_AR       /   /* 4
  'OK.  Dif = AR -----------'  c_OK_Dif_AR      /   /* 5
  'OK.  New    Dif = AR  ---'  c_OK_Dif_New_AR  /   /* 6
  'OK.  Closed Dif = AR  ---'  c_OK_Dif_Del_AR  /   /* 7
  'Err. New    Dif <> AR ---'  c_Err_Dif_New_AR /   /* 6
  'Err. Closed Dif <> AR ---'  c_Err_Dif_Del_AR /   /* 7
  'Err. Eq AR <> 0          '  c_Err_EQ_AR      /   /* 4
  'Err. Dif <> AR ----------'  c_Err_Dif_AR     /   /* 5
  'Err. Dif    No AR -------'  c_Err_Diff_NAR   /   /* 1
  'Err. New    No AR -------'  c_Err_New_NAR    /   /* 3
  'Err. Closed No AR -------'  c_Err_Del_NAR    /   /* 2

  c_Err_TOT_NAR := c_Err_Diff_NAR + c_Err_New_NAR + c_Err_Del_NAR
  c_Err_TOT_AR  := c_Err_Dif_New_AR + c_Err_Dif_Del_AR + c_Err_EQ_AR + c_Err_Dif_AR 
  c_OK_TOT := c_OK_EQ_NAR + c_OK_EQ_AR + c_OK_Dif_AR + c_OK_Dif_New_AR + c_OK_Dif_Del_AR
  

  cc_FIX_DIF := cc_FIX_1 - cc_FIX_2
  cc_CAP_DIF := cc_CAP_1 - cc_CAP_2
  cc_VAR_DIF := cc_VAR_1 - cc_VAR_2
  
  IF l_ME 
    PRINT (2) / 
       '  -- Report Analysis -- '        /
       'Loans Before ME'   dm v_Rec_2    /   
       'Loans After ME'    dm v_Rec_1    /
       'Loans Totals'   dm  'Before ME'    dm  'After ME'   dm 'Change'   
  ELSE  
     PRINT (2) / 
       '  -- Report Analysis -- '                            /
       'Loans as of COB' v_D_Old_R   dm v_Rec_2              /   
       'Loans as of COB' v_D_New_R   dm v_Rec_1              /
       'Loans Totals'   dm  'COB' v_D_Old_R    dm  'COB' v_D_New_R   dm 'Change'   
  END-IF
    
  PRINT (2)  
       'Fixed      '   dm cc_FIX_2   dm cc_FIX_1 dm cc_FIX_DIF       /
       'CAP        '   dm cc_CAP_2   dm cc_CAP_1 dm cc_CAP_DIF       / 
       'VAR        '   dm cc_VAR_2   dm cc_VAR_1 dm cc_VAR_DIF       / 
       'Loans balance changed'              dm c_Neq_Loan       /
       'Loans balance does not change'      dm c_eq_Loan    /
       'New Loans            '              dm c_New         /    
       'Deleted Loans        '              dm c_Del         / /
       '  -- Account Register Analysis --'                   /
       'Reconciled with Register         '   dm c_OK_TOT        / 
       'No changes and No Register       '   dm c_OK_EQ_NAR  /
       'No relevant Register records     '   dm c_Err_TOT_NAR /
       'Balance change mismatch Register '   dm c_Err_TOT_AR               
                                
  CLOSE PRINTER (2)
  PERFORM sbr_FTP
  ESCAPE MODULE
 END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_FTP
   COMPRESS 'Loan_changes_' v_Date_From_A '-' v_Date_To_A'.TXT' INTO f_Win LEAVING NO SPACE
   IF l_ME COMPRESS 'ME_' f_Win INTO f_Win  LEAVING NO SPACE   END-IF
   COMPRESS FTP_Script  f_Report  f_Win  DIR_Win INTO shcmd
   call 'shcmd' shcmd
   v_RC :=  RET('shcmd')
   IF v_RC <> 0
      PRINT (0) 'FTP Error. Code:' v_RC
      PRINT (1) 'FTP Error. Code:' v_RC
   ELSE
      PRINT (1) 'FTP Success:' /
                'Folder: ' DIR_Win /
                'File'   f_Win
   END-IF
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_INIT
*   PRINT DIR_Reports / f_s1 / f_s2 / DIR_Work / f_New / f_Old
   COMPRESS LR_Script  DIR_Reports f_s1 f_s2 DIR_Work f_New f_Old INTO shcmd
   call 'shcmd' shcmd
   v_RC :=  RET('shcmd')
   IF v_RC <> 0
      PRINT (0) 'File Conversion Error:' v_RC
      PRINT (1) 'File Conversion Error:' v_RC
      ESCAPE MODULE
   END-IF
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_PRINT_AR
          PRINT (2)
            v_Msg_AR dm v_CN dm Pol_1 dm Fix_1 dm Cap_1 dm v_Diff dm
            v_SUMM dm v_Err_Diff dm v_Summ_Iter dm v_TXN_CODE dm MONTH-END
            IF l_Test  PERFORM sbr_Write_Details END-IF           
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_PRINT_NAR
            PRINT (2)
            v_Msg dm v_CN dm  v_Pol dm v_Fix dm v_Cap dm v_Diff
            IF l_Test PERFORM sbr_Write_Details END-IF
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_Write_Details

  FIND AR-V WITH ID-NUMBER = v_CN          /* more detailes to find
            AND TRANSACTION-DATN >= v_Date_FROM_N    /* date assumed today date - 1
            AND TRANSACTION-DATN <= v_Date_To_N
          WHERE POLICY-NUMBER = v_Pol
       IF l_ME  AND MONTH-END <> 'Y' 
          ESCAPE TOP 
       END-IF
       IF NOT l_ME  AND MONTH-END = 'Y' 
          ESCAPE TOP 
       END-IF

         PRINT (2)
         'Register Details' dm ID-NUMBER dm  POLICY-NUMBER
          dm 'Code:' TXN-CODE  dm 'Acc:' TXN-ACCT-NUMBER dm 'DB:' DEBIT-AMOUNT dm 'CR:' CREDIT-AMOUNT dm
          'Date:' TRANSACTION-DATN (EM=9999-99-99) dm 'Time:' TRANSACTION-TIMN dm 'ME:' MONTH-END 
 END-FIND
          PRINT (2) ' '
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
END
