* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: ATHCTMRF - TERM Refunds - Subroutines for use in both
*                       Status and History file processing
*
************************************************************************
DEFINE SUBROUTINE CALCULATE-EQUALIZATION-ADJUSTMENT             /* PM11
************************************************************************
*
COMPUTE ROUNDED #WORK-AMT-PREM = (#LT-MON-PREM * #MONS)
                + (((#LT-MON-PREM * 12) / 365) * #DAYS)
*
#RATE-PLAN     := 'LT'
#RATE-DATE     := #ISSUE-DATE
PERFORM GET-REFUND-RATE
*
COMPUTE #SPECIAL-LT-REFUND = #WORK-PREMS-PAID - (#WORK-AMT-PREM * (1.00 - #RATE-REFUND)) /* actual prems paid
*                         /* NEW RATE NET COST.90 = 1 - .10 the LT rate
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CALCULATE-CONV-EQUALIZATION-ADJUSTMENT         /* PM11
************************************************************************
*
COMPUTE ROUNDED #WORK-AMT-PREM = (#WORK-LT-MON-PREM * #CONV-MONS)
*
#RATE-PLAN     := 'LT'
#RATE-DATE     := #ISSUE-DATE
PERFORM GET-REFUND-RATE
*
COMPUTE #SPECIAL-LT-REFUND = #WORK-PREMS-PAID - (#WORK-AMT-PREM * (1.00 - #RATE-REFUND)) /* actual prems paid
*                         /* NEW RATE NET COST.90 = 1 - .10 the LT rate
*
END-SUBROUTINE
*
************************************************************************
* DEFINE SUBROUTINE CALC-2002-LT-REF-ADJ                         /* PM11
************************************************************************
*
* Net Cost = Tot-prem-paid minus refund (PP - (PP * .10)) or PP * .90
* COMPUTE ROUNDED #WORK-AMT-PREM = (#LT-MON-PREM * #MONS)
*                 + (((#LT-MON-PREM * 12) / 365) * #DAYS)
* IF #SMOKER-FLAG = 'S'
*   COMPUTE #SPECIAL-LT-REFUND = (#PREMS-PAID /* actual prems paid
*       - #WORK-AMT-PREM)
* ELSE
*   COMPUTE #SPECIAL-LT-REFUND = #PREMS-PAID /* actual prems paid
*   - (#WORK-AMT-PREM * .90)    /* NEW RATE NET COST.90 = 1 - .10 the LT rate
* END-IF
*
* END-SUBROUTINE
*
************************************************************************
* DEFINE SUBROUTINE CALC-2003-LT-REF-ADJ                         /* PM11
************************************************************************
*
* Net Cost = Tot-prem-paid minus refund (PP - (PP * .10)) or PP * .90
* COMPUTE ROUNDED #WORK-AMT-PREM = (#LT-MON-PREM * #MONS)
*                 + (((#LT-MON-PREM * 12) / 365) * #DAYS)
*
* COMPUTE #SPECIAL-LT-REFUND = (#PREMS-PAID /* actual prems paid
*       - #WORK-AMT-PREM)
*
* END-SUBROUTINE
*
************************************************************************
* DEFINE SUBROUTINE RESET-REFUND-LT                                                     /* vt3 \/
* ************************************************************************
* *
* ADD 1 TO #CNT-10
* DISPLAY (10) #CNT-10  (EM=ZZ,ZZ9)
*  #CN
*  'Actual/Prems/Paid' #PREMS-PAID  (EM=ZZZZZ.99)
*  '2002(3)/Prems/Paid' #WORK-AMT-PREM (EM=ZZZZZ.99)
*  '2002(3)/Mon/Prem' #LT-MON-PREM
*  'Face/Amt'      #FACE-AMT (EM=ZZZ,ZZ9)
*  'SM'            #SMOKER-FLAG
*  'Mns' #MONS
*  'Dys' #DAYS
*  'OLD/Refnd' #REFUND-LT         (EM=ZZZ.99)
*  'NEW/Refnd' #SPECIAL-LT-REFUND (EM=ZZZ.99)
* *
* * COMPUTE #TOT-EXTRA-LT-REFUND = #TOT-EXTRA-LT-REFUND              /* vt3
* *                + (#SPECIAL-LT-REFUND - #REFUND-LT)               /* vt3
* MOVE #SPECIAL-LT-REFUND TO #REFUND-LT
* *
* END-SUBROUTINE                                                                     /* vt3 /\
*
************************************************************************
DEFINE SUBROUTINE GPREMSXX
************************************************************************
*
CALLNAT 'GPREMSXX' #SCR-COMMAND #SCR-ID #SCR-SUFFIX
  #PLAN #AGE #APRM #ISSUE-DATE #SMOKER-FLAG #FACE-AMT #SEX  /* DW4
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE ACCT-REG-AND-NOTE
************************************************************************
*
FOR #TRF-I 1 TO 100                                     /* PM99
  IF ST-V.OUT-TERM-REF-AMOUNT (#TRF-I)  = 0             /* PM99
    ST-V.OUT-TERM-REF-AMOUNT (#TRF-I)     := #REFUND    /* PM99
    ST-V.OUT-TERM-REF-YEAR (#TRF-I)       := #LAST-YYYY /* PM99
    ST-V.OUT-TERM-REF-ENTRY-DATE (#TRF-I) := *DATN      /* PM99
    st-v.new-term-pol-nbr  (#TRF-I)       := #pol-nbr                     /* vt1
    st-v.new-pol-iss-date (#TRF-I)        := #issue-date                  /* vt1 
    ESCAPE BOTTOM                                       /* PM99
  END-IF                                                /* PM99
END-FOR                                                 /* PM99
*                                                                         /* vt1 \/
RESET ACCT-REG-V
ACCT-REG-V.ID-NUMBER                 := ST-V.ID-NUMBER
ACCT-REG-V.PROCESS-IND               := ST-V.PROCESS-IND
acct-reg-v.POLICY-NUMBER             := #pol-nbr
ACCT-REG-V.TRANSACTION-DATN          := *DATN
ACCT-REG-V.ACCT-DATE                 := *DATN
ACCT-REG-V.TERMINAL-ID               := *INIT-ID
ACCT-REG-V.CLERK-ID                  := 'EDS'
ACCT-REG-V.NAME                      := ST-V.NAME
ACCT-REG-V.CASH-CODE                 := 'A'
ACCT-REG-V.TXN-CODE                  := 'TREX'
ACCT-REG-V.TXN-ACCT-NUMBER           := 111
ACCT-REG-V.DEBIT-AMOUNT              := #db-cr-adj
ACCT-REG-V.DESCRIPTION               := 'TR Adjustment'
*
IF #HOLD-CUR-ACCT-UPDT = 0
  ACCT-REG-V.DATE-LAST-ACCT-UPDATE   := *DATN
ELSE
  ACCT-REG-V.DATE-LAST-ACCT-UPDATE   := #HOLD-CUR-ACCT-UPDT
END-IF
*
STORE ACCT-REG-V                                                       /* vt1 /\

*
RESET ACCT-REG-V
MOVE ST-V.ID-NUMBER        TO ACCT-REG-V.ID-NUMBER
MOVE ST-V.PROCESS-IND      TO ACCT-REG-V.PROCESS-IND /* PM - 06/2000
move #pol-nbr              to acct-reg-v.POLICY-NUMBER                    /* vt1   
MOVE *DATN                 TO ACCT-REG-V.TRANSACTION-DATN
* MOVE *TIMN                 TO ACCT-REG-V.TRANSACTION-TIMN               /* vt1
MOVE *INIT-ID              TO ACCT-REG-V.TERMINAL-ID
MOVE 'EDS'                 TO ACCT-REG-V.CLERK-ID
MOVE ST-V.NAME             TO ACCT-REG-V.NAME
MOVE 'A'                   TO ACCT-REG-V.CASH-CODE
RESET                         ACCT-REG-V.AALP-FLAG
MOVE *DATN                 TO ACCT-REG-V.ACCT-DATE
*
IF #HOLD-CUR-ACCT-UPDT = 0
  MOVE *DATN               TO ACCT-REG-V.DATE-LAST-ACCT-UPDATE
ELSE
  MOVE #HOLD-CUR-ACCT-UPDT TO ACCT-REG-V.DATE-LAST-ACCT-UPDATE
END-IF
*
MOVE #DB-CR-ADJ TO ACCT-REG-V.CREDIT-AMOUNT
*
ACCT-REG-V.TXN-ACCT-NUMBER := 111                    /* PM99
ACCT-REG-V.TXN-CODE        := 'ATRC'                 /* PM99
*
COMPRESS #LAST-YYYY 'Term Refund' INTO ACCT-REG-V.DESCRIPTION      /* PM99
*
STORE ACCT-REG-V
*
MOVE EDITED #REFUND (EM=ZZZZ.99) TO #RF-AMT-DISP
* COMPRESS '*Term Ref' #LAST-YYYY '$' INTO #NOTE-TEXT (1)                           /* vt1 \/
* COMPRESS #NOTE-TEXT (1) #RF-AMT-DISP INTO #NOTE-TEXT (1) LEAVING NO
compress '*' #LAST-YYYY                               into #note-text (1) leaving no
compress #note-text(1) 'Term Ref' '$' #rf-amt-disp into #NOTE-TEXT (1) 
compress #note-text (1) '- pol.iss' #issue-date-n-FORMAT     into  #note-text (1) 
* COMPRESS #NOTE-TEXT (1) 'ON POL ISS' #ISS-DT-MM-FOR-NOTE-A
*                                      INTO #NOTE-TEXT (1)
* COMPRESS #NOTE-TEXT (1) '/' #ISS-DT-DD-FOR-NOTE-A
*                         '/' #ISS-DT-YYYY-FOR-NOTE-A
*                     INTO #NOTE-TEXT (1) LEAVING NO                                /* vt1 /\
  COMPRESS #NOTE-TEXT (1) 'in tmrf credit' INTO #NOTE-TEXT (1)    /* PM99           
*
MOVE 1 TO #INT
MOVE 'EDS' TO #CGA-CLERK
CALLNAT 'E4205SDM' ST-V.ID-NUMBER #INT #CGA-CLERK #NOTE-TEXT (1:10)
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE EXTRA-REFUND                                    /* PM7
************************************************************************
*
COMPUTE #EXTRA-REFUND = ST-V.DEBIT-CREDIT-AMT * -1
ADD #EXTRA-REFUND TO #REFUND
ADD #EXTRA-REFUND TO #TOT-EXTRA-REFUND
IF #REFUND-LT GT 0
  ADD #EXTRA-REFUND TO #REFUND-LT
ELSE
  ADD #EXTRA-REFUND TO #REFUND-RT
END-IF
* WRITE ST-V.ID-NUMBER ' has an extra refund of '
*   #EXTRA-REFUND (EM=ZZZZZZ9.99)
*
MOVE ST-V.DATE-ACCT-UPDATE TO #HOLD-CUR-ACCT-UPDT
MOVE *DATN TO ST-V.DATE-ACCT-UPDATE
MOVE *DATN TO ST-V.DTS-DATN
MOVE *TIMN TO ST-V.DTS-TIMN
*
ADD #EXTRA-REFUND TO ST-V.DEBIT-CREDIT-AMT
MOVE TRUE TO #UPDATE
*
RESET ACCT-REG-V
MOVE ST-V.ID-NUMBER        TO ACCT-REG-V.ID-NUMBER
MOVE ST-V.PROCESS-IND      TO ACCT-REG-V.PROCESS-IND
MOVE *DATN                 TO ACCT-REG-V.TRANSACTION-DATN
MOVE *TIMN                 TO ACCT-REG-V.TRANSACTION-TIMN
MOVE *INIT-ID              TO ACCT-REG-V.TERMINAL-ID
MOVE 'EDS'                 TO ACCT-REG-V.CLERK-ID
MOVE ST-V.NAME             TO ACCT-REG-V.NAME
MOVE 'A'                   TO ACCT-REG-V.CASH-CODE
RESET                         ACCT-REG-V.AALP-FLAG
MOVE *DATN                 TO ACCT-REG-V.ACCT-DATE
MOVE 'RDCR'                TO ACCT-REG-V.TXN-CODE
*
IF #HOLD-CUR-ACCT-UPDT = 0
  MOVE *DATN               TO ACCT-REG-V.DATE-LAST-ACCT-UPDATE
ELSE
  MOVE #HOLD-CUR-ACCT-UPDT TO ACCT-REG-V.DATE-LAST-ACCT-UPDATE
END-IF
*
MOVE #EXTRA-REFUND         TO ACCT-REG-V.DEBIT-AMOUNT
*
MOVE 450 TO ACCT-REG-V.TXN-ACCT-NUMBER
*
COMPRESS ACCT-REG-V.DESCRIPTION 'TERM REFUND' INTO DESCRIPTION
*
STORE ACCT-REG-V
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE GET-REFUND-RATE                               /* PM11
***********************************************************************
*
COMPRESS 'TMRF' #RATE-PLAN #RATE-SMOKER INTO #RATE-KEY LEAVING NO
*
#RATE-REFUND := FUNCTION-TERM-REFUND-RATE(<#RATE-KEY,#RATE-DATE,#RATE-FACE-AMT>)
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE CHECK-EQUALIZATION                            /* PM11
***********************************************************************
*
COMPRESS 'TMEQ' #RATE-PLAN #RATE-SMOKER INTO #RATE-KEY LEAVING NO
*
#ISSUE-DATE := FUNCTION-TERM-REFUND-EQUAL (<#RATE-KEY,#RATE-DATE,#RATE-FACE-AMT>)
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE SET-RATE-SMOKER                              /* PM11
***********************************************************************
*
IF #SMOKER-FLAG = 'S'
  #RATE-SMOKER := 'S'
ELSE
  #RATE-SMOKER := 'N'
END-IF
*
END-SUBROUTINE
