* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
************************************************************************
* PROGRAM-ID: CHGPANN1                                                 *
*                                                                      *
* FUNCTION  : Extract data for annual statements                       *
*                                                                      *
*                       MODIFICATION LOG                               *
* USER   DATE      TAG     REASON                                      *
* ----   --------  ---     ------------------------------------------  *
* vxt    12042004  vt1     Initial creation                            *
* vxt    11/10/2017 vt2    Added prefered owner's phone and e-mail     *
************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL  USING G3500AAD
LOCAL  USING GONERLXX
LOCAL
*
***********
*  VIEWS  *
***********
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 redefine id-number
    3 id-number-a  (a6)
  2 MEMBER-CONTACT-ID
  2 WIDOW-FLAG
  2 LINKED-CN     (1)
  2 REDEFINE LINKED-CN
    3 LINKED-CN-A   (A6/1)
  2 INTRO-FLAG
  2 MEC-IND    (9)
  2 INS-MAIL-CODE
  2 TITLE-SP
  2 RESTRICT-MBR-SW
  2 CHIEF-OF-STAFF-IND
  2 DEBIT-CREDIT-AMT
  2 PROCESS-IND
  2 MILITARY-SERVICE
  2 MILITARY-STATUS
  2 STM-P-I              (9)
  2 STM-TPP              (9)
  2 STM-PREM             (9)
  2 STM-COI              (9)
  2 STM-EQU              (9)
  2 STM-INT              (9)
  2 STM-BEG-CV           (9)
  2 STM-END-CV           (9)
  2 STM-BEG-DB           (9)
  2 STM-END-DB           (9)
  2 STM-SVC-FEE          (9)
  2 STM-P-I-LAST         (9)
  2 STM-TPP-LAST         (9)
  2 STM-PREM-LAST        (9)
  2 STM-COI-LAST         (9)
  2 STM-EQU-LAST         (9)
  2 STM-INT-LAST         (9)
  2 STM-BEG-CV-LAST      (9)
  2 STM-END-CV-LAST      (9)
  2 STM-BEG-DB-LAST      (9)
  2 STM-END-DB-LAST      (9)
  2 STM-SVC-FEE-LAST     (9)
  2 X-INTEREST-RATE      (9)
  2 X-LOAN-AMOUNT        (9)
  2 X-ACCUM-INTEREST     (9)
  2 X-NXT-YR-ACCUM-INT   (9)
  2 X-NXT-YR-ACCUM-INT-2 (9)
  2 X-LOAN-AMOUNT-2      (9)
  2 X-ACCUM-INTEREST-2   (9)
  2 X-LOAN-DATE          (9)
  2 X-LOAN-DATE-2        (9)
  2 X-FIRST-PLACE-FEE    (9)
  2 X-BILL-ADJUST        (9)
  2 CAP-CONV-ACV
  2 ONLINE-ACTION-GN
  2 NUM-MBRSHIPS         (9)
  2 EXPIRY-DAY           (9)
  2 ONLINE-ACTION        (9)
  2 STATUS               (9)
  2 FACE-AMOUNT          (9)
  2 ANNUAL-PREM          (9)
  2 PAY-STATUS           (9)
  2 TOT-PREMIUMS-PAID    (9)
  2 PAID-TO-DATE         (9)
  2 MODE                 (9)
  2 COST-BASIS           (9)
  2 PLAN                 (9)
  2 REDEFINE PLAN
    3 PLAN-OCC           (9)
      4 PLAN-A1     (A1)
      4 PLAN-N2     (N2)
  2 MIN-CASH-VALUE        (9)
  2 CASH-VALUE            (9)
  2 ACC-CASH-VALUE        (9)
  2 NXT-MON-CASH-VALUE    (9)
  2 DEATH-BENEFIT         (P7.2/9)
  2 NXT-MON-DEATH-BENEFIT (9)
  2 CONV-DURATION         (9)
  2 LAST-DURATION         (9)
  2 ISSUE-AGE             (9)
  2 REDEFINE ISSUE-AGE
    3 ISSUE-AGE-OCC       (9)
      4 ISSUE-AGE-N   (N2)
  2 PAID-UP-DATE          (9)
  2 ISSUE-DATE            (9)
  2 REDEFINE ISSUE-DATE
    3 ISSUE-DATE-OCC       (9)
      4 ISSUE-DATE-YYYYMMDD (N8)
      4 REDEFINE ISSUE-DATE-YYYYMMDD
        5 ISSUE-DATE-YYYYMM (N6)
        5 REDEFINE ISSUE-DATE-YYYYMM
          6 ISSUE-DATE-YYYY   (N4)
          6 ISSUE-DATE-MM     (N2)
        5 ISSUE-DATE-DD     (N2)
  2 SPLIT-IND             (9)
  2 SMOKER-FLAG           (9)
  2 MONTH-ALLOC-AMT       (9)
  2 PREM-DEFICIENCY       (9)
  2 BEG-CASH-VALUE        (9)
  2 LAST-ANN-CASH-VALUE   (9)
  2 policy-id             (9)
*
1 status view of a-status                              /* vt2 \/
  2 id-number
  2 member-contact-id                                    /* vt2 /\
*
1 VA-V VIEW OF A-VA-HISTORY
  2 RECORD-KEY      (N15)
  2 REDEFINE RECORD-KEY
    3 ID-NO      (N6)
    3 ISS-DT     (N8)
    3 SPL-IND    (N1)
  2 YEAR-MONTH-M          (13)
  2 ACCUM-CASH-VALUE-M    (13)
  2 CASH-VALUE-M          (13)
  2 DEATH-BENEFIT-M       (13)
  2 PREMIUM-M             (13)
  2 COST-OF-INSURANCE-M   (13)
  2 INTEREST-M            (13)
  2 PRORAT-LOAN-BAL-M     (13)
  2 PRORAT-LN-ACC-INT-M   (13)
  2 issue-plan                                 /* vt 03/31/2017
*
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER             (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A         (A6)
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-1ST       (N1)
    3 ID-NUMBER-LAST-5    (N5)
  2 NOTE-DATE             (N8/60) /* LET P/A = PRIMARY/ALTERNATE DESING
  2 C*NOTE-TABLE
  2 NOTE-TEXT             (A60/500)
  2 REDEFINE NOTE-TEXT
    3 NOTE-TEXT-60    (500)
      4 NOTE-TEXT-DG-LBL  (A11)
      4 NOTE-TEXT-DG-MM   (A2)
      4 NOTE-TEXT-DG-SL1  (A1)
      4 NOTE-TEXT-DG-DD   (A2)
      4 NOTE-TEXT-DG-SL2  (A1)
      4 NOTE-TEXT-DG-YYYY (A4)
      4 NOTE-TEXT-DG-FILL (A39)
  2 REDEFINE NOTE-TEXT
    3 NOTE-TEXT-60-2  (500)
      4 NOTE-TEXT-OO-LBL  (A34)
      4 NOTE-TEXT-OO-MM   (A2)
      4 NOTE-TEXT-OO-SL1  (A1)
      4 NOTE-TEXT-OO-DD   (A2)
      4 NOTE-TEXT-OO-SL2  (A1)
      4 NOTE-TEXT-OO-YYYY (A4)
      4 NOTE-TEXT-OO-FILL (A16)
*
1 WEB-V VIEW OF A-WEB-ACCOUNT-INFO
  2 MEMBER-CN
  2 ANNS-DELIVERY-FLAG
*
1 GEN-TABLE view of  a-gen-table
  2  GEN-KEY
  2  GEN-SUB-KEY
  2  GEN-DESCRIPTION
  2  SEC-KEY
*
1 pol-cont view of a-policy-contacts
  2 policy-number
  2 designation-id
  2 relation
  2 reference-number
  2 ni-owner
*
1 design view of a-designation
  2 designation-id
  2 date-signed
  2 c*bene-show
  2 bene-show (18)
*
**********
*  KEYS  *
**********
*
1 #RECORD-KEY   (N15)
1 REDEFINE #RECORD-KEY
  2 #RK-ID      (N6)
  2 #RK-ISS-DT  (N8)
  2 #RK-SPL-IND (N1)
1 #CAP-LOAN-MONS   (N3)
1 #CAP-CSV-MONS    (N3)
1 #CAP-REMAIN-MONS (N3)
*
1 #START-KEY   (N15)
1 REDEFINE #START-KEY
  2 #START-ID    (N6)
  2 #START-ISSUE (N8)
  2 #START-IND   (N1)
*
1 #END-KEY   (N15)
1 REDEFINE #END-KEY
  2 #END-ID    (N6)
  2 #END-ISSUE (N8)
  2 #END-IND   (N1)
*
1 #sec-key (a7)
1 redefine #sec-key
  2 #gen-key     (a4)
  2 #sub-key     (a3)
*
**************
*  COUNTERS  *
**************
*
1 #COUNTERS
  2 #POLS-PROCESSED           (P7)
  2 #RECS-READ                (P7)
  2 #RECS-WRITTEN             (P7)
  2 #CNT-5                    (P7)
  2 #CNT-6                    (P7)
  2 #CNT-7                    (P7)  /* PUAP policies
  2 #CNT-8                    (P7)  /* inactive policies
  2 #CNT-9                    (P7)  /* policy with  FPF not paid
  2 #CNT-10                   (P7)
  2 #CNT-11                   (P7)
  2 #NUM-RECS-DATA            (P7)
  2 #NUM-DUES-PAID            (p7)
  2 #POS-EQU                  (p7)
  2 #NEG-EQU                  (p7)
  2 #NUM-BANKRUPT             (P7)
  2 #num-terminated           (p7)
  2 #TOT-OLD                  (p7)
  2 #TOT-NEW                  (p7)
  2 #TOT-NXT                  (p7)
  2 #TOT-MEC                  (p7)
  2 #TOT-TERM                 (p7)
  2 #num-lt                   (p7)
  2 #num-rt                   (p7)
  2 #num-ez                   (p7)
  2 #num-lt2                  (p7)
  2 #num-svc-fee-gt-coi       (p7)
  2 #BAD-ADDR-POLS            (p7)
  2 #TYP-X                    (P7)
  2 #TYP-O                    (P7)
  2 #TPP-GTR-CSV              (P7)
  2 #WL-CAPS-W-LOAN           (P7)
  2 #WL-CAPS-W-NO-LOAN        (P7)
  2 #TERM-CAPS-W-LOAN         (P7)
  2 #TERM-CAPS-W-NO-LOAN      (P7)
  2 #TERM-CAP-POLS            (P7)
  2 #NUM-PRIOR-YE-MISMATCHES  (P7)
  2 #NUM-INFLATED-DB          (P7)
  2 #SPCL-CAT                 (P7)
  2 #MCSV-EXC-CSV             (P7)
  2 #OWN-DIFF-INS             (P7)
  2 #cnt-bene                 (p7)
  2 #1ST-HLF-MONS             (p7)
  2 #2ND-HLF-MONS             (p7)
  2 #NUM-MEC                  (p7)
  2 #NUM-BENE-COLS             (N3)
  2 #miss-benes                (p7)
  2 #num-rpu                   (p7)
  2 #num-poc                   (p7)
  2 #num-nio                   (p7)
  2 #num-opt                   (p7)
  2 #num-cap                   (p7)
  2 #num-wl-paperless          (p7)
  2 #num-term-paperless        (p7)
  2 #num-wl-undel              (p7)
  2 #num-term-undel            (p7)
*
***********************
*  INPUT PARAMETERS   *
***********************
*
1 #JCL-PARM                 (A10)
1 REDEFINE #JCL-PARM
  2 #jcl-process-yyyymm     (n6)
  2 redefine #jcl-process-yyyymm
    3 #JCL-PROCESS-YYYY     (N4)       /*  process year / year for which the annual statements should be created /
    3 #JCL-PROCESS-MM       (N02)      /*  last successful ME run / i.e.use 11 if testing in december, 12 - for run in Jan in Production/
  2 #space1                 (a1)
  2 #jcl-pol-type           (a1)       /* W - whole life, T - term, A - all
  2 space2                  (a1)
  2 #JCL-SAVE-INFO          (A1)       /* Y - move it/ (only do it once) change
*                                      /* N - do not move it/ location each year
1 #jcl-start-cn        (n6)
1 #jcl-end-cn          (n6)
*
***********************
*  LOGICAl VARIABLES  *
***********************
*
1 #WL               (L)
1 #TERM             (L)
1 #OLD              (L)
1 #NEW              (L)
1 #NXT              (L)
1 #BANKRUPT         (L)
1 #NON-MBR-OWNER    (L)
1 #FOUND-BENE       (L)
1 #UNDL             (L)
1 #TPP-EXC-CSV      (L)
1 #CALC-X           (L)
1 #found-sel        (l)
1 #hide-ssn         (l)
1 #NEW-LAYOUT         (L)
1 #FND-SSN            (L)
1 #FND-SSN-NEW-LAYOUT (L)
1 #FOUND-1ST-LINE     (l)
*
**********************
* INTERNAL TABLES    *
**********************
*
1 #SELECT-CASES  /* Cnls to put on Separate File for testing
  2 #CN-1  (A56) INIT <'033395-143613-023941-050446-087971-055177-037153-096842-'>
  2 #CN-9  (A56) INIT <'094010-110157-078903-052573-044107-141093-093787-081883-'>
  2 #CN-17 (A56) INIT <'067009-079960-104885-105279-104884-104908-087683-090555-'>
  2 #CN-25 (A56) INIT <'140466-013691-035750-116166-044747-049317-143613-033395-'>
  2 #CN-33 (A56) INIT <'062200-116944-112555-090363-125577-125576-101968-117895-'>
  2 #CN-41 (A56) INIT <'133933-136056-135321-097048-085468-139957-150200-093802-'>
  2 #CN-49 (A56) INIT <'087941-161765-161766-161767-161768-161769-036189-044305-'>
  2 #CN-57 (A21)  INIT <'061899-073336-196334-'>
1 REDEFINE #SELECT-CASES
  2 #SELECT-CNS  (59)
    3 #SELECT-CN    (A6)
    3 #DASH         (A1)
1 #NUM-SEL   (N3)  INIT <59>
*
1 #MONTHS (A36) INIT <'JanFebMarAprMayJunJulAugSepOctNovDec'>
1 REDEFINE #MONTHS
  2 #MON  (A3/12)
*
***********************
*  WORKING VARIABLES  *
***********************
*
1 #I1                 (I2)
1 #I2                 (I2)
1 #I3                 (I2)
1 #I4                 (I2)
1 #I5                 (I2)
1 #I6                 (I2)
1 #I7                 (I2)
****   1 #k                  (i2)            /* vt 08/28/2017
1 #i-months           (n2)
*
1 #PRIOR-YE               (N6)
1 REDEFINE #PRIOR-YE
  2 #PRIOR-YE-YYYY        (N4)
  2 #PRIOR-YE-MM          (N2)
*
1 #CURR-ME                (N6)
1 REDEFINE #CURR-ME
  2 #CURR-ME-YYYY         (N4)
  2 #CURR-ME-MM           (N2)
*
1 #YYYYMMDD               (N8)
1 REDEFINE #YYYYMMDD
  2 #CENT-A               (A2)
  2 #YY-A                 (A2)
  2 #MM-A                 (A2)
  2 #DD-A                 (A2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM               (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY               (N4)
    3 #MM                 (N2)
  2 #DD                   (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A           (A6)
*
1 BD-SHOW
  2 CN                 (N6)
  2 #POLICY-NUMBER     (A16)
  2 #LAST-UPD-A        (A15)
  2 #NUM-LINES         (N3)
  2 #BENE-SHO          (A79/40)
  2 redefine #bene-sho
    3 #bene-sho1       (a79/40)
*
1 #BENEFICIARY-INFORMATION
  2 ID-NUMBER          (N6)
  2 #BENE-LAST-UPD-A   (A15)
  2 NT-NUM-LINES       (N3)
  2 NT-BENE-SHO        (A79/40)
  2 REDEFINE NT-BENE-SHO
    3 NT-BENE-SHO-OCC  (40)
      4 NT-BENE-SHO-1ST-1    (A1)       /* "~" indicates raw new format
      4 NT-BENE-SHO-AFTER-1  (A78)      /* bene data
*
1 #1st-mon-process-year         (N6)
1 redefine #1st-mon-process-year
  2 #1st-mon-process-year-yyyy  (n4)
  2 #1st-mon-process-year-mm    (n2)
1 #lst-mon-process-year         (N6)
1 redefine #lst-mon-process-year
  2 #lst-mon-process-year-yyyy  (n4)
  2 #lst-mon-process-year-mm    (n2)
*
1 #border-date           (n8)
1 redefine #border-date
  2 #border-date-yyyy      (n4)
  2 #border-date-mm        (n2)
  2 #border-date-dd        (n2)
1 #DE-GF-YYYYMM           (N6)
*

1 #TODAY-YYYYMMDD         (N8) /* 20050101 doing stmts for 2004 on 2/1/2005
1 redefine #today-yyyymmdd
  2 #today-yyyy             (n4)
  2 #today-mm               (n2)
  2 #today-dd               (n2)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYYMMDD-A     (A8)
*
1 #ISSUE-DATE             (N8)
1 REDEFINE #ISSUE-DATE
  2 #ISSUE-DATE-YYYYMM    (N6)
  2 REDEFINE #ISSUE-DATE-YYYYMM
    3 #ISSUE-DATE-YYYY    (N4)
    3 #ISSUE-DATE-MM      (N2)
  2 #ISSUE-DATE-DD        (N2)
  2 REDEFINE #ISSUE-DATE-DD
    3 #ISSUE-DATE-DD-A    (A2)
1 REDEFINE #ISSUE-DATE
  2 #ISSUE-DATE-CENT      (N2)
  2 #ISSUE-DATE-YYMMDD    (N6)
*
1 #CAP-LOAN-END-DATE      (N8)
*
1 #out-file             (a2100)                     /* vt2 was 2000
1 redefine #out-file
  2 #out-data
    3 #PLAN                (A3)
    3 #CN                  (A6)
    3 #POL-NUM             (A16)
    3 #OWNER-CN            (A6)
    3 redefine #owner-cn
      4 #owner-cn-n        (n6)
    3 #OWNER-NAME          (A70)
    3 #STREET              (A70)
    3 #STREET-2            (A70)
    3 #CITY                (A50)
    3 #STATE               (A50)
    3 #ZIP                 (N9)
    3 redefine #zip
      4 #zip-5               (a5)
      4 #zip-4               (a4)
      4 redefine #zip-4
        5 #zip-4-n           (n4)
    3 #owner-phone         (a20)                     /* vt2
    3 #owner-email         (a70)                     /* vt2
    3 #ISSUE-DATE-a        (A2)
    3 #ISSUE-DATE-MON-YEAR (A8)
    3 #ISSUE-AGE           (A2)
    3 #INSURED-NAME        (A70)
    3 #CURRENT-DB          (A13)
    3 #INITIAL-DB-a        (A13)
    3 #tot-db-growth       (a13)
    3 #tpp-a               (A13)
    3 #TOT-CSV-GROWTH      (A13)
    3 #CURRENT-CSV         (A13)
    3 #LAST-YEAR-CSV       (A13)
    3 #LAST-YEAR-DB        (A13)
    3 #YTD-PREMS           (A13)
    3 #YTD-COI             (A13)
    3 #YTD-EQU             (A13)
    3 #YTD-INT             (A13)
    3 #loan-p-i-a            (A13)
    3 #AVL-CSV-a           (A13)
    3 #AVL-DB-a            (A13)
    3 #RPU-IND             (A1)
    3 #POC-IND             (A1)    /* prems exceeds csv
    3 #UPP-IND             (A1)    /* unknown tpp in PUSP
    3 #NIO-IND             (A1)    /* non-insured owner
    3 #MEC-IND             (A1)
    3 #annual-prem         (a13)
    3 #CAP-IND             (A1)
    3 #svc-fee-a           (a13)
    3 #mort-coi            (a13)
    3 #admin-fee           (a13)
    3 #ytd-db-growth-a     (a13)                       /* need to take logic from ATHpanew pgm
    3 #acq-cost-a          (a13)
    3 #ytd-dues            (a13)                        /* need to take logic from ATHpanew pgm
    3 #opt-ind             (a3)     /* opt-out Member
    3 #cap-loan-p-i        (a13)    /* Only CAP Fixed P-I
    3 #living-svc          (a13)
    3 #sas-a               (a13)
    3 #oo-credit-a         (a13)   /* original service fee
    3 #policy-type         (a4)
    3 #exp-date            (a15)                           /* need to take logic from ATHpanew pgm   \/
    3 #bene-last-upd-a     (a10)
    3 #plan-type           (a1)
    3 #select              (a1)
    3 #undeliverable       (a1)
    3 #no-paper            (a1)
    3 #bene-data           (a/18) dynamic
*
1 #TAB             (A1)   INIT<H'09'>
*
1 #CURR-VAR-INT-RATE     (P2.3)
*
1 #MON-TBL   (N6/12)
1 #MON-TBL-ISS-DT (N8/12)
*
1 #loan-p-i               (N6.2)  /* it excludes CAP loan P-I
1 #tpp               (N6.2)
1 #DATA-YTD-PREMS        (N6.2)
1 #DATA-YTD-COI          (N6.2)
1 #DATA-YTD-EQU          (N7.2)
1 #DATA-YTD-INT          (N6.2)
1 #DATA-BEG-CSV          (N7.2)
1 #DATA-CURR-CSV         (N7.2)
1 #DATA-BEG-DB           (N7.2)  /*
1 #DATA-CURR-DB          (N7.2)  /*
1 #DATA-CURR-RPU         (A1)    /* rpu'd last yr . Need to check if it is used in ATHPanew pgm
1 #DATA-CSV-DIFF         (N7.2)  /*                 Need to check if it is used in ATHPanew pgm
1 #DATA-BEG-OF-YR-DB     (N7.2)
1 #DATA-SVC-FEE          (n7.2)                                        /* vt 04/03/2017 was n3.2
1 #DATA-DUES             (n6.2)    /* Is it used in ATHPNEW pgm?????
1 #DATA-RT-ORIG-ISS-AGE  (N2)   /* Is it used in ATHPNEW pgm?????
1 #DATA-PUP-DT           (n8)   /* Is it used in ATHPNEW pgm?????
1 #DATA-TPP-EXC-CSV      (a1)  /* ????????
*
1 #REAL-COI              (N4.2)
1 #WORK-DB               (N7.2)
1 #LIV-SVC               (N5.2)
1 #SAS                   (N5.2)
1 #OO-CREDIT             (N5.2)
*
1 #A9                    (A9)
1 REDEFINE #A9
  2 #N7-2                (N7.2)
*
1 #A5                    (A5)
1 REDEFINE #A5
  2 #N3-2                (N3.2)
1 #ST-ISN                (P8)
1 #ACQ-COST              (N7.2)           /* vt 04/03/2017 was n6.2
1 #DUES-PAID             (N6.2)
1 #SVC-FEE               (N7.2)           /* vt 04/03/2017 was n3.2
1 #DUES                  (N3.2)
1 #COI                   (N7.2)           /* vt 04/03/2017 was n6.2
1 #ADMIN                 (N7.2)           /* vt 04/03/2017 was n6,2
1 #NEG-EQU-EQ-ACQ        (N7)
*
1 #pol-num-a             (a) dynamic
1 #id-number-a           (a) dynamic
1 #owner-cn-a            (a) dynamic
*
1 #BENE-TEXT1            (A79/40)
*
1 #ACV                   (N7.2)
1 #CV                    (N7.2)
1 #YTD-PREMIUMS-PAID     (N7.2)
1 #YTD-INTEREST-PAID     (N5.2)
1 #YTD-COI-PAID          (N5.2)
1 #YTD-INS-AND-EXP-PAID  (N5.2)
1 #YTD-ACQ-PAID          (N4.2)
1 #YTD-MNT-PAID          (N4.2)
1 #YTD-EQU-PAID          (N4.2)
1 #BEG-OF-YR-DB          (N7.2)
1 #TOT-P-I               (N6.2)     /* never used a/o 12/28/2005
1 #POLICY-TOT-P-I        (N6.2)   /* DW3
1 #CAP-P-I               (N6.2)   /* DW11
1 #AVL-CSV               (N7.2)
1 #AVL-DB                (N7.2)
1 #FIXED-LOAN-AMOUNT     (N5.2)
1 #FIXED-ACC-INT         (N5.2)
1 #VARIABLE-LOAN-AMOUNT  (N6.2)
1 #VARIABLE-ACC-INT      (N5.2)
1 #DAILY-INT             (P3.7)
1 #DAILY-INT-2           (P3.7)
1 #ACC-INT               (P5.2)
1 #ACC-INT-2             (P5.2)

*
1 #WORK-CAP-CONV-ACV     (P9.2)
1 #CAP-CONV-ACV          (P7.2)
1 #CSV                   (P7.2)
1 #CAP-CSV               (P7.2)
1 #WORK-AMT              (A76)
*
1 #AVL-TDIV              (P7.2)
1 #CURR-DB               (P7.2)
1 #CURR-CSV              (P7.2)
*
1 #ID-NUMBER       (N6)
1 #BD-OWNER-cn     (n6)
*
1 #INITIAL-DB            (P7.2)
1 #DB-GROWTH             (P7.2)
1 #CSV-GROWTH            (P7.2)

*
* BELOW for CALC-PREMS-PAID
1 #PP-DATE-OF-BIRTH  (N8)
1 #PP-ANNUAL-PREM    (N5.2)
1 #PP-PAY-STATUS     (A2)
1 #PP-TOT-PREMIUMS-PAID (N7.2)
1 #PP-PAID-TO-DATE   (N8)
1 #PP-ISSUE-DATE     (N8)
1 #PP-MODE           (A1)
1 #PP-PLAN           (A3)
1 #PP-COST-BASIS      (N7.2)
1 #PP-MONTH-ALLOC-AMT (N7.2)
1 #PP-INTRO-FLAG     (A1)
1 #PP-FIRST-PLACE-FEE (N7.2)
1 #PREMS-PAID         (P7.2)
1 #SUB-PREMS-PAID     (P7.2)
1 #PP-BADJ            (P5.2)
* ABOVE for CALC-PREMS-PAID
*
1 #YEAR-MONTH-M    (N6)
1 REDEFINE #YEAR-MONTH-M
  2 #HIST-YYYY      (N4)
  2 #HIST-MM        (N2)
*
1 #ACV-ACCUM       (P9.2)
1 #CSV-ACCUM       (P9.2)
1 #ACV-DIFF        (P9.2)
1 #CSV-DIFF        (P9.2)
1 #ADJ-EQU         (P9.2)
*
1 #ACCUM-ACV      (P7.2)
1 #NEW-ACV        (P7.2)
1 #PREV-ACV       (P7.2)
1 #ACV-DIFFF      (P7.2)
1 #REAL-PREM      (N6.2)
*
1 #PRIOR-YE-ACV         (P9.2)
1 #PRIOR-YE-CSV         (P9.2)
1 #CURR-YE-ACV          (P9.2)
1 #CURR-YE-CSV          (P9.2)
*
1 #PAY-STAT      (A4)
1 #FACE          (P7.2)
1 #DB            (P7.2)
1 #POL-TYPE     (A3)

1 #ERR-MSG  (A60)
1 #PAYS-DUES-SEP-FROM-PREM (P5)
*
1 #DOB        (N8.0)               /* TT3
1 #neg-rec             (n9)                /* vt4

*

1 #bene-last-upd   (a10)
1 redefine #bene-last-upd
  2 #bene-last-upd-yyyy (n4)
  2 #bene-last-upd-mm   (n2)
  2 #bene-last-upd-dd   (n2)
1 #paid-up-date  (n8)
1 redefine #paid-up-date
  2 #paid-up-date-yyyy  (n4)
  2 #paid-up-date-mm    (n2)
  2 #paid-up-date-dd    (n2)
*
1 #zip-a           (a10)
1 redefine #zip-a
  2 #zip-a-5       (a5)
  2 #zip-a-dash-4  (a5)
*
1 #CURR-DB-GROWTH  (P7.2)
1 #country         (a50)
*
1 #STREET-TO-USE  (A70)
1 REDEFINE #STREET-TO-USE
  2 #TTEE-X         (A1/70)
1 #INFO-TO-RIGHT    (L)
*
1 #pda-serv
  2 #id-number-n   (n6)
  2 #segment       (n2)
  2 #start-year    (n6)
  2 #end-year      (n6)
  2 #issue-date-n  (n8)
  2 #split-ind     (n1)                     /* vt 04/19/2017
  2 #wh-count      (n2)
  2 #tot-admin     (n7.2)
  2 #TOT-ACQ-COST  (n7.2)
  2 #tot-liv-svc   (n7.2)
  2 #tot-sas       (n7.2)
  2 #tot-oo-cred   (n7.2)
  2 #tot-coi       (n7.2)
  2 #tot-svc-fee   (n7.2)
  2 #found-oldest    (l)                   /* vt 08/14/2017
  2 #mon-tbl-a       (a6/100)                /* vt 08/28/2017
  2 #k              (i2)                     /* vt 08/28/2017
  2 #nbr-of-active-months (n6)               /* vt 08/28/2017
  2 #nbr-of-total-months  (n6)               /* vt 08/28/2017
*
1 #PLAN-A3          (A3)
1 REDEFINE #PLAN-A3
  2 #PLAN-N1        (N1)
1 REDEFINE #PLAN-A3
  2 #PLAN-N2        (N2)
*
1 #work-plan        (a3)
1 redefine #work-plan
  2 #work-plan-1      (n1)
  2 #work-plan-2      (n2)
*
1 #wl-count         (n2)
1 #nxt-process-year (n4)                                  /* vt 09/01/2017
1 #cnt-gt1          (n9)                                  /* vt 10/25/2017
END-DEFINE
*
* DEFINE WORK FILE 1 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/NEWANNS.TXT'      TYPE 'ASCII'
* DEFINE WORK FILE 2 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/NEWANNS.WL.TXT'   TYPE 'ASCII'
* DEFINE WORK FILE 3 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/NEWANNS.TERM.TXT' TYPE 'ASCII'
* DEFINE WORK FILE 11 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/WORK.TEST.TXT'      TYPE 'ASCII'

ON ERROR
  INCLUDE GABNDCX3
  print '=' ST-V.ID-NUMBER
  terminate 100
END-ERROR
*
INPUT #JCL-PARM            /* FROM STACK TO ENTER PROCESS YEAR
input #jcl-start-cn
input #jcl-end-cn
*
perform create-title
*
perform get-dates
*
#CURR-VAR-INT-RATE := FUNCTION-INT-RATE(<'RATE5AB'>)
WRITE '#CURR-VAR-INT-RATE = ' #CURR-VAR-INT-RATE
write '=' #jcl-start-cn '=' #jcl-end-cn
*
read multi-fetch of 20 st-v logical by id-number starting from #jcl-start-cn to #jcl-end-cn
  ADD 1 TO #RECS-READ

  MOVE *ISN TO #ST-ISN
*
  IF #JCL-SAVE-INFO = 'Y'
    perform update-status
  END-IF
*
  RESET #DOB
  #DOB    := GET-DATE-OF-BIRTH(<ST-V.MEMBER-CONTACT-ID>)
*
  perform build-month-table
*
  FOR #I1 1 TO 9
    reset #out-data
    IF  (ST-v.status (#I1) NE 'D')
      add 1 to #num-terminated
      add 1 to #cnt-8
*****      write (8) st-v.id-number st-v.policy-id(#i1) plan (#i1) '=' widow-flag
      escape top
    end-if
*
    if st-v.plan(#i1) = 'GT1'                /* 10/25/2017 \/
      add 1 to #cnt-GT1
      escape top
    end-if                                   /* 10/25/2017 /\
*
    if (ST-V.ISSUE-DATE(#I1) GE #border-date)                /* bypass 02/01 and >
        OR (ST-V.ISSUE-DATE-YYYYMM(#I1) GT #CURR-ME)         /*If we are in OCT/DEC
        OR (PAY-STATUS (#I1) = '44' OR = '43' OR= '73')      /* ETI, PULT or NH
        OR (PLAN (#I1) = 'SO')                               /* Service Only
      ESCAPE top
    END-IF
*
    IF X-FIRST-PLACE-FEE (#I1) GT 0                          /* do not do Ann stm if FPF
      ADD 1 TO #CNT-9
      DISPLAY (9)  #CNT-9 ST-V.ID-NUMBER ISSUE-DATE (#I1)
        'FPF' X-FIRST-PLACE-FEE (#I1) 'PLAN' PLAN (#I1)
      ESCAPE top
    END-IF
*
    IF ST-V.RESTRICT-MBR-SW = 'Y'
      ADD 1 TO #SPCL-CAT
*     WRITE(8) ST-V.ID-NUMBER ISSUE-DATE (#I1) 'Spcl Cat Pol Bypassed'
      ESCAPE top
    END-IF
*
    if  pay-status(#I1) = '43' or = '44'  or = '73'
      escape top
    end-if
*
    decide on  first value of pay-status(#i1)
      value '43'
        WRITE ST-V.ID-NUMBER policy-id (#I1) 'ETI policy bypassed - is a PULT(Long Term Care)'
      value '44'

        WRITE ST-V.ID-NUMBER policy-id (#I1) 'ETI policy bypassed'
      value '48'
        if tot-premiums-paid(#i1) = 0
          add 1 to #cnt-7
***          write (7) #cnt-7 st-v.id-number st-v.policy-id(#i1) st-v.paid-to-date (#i1)
        end-if
      value '73'
        WRITE ST-V.ID-NUMBER policy-id (#I1) 'ETI policy bypassed - is a NH(Nursing Home'
      none value
        ignore
    end-decide

*
    IF INS-MAIL-CODE = 'A' OR  = 'T'                    /* do not compute ann stm amounts
*******      WRITE (7) ST-V.ID-NUMBER ST-V.policy-id (#I1)'Annual Stmt bypassed'
*******        'Mail-code=' INS-MAIL-CODE
      if st-v.ins-mail-code = 'T'
        add 1 to #cnt-7
*******        write(7) #cnt-7 st-v.id-number st-v.policy-id(#i1)
      end-if
      ESCAPE TOP
    END-IF
*
*     IF   (PAY-STATUS (#I1) = '48')
*         AND (TOT-PREMIUMS-PAID (#I1) = 0)
*       ADD 1 TO #CNT-7
*       DISPLAY(7)  #CNT-7 ST-V.ID-NUMBER ISSUE-DATE (#I1)
*         PAID-TO-DATE (#I1)
*     END-IF
*
    perform determine-plan-type-exp-date
*
    if #jcl-pol-type eq 'W'  and not(#plan-type = 'A' or = 'G' or = 'W')
*******      write (7)'=' st-v.policy-id(#i1)' is not a whole life policy - bypassed'
      escape top
    end-if
*
    if #jcl-pol-type eq 'T'  and not(#plan-type = 'T' )
*******      write (7)'=' st-v.policy-id(#i1)' is not a term policy - bypassed'
      escape top
    end-if
*
    IF ACC-CASH-VALUE (#I1) LT 0
      WRITE(5) ST-V.ID-NUMBER ST-V.ISSUE-DATE (#I1) 'Negative ACV'
    END-IF
*
    perform check-bankruptcy                               /* vt 09/07/2017
*

    #work-plan :=  st-v.plan (#i1)                          /* for Keith convinience for comparisson   \/
    RESET #PLAN-A3
    IF F-LT2-TRUE(<#work-plan>)
      IF #work-PLAN-2 LT 10
        MOVE #work-PLAN-2 TO #PLAN-N1
      ELSE
        MOVE #work-PLAN-2 TO #PLAN-N2
      END-IF
    ELSE
      MOVE #work-PLAN TO #PLAN-A3
    END-IF
*
****     #PLAN                := st-v.plan         (#i1)
    #plan                := #plan-a3                         /* for Keith convinience for comparisson  /\
    #plan                := #plan-a3
    #CN                  := st-v.id-number
    #POL-NUM             := st-v.policy-id    (#i1)
    #issue-date          := st-v.issue-date   (#i1)
    #paid-up-date        := st-v.paid-up-date (#i1)
    #i-months            := #issue-date-mm
    compress #mon(#i-months) '-' #issue-date-yyyy into #ISSUE-DATE-MON-YEAR leaving no
*
**** write '=' st-v.id-number '=' #issue-date-mon-year
    perform get-owner-insured-info

*
    perform determine-iss-age
*
    perform determine-select
*
    perform determine-cap-counters
*
    MOVE ST-V.ID-NUMBER        TO #ID-NUMBER  #id-number-n
    MOVE ST-V.PLAN  (#I1)      TO #PLAN
    MOVE st-v.ISSUE-DATE (#I1) TO #ISSUE-DATE #issue-date-n
    move st-v.split-ind  (#i1) to #split-ind                                  /* 04/19/2017 vt
    move #i1              to #segment
*
    RESET #TPP-EXC-CSV
*    #RPU-IND #POC-IND #UPP-IND #NIO-IND #MEC-IND
      #POLICY-TYPE
    RESET #ADJ-EQU /* #CAP-IND #OPT-IND
***********************    RESET #1ST-HLF-MONS #2ND-HLF-MONS
*
    IF #WL
      PERFORM FIND-HISTORY
    END-IF
*
    PERFORM FIND-CSV-DB
*
    PERFORM FIND-OWNER-BENE
*
    perform calculate-accrued-interest-loan
*
**************    perform get-owner/insured-names
*
**************no need     #pol-num := st-v.policy-id(#i1)
*
    at break of st-v.id-number
      reset #wh-count #mon-tbl-a(*) #k                     /* vt 08/28/2017
    end-break
*
    IF #WL
      IF #CALC-X
        ADD 1 TO #TYP-X
      ELSE
        ADD 1 TO #TYP-O
      END-IF
    END-IF
*
     perform populate-output-ind-fields                   /* removed based on Keith's request on 09/06/2017 /* put it back on 11/14/2017
*
    perform determine-paperless
*
    if #no-paper = 'Y'
      if #wl
        add 1 to #num-Wl-paperless
      else
        add 1 to #num-term-paperless
      end-if
    end-if

*
    RESET  #AVL-CSV #AVL-DB
    RESET  #YTD-INS-AND-EXP-PAID #AVL-CSV #AVL-DB
    IF #WL
      #POL-TYPE                      := 'WL'
      COMPUTE #YTD-INS-AND-EXP-PAID  =  #YTD-COI-PAID + #YTD-ACQ-PAID + #YTD-MNT-PAID    /* The 3 elements on the right are determined in find-history subroutine
      COMPUTE #AVL-CSV               =  #CURR-CSV - #POLICY-TOT-P-I  /* #curr-csv is determined in FIND-CSV-DB subroutine and #POLICY-TOT-P-I in calculate-accrued-interest-loan subroutine
      COMPUTE #AVL-DB                =  #CURR-DB  - #POLICY-TOT-P-I  /* #curr-db  is  determined in FIND-CSV-DB subroutine and #POLICY-TOT-P-I in calculate-accrued-interest-loan subroutine
    ELSE
      #POL-TYPE                      := plan(#i1)
    END-IF
*
    perform get-bene-data

    PERFORM SAVE-DATA
*
    perform load-annual-statement-info-into-policy-record
*
    perform write-record
*

    IF #TERM
      ADD 1 TO #TOT-TERM
    ELSE
      IF   (ST-V.ISSUE-DATE (#I1) GE 19970101)
          AND (ST-V.MONTH-ALLOC-AMT (#I1) NE 999.99)
        ADD 1 TO #TOT-NXT
      ELSE
        IF ST-V.ISSUE-DATE (#I1) GE 19860701
          ADD 1 TO #TOT-NEW
        ELSE
          ADD 1 TO #TOT-OLD
        END-IF
      END-IF
    END-IF
*
    ADD 1 TO #POLS-PROCESSED
*
    IF ((#ACV-DIFF GT 1.00)  OR (#ACV-DIFF LT -1.00)
        OR (#CSV-DIFF GT 175.00) OR (#CSV-DIFF LT -175.00))
        AND (NOT #TERM)
        AND (CONV-DURATION (#I1) NE 999)   /* bypass caps
        AND (MONTH-ALLOC-AMT (#I1) NE (#CSV-DIFF * -1))
*                                              /* bypass if acq cost
      ADD 1 TO #CNT-6
      DISPLAY (6) #CNT-6 st-v.ID-NUMBER 'ISS/Date' st-v.ISSUE-DATE (#I1)
        'PLN' st-v.PLAN (#I1)
        'Pay/Stat' st-v.PAY-STATUS (#I1) #ACV-DIFF #CSV-DIFF #ADJ-EQU
    END-IF
*
  END-FOR
*
  UPDATE (0756)
  END TRANSACTION

end-read
*
WRITE  'TOT-RECS-READ                = ' #RECS-READ
*
WRITE  'NUM DATA recs extracted      = ' #NUM-RECS-DATA
write  'WL   - Undeliverable         = ' #num-wl-undel
write  'TERM - Undeliverable         = ' #num-term-undel
write  'WL   - Paperless             = ' #num-wl-paperless
write  'TERM - Paperless             = ' #num-term-paperless

wRITE  'WL   - CAP pols w lns        = ' #WL-CAPS-W-LOAN
WRITE  'WL   - CAP pols w no loans   = ' #WL-CAPS-W-NO-LOAN
WRITE  'Term - CAP pols w lns        = ' #TERM-CAPS-W-LOAN
WRITE  'Term - CAP pols w no loans   = ' #TERM-CAPS-W-NO-LOAN

WRITE  'Num TERM pols                = ' #TOT-TERM
write  'LT Number of                 = ' #num-lt
write  'RT Number of                 = ' #num-rt
write  'EZ Number of                 = ' #num-ez
write  'LT2 Number of                = ' #num-lt2

WRITE  'Num OLD pols                 = ' #TOT-OLD
WRITE  'Num NEW pols                 = ' #TOT-NEW
WRITE  'Num NXT pols                 = ' #TOT-NXT
WRITE  'Num typ-O-pols               = ' #TYP-O
WRITE  'Num typ-X-pols               = ' #TYP-X

WRITE  'nxt tpp gtr csv              = ' #TPP-GTR-CSV
WRITE  'TERM CAP policies            = ' #TERM-CAP-POLS

WRITE  'Owner diff than Ins          = ' #OWN-DIFF-INS
WRITE  'Prior YE mismatches          = ' #NUM-PRIOR-YE-MISMATCHES
WRITE  'Inflated DB                  = ' #NUM-INFLATED-DB
WRITE  'Special Cat bypassed         = ' #SPCL-CAT
WRITE  'Pays dues separate from Prem = ' #PAYS-DUES-SEP-FROM-PREM
WRITE  'Min CSV exceeds CSV          = ' #MCSV-EXC-CSV
WRITE  'Positive Equity              = ' #POS-EQU
WRITE  'Negative Equity              = ' #NEG-EQU
WRITE  'Neg Equity = ACQ-BAL         = ' #NEG-EQU-EQ-ACQ
WRITE  'Num mbrs paying dues         = ' #NUM-DUES-PAID
write  'Negative equity reseted      = ' #neg-rec

write  'RPU statements               = ' #num-rpu
write  'POC statements               = ' #num-poc
WRITE  'pols which are MEC           = ' #NUM-MEC
write  'CAP statements               = ' #num-cap
write  'NIO(Non Ins Owner) statements = ' #num-nio
write  'Number of GT1 policies        = ' #cnt-GT1                     /* vt 10/25/2017

*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE FIND-HISTORY
* * * * * * * * * * * * * * * *
*
IF PROCESS-IND = 'D' OR = 'O' /* has this mbr de/gf this year  DW1
* WRITE ST-V.ID-NUMBER 'is DE-GF or opted-out' PROCESS-IND
*
  FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
    FOR #I3 1 TO C*NOTE-TABLE                    /* DW21
      IF NT-V.NOTE-TEXT (#I3) = MASK ('*#DE-GF ON')
        COMPRESS NOTE-TEXT-DG-YYYY (#I3) NOTE-TEXT-DG-MM (#I3)
          NOTE-TEXT-DG-DD (#I3) INTO #YYYYMMDD-A LEAVING NO
*       WRITE ST-V.ID-NUMBER 'DE-GF on' #YYYYMMDD
        IF #YYYY GE #JCL-PROCESS-YYYY
          MOVE #YYYYMM TO #DE-GF-YYYYMM
          ADD 1 TO #CNT-10
          DISPLAY   #CNT-10 ST-V.ID-NUMBER ISSUE-DATE (#I1)
            PROCESS-IND #DE-GF-YYYYMM
        END-IF
        ESCAPE BOTTOM
      END-IF
*
      IF NT-V.NOTE-TEXT (#I3) = MASK ('*#OPTED-OUT OF LIVING')
        COMPRESS NOTE-TEXT-OO-YYYY (#I3) NOTE-TEXT-OO-MM (#I3)
          NOTE-TEXT-OO-DD (#I3) INTO #YYYYMMDD-A LEAVING NO
*        WRITE ST-V.ID-NUMBER 'OO on' #YYYYMMDD
        IF #YYYY GE #JCL-PROCESS-YYYY
          MOVE #YYYYMM TO #DE-GF-YYYYMM
          ADD 1 TO #CNT-10
          DISPLAY   #CNT-10 ST-V.ID-NUMBER ISSUE-DATE (#I1)
            PROCESS-IND #DE-GF-YYYYMM
        END-IF
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
END-IF
*
RESET #OLD #NEW #NXT
MOVE #ID-NUMBER   TO #RK-ID
MOVE #ISSUE-DATE  TO #RK-ISS-DT
MOVE SPLIT-IND  (#I1) TO #RK-SPL-IND
*
READ VA-V BY RECORD-KEY FROM #RECORD-KEY
  IF  (VA-V.ID-NO   NE #ID-NUMBER)
      OR (VA-V.ISS-DT  NE ST-V.ISSUE-DATE (#I1))
      OR (VA-V.SPL-IND NE ST-V.SPLIT-IND (#I1))
********   WRITE(1) 'V/A not found -ST/VA'
********     #ID-NUMBER #ISSUE-DATE  ST-V.SPLIT-IND (#I1)
*********      '---' VA-V.ID-NO VA-V.ISS-DT VA-V.SPL-IND
    ESCAPE ROUTINE
  END-IF
*
  IF YEAR-MONTH-M (13) LT #PRIOR-YE
*********   WRITE(1) #ID-NUMBER 'Most Curr Mon is prior to Curr YYYY'
    ESCAPE ROUTINE
  END-IF
*
  IF COST-OF-INSURANCE-M (13) LT 0
    WRITE (1) ST-V.ID-NUMBER ST-V.ISSUE-DATE (#I1) 'Negative COI'
  END-IF
*
  RESET #YTD-PREMIUMS-PAID
    #YTD-INTEREST-PAID
    #YTD-COI-PAID
    #YTD-ACQ-PAID
    #YTD-MNT-PAID
*
  RESET #CALC-X
*
  IF   (#ISSUE-DATE GE 19970101)
      AND (ST-V.MONTH-ALLOC-AMT (#I1) NE 999.99)
    MOVE TRUE TO #CALC-X
    MOVE TRUE TO #NXT
    #POLICY-TYPE   := 'NEXT'
  ELSE
    IF #ISSUE-DATE GE 19860701
      MOVE TRUE TO #NEW
      #POLICY-TYPE := 'NEW'
    ELSE
      MOVE TRUE TO #OLD
      #POLICY-TYPE := 'OLD'
    END-IF
  END-IF
*
  FOR #I5 1 TO 13
    MOVE YEAR-MONTH-M (#I5) TO #YEAR-MONTH-M
*
    IF #HIST-YYYY NE #JCL-PROCESS-YYYY
      ESCAPE TOP
    END-IF
*
    add premium-m          (#i5) to #ytd-premiums-paid                 /* keith's e-mail 08/31/2016
    ADD INTEREST-M        (#I5) TO #YTD-INTEREST-PAID
    add cost-of-insurance-m (#i5) to #ytd-coi-paid                     /* keith's e-mail 08/31/2016
*
    IF #CALC-X
      if issue-plan = 'GPL' or = 'GP2'                         /* vt 03/31/2017 \/
        add prorat-loan-bal-m (#i5) to #ytd-acq-paid
      else                                                     /* vt 03/31/2017 /\
        ADD PRORAT-LOAN-BAL-M   (#I5) TO #YTD-ACQ-PAID
        ADD PRORAT-LN-ACC-INT-M (#I5) TO #YTD-MNT-PAID
      end-if                                                   /* vt 03/31/2017
    END-IF
  END-FOR
*
  RESET #PRIOR-YE-ACV
  RESET #PRIOR-YE-CSV
  RESET #CURR-YE-ACV
  RESET #CURR-YE-CSV
  RESET #ACV-ACCUM
  RESET #CSV-ACCUM
  RESET #BEG-OF-YR-DB
  FOR #I5 1 TO 13
    IF YEAR-MONTH-M (#I5) = #PRIOR-YE      /* PRIOR YEAR YEAR-END
      MOVE ACCUM-CASH-VALUE-M (#I5) TO #ACV-ACCUM
      MOVE CASH-VALUE-M       (#I5) TO #CSV-ACCUM
      MOVE ACCUM-CASH-VALUE-M (#I5) TO #PRIOR-YE-ACV
      MOVE CASH-VALUE-M       (#I5) TO #PRIOR-YE-CSV
      MOVE DEATH-BENEFIT-M    (#I5) TO #BEG-OF-YR-DB
      ESCAPE TOP
    END-IF
*
    MOVE YEAR-MONTH-M (#I5) TO #YEAR-MONTH-M
    IF #HIST-YYYY NE #JCL-PROCESS-YYYY                 /* NOT THIS YEARS HISTORY
      ESCAPE TOP
    END-IF
*
    IF  ((PROCESS-IND = 'G')
        OR  (#YEAR-MONTH-M LT #DE-GF-YYYYMM))         /* DE/GF this year
        AND (COST-OF-INSURANCE-M (#I5) GT 0)
      FOR #I2 1 TO 12
        IF   (ISSUE-DATE (#I1) = #MON-TBL-ISS-DT (#I2))
            AND (#YEAR-MONTH-M    = #MON-TBL (#I2))
          IF #HIST-MM LT 7                            /* in 1st 1/2 of year
            ADD 1 TO #1ST-HLF-MONS
          ELSE
            ADD 1 TO #2ND-HLF-MONS
          END-IF
        END-IF
      END-FOR
    END-IF
*
    IF  YEAR-MONTH-M (#I5) = #CURR-ME                 /* CURRENT PROCESS M/E
      MOVE ACCUM-CASH-VALUE-M (#I5) TO #CURR-YE-ACV
      MOVE CASH-VALUE-M       (#I5) TO #CURR-YE-CSV
    END-IF
    add PREMIUM-M  (#I5)  to #csv-accum                       /* vt 08/28/2017
    ADD INTEREST-M (#I5)  TO #CSV-ACCUM                       /* vt 08/15/2017 removed *

    subtract COST-OF-INSURANCE-M (#I5) from #csv-accum        /* 08/28/2017
* *
* * *
    IF #CALC-X
      SUBTRACT PRORAT-LOAN-BAL-M   (#I5) FROM #CSV-ACCUM         /* vt 08/15/2017 removed *
      SUBTRACT PRORAT-LN-ACC-INT-M (#I5) FROM #CSV-ACCUM         /* vt 08/15/2017 removed *
    END-IF                                                             /* keith's e-mail 08/31/2016 /\
  END-FOR
*
  IF   (IS-ANNUITY-LIFE(<PLAN(#I1)>)) /* get best of 3 amts
      AND (#BEG-OF-YR-DB NE 0)  /* Zero means 1st year
    IF (#PRIOR-YE - #ISSUE-DATE-YYYYMM LT 100)   /* IN 1ST YEAR
      COMPUTE #WORK-DB = FACE-AMOUNT (#I1) * .90         /* 1
    ELSE
      IF #PRIOR-YE - #ISSUE-DATE-YYYYMM LT 200   /* IN 2ND YEAR
        COMPUTE #WORK-DB = FACE-AMOUNT (#I1) * .95
      ELSE
        MOVE FACE-AMOUNT (#I1) TO #WORK-DB
      END-IF
    END-IF
*
    IF #PRIOR-YE-CSV GT #WORK-DB              /* 2  ALREADY HAS TDIV
      MOVE #PRIOR-YE-CSV TO #WORK-DB
    END-IF
*
    IF #BEG-OF-YR-DB GT #WORK-DB              /* 3  Calced Death Bene
      MOVE #BEG-OF-YR-DB TO #WORK-DB
    END-IF
*
    MOVE #WORK-DB TO #BEG-OF-YR-DB
*
      #BEG-OF-YR-DB
  END-IF
*
  COMPUTE #ACV-DIFF = #CURR-YE-ACV - #ACV-ACCUM
  COMPUTE #CSV-DIFF = #CURR-YE-CSV - #CSV-ACCUM
*
  IF (#CSV-DIFF LT +1.00) AND (#CSV-DIFF GT -1.00)
    if( plan(#i1) eq 'GPL' or = 'GP2')                        /* vt  03/31/2017
      ADD #CSV-DIFF            TO #DATA-YTD-EQU               /* vt  03/31/2017
      reset #data-ytd-equ                                     /* vt  03/31/2017
    else                                                      /* vt  03/31/2017
      ADD #CSV-DIFF TO #YTD-INTEREST-PAID
    end-if                                                    /* vt  03/31/2017
    RESET #CSV-DIFF
  END-IF
*
  if plan(#i1) = 'AL' or = 'AL2'               /* vt 04/14/2017 \/
    reset #data-ytd-equ
  end-if
*
  if plan(#i1) = 'GP2'
    reset  #YTD-INTEREST-PAID
  end-if                                       /* vt 04/14/2017 /\
*
  ESCAPE BOTTOM
END-READ
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE FIND-CSV-DB
* * * * * * * * * * * * * * * *
*
IF #TERM
    OR (IS-ANNUITY-LIFE(<PLAN (#I1)>))    /* DW6  /* TT4
  MOVE FACE-AMOUNT (#I1) TO #FACE
  MOVE DEATH-BENEFIT (#I1) TO #DB
*
  RESET #DOB
  #DOB    := GET-DATE-OF-BIRTH(<ST-V.MEMBER-CONTACT-ID>)
  IF   ((PLAN (#I1) = 'LT')
      AND (#DOB LE (#TODAY-YYYYMMDD - 400000))) /* 40 years
      OR  ((PLAN (#I1) = 'RT')
      AND (ISSUE-AGE (#I1) GT '65'))
      OR  ((PLAN (#I1) = 'EZ')
      AND (PAID-UP-DATE(#I1) LE #TODAY-YYYYMMDD))
*  OR  (((PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z'))
      OR  (F-LT2-TRUE(<PLAN(#I1)>)
      AND ((ISSUE-DATE(#I1) + 40000) LE #TODAY-YYYYMMDD)) /* 4 years
      OR (IS-ANNUITY-LIFE(<PLAN(#I1)>))
*
    CALLNAT 'GDROPSTM' USING
      PLAN          (#I1)
      SMOKER-FLAG   (#I1)
      #DOB
      ISSUE-DATE    (#I1)
      PAID-UP-DATE  (#I1)
      #TODAY-YYYYMMDD    /* will always be xxxx0101 on ACTUAL RUN
      ISSUE-AGE     (#I1)
      #PAY-STAT
      #FACE
      #DB
      CASH-VALUE (#I1)
      BEG-CASH-VALUE (#I1)
  END-IF
*
  IF #DB NE DEATH-BENEFIT (#I1)
    ADD 1 TO #CNT-11
    DISPLAY (11)   #CNT-11 ST-V.ID-NUMBER ISSUE-DATE (#I1) PLAN (#I1)
      'Iss/Age' ISSUE-AGE (#I1)
  END-IF
*
  MOVE #DB TO #CURR-DB
  IF NOT IS-ANNUITY-LIFE(<PLAN(#I1)>)
    ESCAPE ROUTINE
  END-IF
END-IF
*
MOVE ACC-CASH-VALUE (#I1) TO #ACV
RESET #INITIAL-DB
IF   (ISSUE-DATE (#I1) GE 19870401)
    AND (PAY-STATUS (#I1) NE '45')
  MOVE FACE-AMOUNT (#I1) TO #INITIAL-DB
ELSE
  IF PAY-STATUS (#I1) = '45'
    IF  ISSUE-DATE (#I1) LT 19941201
      IF ISSUE-DATE (#I1) GE 19870401
        COMPUTE #INITIAL-DB = NUM-MBRSHIPS (#I1) * 5000
      ELSE
        COMPUTE #INITIAL-DB = NUM-MBRSHIPS (#I1) * 3000
      END-IF
    ELSE
      COMPUTE #INITIAL-DB = EXPIRY-DAY (#I1) * 5000
    END-IF
  ELSE
    COMPUTE #INITIAL-DB = (FACE-AMOUNT (#I1) / 5000) * 3000
  END-IF
END-IF
*

IF IS-ANNUITY-LIFE(<PLAN (#I1)>)
  COMPUTE #INITIAL-DB = FACE-AMOUNT (#I1) * .90
*
  IF (ISSUE-DATE (#I1) LT 20060101)
      AND (#DATA-BEG-OF-YR-DB NE 0)
      AND (FACE-AMOUNT (#I1) * .90) GT #DATA-BEG-OF-YR-DB
    COMPUTE #DATA-BEG-OF-YR-DB = FACE-AMOUNT (#I1) * .90
  END-IF
*
  COMPUTE #CURR-DB-GROWTH =
    #DATA-CURR-DB - #DATA-BEG-OF-YR-DB
END-IF
*
MOVE EDITED #INITIAL-DB(EM=Z,ZZZ,ZZ9.99) TO #INITIAL-DB-A
move left justified #initial-db-a to #initial-db-a                  /* 08/09/2017
*
RESET #AVL-TDIV
IF   (ISSUE-DATE (#I1) GE 19970101)
    AND (MONTH-ALLOC-AMT (#I1) NE 999.99)
  COMPUTE #AVL-TDIV = BEG-CASH-VALUE (#I1) - MONTH-ALLOC-AMT (#I1)
  IF #AVL-TDIV LE 0
    RESET #AVL-TDIV
  END-IF
END-IF
*
IF ST-V.ID-NUMBER = 124156
    AND ST-V.ISSUE-DATE (#I1) = 20040413
    AND ST-V.DEATH-BENEFIT (#I1) = 226000
  MOVE 10150.58 TO #AVL-TDIV
END-IF
*
IF  (ONLINE-ACTION (#I1) = '1') OR (ONLINE-ACTION-GN = '2')
  MOVE FACE-AMOUNT (#I1) TO #CURR-DB
ELSE
  MOVE DEATH-BENEFIT (#I1) TO #CURR-DB   /* USE CURR DB
  ADD #AVL-TDIV TO #CURR-DB
*
  IF (ISSUE-DATE (#I1) GE 19970101)
      AND (MONTH-ALLOC-AMT (#I1) NE 999.99)
      AND (LAST-ANN-CASH-VALUE (#I1) GT #CURR-DB)
    MOVE LAST-ANN-CASH-VALUE (#I1) TO #CURR-DB
      #BEG-OF-YR-DB
    ADD 1 TO #NUM-INFLATED-DB
  END-IF
END-IF
*
IF IS-ANNUITY-LIFE(<PLAN(#I1)>)
  MOVE FACE-AMOUNT   (#I1) TO #FACE
  MOVE DEATH-BENEFIT (#I1) TO #DB
  CALLNAT 'GDROPSTM' USING
    PLAN          (#I1)
    SMOKER-FLAG   (#I1)
    #DOB
    ISSUE-DATE    (#I1)
    PAID-UP-DATE  (#I1)
    #TODAY-YYYYMMDD   /* Always xxxx0101 on ACTUAL RUN
    ISSUE-AGE     (#I1)
    #PAY-STAT
    #FACE
    #DB
    CASH-VALUE (#I1)
    BEG-CASH-VALUE (#I1)
  MOVE #DB TO #CURR-DB
END-IF
*
MOVE CASH-VALUE (#I1) TO #CURR-CSV
*
IF MIN-CASH-VALUE (#I1) GT #CURR-CSV
  ADD 1 TO #MCSV-EXC-CSV
END-IF
*
PERFORM CALC-PREMS-PAID-SETUP
*
IF   (#PREMS-PAID GT #CURR-CSV)
  ADD 1 TO #TPP-GTR-CSV
  MOVE TRUE TO #TPP-EXC-CSV
  ADD 1 TO #CNT-5
  DISPLAY (5)  #CNT-5 ST-V.ID-NUMBER ST-V.ISSUE-DATE (#I1)
    'TPP' #PREMS-PAID 'CSV' #CURR-CSV
    'PAY/STAT' PAY-STATUS (#I1)
    'Mode' MODE (#I1)
    'CONV/DUR' CONV-DURATION (#I1)
END-IF
*       CHG below if needed
IF #PRIOR-YE-CSV NE STM-END-CV-LAST (#I1)  /* Use if amts have shifted
  ADD 1 TO #NUM-PRIOR-YE-MISMATCHES
*     below bypassed for CAP's on 1/2005 since all CAPS will print
  IF STM-END-CV-LAST(#I1) NE 0                     /* 04/18/2017 removed as it is not true until the update is run
    MOVE STM-END-CV-LAST (#I1) TO #PRIOR-YE-CSV      /* 04/18/2017 removed as it is not true until the update is run
  END-IF                                           /* 04/18/2017 removed as it is not true until the update is run
END-IF
*
if #plan = 'GPL' or = 'GP2'                                      /* vt 03/31/2017 \/
  compute #adj-equ := #curr-csv - #prior-ye-csv - #ytd-premiums-paid
else                                                             /* vt 03/31/2017 /\
  COMPUTE #ADJ-EQU = #CURR-CSV - #PRIOR-YE-CSV  /* recompute equ
    - #YTD-PREMIUMS-PAID - #YTD-INTEREST-PAID
    + #YTD-COI-PAID + #YTD-ACQ-PAID + #YTD-MNT-PAID
end-if                                                          /* vt 03/31/2017
*
COMPUTE #DB-GROWTH  = #CURR-DB  - #INITIAL-DB
COMPUTE #CSV-GROWTH = #CURR-CSV - #PREMS-PAID
*
IF #DB-GROWTH LT 0
  IF  PAY-STATUS (#I1) NE '45'   /* RPU   /* CHGED 12/2005 as per KHB
    RESET #DB-GROWTH
  END-IF
END-IF
*
IF #CSV-GROWTH LT 0
  IF PAY-STATUS (#I1) NE '45'
      AND (NOT #TPP-EXC-CSV)
    WRITE ST-V.ID-NUMBER ISSUE-DATE(#I1) 'CSV-Grwth negatve' #CSV-GROWTH
      #PREMS-PAID #CURR-CSV 'PLAN' PLAN (#I1) PAY-STATUS (#I1)
  END-IF
*
  IF ( #PLAN NE 'GP2') and (#plan ne 'GPL'  )                      /*  vt 03/31/2017
    RESET #CSV-GROWTH
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE FIND-OWNER-BENE
* * * * * * * * * * * * * * * *
*
RESET #FOUND-BENE #NON-MBR-OWNER
RESET  #BD-OWNER-cn
*
find pol-cont with pol-cont.policy-number = st-v.policy-id(#i1)
  if pol-cont.relation = 2
    move pol-cont.reference-number to #bd-owner-cn
    if pol-cont.ni-owner ne ' '                                /* vt 08/16/2017  \/
      move TRUE to #non-mbr-owner
    end-if
  end-if                                                       /* vt 08/16/2017  /\
  if pol-cont.relation = 5 or = 7 or = 6 or = 11
    add 1 to #cnt-bene
    move TRUE to #found-bene
  end-if
end-find
*
IF NOT #FOUND-BENE
  ADD 1 TO #CNT-8
  DISPLAY (8) #CNT-8 ST-V.ID-NUMBER ISSUE-DATE (#I1) SPLIT-IND (#I1)
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * *
DEFINE CALC-PREMS-PAID-SETUP
* * * * * * * * * * * * * * *
*
RESET #PREMS-PAID
MOVE #DOB                    TO #PP-DATE-OF-BIRTH
MOVE ANNUAL-PREM (#I1)       TO #PP-ANNUAL-PREM
MOVE PAY-STATUS (#I1)        TO #PP-PAY-STATUS
MOVE TOT-PREMIUMS-PAID (#I1) TO #PP-TOT-PREMIUMS-PAID
MOVE PAID-TO-DATE (#I1)      TO #PP-PAID-TO-DATE
MOVE ISSUE-DATE (#I1)        TO #PP-ISSUE-DATE
MOVE MODE (#I1)              TO #PP-MODE
MOVE PLAN (#I1)              TO #PP-PLAN
MOVE COST-BASIS (#I1)        TO #PP-COST-BASIS
MOVE MONTH-ALLOC-AMT (#I1)   TO #PP-MONTH-ALLOC-AMT
MOVE ST-V.INTRO-FLAG         TO #PP-INTRO-FLAG
MOVE X-FIRST-PLACE-FEE (#I1) TO #PP-FIRST-PLACE-FEE
MOVE X-BILL-ADJUST     (#I1) TO #PP-BADJ
*
CALLNAT 'GPRPDSCO'
  #PP-DATE-OF-BIRTH
  #PP-ANNUAL-PREM
  #PP-PAY-STATUS
  #PP-TOT-PREMIUMS-PAID
  #PP-PAID-TO-DATE
  #PP-ISSUE-DATE
  #PP-MODE
  #PP-PLAN
  #PP-COST-BASIS
  #PP-MONTH-ALLOC-AMT
  #PP-INTRO-FLAG
  #PP-FIRST-PLACE-FEE
  #PREMS-PAID
  #SUB-PREMS-PAID
  #PP-BADJ
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-CAP-CSV
* * * * * * * * * * * * * * * *
*
IF PAY-STATUS (#I1) GE '40'
  MOVE #CSV TO #CAP-CSV
  ESCAPE ROUTINE
END-IF
*
IF FACE-AMOUNT (#I1) GT 10000.00
  COMPUTE ROUNDED #WORK-CAP-CONV-ACV =
    ((#CSV - #CAP-CONV-ACV) * (FACE-AMOUNT (#I1) - 10000))
    / FACE-AMOUNT (#I1)
  ADD #WORK-CAP-CONV-ACV TO #CAP-CONV-ACV
END-IF
*
IF ST-V.X-LOAN-AMOUNT (#I1) = 0
  MOVE ST-V.X-LOAN-DATE (#I1) TO #CAP-LOAN-END-DATE
ELSE
  RESET #CAP-LOAN-END-DATE
END-IF
*
CALLNAT 'CCAPCSVP'
  #ID-NUMBER
  ST-V.ISSUE-DATE (#I1)
  #CAP-LOAN-END-DATE
  #YYYYMMDD
  #CAP-CONV-ACV
  #CSV
  #CAP-CSV
  #CAP-LOAN-MONS
  #CAP-CSV-MONS
  #CAP-REMAIN-MONS
*
END-SUBROUTINE  /* (1519)
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE SAVE-DATA
* * * * * * * * * * * * * *
*
RESET  #DUES-PAID #annual-prem
*  following is general info (WL and term)
MOVE ST-V.ID-NUMBER                            TO #CN
move st-v.paid-up-date(#i1)                    to #DATA-PUP-DT
MOVE #POLICY-TOT-P-I                           TO #loan-p-i
compute  #loan-p-i  := #loan-p-i  * -1
if #loan-p-i  ne 0
  move edited #loan-p-i  (em=-z,zzz,zz9.99)        to #loan-p-i-a
  move left justified #loan-p-i-a to #loan-p-i-a                            /* vt 08/09/2017
end-if
if #cap-p-i ne 0
  if not #bankrupt                                                        /* vt 09/07/2017
    move edited #cap-p-i (em=-z,zzz,zz9.99)         to #cap-loan-p-i
    move left justified #cap-loan-p-i to #cap-loan-p-i                     /* vt 08/09/2017
  else
    add 1 to #num-bankrupt                                                /* vt 09/07/2017 \/
    WRITE ST-V.ID-NUMBER st-v.ISSUE-DATE (#I1)
      'CAP Member"s P & I of' #CAP-P-I 'cleared due to bankruptcy'
    reset #cap-loan-p-i
  end-if                                                                   /* vt 09/07/2017 /\
end-if
MOVE #CURR-DB                                  TO #DATA-CURR-DB
if #data-curr-db ne 0
  MOVE EDITED #DATA-CURR-DB (EM=-Z,ZZZ,ZZ9.99)   TO #CURRENT-DB
  move left justified #current-db to #current-db                           /* vt 08/09/2017
end-if
if #Term and  annual-prem(#i1) ne 0
  move edited Annual-prem(#i1) (em=z,zzz,zz9.99) to #annual-prem
  move left justified #annual-prem to #annual-prem                         /* vt 08/09/2017
end-if
*
MOVE PLAN (#I1)            TO #PLAN
*
RESET #DATA-RT-ORIG-ISS-AGE
IF PLAN (#I1) = 'RT'
  MOVE ISSUE-DATE (#I1) TO #YYYYMMDD
  SUBTRACT #DOB FROM #YYYYMMDD
  move #yyyy to #data-rt-orig-iss-age
END-IF
*
PERFORM CALC-DUES
*
*  following is WL info only
IF #WL
  MOVE #PREMS-PAID           TO #tpp
  MOVE EDITED #tpp  (EM=Z,ZZZ,ZZ9.99) TO #tpp-a
  move left justified #tpp-a to #tpp-a                      /* vt 08/09/2017
*
  move #ytd-premiums-paid to #data-ytd-prems               /* vt 10/24/2017
  if #ytd-premiums-paid ne 0
    MOVE EDITED #YTD-PREMIUMS-PAID (EM=Z,ZZZ,ZZ9.99) TO #YTD-PREMS
    move left justified #ytd-prems to #ytd-prems                        /* vt 08/09/2017
  else
    reset #YTD-PREMS
  end-if
*
  if plan(#i1) eq 'GPL' or eq 'GP2'                                       /* vt 03/31/2017 \/
    reset #data-ytd-coi                                        /* vt 08/07/2017
  else
    MOVE #YTD-INS-AND-EXP-PAID TO #DATA-YTD-COI
  end-if                                                                  /* vt 03/31/2017 /\
*
  if #data-ytd-coi ne 0
    MOVE EDITED #DATA-YTD-COI(EM=-Z,ZZZ,ZZ9.99) TO #YTD-COI
    move left justified #ytd-coi to #ytd-coi                             /* vt 08/09/2017
  else
    reset #ytd-coi
  end-if
*
  MOVE #ADJ-EQU              TO #DATA-YTD-EQU
  IF #NXT AND (#ADJ-EQU = 0)
    ADD #CSV-DIFF            TO #DATA-YTD-EQU
  END-IF
*
  IF #DATA-YTD-EQU NE 0
    IF #DATA-YTD-EQU GT 0
      ADD 1 TO #POS-EQU
    ELSE    /* Must be negative
      ADD 1 TO #NEG-EQU
      IF BEG-CASH-VALUE (#I1) = (#DATA-YTD-EQU * -1)
        ADD 1 TO #NEG-EQU-EQ-ACQ
      END-IF
      if #curr-csv = #data-ytd-equ * (-1)
        reset #data-ytd-equ
        add 1 to #neg-rec
      end-if
    END-IF
  END-IF
*
  if #data-ytd-equ ne 0
    MOVE EDITED #DATA-YTD-EQU (EM=-Z,ZZZ,ZZ9.99) TO #YTD-EQU
    move left justified #ytd-equ to #ytd-equ                        /* vt 08/09/2017
  end-if
*
  MOVE #YTD-INTEREST-PAID    TO #DATA-YTD-INT
  if #data-ytd-int ne 0
    MOVE EDITED #DATA-YTD-INT(EM=Z,ZZZ,ZZ9.99)  TO #YTD-INT
    move left justified #ytd-int to #ytd-int                       /* vt 08/09/2017
  end-if
  MOVE #PRIOR-YE-CSV         TO #DATA-BEG-CSV
  MOVE #CURR-CSV             TO #DATA-CURR-CSV
  MOVE EDITED #data-CURR-CSV(EM=-Z,ZZZ,ZZ9.99) TO #CURRENT-CSV
  move left justified #current-csv to #current-csv                  /* vt 08/09/2017
  MOVE #BEG-OF-YR-DB         TO #DATA-BEG-DB     /*
  if #DB-GROWTH ne 0
    move edited #DB-GROWTH(em=-Z,ZZZ,ZZ9.99) TO #TOT-DB-GROWTH
    move left justified #TOT-DB-GROWTH to #TOT-DB-GROWTH             /* vt 08/09/2017
  end-if
  if #CSV-GROWTH ne 0
    MOVE EDITED #CSV-GROWTH(EM=-Z,ZZZ,ZZ9.99) TO #TOT-CSV-GROWTH
    move left justified #TOT-CSV-GROWTH to #TOT-CSV-GROWTH          /* vt 08/09/2017
  end-if
  if #prior-ye-csv ne 0
    MOVE EDITED #PRIOR-YE-CSV(EM=-Z,ZZZ,ZZ9.99) TO #LAST-YEAR-CSV
    move left justified #last-year-csv to #last-year-csv           /* vt 08/09/2017
  end-if
*
  IF #BEG-OF-YR-DB = 0      
    MOVE #INITIAL-DB TO #DATA-BEG-OF-YR-DB
  ELSE
    MOVE #BEG-OF-YR-DB TO #DATA-BEG-OF-YR-DB
  END-IF
*
  if #data-beg-of-yr-db = 0                                                  /* 08/04/2016 \/
    compute #curr-db-growth = #data-curr-db - #initial-db
  else
    compute #curr-db-growth = #data-curr-db - #data-beg-of-yr-db
  end-if
  if #curr-db-growth lt 0
      and #rpu-ind ne 'Y'
    write #cn #ISSUE-DATE #plan 'Negative Curr DB growth'
  end-if
  if #curr-db-growth ne 0
    move edited #curr-db-growth (em=-z,zzz,zz9.99) to #ytd-db-growth-a         /* 08/04/2016 /\
    move left justified #ytd-db-growth-a to #ytd-db-growth-a                   /* vt 08/09/2017
  end-if
*
  if #data-beg-of-yr-db ne 0
    MOVE EDITED #DATA-BEG-OF-YR-DB (EM=Z,ZZZ,ZZ9.99) TO #LAST-YEAR-DB
    move left justified #last-year-db to #last-year-db                         /* vt 08/09/2017
  end-if
*
  if #avl-csv ne 0
    move edited #avl-csv (em=-z,zzz,zz9.99)       to #avl-csv-a
    move left justified #avl-csv-a to #avl-csv-a                               /* vt 08/09/2017
  end-if
  if #avl-db ne 0
    move edited #avl-db (em=z,zzz,zz9.99) to #avl-db-a
    move left justified #avl-db-a to #avl-db-a                                /* vt 08/09/2017
  end-if
*
  IF #TPP-EXC-CSV
    #DATA-TPP-EXC-CSV := 'X'
  ELSE
    RESET #DATA-TPP-EXC-CSV
  END-IF
  MOVE #CSV-DIFF             TO #DATA-CSV-DIFF
*
  move st-v.issue-date(#i1) to #issue-date-n
  move #i1 to #segment

  PERFORM COI-SPLIT
  MOVE #SVC-FEE  TO #DATA-SVC-FEE
  if #data-svc-fee ne 0
    compute #DATA-SVC-FEE := #DATA-SVC-FEE * -1
    move edited #DATA-SVC-FEE  (em=-z,zzz,zz9.99) to #svc-fee-a
    move left justified #svc-fee-a to #svc-fee-a                             /* vt 08/09/2017
  end-if
  if #coi ne 0
    compute #coi := #coi * -1
    move edited #coi           (em=-z,zzz,zz9.99) to #mort-coi
    move left justified #mort-coi to #mort-coi                               /* vt 08/09/2017
  end-if
  if #admin ne 0
    compute #admin := #admin * -1
    move edited #admin         (em=-z,zzz,zz9.99) to #admin-fee
    move left justified #admin-fee to #admin-fee                             /* vt 08/09/2017
  end-if
  if #acq-cost ne 0
    compute #acq-cost := #acq-cost * -1
    move edited #acq-cost      (em=-z,zzz,zz9.99) to #acq-cost-a
    move left justified #acq-cost-a to #acq-cost-a                           /* vt 08/09/2017
  end-if
  if #liv-svc ne 0
    compute #liv-svc  := #liv-svc * -1
    move edited #liv-svc       (em=-z,zzz,zz9.99) to #living-svc
    move left justified #living-svc to #living-svc                           /* vt 08/09/2017
  end-if
  if #sas ne 0
    compute #sas := #sas * -1
    move edited #sas           (em=-z,zzz,zz9.99) to #sas-a
    move left justified #sas-a to #sas-a                                     /* vt 08/09/2017
  end-if
  if #oo-credit ne 0
    move edited #oo-credit     (em=z,zzz,zz9.99) to #oo-credit-a
    move left justified #oo-credit-a to #oo-credit-a                         /* vt 08/09/2017
  else
    reset #oo-credit-a
  end-if
*
  if #data-svc-fee gt #data-ytd-coi
    add 1 to #num-svc-fee-gt-coi
  end-if
*
  IF   (PAY-STATUS (#I1) = '45')
      AND (#CSV-DIFF NE 0)
    MOVE 'Y' TO #DATA-CURR-RPU
  END-IF
END-IF
*
MOVE #DUES-PAID TO #DATA-DUES
*
ADD 1 TO #NUM-RECS-DATA
*
END-SUBROUTINE
*
* * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-DUES
* * * * * * * * * * * * *
*
IF PROCESS-IND NE 'G'
  ESCAPE ROUTINE
END-IF
*
FOR #I4 1 TO 9       /* find first active pol
  IF  ST-V.STATUS (#I4) = 'D'
    ESCAPE BOTTOM
  END-IF
END-FOR
*
IF #I4 GT 9
  MOVE 1 TO #I4
END-IF
*
IF #I1 NE #I4   /* Only 1st Active policy
  ESCAPE ROUTINE
END-IF
*
CALLNAT 'GDUESSXX' ST-V.ID-NUMBER #I4 #DUES
IF #DUES NE 0
  ADD 1 TO #PAYS-DUES-SEP-FROM-PREM
  COMPUTE #DUES-PAID = #DUES * #jcl-process-mm                   /* vt 04/19/2017 was #curr-year-mm
  IF #DUES-PAID NE 0
    move edited #dues-paid(em=z,zzz,zz9.99) to #ytd-dues
    ADD 1 TO #NUM-DUES-PAID
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE COI-SPLIT
* * * * * * * * * * * * * *
*
reset #svc-fee #acq-cost #admin #sas #liv-svc #oo-credit
  #tot-acq-cost #tot-svc-fee #tot-admin #tot-liv-svc #tot-oo-cred #tot-sas
callnat 'ATHNSERV' #PDA-serv
#acq-cost  := #tot-acq-cost
#svc-fee   := #tot-svc-fee
#admin     := #tot-admin
#liv-svc   := #tot-liv-svc
#oo-credit := #tot-oo-cred
#SAS       := #tot-sas
#coi       := #tot-coi
*
IF  (ISSUE-DATE (#I1) LT 19970101)
    OR (MONTH-ALLOC-AMT (#I1) = 999.99)
  COMPUTE #COI   = #YTD-INS-AND-EXP-PAID - #SVC-FEE - #ADMIN
ELSE
  COMPUTE #COI = #YTD-INS-AND-EXP-PAID - #ADMIN - #ACQ-COST - #SVC-FEE
END-IF
*
IF #YTD-INS-AND-EXP-PAID LT #SVC-FEE
  WRITE #CN #ISSUE-DATE 'COI less than svc-fee'
    #YTD-INS-AND-EXP-PAID #SVC-FEE
    'iss-age=' ISSUE-AGE (#I1) 'Dur' LAST-DURATION (#I1)
END-IF
*
if  sec-cn(<st-v.id-number>)                       /* 04/18/2017  /* vt 08/14/2017                    /* vt 08/28/2017
  reset #oo-credit #liv-svc #sas #svc-fee
end-if
*
END-SUBROUTINE
*
*****************
define subroutine create-title
*****************
*
compress
  'Plan'                    #tab
  'CN'                      #tab
  'Policy #'                #tab
  'Owner CN'                #tab
  'Owner NAME'              #tab
  'Street'                  #tab
  'Street-2'                #tab
  'City'                    #tab
  'State'                   #tab
  'ZIP'                     #tab
  'Phone'                   #tab               /* vt2
  'E-mail'                  #tab               /* vt2 
  'Issue Day'               #tab
  'Issue-Month-Year'        #tab
  'Issue Age'               #tab
  'Insured Name'            #tab
  'Current DB'              #tab
  'Initial DB'              #tab
  'Total DB Grow'           #tab
  'Total Premiums Paid'     #tab
  'Total CSV Growth'        #tab
  'Current CSV'             #tab
  'Prior Year CSV'          #tab
  'Prior Year DB'           #tab
  'YTD Premiums'            #tab
  'YTD-COI'                 #tab
  'YTD-EQUITY'              #tab
  'YTD-INTEREST'            #tab
  'LOAN-P-I'                #tab
  'Available CSV'           #tab
  'Available DB'            #tab
  'RPU'                     #tab
  'POC'                     #tab
  'UPP'                     #tab
  'NIO'                     #tab
  'MEC'                     #tab
  'Annual Premium'          #tab
  'CAP'                     #tab
  'YTD Service fee'         #tab
  'YTD-MORT'                #tab
  'YTD-Admin Fee'           #tab
  'YTD-DB-GROW'             #tab
  'YTD-Aquisition cost'     #tab
  'YTD-Dues Paid'           #tab
  'OPT-OUT'                 #tab
  'CAP Loan P-I'            #tab
  'Living Services'         #tab
  'SAS'                     #tab
  'OOCR'                    #tab
  'POL-TYPE'                #tab
  'Expiration Date'         #tab
  'B-LAST-UPD-DATE'         #tab
  'PLAN-TYPE'               #tab
  '?SELECT'                 #tab
  '?UNDEL'                  #tab
  '?PAPERLESS'              #tab
  'Bene Line 1'             #tab
  'Bene Line 2'             #tab
  'Bene Line 3'             #tab
  'Bene Line 4'             #tab
  'Bene Line 5'             #tab
  'Bene Line 6'             #tab
  'Bene Line 7'             #tab
  'Bene Line 8'             #tab
  'Bene Line 9'             #tab
  'Bene Line 10'            #tab
  'Bene Line 11'            #tab
  'Bene Line 12'            #tab
  'Bene Line 13'            #tab
  'Bene Line 14'            #tab
  'Bene Line 15'            #tab
  'Bene Line 16'            #tab
  'Bene Line 17'            #tab
  'Bene Line 18'            #tab
  into #out-file leaving no
write work 1 #out-file
*
end-subroutine
*
*****************
define subroutine UPDATE-STATUS
*****************
*
MOVE STM-P-I    (*) TO STM-P-I-LAST    (*)
MOVE STM-TPP    (*) TO STM-TPP-LAST    (*)
MOVE STM-PREM   (*) TO STM-PREM-LAST   (*)
MOVE STM-COI    (*) TO STM-COI-LAST    (*)
MOVE STM-EQU    (*) TO STM-EQU-LAST    (*)
MOVE STM-INT    (*) TO STM-INT-LAST    (*)
MOVE STM-BEG-CV (*) TO STM-BEG-CV-LAST (*)
MOVE STM-END-CV (*) TO STM-END-CV-LAST (*)
MOVE STM-BEG-DB (*) TO STM-BEG-DB-LAST (*)
MOVE STM-END-DB (*) TO STM-END-DB-LAST (*)
MOVE STM-SVC-FEE (*) TO STM-SVC-FEE-LAST (*)
RESET STM-P-I (*) STM-TPP (*) STM-PREM (*) STM-COI (*) STM-EQU (*)
  STM-INT (*) STM-BEG-CV (*) STM-END-CV (*) STM-BEG-DB (*)
  STM-END-DB (*) STM-SVC-FEE (*)
*
end-subroutine
*
*****************
define subroutine get-dates
*****************
*
#nxt-process-year := #jcl-process-yyyy + 1                            /* vt 09/05/2017
MOVE #JCL-PROCESS-YYYY TO #PRIOR-YE-YYYY
SUBTRACT 1 FROM #PRIOR-YE-YYYY
MOVE 12 TO #PRIOR-YE-MM
*
MOVE #JCL-PROCESS-YYYY TO #CURR-ME-YYYY
MOVE #JCL-PROCESS-MM   TO #CURR-ME-MM
*
#end-year := #jcl-process-yyyymm
*
move #jcl-process-yyyy to #today-yyyy
add 1 to #today-YYYY
COMPRESS #today-YYYY '0101' INTO #TODAY-YYYYMMDD-A LEAVING NO

*
move #JCL-PROCESS-YYYY to #1st-mon-process-year-yyyy
move #jcl-process-yyyy to #lst-mon-process-year-yyyy
MOVE 01 TO #1st-mon-process-year-mm
MOVE 12 TO #lst-mon-process-year-mm
*
move #jcl-process-yyyy to #border-date-yyyy
move 02 to #border-date-mm
move 01 to #border-date-dd
*
WRITE '1st month process-year =' #1st-mon-process-year
WRITE 'Lst month process-year =' #lst-mon-process-year
WRITE 'Prior Y-E              =' #PRIOR-YE
WRITE 'Curr  M-E              =' #CURR-ME
WRITE 'Today                  =' #TODAY-YYYYMMDD
write 'Border date            =' #border-date
write 'Next process-year      =' #nxt-process-year

move #1st-mon-process-year to #start-year
*
end-subroutine
*
*****************
define subroutine build-month-table
*****************
*
MOVE ST-V.ID-NUMBER TO #START-ID
RESET                  #START-ISSUE
RESET                  #START-IND
MOVE ST-V.ID-NUMBER TO #END-ID
MOVE 99999999       TO #END-ISSUE
MOVE 9              TO #END-IND
RESET #MON-TBL (*) #MON-TBL-ISS-DT (*)
*  build table of which policy was earliest on each month for dues calc

READ VA-V WITH RECORD-KEY FROM #START-KEY THRU #END-KEY   /* DW1
  FOR #I1 1 TO 13
    IF  (YEAR-MONTH-M (#I1) = 0)
        OR (YEAR-MONTH-M (#I1) LT #1st-mon-process-year)
        OR (YEAR-MONTH-M (#I1) GT #lst-mon-process-year)
      ESCAPE TOP
    END-IF
*
    FOR #I2 1 TO 100
      IF #MON-TBL (#I2) = YEAR-MONTH-M (#I1)
        ESCAPE BOTTOM
      END-IF
*
      IF #MON-TBL (#I2) = 0  /* SAVE 1ST/OLDEST MONTH
        MOVE YEAR-MONTH-M (#I1) TO #MON-TBL (#I2)
        MOVE VA-V.ISS-DT TO #MON-TBL-ISS-DT (#I2)
        ESCAPE BOTTOM
      END-IF
*
    END-FOR
  END-FOR
END-READ
*
end-subroutine
*
*****************
define subroutine calculate-accrued-interest-loan
*****************
*
RESET #ACC-INT #ACC-INT-2 RESET #TOT-P-I
*
MOVE X-LOAN-DATE (#I1) TO #YYYYMMDD
IF   (X-LOAN-AMOUNT (#I1) = 0)
    OR ((#YYYY = #nxt-process-year) AND (#MM = 1) /*loan taken after iss day
    AND (#DD GT ISSUE-DATE-DD (#I1)))
  RESET #DAILY-INT
  IF X-ACCUM-INTEREST (#I1) LT 0
    WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1)
      'Negative Accrued Int ignored' X-ACCUM-INTEREST (#I1)
  ELSE
    MOVE X-ACCUM-INTEREST (#I1) TO #ACC-INT
  END-IF
ELSE
  COMPUTE ROUNDED #DAILY-INT  =
    X-LOAN-AMOUNT (#I1) * (X-INTEREST-RATE (#I1) / 365) / 100
  IF (#MM  = 01) AND (#YYYY = #nxt-process-year)
    COMPUTE ROUNDED #ACC-INT =
      ((ISSUE-DATE-DD (#I1) - #DD) * #DAILY-INT)
      + X-ACCUM-INTEREST (#I1) + X-NXT-YR-ACCUM-INT (#I1)
  ELSE
    COMPUTE ROUNDED #ACC-INT =
      ((ISSUE-DATE-DD (#I1) - 1) * #DAILY-INT) /* up to iss-date-dd
      + X-ACCUM-INTEREST (#I1) + X-NXT-YR-ACCUM-INT (#I1)
  END-IF
END-IF
*
MOVE X-LOAN-DATE-2 (#I1) TO #YYYYMMDD
IF   (X-LOAN-AMOUNT-2 (#I1) = 0)
    OR ((#YYYY = #nxt-process-year) AND (#MM = 1) /*loan taken after iss day
    AND (#DD GT ISSUE-DATE-DD (#I1)))
  RESET #DAILY-INT-2
  IF X-ACCUM-INTEREST-2 (#I1) LT 0
    WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1)
      'Negative Acc Int ignored' X-ACCUM-INTEREST-2 (#I1)
  ELSE
    MOVE X-ACCUM-INTEREST-2 (#I1) TO #ACC-INT-2
  END-IF
ELSE
  COMPUTE ROUNDED #DAILY-INT-2 =
    X-LOAN-AMOUNT-2 (#I1) * (#CURR-VAR-INT-RATE / 365) / 100
  IF (#MM  = 01) AND (#YYYY = #nxt-process-year)
    COMPUTE ROUNDED #ACC-INT-2 =
      ((ISSUE-DATE-DD (#I1) - #DD) * #DAILY-INT-2)
      + X-ACCUM-INTEREST-2 (#I1) + X-NXT-YR-ACCUM-INT-2 (#I1)
  ELSE
    COMPUTE ROUNDED #ACC-INT-2 =
      ((ISSUE-DATE-DD (#I1) - 1) * #DAILY-INT-2) /* up to iss-dt-dd
      + X-ACCUM-INTEREST-2 (#I1) + X-NXT-YR-ACCUM-INT-2 (#I1)
  END-IF
END-IF
*
MOVE X-LOAN-AMOUNT (#I1)   TO #FIXED-LOAN-AMOUNT
MOVE #ACC-INT              TO #FIXED-ACC-INT
MOVE X-LOAN-AMOUNT-2 (#I1) TO #VARIABLE-LOAN-AMOUNT
MOVE #ACC-INT-2            TO #VARIABLE-ACC-INT
*
COMPUTE #TOT-P-I = #FIXED-LOAN-AMOUNT     + #FIXED-ACC-INT
  + #VARIABLE-LOAN-AMOUNT + #VARIABLE-ACC-INT
*
IF CONV-DURATION (#I1) = 999
  COMPUTE #CAP-P-I        =  #FIXED-LOAN-AMOUNT    + #FIXED-ACC-INT
  COMPUTE #POLICY-TOT-P-I =  #VARIABLE-LOAN-AMOUNT + #VARIABLE-ACC-INT
ELSE
  RESET #CAP-P-I
  COMPUTE #POLICY-TOT-P-I =  #FIXED-LOAN-AMOUNT    +   #FIXED-ACC-INT
    + #VARIABLE-LOAN-AMOUNT + #VARIABLE-ACC-INT
END-IF
*
end-subroutine
*
*****************
define subroutine get-owner-insured-info
*****************
*
#pol-num-a   := st-v.policy-id(#i1)
#id-number-a := st-v.id-number
#OWNER-CN-a  := F-OWNER-CN(<#POL-NUM-a,#ID-NUMBER-A>)
#OWNER-CN-n  := VAL(#OWNER-CN-A)
*
MOVE ST-V.ID-NUMBER TO #CGA-SCR-ID
MOVE #I1 TO #CONTACT-SEG  /* get owner of this policy
CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD
*
MOVE #EXT-FORMATED-NAME TO #OWNER-NAME
*
IF #SPS-GEN-NAME = ' '  /* also used for ins name if non-mbr owner
  MOVE #EXT-FORMATED-NAME TO #INSURED-name
ELSE
  MOVE #EXT-SPS-GEN-NAME TO #INSURED-name
END-IF
*
IF #OWNER-NAME = ' '
  MOVE #EXT-FORMATED-NAME TO #OWNER-NAME
END-IF
*
IF #OWNER-NAME NE #INSURED-NAME    /* no need for 2nd name
  ADD 1 TO #OWN-DIFF-INS
END-IF
*
MOVE #EXT-STREET TO #STREET-TO-USE    /*  to convert TTEE to trustee
RESET #INFO-TO-RIGHT #I7

FOR #I2 62 TO 8 STEP -1
  IF   (#TTEE-X (#I2 + 0) = 'T')
      AND (#TTEE-X (#I2 + 1) = 'T')
      AND (#TTEE-X (#I2 + 2) = 'E')
      AND (#TTEE-X (#I2 + 3) = 'E')
      AND ((#I2 = 22)
      OR  ((#TTEE-X (#I2 + 4) = ' ' OR = '/')
      AND  (#TTEE-X (#I2 - 1) = ' ' OR = ',')))
    IF #INFO-TO-RIGHT
      WRITE ST-V.ID-NUMBER 'A Info to right of TTEE=' #STREET-TO-USE
      COMPUTE #I4 = #I2 + 4   /* Shift from pos
      FOR #I3 1 TO 70
        IF #I7 LT #I4
          ESCAPE BOTTOM
        END-IF
*
        MOVE #TTEE-X (#I7) TO #TTEE-X (#I7 + 5)
        RESET #TTEE-X (#I7)
        SUBTRACT 1 FROM #I7
      END-FOR
    END-IF
*
    IF #TTEE-X (#I2 - 1) NE ' '
      RESET #TTEE-X (#I2)
      ADD 1 TO #I2
    END-IF
*
    MOVE 'T' TO #TTEE-X (#I2 + 0)
    MOVE 'R' TO #TTEE-X (#I2 + 1)
    MOVE 'U' TO #TTEE-X (#I2 + 2)
    MOVE 'S' TO #TTEE-X (#I2 + 3)
    MOVE 'T' TO #TTEE-X (#I2 + 4)
    MOVE 'E' TO #TTEE-X (#I2 + 5)
    MOVE 'E' TO #TTEE-X (#I2 + 6)
    IF #INFO-TO-RIGHT
      WRITE ST-V.ID-NUMBER 'B Info to right of TTEE=' #STREET-TO-USE
    END-IF
    ESCAPE BOTTOM
  END-IF
*
  IF #TTEE-X (#I2 + 4) NE ' '
    MOVE TRUE TO #INFO-TO-RIGHT
    IF #I7 = 0
      COMPUTE #I7 = #I2 + 4  /* Rightmost pos
    END-IF
  END-IF
END-FOR
*
#street   := #street-to-use
#street-2 := #ext-street-2
#city     := #ext-city
#state    := #ext-state
#zip      := #ext-zip
reset #zip-a
move  #zip-5  to #zip-a-5
IF #ZIP-4-n NE 0
  compress '-'  #zip-4  into #zip-a-dash-4 leaving no
END-IF
*
if #country-code ne 'US'
  reset #city #state #zip-a
  #state := #third-address
end-if
*
find status with id-number = #OWNER-CN-n                                           /* vt2 \/
  if no
    escape bottom
  end-norec
  #owner-email  := f-pref-email(<status.member-contact-id>)
  #owner-phone  := f-pref-phone (<status.member-contact-id>)
end-find                                                                           /* vt2 /\
*
perform determine-undeliverable
*
if #undeliverable = 'Y'
  if #wl
    add 1 to #num-wl-undel
  else
    add 1 to #num-term-undel
  end-if
end-if
end-subroutine
*
*****************
define subroutine populate-output-IND-fields
*****************
*
reset #rpu-ind  #poc-ind #upp-ind #nio-ind #mec-ind #opt-ind
IF ST-V.CONV-DURATION (#I1) = 999 /* CAP policies
*
  perform check-bankrupt
*
  if #cap-p-i ne 0
    move 'Y' to #cap-ind
    add 1 to #num-cap
    if st-v.x-loan-amount(#i1) ne 0 and st-v.x-loan-amount-2(#i1) ne 0
      write st-v.id-number st-v.policy-id(#i1) 'CAP pol with 2 loans'
    end-if
  else
    reset #cap-ind
  end-if
END-IF
*
IF ST-V.MEC-IND (#I1) = 'Y'
  ADD 1 TO #NUM-MEC
  move 'Y' to #mec-ind
END-IF
*
IF ST-V.PAY-STATUS (#I1) = '45'
  move 'Y' to #rpu-ind
  add 1 to #num-rpu
END-IF
*
IF #TPP-EXC-CSV
  if #rpu-ind = 'Y'
    reset #poc-ind
  else
    move 'Y' to #poc-ind
    add 1 to #num-poc
  end-if
END-IF
*
IF   (PAY-STATUS (#I1) = '48')
    AND (TOT-PREMIUMS-PAID (#I1) = 0)
  move 'Y' to #upp-ind
END-IF
*
IF #NON-MBR-OWNER
  MOVE 'Y' TO #NIO-IND    /* non-insured-owner          /* vt 08/17/2017 was 'NIO'
  add 1 to #num-nio
END-IF
*
IF PROCESS-IND = 'O'   /* OPTED OUT     DW8
  move 'Y' to #opt-ind
  add 1 to #num-opt
END-IF
*
end-subroutine
*
*****************
define subroutine determine-plan-type-exp-date
*****************
*
RESET #WL #TERM #plan-type #exp-date
IF ((PLAN (#I1) = 'OL' OR = '7P' OR = '20P' OR = '30P' OR = 'SPF'
    OR = 'GPL' or = 'GP2')
    OR  (IS-ANNUITY-LIFE(<PLAN (#I1)>))
    OR  (PLAN (#I1) = MASK (NN'F'))
    OR  (PLAN (#I1) = MASK (N'P')))
  MOVE TRUE TO #WL
  move 'W' to #plan-type
  reset #exp-date
  if is-annuity-life(<plan(#i1)>)
    move 'A' to #plan-type
    escape routine
  else
    if plan(#i1) = 'GPL' or = 'GP2' or = 'GP'
      move 'G' to #plan-type
      escape routine
    end-if
  end-if
ELSE
  MOVE TRUE TO #TERM
  add 1 to #tot-term
  IF FUNCTION-TERM-POLICY(<PLAN(#I1)>)
    move 'T' to #plan-type
    move st-v.paid-up-date(#i1) to #paid-up-date
    move #paid-up-date-mm to #I-months
    compress #paid-up-date-dd '-' #mon(#i-months) '-' #paid-up-date-yyyy into #exp-date leaving no
    decide on first value of plan(#i1)
      value 'LT'
        add 1 to #num-lt
      value 'RT'
        add 1 to #num-rt
      value 'EZ'
        add 1 to #num-ez
      none
        add 1 to #num-lt2
    end-decide
  ELSE
    WRITE ST-V.ID-NUMBER ISSUE-DATE(#I1) 'Unknown plan' PLAN (#I1)
  END-IF
END-IF
*
end-subroutine
*
*****************
define subroutine determine-CAP-counters
*****************
*
IF ST-V.CONV-DURATION (#I1) = 999 /* CAP policies
  IF #WL
    IF X-LOAN-AMOUNT (#I1) = 0
      ADD 1 TO #WL-CAPS-W-NO-LOAN
    ELSE
      ADD 1 TO #WL-CAPS-W-LOAN
    END-IF
  ELSE
    ADD 1 TO #TERM-CAP-POLS
    IF X-LOAN-AMOUNT (#I1) = 0
      ADD 1 TO #TERM-CAPS-W-NO-LOAN
    ELSE
      ADD 1 TO #TERM-CAPS-W-LOAN
    END-IF
  END-IF
END-IF
*
end-subroutine
*
*****************
define subroutine load-annual-statement-info-into-policy-record
*****************
*
if #wl                                                                 /* 10/23/2017
  move #POLICY-TOT-P-I  to stm-p-i   (#i1)           /* 10/24/2017
  MOVE #tpp             TO STM-TPP    (#I1)
  MOVE #DATA-YTD-PREMS  TO STM-PREM   (#I1)
  MOVE #DATA-YTD-COI    TO STM-COI    (#I1)
  IF #DATA-YTD-EQU GT 999999.99
    STM-EQU (#I1) := #DATA-YTD-EQU
  ELSE
    if st-v.id-number ne 143613                     /* vt temporary 11/05/2014
      MOVE #DATA-YTD-EQU   TO STM-EQU    (#I1)
    end-if                                        /* vt temporary 11/05/2014
  END-IF
  MOVE #DATA-YTD-INT   TO STM-INT    (#I1)
  MOVE #DATA-BEG-CSV   TO STM-BEG-CV (#I1)    /* Beg of yr csv
  MOVE #DATA-CURR-CSV  TO STM-END-CV (#I1)
  MOVE #DATA-BEG-DB    TO STM-BEG-DB (#I1)    /* Beg of yr DB
  MOVE #DATA-CURR-DB   TO STM-END-DB (#I1)
  MOVE #DATA-SVC-FEE   TO STM-SVC-FEE (#I1)
*
else                                                                /* vt 10/23/2017 \/
  reset stm-beg-db  (#i1)
  move #data-curr-db   to stm-end-db (#i1)                          /* vt 10/24/2017  /\
  reset STM-P-I    (#I1) STM-TPP    (#I1) STM-PREM   (#I1) STM-COI    (#I1) STM-EQU    (#I1)
    STM-INT    (#I1) STM-BEG-CV (#I1) STM-END-CV (#I1) STM-SVC-FEE (#I1)
end-if                                                             /* vt 10/23/2017 /\
end-subroutine
*
*****************
define subroutine check-bankrupt
*****************
*
reset #bankrupt
find (1) nt-v with id-number = st-v.id-number
  for #i2 1 c*note-table
    if note-text (#i2) = mask ('*Mbr in bnkrptcy')
      #bankrupt := TRUE
      escape bottom
    end-if
  end-for
end-find
*
end-subroutine
*
*****************
define subroutine write-record
*****************
*
if #policy-type = ' '                                     /* vt 08/17/2017 \/ made it to match the old program
  move '0' to #living-svc #sas-a #oo-credit-a
end-if                                                    /* vt 08/17/2017 /\
*
compress    #PLAN-a3           #tab         /* vt 08/17/2017 was #plan
  #CN                          #tab
  #POL-NUM                     #tab
  #OWNER-CN-a                  #tab
  #OWNER-NAME                  #tab
  #STREET                      #tab
  #STREET-2                    #tab
  #CITY                        #tab
  #STATE                       #tab
  #ZIP-a                       #tab
  #owner-phone                 #tab      /* vt2
  #owner-email                 #tab      /* vt2
  #issue-date-dd               #tab
  #ISSUE-DATE-MON-YEAR         #tab
  #ISSUE-AGE                   #tab
  #INSURED-NAME                #tab
  #CURRENT-DB                  #tab
  #INITIAL-DB-a                #tab
  #tot-db-growth               #tab
  #tpp-a                       #tab
  #TOT-CSV-GROWTH              #tab
  #CURRENT-CSV                 #tab
  #last-year-csv               #tab    /* was prior-ye-csv vt 04/18/2017
  #last-year-db                #tab
  #YTD-PREMS                   #tab
  #YTD-COI                     #tab
  #YTD-EQU                     #tab
  #YTD-INT                     #tab
  #loan-p-i-a                  #tab
  #AVL-CSV-a                   #tab
  #AVL-DB-a                    #tab
  #RPU-IND                     #tab
  #POC-IND                     #tab
  #UPP-IND                     #tab
  #NIO-IND                     #tab
  #MEC-IND                     #tab
  #annual-prem                 #tab
  #CAP-IND                     #tab
  #svc-fee-a                   #tab
  #mort-coi                    #tab
  #admin-fee                   #tab
  #ytd-db-growth-a             #tab
  #acq-cost-a                  #tab
  #ytd-dues                    #tab
  #opt-ind                     #tab
  #cap-loan-p-i                #tab
  #living-svc                  #tab
  #sas-a                       #tab
  #oo-credit-a                 #tab
  #policy-type                 #tab
  #exp-date                    #tab
  #BENEFICIARY-INFORMATION.#BENE-LAST-UPD-A             #tab
  #plan-type                   #tab
  #select                      #tab
  #undeliverable               #tab
  #no-paper                    #tab
  #bene-data(1)                #tab
  #bene-data(2)                #tab
  #bene-data(3)                #tab
  #bene-data(4)                #tab
  #bene-data(5)                #tab
  #bene-data(6)                #tab
  #bene-data(7)                #tab
  #bene-data(8)                #tab
  #bene-data(9)                #tab
  #bene-data(10)               #tab
  #bene-data(11)               #tab
  #bene-data(12)               #tab
  #bene-data(13)               #tab
  #bene-data(14)               #tab
  #bene-data(15)               #tab
  #bene-data(16)               #tab
  #bene-data(17)               #tab
  #bene-data(18)               #tab
  into #out-file leaving no
write work 1 #out-file
*
add 1 to #RECS-WRITTEN
*
end-subroutine
*
*****************
define subroutine detrmine-select
*****************
*
RESET  #SELECT
FOR #I2 1 TO #NUM-SEL
  IF #cn = #SELECT-CN (#I2)
    MOVE 'Y' TO #SELECT
    ESCAPE BOTTOM
  END-IF
END-FOR
*
IF ST-V.MILITARY-SERVICE = 'EMP'
  MOVE 'Y' TO #SELECT
END-IF
*
end-subroutine
*
*****************
define subroutine determine-undeliverable
*****************
*
RESET  #undeliverable
IF #UNDEL-ADDR   /* G3500SAD determines this
  ADD 1 TO #BAD-ADDR-POLS
  move 'Y' to #undeliverable
END-IF
*
end-subroutine
*
*****************
define subroutine determine-paperless
*****************
*
RESET  #no-paper
FIND (1) WEB-V WITH WEB-V.MEMBER-CN = #OWNER-CN-n
  IF WEB-V.ANNS-DELIVERY-FLAG = 'W'
    #no-paper := 'Y'
  END-IF
END-FIND
*
end-subroutine
*
*****************
define subroutine get-bene-data
*****************
*
rESET BD-SHOW #BENEFICIARY-INFORMATION
BD-SHOW.CN := ST-V.ID-NUMBER
BD-SHOW.#POLICY-NUMBER  := #POL-NUM-A
CALLNAT 'POSN0021' BD-SHOW

#HIDE-SSN  := TRUE
move bd-show.#bene-sho1(*) to #bene-text1(*)
callnat 'NEWBDSS' #bene-text1(*)  #NEW-LAYOUT #FND-SSN  #FND-SSN-NEW-LAYOUT #HIDE-SSN
move #bene-text1(*) to bd-show.#bene-sho1(*)
*
#BENEFICIARY-INFORMATION.#BENE-LAST-UPD-A := BD-SHOW.#LAST-UPD-A
#BENEFICIARY-INFORMATION.ID-NUMBER        := BD-SHOW.CN
#BENEFICIARY-INFORMATION.NT-BENE-SHO (*)  := BD-SHOW.#BENE-SHO (*)
examine #beneficiary-information.nt-bene-sho(*) for H'0D' replace H'20'
examine #beneficiary-information.nt-bene-sho(*) for H'0A' replace H'20'
*
#BENEFICIARY-INFORMATION.NT-NUM-LINES     := BD-SHOW.#NUM-LINES
*
RESET #NUM-BENE-COLS
IF NT-NUM-LINES = 0
  RESET NT-BENE-SHO (*)
  move 'PRIMARY(IES):                                                             ' to nt-bene-sho(1)
  MOVE 'the Owner"s ESTATE' TO NT-BENE-SHO (2)                                                           /* vt 08/09/2017 /\
  MOVE 2 TO NT-NUM-LINES
  ADD 1 TO #MISS-BENES
END-IF
*
RESET #FOUND-1ST-LINE

FOR #I5 1 TO NT-NUM-LINES       /* WL=43 thru 60 TM=21 thru 38
  if nt-bene-sho(#i5) = 'Upon the death of the named insured, I direct that the benefit be paid to:'               /* 08/09/2017
    move  'PRIMARY(IES):                                                             '    to  nt-bene-sho(#i5)     /* 08/09/2017
  end-if                                                                                                           /* 08/09/2017
  IF NT-BENE-SHO (#I5) = MASK('Upon the death of the named insured')
      or nt-bene-sho (#i5) = mask('PRIMARY(IES):')                                                              /* vt 08/09/2017
    MOVE TRUE TO #FOUND-1ST-LINE
    #num-bene-cols := 1
  END-IF
*
  IF NOT #FOUND-1ST-LINE
    ESCAPE TOP
  END-IF
*
  PERFORM BUILD-BENE-TEXT-LINES
END-FOR
********** compute #i5 := #num-bene-cols + 1
*
end-subroutine
*
DEFINE SUBROUTINE BUILD-BENE-TEXT-LINES
* * * * * * * * * * * * * * * * * *
*
if #num-bene-cols le 18
*   
  IF  (NT-BENE-SHO-1ST-1 (#I5) = '~')                /* raw new format bene data
      OR (NT-BENE-SHO      (#I5) = MASK ('      '))
    #bene-data(#num-bene-cols) := nt-bene-sho-after-1 (#i5)
    #num-bene-cols := #num-bene-cols + 1
  else
    examine NT-BENE-SHO (#I5) for 'Otherwise as alternate beneficiary(ies), I hereby name:'               /* vt6 \/    08/09/2017 \/
      replace                     'CONTINGENT(S):                                         '
    examine NT-BENE-SHO (#I5) for 'if said beneficiary shall survive the insured.' replace '                                              '
    examine NT-BENE-SHO (#I5) for 'to share equally or all to the survivors or survivor.' replace '                                                     '
    examine NT-BENE-SHO (#I5) for 'to share equally or all to the survivor.' replace '                                        '
    examine NT-BENE-SHO (#I5) for 'to share equally or to their issue (born or adopted), then living, per'
      replace '                                                                      '
    examine NT-BENE-SHO (#I5) for 'stirpes. If any of the above named beneficiaries predecease me or die before'
      replace '                                                                            '
    examine NT-BENE-SHO (#I5) for 'payment is made without leaving issue, their share of the benefit shall be'
      replace '                                                                          '
    examine NT-BENE-SHO (#I5) for 'paid equally to those beneficiaries surviving or to their issue, then living,'
      replace '                                                                            '
    examine NT-BENE-SHO (#I5) for 'stirpes. If either of the above named beneficiaries predecease me or die'
      replace '                                                                        '
    examine NT-BENE-SHO (#I5) for 'before payment is made without leaving issue, their share of the benefit'
      replace '                                                                        '
    examine NT-BENE-SHO (#I5) for 'shall be paid to the named beneficiary surviving, then living, per stirpes.'
      replace '                                                                           '
    examine NT-BENE-SHO (#I5) for 'If no designated beneficiary lives to receive the benefit, I direct that'
      replace '                                                                        '
    examine NT-BENE-SHO (#I5) for 'the benefit be paid to the Owner or the Owner''s ESTATE.'
      replace '                                                       '
    examine NT-BENE-SHO (#I5) for 'In the event the aforementioned Trust is not in effect at the time of death'
      replace '                                                                           '
    examine NT-BENE-SHO (#I5) for 'and no alternate or subsequent designation shall have been made by me,'
      replace '                                                                      '
    examine NT-BENE-SHO (#I5) for 'I direct that the benefit be paid to the Owner or The Owner''s ESTATE.'
      replace '                                                                     '
    examine NT-BENE-SHO (#I5) for 'If any of the above named beneficiaries predecease me or die before payment'
      replace '                                                                           '
    examine NT-BENE-SHO (#I5) for 'is made, their share of the benefit shall be paid equally to those bene-'
      replace '                                                                        '
    examine NT-BENE-SHO (#I5) for 'ficiaries surviving.'
      replace  '                    '

    examine NT-BENE-SHO (#I5) for 'per stirpes.'
      replace '            '                                                                               /* vt 08/09/2017 /\
     if nt-bene-sho(#i5) ne ' '                                               /* vt 08/16/2017   /* vt 08/17/2017 /* vt 12/1/2017 removed '*'
    #bene-data(#num-bene-cols) := nt-bene-sho (#i5)
    #num-bene-cols := #num-bene-cols + 1
     end-if                                                                   /* vt 08/16/2017   /* vt 08/17/2017 /* vt 12/1/2017 removed '*'
  end-if
END-IF
*
END-SUBROUTINE
*
*****************
define subroutine determine-iss-age
*****************
*
reset #issue-age
IF st-v.PLAN (#I1) = 'RT'
  MOVE ISSUE-DATE (#I1)    TO   #YYYYMMDD
  SUBTRACT #DOB   FROM #YYYYMMDD
  move #yyyy               to   #ISSue-AGE
ELSE
  MOVE st-v.ISSUE-AGE (#I1) TO #ISSue-AGE
END-IF
*
end-subroutine
*
*****************
define subroutine determine-select
*****************
*
RESET #FOUND-SEL
  #select
FOR #I2 1 TO #NUM-SEL
  IF ST-V.ID-NUMBER-A = #SELECT-CN (#I2)
    MOVE TRUE TO #FOUND-SEL
    move 'Y' to #select
    ESCAPE BOTTOM
  END-IF
END-FOR
* *
if st-v.military-service = 'EMP'
  move 'Y' to #select
end-if
*
end-subroutine
*
*******************
define subroutine check-bankruptcy
* *****************
* *
IF CONV-DURATION (#I1) = 999
  RESET #BANKRUPT
  FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
    FOR #I2 1 TO C*NOTE-TABLE
      IF NOTE-TEXT (#I2) = MASK ('*Mbr in bnkrptcy')
        MOVE TRUE TO #BANKRUPT
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
*
END-IF
* *
end-subroutine
*
END
