* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
*
* PROGRAM ID: C1006NAT - All AT Edits
*
* CALLNAT 'C1006NAT'
*  #AT
*  #CONTACT
*  #UI
*  #SWITCHES
*  #POS1
*  #TEXT
************************************************************************
*                       MODIFICATION LOG                               *
* USER   DATE           TAG     REASON                                 *
*  NGG   05/15/2011     Intial creation                                *
*  NGG   08/18/2011     NG1    Add error message 36                    *
*  NGG   08/30/2011     NG2    Refine criteria for error 36            *
*  PAM   09/10/2011     PM3    Edit military info correctly            *
*  PAM   09/16/2011     PM4    Adjusted DEFAULT for civilian status    *
*                              - only set default when not entered     *
*  NGG   09/21/2011     NG3    make Height and weight required         *
*  RSE   05/25/2012     RE1    Add PDA for GPRNMINF (validation rtn)   *
*  NGG   08/21/2012     NG4    Ticket 1008                             *
*  VXT   08/27/2012     vt1    Add new edits for Height-inches /OI 1388/ *
*  NGG   11/20/2013     NG5    Ticket 1618                             *
*  YK1   06/17/2014     YK1    Add E-check capabilities                *
*  NGG   20141023       NG6    Annuity multiple products               *
*  vxt   02/26/2015     vt2    /Ticket 3368 /                          *
*  vxt   03/24/2015     vt3    backed out changes related to Ticket 3368  *
*  vxt   03/25/2015     vt4    /Ticket 3425/                           *
*  vxt   05/06/2015     vt5    /Ticket 3511/                           *
*  NGG   20151130       NG7    Value added whole life                  *
* bz   04/18/2017  bz-HD-3492  Add Status R*
*  TMT   07/07/2017     TT1    Multiple cap project
************************************************************************
*
DEFINE DATA
PARAMETER USING C1008AAT  /* Appl tracking local data   #AT
PARAMETER USING C1009AAT  /* UI local data              #UI
PARAMETER USING GOCOA001  /* Contact local data         #CONTACT
PARAMETER USING GOMDA001  /* Military local data        #MIL
PARAMETER
1 #SWITCHES
  2 #AT-#-ENT         (L)
  2 #NEW-AT           (L)
  2 #PAYS-DUES        (L)
  2 #LTII             (L)
  2 #TRY-MBR          (L)
  2 #ONLY-RIDER       (L)
  2 #WAS-INQUIRY      (L)
  2 #WAS-PENDING      (L)
  2 #WILL-BE-INQUIRY  (L)
  2 #WILL-BE-PENDING  (L)
  2 #ENTRY-SCN        (L)
  2 #FROM-AN          (L)
  2 #FLEX-POLICY      (L)
  2 #PENDING-SCN      (L)
  2 #HAS-FBR          (L)
  2 #NEW-POL-RIDER    (L)
  2 #ATTCH-POL-RIDER  (L)
  2 #PROSP            (L)
  2 #APPL-FOUND       (L)
  2 #STAT-FOUND       (L)
  2 #INVALID          (L)
*  2 #KATRINA-ZIP      (L)              /* vt5
  2 #DISCLOSURE       (L)
  2 #ERROR            (L)
1 #POS1                    (I4)
1 #TEXT                    (A78)
* 1 #cga-clerk        (a3)            /*  vt2  /* vt3
LOCAL USING GPRAMINF     /* Military local data used in GPRNMINF   RE1
LOCAL
**1 #OTHERS
*  2 #SYSTEM (A) DYNAMIC
*  2 #ERROR-CODE (A3/1:*)
*  2 #VALIDATE-FLAG (A1/1:*)
*  2 #POS (I4)
*  2 #SBP-COST (P5) /*
*  2 #VAL-FIELD (A) DYNAMIC
1 #DATE-OF-BIRTH                     (N8.0)
1 REDEFINE #DATE-OF-BIRTH
  2 DOB-YYYY      (N4.0)
  2 DOB-MM        (N2.0)
  2 DOB-DD        (N2.0)
1 AT-W VIEW OF A-APPL-TRACKING
  2 AT-STATUS
  2 ACTION-FLAG
  2 APPL-SOURCE
  2 REDEFINE APPL-SOURCE
    3 #HSC-T           (A1)
    3 #HSC-999         (N3)
    3 #HSC-YY          (N2)
  2 REFERING-ID-NUMBER    (9)
  2 DEP-REC-AMOUNT (N7.2/1:1)
*
1 XX-STAT VIEW OF A-STATUS
  2 PROCESS-IND
  2 WIDOW-FLAG
*
1 CAP-V VIEW OF A-STATUS
  2 CONV-DURATION (9)
  2 STATUS        (9)
  2 X-LOAN-AMOUNT (9)           /* TT1
  2 INTRO-FLAG
*
1 RR-V VIEW OF A-RANK-REFERENCE
  2 RANK-ID
  2 PAY-GRADE
  2 MILITARY-ID
  2 MIL-ABBR-KEY
1 #MIL-ABBR-KEY   (A26) 1 REDEFINE #MIL-ABBR-KEY
  2 #MIL-ID  (A1)
  2 #R-ABBR  (A25)
1 #SOURCE-CODE-FOUND       (L)
1 #REAL-TRIP-NUM           (N3)
1 #REAL-TRIP-YY            (N2)
1 EDIT-CODE VIEW OF A-SOURCE-OF-APPL
  2 SOURCE-CODE-GROUP (A1) /*PM - 06/2000 - SPLIT
  2 SOURCE-CODE (A6)
  2 SOURCE-INQUIRIES-FLAG (P1.0) /*
*
1 #HOLD-CN (N6)
1 BLANK       (A1)    CONST <' '>
1 #CAP-PGRADE (A3/13) CONST <'E5','E6','E7','E8','E9','O1','O1E','O2','O2E','O3','O3E','W1','W2'>     /* NG5
1 #CAP-RANK   (N6/6)  CONST < 215,235,255,495,515,535 >
*
1 #ERROR-NBR               (I4)
1 #MSG-LIST                (A/45)  DYNAMIC INIT <          /* TT1
  '(A)pproved AT"s cannot be Un-Approved',
  '(P)ending AT"s cannot be changed to Inquiry (M/S)',
  'Please enter a name for the applicant',
  'Linked CN not found',
  'SEX must be F or M',                                    /* 5
  'Must be SPS/GEN for Originally owned by Insured',
  'Can''t be SPS/GEN or CAP for Originally owned by Spouse',
* 'Credit card deposit indicator has to be "Y" or "N"',
  'E-Deposit indicator has to be "C" or "E" or "N"',       /* YK1
  'AT Status is invalid',
  'You cannot delete a new "AT"',                          /* 10
  'Date of Birth Required',
  'Invalid Date Of Birth',
  'DOB cannot be in the future',
  'Required if Pending',
  'C.A.P. is only for mbrs',                               /* 15
  'Loan Amount must be $1k/2k/2.5k/3k/4k/5k',
  'CAP Bridger file indicator must be "Y", "N" or "V"',
  'Invalid if not a CAP "AT"',
  'Invalid if not a CAP "AT"',
  'GENDER and RANK mismatch',                              /* 20
  'Action flag must be "P" to become "Y"',
  'Y invalid on SP/AL - convert manually',
  'Application Source is required',
  'Source Code not found',
  'This Source Code not allowed for Inquiries',            /* 25
  'Inquiry can only chg to Pending Appl',
  'Alot Auth "Y" invalid for CAP',
  '"CAP" policy already exists or originally was a CAP policy',     /* TT1
  'Rank must be E5 thru E9 or WO1 or CW2 or O1 thru O3 for CAP',
  'Nicotine Must be "Y" or "N"',                           /* 30
  'Date format is "MMDDYYYY"',
  'Inches cannot exceed 95',                                       /* vt1 was 11
  'Feet cannot exceed 7',
  'User is not authorized for generic SSN"s - please enter an SSN',
  'Branch and Rank does not match',                        /* 35
  'Minimum amount for CAP is $250,000 term or $50,000 whole life.',
  'LT Age limitation is +40/+50',
  'Inches cannot be less than 24',                                 /* vt1
  'Face amount error',
  'Age is more than 120',                                  /* 40
*  'Not authorized user for U6 code',                        /* 41             /* vt2     /* vt3
  'Owner field can not be blank.',                     /* vt4
  'Invalid entry. Possible values are T , I, S, N, M',   /* vt4
  'Invalid Rate Date',
  'Cannot have more than 9 lifetime cap policies',
  '*'
  >
1 #I1                (I4)
1 #SEC-CODE          (N2)
1 #CN                (A6) 1 REDEFINE #CN
  2 #CN-N            (N6)
1 #MESSAGE-NBR       (N3)
1 #PAY-IND           (A1)
1 #TERM              (L)
1 #FACE-AMT          (N7.2)   /* NG99
END-DEFINE
************************************************************************
*
RESET #ERROR
#DATE-OF-BIRTH := #CONTACT.DATE-OF-BIRTH
*
PERFORM APPLICATION-SOURCE
*
IF #ATTCH-POL-RIDER        /* Only check application source for Rider Only
  ESCAPE ROUTINE
END-IF
*
IF #CONTACT.LAST-NAME = ' ' OR #CONTACT.FIRST-NAME = ' '
  #ERROR-NBR := 3
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1  := POS ( #CONTACT.LAST-NAME )
  ESCAPE ROUTINE
END-IF
*
* if #at.at-status = 'U6' and NOT(#cga-clerk = 'VXT' or = 'AJK' or = 'CEB' or = 'MJM' or = 'EAC' or = 'GME')     /* vt2 \/     /* vt3 \/ commented it out
*   #ERROR-NBR := 41
*   #ERROR := TRUE
*   #TEXT  := #MSG-LIST ( #ERROR-NBR )
*   #POS1  := POS ( #at.at-status )
*   ESCAPE ROUTINE
* end-if                                                                                                         /* VT2 /\    /* vt3 /\
*
/* vt4 \/
if (substr(#ui.at-status,1,1) = 'P' )
  if  (#at.policy-type = ' ' )
    #ERROR-NBR := 41
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1  := POS ( #at.policy-type )
    ESCAPE ROUTINE
  else
    if not (#at.policy-type = 'T' or ='I' or = 'S' or = 'N' or = 'M')
      #ERROR-NBR := 42
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1  := POS ( #at.policy-type )
      ESCAPE ROUTINE
    end-if
  end-if
end-if                                                                                      /* vt4 /\

IF #AT.ID-NUMBER > 0
  FIND (1) AT-W WITH ID-NUMBER = #AT.ID-NUMBER
  END-FIND
END-IF
*
IF AT-W.AT-STATUS = 'A' AND #AT.AT-STATUS NE 'A'
  #ERROR-NBR := 1
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #UI.AT-STATUS )
  ESCAPE ROUTINE
END-IF
*
IF #AT.CAP-IND = 'Y'
    AND #AT.ALOT-CHG-AUTH = 'Y'
  #ERROR-NBR := 27
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.ALOT-CHG-AUTH )
  ESCAPE ROUTINE
END-IF
*
IF   (AT-W.REFERING-ID-NUMBER (1) NE 0)
    AND (AT-W.REFERING-ID-NUMBER (1) LT 500000)
  FIND (1) XX-STAT WITH MEMBER-KEY = REFERING-ID-NUMBER-A (1)
    IF NO RECORDS FOUND
      FIND (1) XX-STAT WITH WIDOW-KEY = REFERING-ID-NUMBER-A (1)
        IF NO RECORDS FOUND
          #ERROR-NBR := 4
          #ERROR := TRUE
          #TEXT  := #MSG-LIST ( #ERROR-NBR )
          #POS1   := POS ( #UI.AT-STATUS )
          ESCAPE ROUTINE
        END-NOREC
      END-FIND
    END-NOREC
  END-FIND
END-IF
*
IF NOT (#CONTACT.GENDER-CD = 'F' OR = 'M' OR = ' ')
  #ERROR-NBR := 5
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #CONTACT.GENDER-CD )
  ESCAPE ROUTINE
END-IF
*
IF   ( #AT.POLICY-TYPE =  'I' )
    AND ( NOT #AT.INTRO-FLAG = 'S' OR ='K' OR = 'G')
  #ERROR-NBR := 6
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.POLICY-TYPE )
  ESCAPE ROUTINE
END-IF
*
IF #AT.POLICY-TYPE =  'S'
    AND (( #AT.INTRO-FLAG = 'K' OR = 'G' AND XX-STAT.WIDOW-FLAG NE 'Y' )
    OR #AT.INTRO-FLAG = 'S' OR  #AT.CAP-IND = 'Y')
  #ERROR-NBR := 7
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.POLICY-TYPE )
  ESCAPE ROUTINE
END-IF
*
* IF #AT.CC-DEPOSIT-IND NE 'Y' AND        /* YK1
*    #AT.CC-DEPOSIT-IND NE 'N'            /* YK1
IF #AT.E-DEPOSIT-IND NE 'C' AND #AT.E-DEPOSIT-IND NE 'E' AND #AT.E-DEPOSIT-IND NE 'N'
  #ERROR-NBR := 8
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.E-DEPOSIT-IND )
  ESCAPE ROUTINE
END-IF
*
IF #AT.ACTION-FLAG = 'M' OR = 'S' OR = 'P' OR = 'U' OR = 'W' OR = 'Y'
    OR = 'A' OR = 'D' OR = 'N' OR = 'R'             /*     bz-HD-3492
  IGNORE
ELSE
  #ERROR-NBR := 9
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.ACTION-FLAG )
  ESCAPE ROUTINE
END-IF
*
IF #SCN-DOB NE MASK(MMDDYYYY)
  #ERROR-NBR := 11
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #SCN-DOB )
  ESCAPE ROUTINE
END-IF
*
IF #SCN-DOB-YYYY LT 1900
  #ERROR-NBR := 12
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #SCN-DOB )
  ESCAPE ROUTINE
END-IF
*
DOB-MM                 := #SCN-DOB-MM
DOB-DD                 := #SCN-DOB-DD
DOB-YYYY               := #SCN-DOB-YYYY
#CONTACT.DATE-OF-BIRTH := #DATE-OF-BIRTH
IF #CONTACT.DATE-OF-BIRTH > *DATN
  #ERROR-NBR := 13
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #SCN-DOB )
  ESCAPE ROUTINE
END-IF
*   NG6 Start
IF GET-AGE-2 (< #CONTACT.DATE-OF-BIRTH >) > 120
  #ERROR-NBR := 13
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #SCN-DOB )
  ESCAPE ROUTINE
END-IF
*   NG6 End
*   NG7 Start
IF #UI.#SCN-RATE-DATE NE ' '
  IF #UI.#SCN-RATE-DATE NE MASK(MMDDYYYY)
    #ERROR-NBR := 43
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #UI.#SCN-RATE-DATE )
    ESCAPE ROUTINE
  END-IF
  DOB-MM                 := #RATE-MM
  DOB-DD                 := #RATE-DD
  DOB-YYYY               := #RATE-YYYY
  #AT.RATE-DATE          := #DATE-OF-BIRTH
ELSE
  RESET #AT.RATE-DATE
END-IF
*   NG7 End
EXPAND ARRAY #ERROR-CODE    TO (*:10)
EXPAND ARRAY #VALIDATE-FLAG TO (*:50)                      /* RE1
**EXPAND ARRAY #VALIDATE-FLAG TO (*:20)                    /* RE1
**RESET  #VALIDATE-FLAG(*) #VAL-FIELD #MIL #OTHERS         /* RE1
RESET  #VALIDATE-FLAG(*) #VAL-FIELD #MIL #MILITARY-INFO #OTHERS /* RE1
#VALIDATE-FLAG (1)    := 'Y'
#VALIDATE-FLAG (2)    := 'Y'
#VALIDATE-FLAG (18)   := 'Y'
#MIL.CONTACT-ID       := #CONTACT.CONTACT-ID
#MIL.MILITARY-ID      := #UI.#MIL-SERVICE
#MIL.MILITARY-STATUS  := #UI.#MIL-STATUS
#MIL.RANK-ABBR        := #UI.#RANK-ABBR
#MIL.RANK-ID        := #CONTACT.RANK-ID   /* PM3
#MILITARY-INFO.CONTACT-ID       := #CONTACT.CONTACT-ID     /* RE1 START
#MILITARY-INFO.MILITARY-SERVICE := #UI.#MIL-SERVICE
#MILITARY-INFO.MILITARY-STATUS  := #UI.#MIL-STATUS
#MILITARY-INFO.RANK-ABBR        := #UI.#RANK-ABBR          /* RE1 END
RESET #MIL.RANK-ID                       /* PM3
RESET #MILITARY-INFO.RANK-ID                          /* PM3           RE1
DECIDE FOR FIRST CONDITION
  WHEN #MIL.MILITARY-STATUS = 'C'
      AND #MIL.MILITARY-ID = ' '               /* PM4
    MOVE 'V' TO #UI.#MIL-SERVICE #MIL.MILITARY-ID
      #MILITARY-INFO.MILITARY-SERVICE                     /* RE1
    MOVE 'Non Mil' TO #UI.#RANK-ABBR #MIL.RANK-ABBR
      #MILITARY-INFO.RANK-ABBR                            /* RE1
  WHEN #MIL.MILITARY-ID = 'V'
      AND #MIL.MILITARY-STATUS = ' '           /* PM4
    MOVE 'C' TO #UI.#MIL-STATUS #MIL.MILITARY-STATUS
      #MILITARY-INFO.MILITARY-STATUS                      /* RE1
    MOVE 'Non Mil' TO #UI.#RANK-ABBR #MIL.RANK-ABBR
      #MILITARY-INFO.RANK-ABBR                            /* RE1
  WHEN NONE IGNORE
END-DECIDE
*
#MIL-ABBR-KEY.#MIL-ID := #UI.#MIL-SERVICE
#MIL-ABBR-KEY.#R-ABBR := #UI.#RANK-ABBR
#MIL-ABBR-KEY := *TRANSLATE(#MIL-ABBR-KEY,UPPER)
READ RR-V WITH MIL-ABBR-KEY = #MIL-ABBR-KEY
  IF SUBSTR(RR-V.MILITARY-ID,1,1) <> #MIL-ID
    #ERROR-NBR := 35
    #ERROR     := TRUE
    #TEXT      := #MSG-LIST ( #ERROR-NBR )
    #POS1      := POS ( #UI.#MIL-SERVICE)
    ESCAPE ROUTINE
  END-IF
  IF #MIL-ABBR-KEY = *TRANSLATE( RR-V.MIL-ABBR-KEY,UPPER )
    #CONTACT.RANK-ID    := RR-V.RANK-ID
    #UI.#PAY-GRADE      := RR-V.PAY-GRADE
    ESCAPE BOTTOM
  END-IF
END-READ
*
#SYSTEM := 'UNIX'
**CALLNAT 'GPRNMINF' #MIL #OTHERS
CALLNAT 'GPRNMINF' #MILITARY-INFO #OTHERS
IF #ERROR-CODE(1) NE ' '
  #TEXT := F-ERROR-DESCRIPTION(<#ERROR-CODE(1)>)
  DECIDE ON FIRST VALUE #VAL-FIELD
    VALUE 'BRANCH'
      #POS1 := POS(#UI.#MIL-SERVICE)
    VALUE 'RANK'
      #POS1 := POS(#UI.#RANK-ABBR)
    VALUE 'MIL-STATUS'
      #POS1 := POS(#UI.#MIL-STATUS)
    NONE
      IGNORE
  END-DECIDE
  #ERROR := TRUE
  ESCAPE ROUTINE
END-IF
*
IF NOT #SCR-DLT-FLAG = 'D' OR = 'Y'
    AND NOT #AT.ACTION-FLAG   = 'W' OR = 'D'
*
  IF  (( #AT.PLAN = 'LT') AND (#AT.SMOKER-FLAG = 'Y')              /* NG4
      AND (#CONTACT.DATE-OF-BIRTH LE #AT.DATE-RECEIVED - 390000))
      OR (( #AT.PLAN = 'LT') AND ( #AT.SMOKER-FLAG = 'N')
      AND ( #CONTACT.DATE-OF-BIRTH LE #AT.DATE-RECEIVED - 490000))
    #ERROR-NBR := 37
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #AT.PLAN )
    ESCAPE ROUTINE
  END-IF
*
  IF #AT.FACE-AMT-UNITS = 0
      AND NOT #ONLY-RIDER
    #ERROR-NBR := 14
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #AT.FACE-AMT-UNITS )
    ESCAPE ROUTINE
  END-IF
*
  IF #SCN-DOB = ' ' OR = '00000000'
    #ERROR-NBR := 14
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #SCN-DOB )
    ESCAPE ROUTINE
  END-IF
*
  IF NOT #AT.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    IF #UI.#MIL-STATUS = ' '
      #ERROR-NBR := 14
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #UI.#MIL-STATUS )
      ESCAPE ROUTINE
    END-IF
*
    IF #UI.#MIL-SERVICE = ' '
      #ERROR-NBR := 14
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #UI.#MIL-SERVICE )
      ESCAPE ROUTINE
    END-IF
*
    IF #UI.#RANK-ABBR = ' '
      #ERROR-NBR := 14
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #UI.#RANK-ABBR )
      ESCAPE ROUTINE
    END-IF
  END-IF
*
  IF #AT.CAP-IND = 'Y'
      AND NOT #AT.CAP-TYPE = 'G' OR ='C' OR ='E'
    #ERROR-NBR := 14
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #AT.CAP-TYPE )
    ESCAPE ROUTINE
  END-IF
*
  IF #AT.CAP-IND = 'Y'
    #TERM := FUNCTION-TERM-POLICY (<#AT.PLAN >)
    IF #TERM
      IF #AT.FACE-AMT-UNITS < 250
        #ERROR-NBR := 36
        #ERROR := TRUE
        #TEXT  := #MSG-LIST ( #ERROR-NBR )
        #POS1   := POS ( #AT.FACE-AMT-UNITS )
        ESCAPE ROUTINE
      END-IF
    ELSE
      IF #AT.FACE-AMT-UNITS < 50  /*   NG2   Start
        #ERROR-NBR := 36
        #ERROR := TRUE
        #TEXT  := #MSG-LIST ( #ERROR-NBR )
        #POS1   := POS ( #AT.FACE-AMT-UNITS )
        ESCAPE ROUTINE
      END-IF
    END-IF
  END-IF
*                                      NG1  End
  IF  #AT.HEIGHT-FT GT 7
      AND #AT.PLAN NE 'GPL'
      AND #AT.PLAN NE 'GP2'
    #ERROR-NBR := 33
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #AT.HEIGHT-FT )
    ESCAPE ROUTINE
  END-IF
*
  if #at.height-ft lt 2
    if #at.height-in lt 24 or #at.height-in gt 95
      IF #AT.HEIGHT-in lt 24 and #at.height-ft lt 2
          and #at.plan ne 'GPL'
          and #at.plan ne 'GP2'
        #ERROR-NBR := 38
        #ERROR := TRUE
        #TEXT  := #MSG-LIST ( #ERROR-NBR )
        #POS1   := POS ( #AT.HEIGHT-in )
        ESCAPE ROUTINE
      else
        IF #AT.HEIGHT-IN GT 95
            AND #AT.PLAN NE 'GPL'
            and #AT.PLAN NE 'GP2'
          #ERROR-NBR := 32
          #ERROR := TRUE
          #TEXT  := #MSG-LIST ( #ERROR-NBR )
          #POS1   := POS ( #AT.HEIGHT-IN )
          ESCAPE ROUTINE
        END-IF
      end-if
    end-if
  end-if                                                     /* vt1 /\
*
* IF #AT.PLAN NE 'AL'
  IF NOT IS-ANNUITY-LIFE (< #AT.PLAN >)  /* NG6
      AND #AT.PLAN NE 'GPL'
      AND #AT.PLAN NE 'GP2'            /*TT1
      AND NOT #ONLY-RIDER
*       IF #AT.HEIGHT-FT = 0                                  /* vt1
*         #ERROR-NBR := 14
*         #ERROR := TRUE
*         #TEXT  := #MSG-LIST ( #ERROR-NBR )
*         #POS1   := POS ( #AT.HEIGHT-FT )
*         ESCAPE ROUTINE
*       END-IF
*
    IF #AT.WEIGHT = 0
      #ERROR-NBR := 14
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #AT.WEIGHT )
      ESCAPE ROUTINE
    END-IF
  END-IF
*
  IF CAP-IND = 'Y'
    IF #AT.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
      #ERROR-NBR := 15
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #AT.INTRO-FLAG )
      ESCAPE ROUTINE
    END-IF
*
    IF NOT #AT.CAP-LOAN-AMT = 0 OR = 1000 OR = 2000 OR = 2500 OR = 3000
        OR = 4000 OR = 5000
      #ERROR-NBR := 16
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #AT.CAP-LOAN-AMT )
      ESCAPE ROUTINE
    END-IF
*
    DECIDE FOR FIRST CONDITION
      WHEN #AT.CAP-TYPE = 'G'
        #AT.MODE :='G'
      WHEN #AT.CAP-TYPE = 'C'
        #AT.MODE := '0'
      WHEN #AT.CAP-TYPE = 'E'
        #AT.MODE := 'E'
      WHEN NONE
        IGNORE
    END-DECIDE
*
    IF #UI.#BRIDGER = ' '
      #UI.#BRIDGER := 'N'
    END-IF
*
    IF NOT #UI.#BRIDGER = 'N' OR = 'Y' OR = 'V'
      #ERROR-NBR := 17
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #UI.#BRIDGER )
      ESCAPE ROUTINE
    END-IF
*
  ELSE
    IF #AT.CAP-LOAN-AMT NE 0
      #ERROR-NBR := 18
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #AT.CAP-LOAN-AMT )
      ESCAPE ROUTINE
    END-IF
*
    IF #AT.ALLOT-STRT-AMT NE 0
      #ERROR-NBR := 18
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #AT.ALLOT-STRT-AMT )
      ESCAPE ROUTINE
    END-IF
  END-IF
*
  IF #CONTACT.GENDER-CD = ' '
    #ERROR-NBR := 14
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #CONTACT.GENDER-CD )
    ESCAPE ROUTINE
  END-IF
*
  IF #AT.PLAN = ' '
      AND NOT #ONLY-RIDER
    #ERROR-NBR := 14
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #AT.PLAN )
    ESCAPE ROUTINE
  END-IF
*
END-IF
*
IF #CONTACT.GENDER-CD = 'F' AND #UI.#RANK-ABBR = 'MR'
  #ERROR-NBR := 20
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #CONTACT.GENDER-CD )
  ESCAPE ROUTINE
ELSE
  IF #CONTACT.GENDER-CD = 'M'
      AND #UI.#RANK-ABBR = 'MIS' OR = 'MRS' OR = 'MS'
    #ERROR-NBR := 20
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #CONTACT.GENDER-CD )
    ESCAPE ROUTINE
  END-IF
END-IF
*
IF #AT.ACTION-FLAG NE AT-W.ACTION-FLAG
    AND #AT.ACTION-FLAG = 'Y'
  IF NOT AT-W.ACTION-FLAG = 'P' OR = 'Y'
    #ERROR-NBR := 20
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS (#UI.AT-STATUS )
    ESCAPE ROUTINE
  END-IF
*
* IF #AT.PLAN = 'SP' OR = 'AL'
  IF #AT.PLAN = 'SP' OR IS-ANNUITY-LIFE (< #AT.PLAN >)  /* NG6
    #ERROR-NBR := 22
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #UI.AT-STATUS )
    ESCAPE ROUTINE
  END-IF
END-IF
*
COMPUTE #FACE-AMT = (#AT.FACE-AMT-UNITS * 1000) + #AT.FACE-AMT-DOLS
*
IF #AT.CAP-IND = 'Y'                                                                   /* TT1 BEGIN
    AND NOT #SCR-DLT-FLAG = 'D' OR = 'Y'
    AND #AT.ACTION-FLAG NE 'A' /*So LISA can chge USER ID after new pol /*DW37
  IF #AT.MEMBER-CN NE BLANK
    MOVE RIGHT #AT.MEMBER-CN TO #CN
    FIND CAP-V WITH ID-NUMBER = #CN-N
      IF X-LOAN-AMOUNT(*) > 0 OR
          NOT IS-CAP-ELLIGIBLE(<#CN-N>)
*       FOR #I1 1 TO 9
*         IF   CAP-V.CONV-DURATION (#I1) = 999 AND CAP-V.STATUS (#I1) = 'D'
*             OR (CAP-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')

        #ERROR-NBR := 28
        #ERROR := TRUE
        #TEXT  := #MSG-LIST ( #ERROR-NBR )
        #POS1   := POS ( #AT.CAP-IND )
        ESCAPE ROUTINE
*         END-IF
*       END-FOR
      END-IF
    END-FIND
  END-IF
END-IF                                                                                  /* TT1 End
*
IF #AT.CAP-IND = 'Y'     /* Check rank (E6-E9 / WO1 / CW2 / (O1 - O3)
  IF #PAY-GRADE = #CAP-PGRADE (*)
      OR #CONTACT.RANK-ID = #CAP-RANK (*)
    IGNORE
  ELSE
    #ERROR-NBR := 29
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #RANK-ABBR )
    ESCAPE ROUTINE
  END-IF
END-IF
*
IF NOT #AT.SMOKER-FLAG = 'Y' OR = 'N'
  #ERROR-NBR := 30
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.SMOKER-FLAG )
  ESCAPE ROUTINE
END-IF
*
IF #SCN-DOB NE MASK(MMDDYYYY)
  #ERROR-NBR := 31
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #UI.#SCN-DOB )
  ESCAPE ROUTINE
END-IF
*
* IF #AT.HEIGHT-IN GT 11                                     /* vt1 \/
*     AND #AT.PLAN NE 'GPL'
*   #ERROR-NBR := 32
*   #ERROR := TRUE
*   #TEXT  := #MSG-LIST ( #ERROR-NBR )
*   #POS1   := POS ( #AT.HEIGHT-IN )
*   ESCAPE ROUTINE
* END-IF
*
*                 *** END OF PROGRAM ***
************************************************************************
DEFINE APPLICATION-SOURCE
************************************************************************
*
IF #AT.APPL-SOURCE = ' '
  #ERROR-NBR := 23
  #ERROR := TRUE
  #TEXT  := #MSG-LIST ( #ERROR-NBR )
  #POS1   := POS ( #AT.APPL-SOURCE )
  ESCAPE ROUTINE
END-IF
*
FIND EDIT-CODE WITH SOURCE-CODE = #AT.APPL-SOURCE
  IF NO RECORD FOUND
    MOVE FALSE TO #SOURCE-CODE-FOUND
    ESCAPE BOTTOM
  END-NOREC
*
  IF EDIT-CODE.SOURCE-CODE-GROUP = MASK (A)
    MOVE TRUE TO #SOURCE-CODE-FOUND
    ESCAPE BOTTOM
  ELSE
    MOVE FALSE TO #SOURCE-CODE-FOUND
    ESCAPE TOP
  END-IF
END-FIND
*
IF NOT #SOURCE-CODE-FOUND
  AT-W.APPL-SOURCE := #AT.APPL-SOURCE
  IF #HSC-999 = MASK (NNN)
    COMPUTE #REAL-TRIP-NUM = 999 - #HSC-999
    MOVE #REAL-TRIP-NUM TO #HSC-999
    IF #HSC-YY GE 50
      COMPUTE #REAL-TRIP-YY = 149 - #HSC-YY
    ELSE
      COMPUTE #REAL-TRIP-YY = 49 - #HSC-YY
    END-IF
    MOVE #REAL-TRIP-YY  TO #HSC-YY
  END-IF
*
  FIND EDIT-CODE WITH SOURCE-CODE = AT-W.APPL-SOURCE
    IF NO RECORD FOUND
      #ERROR-NBR := 24
      #ERROR := TRUE
      #TEXT  := #MSG-LIST ( #ERROR-NBR )
      #POS1   := POS ( #AT.APPL-SOURCE )
      ESCAPE ROUTINE
    END-NOREC
*
    IF EDIT-CODE.SOURCE-CODE-GROUP EQ MASK (A)
      MOVE TRUE TO #SOURCE-CODE-FOUND
      ESCAPE BOTTOM
    END-IF
  END-FIND
*
  IF #SOURCE-CODE-FOUND
    IGNORE
  ELSE
    #ERROR-NBR := 24
    #ERROR := TRUE
    #TEXT  := #MSG-LIST ( #ERROR-NBR )
    #POS1   := POS ( #AT.APPL-SOURCE )
    ESCAPE ROUTINE
  END-IF
END-IF
*
END-SUBROUTINE
*
END
