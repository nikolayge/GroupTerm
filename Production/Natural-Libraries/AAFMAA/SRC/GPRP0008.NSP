* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
************************************************************************
* NAME         : GPRP0008                                              *
* AUTHOR       : Copyright: Electronic Data Systems                    *
* DESCRIPTION  : Create daily reports for financial management         *
*                1. Nightly peachtree file with invoice AR records     *
*                   sorted by Account number - check scanning          *
*                2. Nightly peachtree file with invoice AR records     *
*                   sorted by CN number - check scanning               *
*                3. Nightly reconcilliation report sorted by           *
*                   Account number / grouped by Clerk id               *
*                4. Create an input file for e-mail driver/automated   *
*                   e-mail processing                                  *
************************************************************************
*        MODIFICATION LOG                                              *
************************************************************************
* USER   DATE        TAG     REASON                                    *
* PAM    12/14/2010  None    Program Written - cloned from GPRP0004    *
*                            credit card process                       *
* PAM    12/16/2010  PM1     Fixed BADJ error                          *
* PAM    01/26/2011  PM2     Fixed account numbe error                 *
* PAM    02/01/2011  PM3     Expand User Total from 5.2 to 6.2         *
* vxt    12/18/2013  vt1     add new GL accounts /ticket 2447/         *
* vxt    01/05/2015  vt2     Ticket 3270 - change the layout of the    *
*                            account file                              *
* vxt    03/02/2016  vt3     /Ticket 4252 - New GL code for SAS service*
************************************************************************
*
DEFINE DATA
LOCAL USING GPRL0001       /* Property file
LOCAL USING OBJLACRG       /* Accounting Register
LOCAL USING GPRA0005       /* E-mail Information
*
LOCAL
1 st-v view of a-status                     /* vt1 \/
  2 id-number
  2 plan (9)                                /* vt1 /\
*
1 #OUTPUT-RECORD
  2 #ACCOUNT-NUMBER         (A4)
  2 #ACCOUNT-DESCRIPTION    (A25)
  2 #AMOUNT                 (N7.2)
  2 #AMOUNT-DISPLAY         (A11)
  2 ID-NUMBER               (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A           (A6)
  2 #NAME                   (A25)
  2 TXN-CODE                (A4)
  2 CLERK-ID                (A3)
  2 #SG-CATEGORY-1          (A2)
  2 #SG-CATEGORY-2          (A2)     /* VT1 11/28/2014
  2 CASH-CODE               (A1)
  2 MONTH-END               (A1)
  2 POLICY-NUMBER           (A16)
*
1 #PEACHTREE-DYNAMIC-FIELDS
  2 #PEACHTREE              (A150)
  2 #PEACH-ACCOUNT-NUMBER   (A9)
  2 #DESCRIPTION-1          (A25)
  2 #DESCRIPTION-2          (A25)
  2 #PEACHTREE-AMOUNT       (A20)
  2 #peach-acc-nbr          (a9) init <'1010 - 00'>     /* vt2
*
1 #PEACHTREE-STATIC-FIELDS
  2 #PEACHTREE-DATE         (A10)
  2 #PEACHTREE-REC-CNT      (N8)
  2 #PEACH-REC-CNT-NEW      (N8)                        /* VT2
*
1 #DATN                     (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY              (N4)
  2 #DATN-MM                (A2)
  2 #DATN-DD                (A2)
1 #I                        (I2)
1 #CNT                      (N7)
1 #CNT-1                    (N7)
1 #CNT-2                    (N7)
1 #TXN-CODE                 (A6)
1 #IGNORE-TRAN              (A4) INIT <'5655'>
1 #WRITE-OFF-TRAN           (A4) INIT <'5476'>
1 #NAME-D                   (A)  DYNAMIC
1 #COMMA                    (A1) INIT <','>
1 #TAB                      (A1) INIT <H'09'>
1 #TOTAL-AMOUNT             (N9.2)
1 #GRAND-TOTAL-AMOUNT       (N9.2)
1 #USER-TOTAL               (N6.2/*)                 /* PM3
1 #TRAN-USER-TOTAL          (A/*) DYNAMIC
1 #WORK-AMOUNT              (A) DYNAMIC
1 #REPORT-OUTPUT            (A150)
1 #CLERK-ID                 (A3)
1 #CLERK-SEQ                (N2)
1 #WORK-FIELD               (A) DYNAMIC
1 #EMPTY-FILE-CMD           (A) DYNAMIC INIT <'>'>
1 #DAILY-CHECK-SCAN-TRAN  (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/DailyCheckScanTran.txt'>
1 #PEACHTREE-DAILY-CS-TRAN-BY-ACCOUNT (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/CSTranByAccount.txt'>
1 #PEACHTREE-DAILY-CS-TRAN-BY-TRANSACTION (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/CSTranByTrans.txt'>
1 #REC-DAILY-CS-TRAN-BY-CLERK (A) DYNAMIC INIT
  <'/usr/SAG/AAFMAA/batch/workfiles/PERMDA/COM/CSRecTranByClerk.txt'>
1 #TRAN-USER-ARRAY           (A3/*)
*
1 #pol-num                   (a16)                /* vt4
1 #plan                      (a3)                 /* vt4
1 #k                         (i2)                 /* vt4
END-DEFINE
*
WRITE 'process started'
DEFINE WORK FILE 1 #DAILY-CHECK-SCAN-TRAN TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 2 #PEACHTREE-DAILY-CS-TRAN-BY-ACCOUNT TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 3 #PEACHTREE-DAILY-CS-TRAN-BY-TRANSACTION TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 4 #REC-DAILY-CS-TRAN-BY-CLERK TYPE 'ASCII-COMPRESSED'
*
* Delete old transaction file
CALLNAT 'GPRN0002' #EMPTY-FILE-CMD #DAILY-CHECK-SCAN-TRAN
* Write Header to report files
* #PEACHTREE := '1,2,3,4,5,6'                          /* vt2
#peachtree := '1,2,3,4,5,6,7,8'                        /* vt2
WRITE WORK FILE 2 #PEACHTREE
#PEACHTREE := '1,2,3,4,5,6'                            /* vt2
WRITE WORK FILE 3 #PEACHTREE
*
#DATN := *DATN
* #Datn := 20141218                 /* just for testing
RESET #PEACHTREE
#WORK-FIELD := FUNCTION-CALENDAR(<#DATN,'D'>)
COMPRESS 'Daily R/C  -  CS' #WORK-FIELD INTO #REPORT-OUTPUT
WRITE WORK FILE 4 #REPORT-OUTPUT
RESET #PEACHTREE #REPORT-OUTPUT
*
EXPAND ARRAY #TRAN-USER-ARRAY TO (*:50)
FIND ACCT-REG-V WITH TRANSACTION-DATN = #DATN
  IF NO RECORDS FOUND
    WRITE 'There are no accounting transaction records for ' #DATN
  END-NOREC
  IF ACCT-REG-V.CASH-CODE = 'I'
    #CNT := #CNT + 1
    RESET #OUTPUT-RECORD
    #NAME-D := ACCT-REG-V.NAME
    #NAME := FUNCTION-FORM-NAME(<#NAME-D,'U'>)
    MOVE BY NAME ACCT-REG-V TO #OUTPUT-RECORD
    EXAMINE #TRAN-USER-ARRAY(*) FOR #OUTPUT-RECORD.CLERK-ID INDEX #I
    IF #I = 0
      #CLERK-SEQ := #CLERK-SEQ + 1
      #TRAN-USER-ARRAY(#CLERK-SEQ) := #OUTPUT-RECORD.CLERK-ID
    END-IF
    IF C*SUNGARD-INFO = 0
      IF ACCT-REG-V.CREDIT-AMOUNT NE 0
        #AMOUNT := ACCT-REG-V.CREDIT-AMOUNT * -1
      ELSE
        #AMOUNT := ACCT-REG-V.DEBIT-AMOUNT
      END-IF
      PERFORM WRITE-OUTPUT-RECORD
    ELSE
      FOR #I = 1 TO C*SUNGARD-INFO
        #SG-CATEGORY-1 := SG-CATEGORY-1(#I)
        #SG-CATEGORY-2 := SG-CATEGORY-2 (#I)    /* VT1 11/28/2014
        IF #SG-CATEGORY-1 = '**'
          RESET #SG-CATEGORY-1
        END-IF
*       IF #SG-CATEGORY-1 NE 'UN' AND ACCT-REG-V.CREDIT-AMOUNT NE 0  /* PM1
        IF ACCT-REG-V.CREDIT-AMOUNT NE 0                             /* PM1
          #AMOUNT := ACCT-REG-V.SG-AMOUNT(#I) * -1
        ELSE
          #AMOUNT := ACCT-REG-V.SG-AMOUNT(#I)
        END-IF
        PERFORM WRITE-OUTPUT-RECORD
      END-FOR
    END-IF
* common code in subroutine
    DEFINE SUBROUTINE WRITE-OUTPUT-RECORD
    COMPRESS ACCT-REG-V.TXN-CODE #SG-CATEGORY-1 INTO #TXN-CODE LEAVING NO
    #ACCOUNT-NUMBER := FUNCTION-ACCT-NUMBER(<#TXN-CODE>)(1)
    #ACCOUNT-DESCRIPTION := FUNCTION-ACCT-NUMBER(<#TXN-CODE>)(2)
*
    if #datn ge 20140101                                              /* vt1 \/
      if ACCT-REG-V.TXN-CODE = 'PREP' or ='PRER' or = 'FPFP' or = 'FPFR' or = 'FPRP' or = 'RIDP' or = 'RIDR' or = 'DUEP' or = 'DUER' or = 'DISC'
        IF #SG-CATEGORY-1 <> 'SS'                                     /* vt3 \/                                 
          perform get-new-acct-num                                     
        else                                                           
          if #datn ge 20160301
            #ACCOUNT-NUMBER := 4115
            #ACCOUNT-DESCRIPTION := 'SAS Service'
          end-if                                                       
        END-IF                                                        /* vt3 /\
      end-if
    end-if                                                            /* vt1 /\
*
    IF #ACCOUNT-NUMBER = #IGNORE-TRAN
      ESCAPE ROUTINE
    END-IF
    MOVE EDITED #AMOUNT (EM=-ZZZZZZ9.99) TO #AMOUNT-DISPLAY
    WRITE WORK FILE 1 VARIABLE #OUTPUT-RECORD
    END-SUBROUTINE
  END-IF
END-FIND
IF #CLERK-SEQ > 0
  RESIZE ARRAY #TRAN-USER-ARRAY TO (*:#CLERK-SEQ)
END-IF
*
IF #CNT = 0
  WRITE 'There are no invoice transaction records for ' #DATN
  ESCAPE ROUTINE
END-IF
*
CLOSE WORK FILE 1
PERFORM CREATE-CS-PEACHTREE-FILE-BY-ACCOUNT
PERFORM CREATE-CS-PEACHTREE-FILE-BY-TRANSACTION
PERFORM CREATE-CS-FILE-BY-CLERK
WRITE 'process ended'
*
*****************************************************
DEFINE SUBROUTINE CREATE-CS-PEACHTREE-FILE-BY-ACCOUNT
*****************************************************
*
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
* Count number of rows first
SORT BY #ACCOUNT-NUMBER USING #AMOUNT
  AT BREAK OF #ACCOUNT-NUMBER
    #CNT-1 := #CNT-1 + 1
  END-BREAK
  AT END OF DATA
    #CNT-1 := #CNT-1 + 1                   /* Add summary line
    #CNT-2 := COUNT(#AMOUNT) + 1
  END-ENDDATA
END-SORT
*
#PEACHTREE-DATE       := FUNCTION-CALENDAR(<#DATN,'D'>)
#PEACHTREE-REC-CNT    := #CNT-1
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
SORT BY #ACCOUNT-NUMBER USING #ACCOUNT-DESCRIPTION #AMOUNT #OUTPUT-RECORD.TXN-CODE
  #TOTAL-AMOUNT := #TOTAL-AMOUNT + #AMOUNT
  AT BREAK OF #ACCOUNT-NUMBER
    #PEACH-ACCOUNT-NUMBER := OLD(#ACCOUNT-NUMBER)
    #DESCRIPTION-1        := OLD(#ACCOUNT-DESCRIPTION)
    COMPRESS 'INV' #PEACHTREE-DATE INTO #DESCRIPTION-2
*   IF #ACCOUNT-NUMBER = #WRITE-OFF-TRAN                                 /* PM2
    IF OLD(#ACCOUNT-NUMBER) = #WRITE-OFF-TRAN                            /* PM2
      COMPRESS #PEACH-ACCOUNT-NUMBER '- 07' INTO #PEACH-ACCOUNT-NUMBER
    ELSE
      COMPRESS #PEACH-ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
    END-IF
    MOVE EDITED #TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
    MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
    #peach-acc-nbr := '1010 - 00'               /* vt2
    #PEACH-REC-CNT-NEW :=  #PEACHTREE-REC-CNT - 1    /* VT2
    COMPRESS #PEACHTREE-DATE #COMMA
      #description-2 #comma                     /* vt2
*      #DESCRIPTION-1  #COMMA                   /* vt2
*      #PEACHTREE-REC-CNT #COMMA                /* VT2
      #PEACH-REC-CNT-NEW #COMMA                 /* VT2
      #PEACH-ACCOUNT-NUMBER #COMMA
      #description-1 #comma                     /* vt2
*      #DESCRIPTION-2 #COMMA                    /* vt2
      #PEACHTREE-AMOUNT #comma                  /* vt2
      #peach-acc-nbr #comma                     /* vt2
      #description-2                            /* vt2
      INTO #PEACHTREE LEAVING NO
    WRITE WORK FILE 2 #PEACHTREE
    #GRAND-TOTAL-AMOUNT := #GRAND-TOTAL-AMOUNT + #TOTAL-AMOUNT
    RESET #TOTAL-AMOUNT #PEACHTREE-DYNAMIC-FIELDS
  END-BREAK
*   AT END OF DATA                              /* vt2 \/
*     #ACCOUNT-NUMBER := FUNCTION-ACCT-NUMBER(<'CASH  '>)(1)
*     COMPRESS #ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
*     COMPRESS  'Checks-' #PEACHTREE-DATE INTO #DESCRIPTION-1 LEAVING NO
*     RESET #DESCRIPTION-2
*     COMPRESS 'INV' #PEACHTREE-DATE INTO #DESCRIPTION-2
*     MOVE EDITED #GRAND-TOTAL-AMOUNT (EM=ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
*     MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
*     COMPRESS #PEACHTREE-DATE #COMMA
*       #DESCRIPTION-1  #COMMA
*       #PEACHTREE-REC-CNT #COMMA
*       #PEACH-ACCOUNT-NUMBER #COMMA
*       #DESCRIPTION-2 #COMMA
*       #PEACHTREE-AMOUNT #comma
*       INTO #PEACHTREE LEAVING NO
*      WRITE WORK FILE 2 #PEACHTREE
*  END-ENDDATA                                  /* vt2 /\
END-SORT
*
END-SUBROUTINE
*
*********************************************************
DEFINE SUBROUTINE CREATE-CS-PEACHTREE-FILE-BY-TRANSACTION
*********************************************************
*
RESET #PEACHTREE-DYNAMIC-FIELDS
#PEACHTREE-REC-CNT    := #CNT-2
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
SORT BY #OUTPUT-RECORD.ID-NUMBER USING #ACCOUNT-NUMBER #AMOUNT ID-NUMBER-A
    #NAME #OUTPUT-RECORD.TXN-CODE #OUTPUT-RECORD.POLICY-NUMBER
  RESET #DESCRIPTION-1 #DESCRIPTION-2
  IF #ACCOUNT-NUMBER = #WRITE-OFF-TRAN
    COMPRESS #ACCOUNT-NUMBER '- 07' INTO #PEACH-ACCOUNT-NUMBER
  ELSE
    COMPRESS #ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
  END-IF
  COMPRESS #OUTPUT-RECORD.TXN-CODE #DATN-MM #DATN-DD 'CN' #OUTPUT-RECORD.ID-NUMBER-A
    INTO #DESCRIPTION-1 LEAVING NO
  IF #OUTPUT-RECORD.TXN-CODE NE 'APFP'
    COMPRESS #NAME #OUTPUT-RECORD.POLICY-NUMBER INTO #DESCRIPTION-2
  ELSE
    #DESCRIPTION-2 := #NAME
  END-IF
  #TOTAL-AMOUNT := #TOTAL-AMOUNT + #AMOUNT
  MOVE EDITED #AMOUNT (EM=-ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
  MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
  COMPRESS #PEACHTREE-DATE #COMMA
    #DESCRIPTION-1  #COMMA
    #PEACHTREE-REC-CNT #COMMA
    #PEACH-ACCOUNT-NUMBER #COMMA
    #DESCRIPTION-2 #COMMA
    #PEACHTREE-AMOUNT INTO #PEACHTREE LEAVING NO
  WRITE WORK FILE 3 #PEACHTREE
  RESET #PEACHTREE-DYNAMIC-FIELDS
  AT END OF DATA
    #ACCOUNT-NUMBER := FUNCTION-ACCT-NUMBER(<'CASH  '>)(1)
    COMPRESS #ACCOUNT-NUMBER '- 00' INTO #PEACH-ACCOUNT-NUMBER
    COMPRESS  'Checks-' #PEACHTREE-DATE INTO #DESCRIPTION-1 LEAVING NO
    RESET #DESCRIPTION-2
    COMPRESS 'INV' #PEACHTREE-DATE INTO #DESCRIPTION-2
    MOVE EDITED #TOTAL-AMOUNT (EM=ZZZZZZZZ9.99) TO #PEACHTREE-AMOUNT
    MOVE LEFT #PEACHTREE-AMOUNT TO #PEACHTREE-AMOUNT
    COMPRESS #PEACHTREE-DATE #COMMA
      #DESCRIPTION-1  #COMMA
      #PEACHTREE-REC-CNT #COMMA
      #PEACH-ACCOUNT-NUMBER #COMMA
      #DESCRIPTION-2 #COMMA
      #PEACHTREE-AMOUNT INTO #PEACHTREE LEAVING NO
    WRITE WORK FILE 3 #PEACHTREE
  END-ENDDATA
END-SORT
*
END-SUBROUTINE
*
*****************************************
DEFINE SUBROUTINE CREATE-CS-FILE-BY-CLERK        /* YK1
*****************************************
*
* Create all columns header for clerks first
READ WORK FILE 1 #OUTPUT-RECORD
END-ALL
*
SORT BY #OUTPUT-RECORD.TXN-CODE #OUTPUT-RECORD.CLERK-ID USING #AMOUNT
  AT START OF DATA
    COMPRESS 'Row Labels' #TRAN-USER-ARRAY(*) 'Total' INTO #REPORT-OUTPUT WITH #TAB
    WRITE WORK FILE 4 #REPORT-OUTPUT
    IF #CLERK-SEQ > 0
      EXPAND ARRAY #USER-TOTAL TO (*:#CLERK-SEQ)
      EXPAND ARRAY #TRAN-USER-TOTAL TO (*:#CLERK-SEQ)
    ELSE
      ESCAPE ROUTINE IMMEDIATE
    END-IF
    RESET #REPORT-OUTPUT
    #REPORT-OUTPUT   := #OUTPUT-RECORD.TXN-CODE
    #TRAN-USER-TOTAL(*) := '0.00'
  END-START
  AT BREAK OF #OUTPUT-RECORD.CLERK-ID
    #TOTAL-AMOUNT := SUM(#AMOUNT)
    #CLERK-ID := OLD(#OUTPUT-RECORD.CLERK-ID)
    EXAMINE #TRAN-USER-ARRAY(*) FOR #CLERK-ID INDEX #I
    #USER-TOTAL(#I) := #USER-TOTAL(#I) + #TOTAL-AMOUNT
    MOVE EDITED #TOTAL-AMOUNT (EM=-ZZZZ9.99) TO #TRAN-USER-TOTAL(#I)
    #TRAN-USER-TOTAL(#I) := *TRIM(#TRAN-USER-TOTAL(#I))
  END-BREAK
  AT BREAK OF #OUTPUT-RECORD.TXN-CODE
    #TOTAL-AMOUNT := SUM(#AMOUNT)
    MOVE EDITED #TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #WORK-AMOUNT
    #WORK-AMOUNT := *TRIM(#WORK-AMOUNT)
    COMPRESS #REPORT-OUTPUT #TRAN-USER-TOTAL(*) #WORK-AMOUNT
      INTO #REPORT-OUTPUT WITH #TAB
    WRITE WORK FILE 4 #REPORT-OUTPUT
    RESET #REPORT-OUTPUT
    #REPORT-OUTPUT := #OUTPUT-RECORD.TXN-CODE
    #TRAN-USER-TOTAL(*) := '0.00'
  END-BREAK
  AT END OF DATA
    #GRAND-TOTAL-AMOUNT := TOTAL(#AMOUNT)
    #REPORT-OUTPUT := 'Grand Total'
    FOR #I = 1 TO #CLERK-SEQ
      MOVE EDITED #USER-TOTAL(#I) (EM=-ZZZZZZZZ9.99) TO #WORK-AMOUNT
      #WORK-AMOUNT := *TRIM(#WORK-AMOUNT)
      COMPRESS #REPORT-OUTPUT #WORK-AMOUNT INTO #REPORT-OUTPUT WITH #TAB
    END-FOR
    MOVE EDITED #GRAND-TOTAL-AMOUNT (EM=-ZZZZZZZZ9.99) TO #WORK-AMOUNT
    #WORK-AMOUNT := *TRIM(#WORK-AMOUNT)
    COMPRESS #REPORT-OUTPUT #WORK-AMOUNT INTO #REPORT-OUTPUT WITH #TAB
    WRITE WORK FILE 4 #REPORT-OUTPUT
  END-ENDDATA
END-SORT
END-SUBROUTINE
*
*****************                                          /* vt1 \/
define subroutine get-new-acct-num
*****************
*
reset #pol-num #plan
find st-v with st-v.id-number = ACCT-REG-V.id-number
  for #k 1 9
    callnat 'GPLNMSXX' #pol-num ACCT-REG-V.id-number #k
    if #pol-num = ACCT-REG-V.policy-number
      move st-v.plan(#k) to #plan
      escape bottom
    end-if
  end-for
end-find
*
if function-term-policy(<#plan>)
  decide on first value of #plan
    value 'LT'
      if #SG-CATEGORY-1 = '1Y'
        #ACCOUNT-NUMBER := 4021
        #account-description := 'First Year Premiums-LT1'
      else
        if #SG-CATEGORY-1 = 'RN'
          #ACCOUNT-NUMBER := 4031
          #account-description := 'Renewals-LT'
        end-if
      end-if
    value 'RT'
      if #SG-CATEGORY-1 = '1Y'
        #ACCOUNT-NUMBER := 4023
        #account-description := 'First Year Premiums-RT'
      else
        if #SG-CATEGORY-1 = 'RN'
          #ACCOUNT-NUMBER := 4033
          #account-description := 'Renewals-RT'
        end-if
      end-if
    value 'EZ'
      if #SG-CATEGORY-1 = '1Y'
        #ACCOUNT-NUMBER := 4024
        #account-description := 'First Year Premiums-EZT'
      else
        if #SG-CATEGORY-1 = 'RN'
          #ACCOUNT-NUMBER := 4034
          #account-description := 'Renewals-EZT'
        end-if
      end-if
    none value
      if #SG-CATEGORY-1 = '1Y'
        #ACCOUNT-NUMBER := 4022
        #account-description := 'First Year Premiums-LT2'
      else
        if #SG-CATEGORY-1 = 'RN'
          #ACCOUNT-NUMBER := 4032
          #account-description := 'Renewals-LT2'
        end-if
      end-if
  end-decide
else
  IF VAWL-TRUE(<#plan>)
      or (#plan = mask(NN'F')) or ( #plan = mask(N'P'))
    if #SG-CATEGORY-1 = '1Y'
      #ACCOUNT-NUMBER := 4026
      #account-description := 'First Year Premiums-WL'
    else
      if #SG-CATEGORY-1 = 'RN'
        #ACCOUNT-NUMBER := 4036
        #account-description := 'Renewals-WL'
      end-if
    end-if
  else
    decide on first value of #plan
      value 'GPL' , 'GP2'
        if #SG-CATEGORY-1 = '1Y'
          #ACCOUNT-NUMBER := 4025
          #account-description := 'First Year Premiums-GPL GP2'
        else
          if #SG-CATEGORY-1 = 'RN'
            #ACCOUNT-NUMBER := 4035
            #account-description := 'Renewals-GPL GP2'
          end-if
        end-if
      value 'AL'
        if #SG-CATEGORY-1 = '1Y'
          #ACCOUNT-NUMBER := 4028
          #account-description := 'First Year Premiums-AL'
        end-if
      value 'SO'
        if #SG-CATEGORY-1 = 'SO'
          #ACCOUNT-NUMBER := 4112
          #account-description := 'Service Only'
        end-if
      none value
        ignore
    end-decide
  end-if
end-if
*
if #SG-CATEGORY-1  = 'SP' and #sg-category-2 ne 'AL'
  #ACCOUNT-NUMBER := 4027
  #account-description := 'First Year Premiums-WLSP'
end-if
*
if #SG-CATEGORY-1  = 'SP' and #sg-category-2 eq 'AL'
  #ACCOUNT-NUMBER := 4028
  #account-description := 'First Year Premiums-AL'
end-if
*
end-subroutine                                             /* vt1 /\
*
*
END
