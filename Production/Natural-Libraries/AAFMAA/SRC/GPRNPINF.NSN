* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
**************************************************************************
* SUBPROGRAM-ID: GPRNPINF
* DESCRIPTION: Common module to validate personal date fields based on certain
*              business rules; called by Admin System (UNIX), CRM, and
*              Member Center.
*              The error message codes below are grouped according to category:
*              Gen-Table Primary Key: ERRD
*              Gen-Table Secondary Key: 201-299
*              Please note the following very well before using this module:
*              1. This program can validate all fields at the same time.
*                 If this is the purpose, calling program must populate the
*                 #VALIDATE-FLAG array with "Y".
*              2. This program can validate one field or more at a time. If this
*                 is the purpose, populate with "Y" the occurrence(s) in the
*                 #VALIDATE-FLAG array that correspond(s) to the field in
*                 #MILITARY-INFO.
*              3. Dates passed to this program must be in YYYYMMDD format.
**************************************************************************
*        MODIFICATION LOG
**************************************************************************
* USER   DATE      TAG  REASON
* RSE  06-02-2011  None Creation
* RSE  04-13-2012  RE1  Expanded to include fields for AUC Project
* NGG  07-17-2012  NG1  Change rule for duplicate SSN
**************************************************************************
DEFINE DATA
PARAMETER USING GPRAPINF
LOCAL
1 CNT-V VIEW OF A-CONTACTS
  2 ID-NUMBER
  2 CONTACT-ID
  2 CONTACT-TYPE             /* NG1
*
1 #I                  (I2)
1 #X                  (N2)
1 #VALID              (L)
1 #ADD-MODE           (L)
1 #SAVE-NAME          (A25)
1 #MSG                (A70)
1 #EXCEPTION          (L)
END-DEFINE
*
DECIDE FOR EVERY CONDITION
  WHEN #SYSTEM NE 'CRM' AND #VALIDATE-FLAG(19) = 'Y'               /* Last Name
    PERFORM VALIDATE-LAST-NAME
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN #SYSTEM NE 'CRM' AND #VALIDATE-FLAG(17) = 'Y'               /* First Name
    PERFORM VALIDATE-FIRST-NAME
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN MIDDLE-NAME <> ' ' AND #VALIDATE-FLAG(18) = 'Y'             /* Middle Name
    PERFORM VALIDATE-MIDDLE-NAME
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN SUFFIX <> ' ' AND #VALIDATE-FLAG(20) = 'Y'                  /* Suffix
    PERFORM VALIDATE-SUFFIX
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN DATE-OF-BIRTH > 0 AND #VALIDATE-FLAG(1) = 'Y'               /* Date of Birth
    PERFORM VALIDATE-DOB
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      #VAL-FIELD := 'DOB'
      #POS := POS(DATE-OF-BIRTH)
      ESCAPE ROUTINE
    END-IF
  WHEN #PERSONAL-INFO.DATE-OF-DEATH > 0 AND #VALIDATE-FLAG(2) = 'Y' /* Date of Death
    PERFORM VALIDATE-DOD
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      #VAL-FIELD := 'DOD'
      #POS := POS(#PERSONAL-INFO.DATE-OF-DEATH)
      ESCAPE ROUTINE
    END-IF
  WHEN DATE-OF-MARRIAGE > 0 AND #VALIDATE-FLAG(3) = 'Y'            /* Date of Marriage
    PERFORM VALIDATE-DOM
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      #VAL-FIELD := 'DOM'
      #POS := POS(DATE-OF-MARRIAGE)
      ESCAPE ROUTINE
    END-IF
  WHEN DATE-OF-DIVORCE > 0 AND #VALIDATE-FLAG(4) = 'Y'             /* Date of Divorce
    PERFORM VALIDATE-DODIV
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      #VAL-FIELD := 'DODIV'
      #POS := POS(DATE-OF-DIVORCE)
      ESCAPE ROUTINE
    END-IF
*  WHEN #PERSONAL-INFO.SSN > 0 AND #VALIDATE-FLAG(5) = 'Y'                       /* SSN
*    PERFORM VALIDATE-SSN
  WHEN #PERSONAL-INFO.SSN > 0 AND #VALIDATE-FLAG(5) = 'Y'          /* SSN   RE1 start
    IF #SYSTEM = 'UNIX'
      PERFORM VALIDATE-SSN
      IF NOT #VALID
        ESCAPE ROUTINE
      END-IF
    END-IF                                                                              /* RE1 end
  WHEN PREFIX <> ' ' AND #VALIDATE-FLAG(6) = 'Y'               /* Prefix
    PERFORM VALIDATE-PREFIX
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN #SYSTEM NE 'CRM' AND #VALIDATE-FLAG(7) = 'Y'                                 /* Gender
    PERFORM VALIDATE-GENDER
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN SSN-PROTECT <> ' ' AND #VALIDATE-FLAG(12) = 'Y'                   /* SSN Protection Code   RE1
    PERFORM VALIDATE-SSN-PROTECT
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN BIRTH-CERT-CODE <> ' ' AND #VALIDATE-FLAG(14) = 'Y'            /* Birth Certificate Code   RE1
    PERFORM VALIDATE-BCC
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN DEATH-CERT-CODE <> ' ' AND #VALIDATE-FLAG(15) = 'Y'            /* Death Certificate Code   RE1
    PERFORM VALIDATE-DCC
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN MARRIAGE-CERT-CODE <> ' ' AND #VALIDATE-FLAG(16) = 'Y'         /* Marriage Certificate Code   RE1
    PERFORM VALIDATE-MCC
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN #PERSONAL-INFO.CONTACT-TYPE = 'O' AND #VALIDATE-FLAG(22) = 'Y' /* Firm/Organization Name   RE1
    PERFORM VALIDATE-FIRM-NAME
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN FIRM-ESTABLISHED-DATE > 0 AND #VALIDATE-FLAG(23) = 'Y'         /* Firm Established Date    RE1
    PERFORM VALIDATE-FED
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN FIRM-CERT-CODE <> ' ' AND #VALIDATE-FLAG(24) = 'Y'            /* Firm Certiifcate Code    RE1
    PERFORM VALIDATE-FCC
    IF #SYSTEM = 'UNIX' AND NOT #VALID
      ESCAPE ROUTINE
    END-IF
  WHEN NONE
    IGNORE
END-DECIDE
*
IF #SYSTEM = 'MemberCenter'                /* YK1
  IF #I = 0 THEN #I := 1 END-IF            /* YK1
  RESIZE ARRAY #ERROR-CODE TO (*:#I)       /* YK1
END-IF
************************************
DEFINE SUBROUTINE VALIDATE-LAST-NAME       /* RE1
************************************
IF #PERSONAL-INFO.CONTACT-TYPE = 'O' AND LAST-NAME = ' '
  ESCAPE ROUTINE
END-IF
*
ADD 1 TO #I
IF LAST-NAME = MASK(' ')
  MOVE 243 TO #ERROR-CODE(#I)                                    /* Last Name. First symbol is blank.
  ESCAPE ROUTINE
END-IF
*
#SAVE-NAME := LAST-NAME
PERFORM VALIDATE-NAMES
IF #MSG <>  " "
  MOVE 244 TO #ERROR-CODE(#I)                                    /* Last Name. Incorrect symbol.
  ESCAPE ROUTINE
END-IF
MOVE TRUE TO #VALID
SUBTRACT 1 FROM #I
*
END-SUBROUTINE
*************************************
DEFINE SUBROUTINE VALIDATE-FIRST-NAME      /* RE1
*************************************
IF FIRST-NAME = ' '
  IF #PERSONAL-INFO.CONTACT-TYPE = 'O'
    ESCAPE ROUTINE
  END-IF
  FIND CNT-V WITH CONTACT-ID = #PERSONAL-INFO.CONTACT-ID
    IF CNT-V.ID-NUMBER > 0
      MOVE TRUE TO #EXCEPTION
    ELSE
      ESCAPE ROUTINE
    END-IF
  END-FIND
END-IF
*
ADD 1 TO #I
#SAVE-NAME := FIRST-NAME
PERFORM VALIDATE-NAMES
IF #MSG <>  " "
  MOVE 246 TO #ERROR-CODE(#I)                                    /* First Name. Incorrect symbol.
  ESCAPE ROUTINE
END-IF
*
IF FIRST-NAME = MASK(' ')
  IF #PERSONAL-INFO.CONTACT-TYPE = 'O' OR NOT #EXCEPTION
    IGNORE
  ELSE
    MOVE 245 TO #ERROR-CODE(#I)                                    /* First Name. First symbol is blank.
    ESCAPE ROUTINE
  END-IF
END-IF
*
MOVE TRUE TO #VALID
SUBTRACT 1 FROM #I
*
END-SUBROUTINE
**************************************
DEFINE SUBROUTINE VALIDATE-MIDDLE-NAME    /* RE1
**************************************
ADD 1 TO #I
#SAVE-NAME := MIDDLE-NAME
PERFORM VALIDATE-NAMES
IF #MSG <>  " "
  MOVE 247 TO #ERROR-CODE(#I)                                    /* Middle Name. Incorrect symbol.
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
*********************************
DEFINE SUBROUTINE VALIDATE-SUFFIX        /* RE1
*********************************
ADD 1 TO #I
#SAVE-NAME := SUFFIX
PERFORM VALIDATE-NAMES
IF #MSG <>  " "
  MOVE 248 TO #ERROR-CODE(#I)                                    /* Suffix. Incorrect symbol.
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
********************************
DEFINE SUBROUTINE VALIDATE-NAMES
********************************
EXAMINE FULL #SAVE-NAME FOR FULL " " REPLACE "Z"
EXAMINE #SAVE-NAME FOR '-' REPLACE 'Z'
EXAMINE #SAVE-NAME FOR "'" REPLACE 'Z'
EXAMINE #SAVE-NAME FOR '"' REPLACE 'Z'
EXAMINE #SAVE-NAME FOR '/' REPLACE 'Z'
IF  #SAVE-NAME NE MASK(UUUUUUUUUUUUUUUUUUUUUUUUU)
  #MSG := "Incorrect symbol"
  ESCAPE ROUTINE
END-IF
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-SSN
******************************                                   /* RE1 START
ADD 1 TO #I
IF SSN-A NE MASK(NNNNNNNNN)
  MOVE 217 TO #ERROR-CODE(#I)                                    /* SSN must be numeric.
  ESCAPE ROUTINE
END-IF
*
FIND CNT-V WITH SSN = #PERSONAL-INFO.SSN
  IF CNT-V.CONTACT-ID NE #PERSONAL-INFO.CONTACT-ID
      AND CNT-V.CONTACT-TYPE = #PERSONAL-INFO.CONTACT-TYPE       /* NG1
      AND #PERSONAL-INFO.CONTACT-TYPE NE 'O'                     /* NG1
    MOVE 253 TO #ERROR-CODE(#I)                                  /* SSN already exists in the system. Please verify.
    ESCAPE ROUTINE
  END-IF
END-FIND
SUBTRACT 1 FROM #I
*
END-SUBROUTINE
**************************************
DEFINE SUBROUTINE VALIDATE-SSN-PROTECT    /* RE1
**************************************
#MSG := FUNCTION-CV-CHECK (<'028',SSN-PROTECT>)
IF #MSG NE ' '
  ADD 1 TO #I
  MOVE 225 TO #ERROR-CODE(#I)                                    /* SSN PROTECTION must be 'Y' or 'N'.
ELSE
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-DOB
******************************
ADD 1 TO #I
DECIDE FOR FIRST CONDITION
  WHEN DATE-OF-BIRTH NE MASK(YYYYMMDD)
    MOVE 200 TO #ERROR-CODE(#I)                                  /* Invalid date format - must be MMDDYYYY.
  WHEN DATE-OF-BIRTH > *DATN
    MOVE 201 TO #ERROR-CODE(#I)                                  /* Future Date of Birth is invalid.
  WHEN DATE-OF-BIRTH < 19000000                                  /* RE1
    MOVE 202 TO #ERROR-CODE(#I)                                  /* Date cannot be before 1900.   RE1
  WHEN #PERSONAL-INFO.DATE-OF-DEATH > 0 AND DATE-OF-BIRTH > #PERSONAL-INFO.DATE-OF-DEATH
    MOVE 203 TO #ERROR-CODE(#I)                                  /* Date of Birth must precede Date of Death.
  WHEN DATE-OF-MARRIAGE > 0 AND DATE-OF-BIRTH > DATE-OF-MARRIAGE
    MOVE 204 TO #ERROR-CODE(#I)                                  /* Date of Birth must precede Date of Marriage.
  WHEN DATE-OF-DIVORCE > 0 AND DATE-OF-BIRTH > DATE-OF-DIVORCE
    MOVE 205 TO #ERROR-CODE(#I)                                  /* Date of Birth must precede Date of Divorce.
  WHEN NONE
    SUBTRACT 1 FROM #I
    MOVE TRUE TO #VALID
END-DECIDE
**DISPLAY DATE-OF-BIRTH DATE-OF-DEATH #VALID #I
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-DOD
******************************
ADD 1 TO #I
DECIDE FOR FIRST CONDITION
  WHEN #PERSONAL-INFO.DATE-OF-DEATH NE MASK(YYYYMMDD)
    MOVE 200 TO #ERROR-CODE(#I)                                  /* Invalid date format - must be MMDDYYYY.
  WHEN #PERSONAL-INFO.DATE-OF-DEATH > *DATN
    MOVE 214 TO #ERROR-CODE(#I)                                  /* Future Date of Death is invalid.
  WHEN #PERSONAL-INFO.DATE-OF-DEATH < 19000000
    MOVE 202 TO #ERROR-CODE(#I)                                  /* Date cannot be before 1900.
  WHEN NONE
    SUBTRACT 1 FROM #I
    MOVE TRUE TO #VALID
END-DECIDE
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-DOM
******************************
ADD 1 TO #I
DECIDE FOR FIRST CONDITION
  WHEN DATE-OF-MARRIAGE NE MASK(YYYYMMDD)
    MOVE 200 TO #ERROR-CODE(#I)                                  /* Invalid date format - must be MMDDYYYY.
  WHEN DATE-OF-MARRIAGE > *DATN
    MOVE 215 TO #ERROR-CODE(#I)                                  /* Future Date of Marriage is invalid.
  WHEN DATE-OF-MARRIAGE < 19000000
    MOVE 202 TO #ERROR-CODE(#I)                                  /* Date cannot be before 1900.
  WHEN DATE-OF-DIVORCE > 0 AND DATE-OF-MARRIAGE > DATE-OF-DIVORCE
    MOVE 206 TO #ERROR-CODE(#I)                                  /* Marriage must precede divorce.
  WHEN #PERSONAL-INFO.DATE-OF-DEATH > 0 AND DATE-OF-MARRIAGE > #PERSONAL-INFO.DATE-OF-DEATH
    MOVE 207 TO #ERROR-CODE(#I)                                  /* Marriage must precede death.
*  WHEN ROLE = 'K' OR = 'G' OR = 'D'
*    MOVE 208 TO #ERROR-CODE(#I)                                  /* Date of Marriage not allowed for this Role.
  WHEN NONE
    SUBTRACT 1 FROM #I
    MOVE TRUE TO #VALID
END-DECIDE
*
END-SUBROUTINE
********************************
DEFINE SUBROUTINE VALIDATE-DODIV
********************************
ADD 1 TO #I
DECIDE FOR FIRST CONDITION
  WHEN DATE-OF-DIVORCE NE MASK(YYYYMMDD)
    MOVE 200 TO #ERROR-CODE(#I)                                  /* Invalid date format - must be MMDDYYYY.
  WHEN DATE-OF-DIVORCE > *DATN
    MOVE 216 TO #ERROR-CODE(#I)                                  /* Future Date of Divorce is invalid.
  WHEN DATE-OF-DIVORCE < 19000000
    MOVE 202 TO #ERROR-CODE(#I)                                  /* Date cannot be before 1900.
  WHEN #PERSONAL-INFO.DATE-OF-DEATH > 0 AND DATE-OF-DIVORCE > #PERSONAL-INFO.DATE-OF-DEATH
    MOVE 209 TO #ERROR-CODE(#I)                                  /* Divorce must precede death.
*  WHEN ROLE = 'K' OR = 'G' OR = 'D'
*    MOVE 210 TO #ERROR-CODE(#I)                                  /* Date of Divorce not allowed for this Role.
  WHEN NONE
    SUBTRACT 1 FROM #I
    MOVE TRUE TO #VALID
END-DECIDE
*
END-SUBROUTINE
*********************************
DEFINE SUBROUTINE VALIDATE-PREFIX
*********************************
* yk1 start
DECIDE FOR EVERY CONDITION
  WHEN GENDER = 'F' AND PREFIX = 'MR' or = 'Mr'
    #I := #I + 1
* 'Gender and Prefix mismatch'
    MOVE 213 TO #ERROR-CODE(#I)                                  /* Gender and Prefix mismatch
  WHEN GENDER = 'M' AND PREFIX = 'MISS' OR = 'MRS' OR = 'MS' OR = 'Miss' OR = 'Mrs' OR = 'Ms'
    #I := #I + 1
* 'Gender and Prefix mismatch'
    MOVE 213 TO #ERROR-CODE(#I)                                  /* Gender and Prefix mismatch
  WHEN NONE
    MOVE TRUE TO #VALID
END-DECIDE
*
END-SUBROUTINE
*********************************
DEFINE SUBROUTINE VALIDATE-GENDER      /* RE1
*********************************
ADD 1 TO #I
DECIDE FOR EVERY CONDITION
  WHEN NOT (GENDER = ' ' OR = 'F' OR = 'M')
    MOVE 223 TO #ERROR-CODE(#I)                                  /* Gender must be F OR M OR Blank
  WHEN GENDER = 'F' AND PREFIX = 'MR' or = 'Mr'
    MOVE 213 TO #ERROR-CODE(#I)                                  /* Gender and Prefix mismatch
  WHEN GENDER = 'M' AND PREFIX = 'MISS' OR = 'MRS' OR = 'MS' OR = 'Miss' OR = 'Mrs' OR = 'Ms'
    MOVE 213 TO #ERROR-CODE(#I)                                  /* Gender and Prefix mismatch
  WHEN NONE
    MOVE TRUE TO #VALID
    SUBTRACT 1 FROM #I
END-DECIDE
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-BCC  /* RE1
******************************
#MSG := FUNCTION-CV-CHECK (<'033',BIRTH-CERT-CODE>)
IF #MSG NE ' '
  ADD 1 TO #I
  MOVE 226 TO #ERROR-CODE(#I)                                    /* Invalid Birth Cert. Code
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-DCC  /* RE1
******************************
#MSG := FUNCTION-CV-CHECK (<'033',DEATH-CERT-CODE>)
IF #MSG NE ' '
  ADD 1 TO #I
  MOVE 226 TO #ERROR-CODE(#I)                                    /* Invalid Death Cert. Code
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-MCC  /* RE1
******************************
#MSG := FUNCTION-CV-CHECK (<'033',MARRIAGE-CERT-CODE>)
IF #MSG NE ' '
  ADD 1 TO #I
  MOVE 228 TO #ERROR-CODE(#I)                                    /* Invalid Marriage Cert. Code
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
*************************************
DEFINE SUBROUTINE VALIDATE-FIRM-NAME  /* RE1
*************************************
IF FIRM-ORGANIZATION-NAME = ' '
  ADD 1 TO #I
  MOVE 229 TO #ERROR-CODE(#I)                                    /* Organization name is required
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-FED /* RE1
******************************
ADD 1 TO #I
DECIDE FOR FIRST CONDITION
  WHEN FIRM-ESTABLISHED-DATE NE MASK(YYYYMMDD)
    MOVE 200 TO #ERROR-CODE(#I)                                  /* Invalid date format - must be MMDDYYYY.
  WHEN FIRM-ESTABLISHED-DATE > *DATN
    MOVE 302 TO #ERROR-CODE(#I)                                  /* Future Establishment Date is invalid.
  WHEN FIRM-ESTABLISHED-DATE < 19000000
    MOVE 202 TO #ERROR-CODE(#I)                                  /* Date cannot be before 1900.
  WHEN NONE
    SUBTRACT 1 FROM #I
    MOVE TRUE TO #VALID
END-DECIDE
*
END-SUBROUTINE
******************************
DEFINE SUBROUTINE VALIDATE-FCC  /* RE1
******************************
#MSG := FUNCTION-CV-CHECK (<'033',FIRM-CERT-CODE>)
IF #MSG NE ' '
  ADD 1 TO #I
  MOVE 230 TO #ERROR-CODE(#I)                                    /* Invalid Firm Cert. Code
ELSE
  SUBTRACT 1 FROM #I
  MOVE TRUE TO #VALID
END-IF
*
END-SUBROUTINE
**************
END












