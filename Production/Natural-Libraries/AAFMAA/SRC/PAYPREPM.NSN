* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
**********************************************************************************
* Pgm ID : PAYPREPM
*
* Function : pay premium amounts per policy
*
* 10/20/2011 vt Initial creation
* 05/25/2012 vt1 Fix payment in the future for 14 months ahead starting from current date of payment
* 12/19/2013 vt2 Store plan-type to sg-category-2 field on TA file.
* 01/03/2014 TT1 STABILITY PROJECT FOR 1MIL POLICY SUPPORT
* 02/10/2014 vt3 /Ticket 2579/
* 02/21/2014 YK1 Keep paid to date for Rider in sync with policy paid to date
* 06/13/2014 TT2 Contact Normalization DOB and Sex
* 09/09/2014 vt4 /Ticket 3047/ Fix the months paid when the BADJ amount is greater than monthly due amount.
* 05/11/2015 vt5 /Ticket 3518/ populating policy number and  plan  into TA records for BADJ transaction
* 01/09/2017 VT6 ADD PS PAYMENTS /TICKET 2177/
**********************************************************************************
DEFINE DATA PARAMETER
1 #REST-AMT               (N7.2)
1 #STATUS-ISN             (P8)
1 CC-PAYMENT
  2 PARM-DATE             (N8.0)
  2 ID-NUMBER             (N6.0)
  2 INSURED-NAME          (A50)
  2 C@PAY-POLICY          (N2.0)
  2 PAY-POLICY     (1:9)
    3 POLICY-NBR          (A16)
    3 SEGMENT             (I2)
    3 CAP-POLICY          (A1)
    3 PLAN-TYPE           (A3)
    3 ISSUE-DATE          (N8.0)
    3 FACE-AMOUNT         (N7.2)
    3 MAX-PREMIUMS        (N4)
    3 MIN-PREMIUMS        (N2)
    3 DEFAULT-PREM        (N2)
    3 C@AVAILABLE-PAYMENT (N2.0)
    3 AVAILABLE-PAYMENT (1:10)
      4 PAYMENT-NOTE      (A) DYNAMIC
      4 CC-PAYABLE        (A1)
      4 VAR-AMOUNT        (A1)
      4 EXCEED-AMT        (A1)
      4 TRAN-TYPE         (A6)                    /* VT6
      4 PAID-TO-DATE      (N8.0)
      4 PAYMENT-MODE      (A1)
      4 DEFAULT-AMOUNT    (N6.2)
      4 DUE-AMOUNT        (N6.2)
1 #TIMN               (N7)
1 #ERROR-MESSAGE      (A75)
*
LOCAL USING C2500AAM
LOCAL USING SVCA0003                              /* VT6
LOCAL
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER              (N6)
  2 MEMBER-CONTACT-ID                        /* TT2
  2 NAME                   (A25)
  2 PROCESS-IND            (A1)
  2 STATUS                 (A1/9)
  2 PAY-STATUS             (A2/9)
  2 MODE                   (A1/9)
  2 PLAN                   (A3/9)
  2 ISSUE-DATE             (N8/9)
  2 PAID-TO-DATE           (N8/9)
  2 REDEFINE PAID-TO-DATE
    3 PAID-TO-DATE-YYYYMM    (N6/9)
    3 PAID-TO-DATE-DD        (N2/9)
  2 PAID-UP-DATE           (N8/9)
  2 ANNUAL-PREM            (P5.2/9)
  2 MTD-ACV-PREM-ADJ       (P7.2/9)
*  2 DATE-OF-BIRTH          (N8)                /* TT2
  2 MONTH-ALLOC-AMT        (P7.2/9)             /* TT1
  2 X-BILL-ADJUST          (P5.2/9)
  2 X-BILL-DOLLAR          (P5.2/9)
  2 OWNERSHIP-FLAG         (A1/9)
  2 DUES-ALL-PAID-IND      (A1)
  2 DUES-BALANCE           (P5.2)
  2 DUES-FPF               (P3.2)
  2 DUES-TOT-PAID          (P5.2)
  2 INTRO-FLAG             (A1)
  2 RID-PLAN               (A2/9)
  2 RID-EFF-DT             (N8/9)
  2 RID-PD-TO              (N8/9)
  2 X-RID-FPF              (9)
  2 X-RID-BALANCE          (9)
  2 RID-TOT-PAID
  2 DEBIT-CREDIT-AMT                              /* VT6
*
1 AR-V VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER         (N6)
  2 NAME              (A25)
  2 TRANSACTION-DATN  (P9)
  2 TRANSACTION-TIMN  (P7)
  2 CASH-CODE         (A1)
  2 CLERK-ID          (A3)
  2 TERMINAL-ID       (A8)
  2 PROCESS-IND       (A1)
  2 POLICY-NUMBER     (A16)
  2 AALP-FLAG         (A1)
  2 TXN-CODE          (A4)
  2 TXN-ACCT-NUMBER   (N3)
  2 MESSAGE-CODE      (A1)
  2 CREDIT-AMOUNT     (P7.2)
  2 ACCT-DATE         (N8)
  2 DEBIT-AMOUNT      (P7.2)
  2 DESCRIPTION       (A20)
  2 SG-CATEGORY-1     (A2/15)
  2 SG-CATEGORY-2     (A2/15)
  2 SG-AMOUNT         (N6.2/5)
*
1 #TOT-PREP-AMT       (P7.2/9,4)                  /* vt6  
1 #POL-NBR            (A16)
1 #POL-NBR-X          (A16)
1 #LXX                (I2)
*
1 #I1                      (I2)
1 #L                       (I2)
1 #M                       (I2)
1 #N                       (I2)
1 #CC-X                    (I2)
1 #ILN1                    (I2)
1 #ILN2                    (I2)
1 #LX                      (I2)
1 #PREP-AMT                (P7.2)
1 #INP-AMT                 (P7.2)
1 #INP-TR-CD               (A4)
1 #CASH-CODE               (A1)
1 #ISSUE-DATE              (N8)
1 REDEFINE #ISSUE-DATE
  2 #ISSUE-DATE-A          (A8)
1 #TERM                    (L)
1 #DATE-MMDDYYYY           (N8)
1 REDEFINE #DATE-MMDDYYYY
  2 #MMDD                  (N4)
  2 #YYYY                  (N4)
1 REDEFINE #DATE-MMDDYYYY
  2 #DATE-MMDDYYYY-A       (A8)
1 #UPDATE-MODE             (L) INIT<TRUE>
1 #SG-TBL                  (15)
  2 #SG-CAT1               (A2)
  2 #SG-CAT2               (A2)
  2 #SG-AMT                (N6.2)
1 #DATN                    (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY             (N4)
  2 #DATN-MM               (N2)
  2 #DATN-DD               (N2)
1 #DATN-AA                 (A8)
1 REDEFINE #DATN-AA
  2 #DATN-N                (N8)
  2 REDEFINE #DATN-N
    3 #DATN-N-YYYYMM       (N6)
    3 #DATN-N-DD           (N2)
1 #DATN-D                  (D)
1 #DATN-A                  (A10)
1 #MODE                     (A1)
1 #CAP-POLICY               (L)
1 #WEB-CHARGE               (A1) INIT <'Y'>
1 #1-YR-AGO-A               (A8)
1 REDEFINE #1-YR-AGO-A
  2 #1-YR-AGO               (N8)
1 #YYYYMMDD  (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY     (N4)
  2 #MM       (N2)
  2 #DD       (N2)
*
1 #OUT-REC            (A100)
1 #TAB                (A1) INIT <H'09'>
1 #TRAN-CODE          (A4)
1 #AMOUNT             (A10)
1 #ORIG-MODE          (A1/9)
1 #BILL-ADJ-AMT       (P7.2)
1 #NEW-ADJ-AMT        (P7.2)
1 #HAS-ADJ            (L)
1 #DIFFERENCE         (P7.2)
1 #X                  (N7.2)              /* VT 05/23/2012
1 #AR-ADJUSTMENT      (N7.2/9)            /* VT 05/23/2012
1 #ST-ADJUSTMENT      (N7.2)              /* VT 05/23/2012
1 #J                  (I2)
1 #PLAN               (A3)                /* VT2
1 DATE-OF-BIRTH       (N8)                /* TT2
1 #source-prog        (a8)               /* vt4
1 #badj-left          (n7.2)             /* vt4
1 #IS-PS              (L)                 /* VT6
1 #MSG                (A) DYNAMIC         /* VT6
*
1 ACCT-REG-V VIEW OF A-ACCOUNTING-REGISTER      /* vt6  \/
  2 ID-NUMBER (N6)
  2 TRANSACTION-DATN (P9)
  2 TRANSACTION-TIMN (P7)
  2 TXN-CODE (A4)
  2 SEQUENCE-NUM (N1)
  2 NAME (A25)
  2 TXN-ACCT-NUMBER (N3)
  2 ACCT-DATE (N8)
  2 DATE-LAST-ACCT-UPDATE (N8)
  2 DEBIT-AMOUNT (P7.2)
  2 CREDIT-AMOUNT (P7.2)
  2 DESCRIPTION (A20)
  2 MESSAGE-CODE (A1)
  2 AALP-FLAG (A1)
  2 CLERK-ID (A3)
  2 TERMINAL-ID (A8)
  2 CASH-CODE (A1)
  2 PROCESS-IND (A1)
  2 USER-COMPANY (A1)
  2 MONTH-END (A1)
  2 POLICY-NUMBER (A16)
  2 ACTIVITY-TYPE (A3)
  2 STATUS-TYPE (A2)
  2 C*SUNGARD-INFO
  2 SUNGARD-INFO (1:15) /* PE
    3 SG-CATEGORY-1 (A2)
    3 SG-CATEGORY-2 (A2)
    3 SG-AMOUNT (N6.2)                          /* vt6  /\
*
END-DEFINE
*
IF #REST-AMT <= 0
  ESCAPE ROUTINE
END-IF
*
GET ST-V #STATUS-ISN
*
#DATN          := *DATN
#DATN-DD       := 15
*
MOVE #DATN TO #DATN-N
MOVE EDITED #DATN-AA TO #DATN-D (EM=YYYYMMDD)
#DATN-D := #DATN-D + 365 + 60
MOVE EDITED #DATN-D (EM=YYYYMMDD) TO #DATN-AA
*
#DATE-MMDDYYYY := FUNCTION-DATE(<#DATN>)
#YYYYMMDD      := *DATN
*
SUBTRACT 1 FROM #YYYYMMDD.#YYYY
MOVE #YYYYMMDD TO  #1-YR-AGO
*

FOR1.
FOR #N 1 TO 14   /* MAX 14 MONTHS IN THE FUTURE
  FOR2.
  FOR #L 1 C@PAY-POLICY
    IF CAP-POLICY (#L) NE 'Y' AND ST-V.PAID-TO-DATE-YYYYMM (#L)< #DATN-N-YYYYMM
      FOR3.
      FOR #M 1 C@AVAILABLE-PAYMENT(#L)
        IF PAYMENT-MODE (#L, #M) = '0' OR = '1' OR = '2' OR = '4' OR = 'G' OR = 'E'
          ESCAPE BOTTOM (FOR3.)
        END-IF
        if tran-type(#l,#m) = 'BADJ'                                        /* vt4 \/
          if x-bill-adjust (#l) ge #rest-amt
            compute #badj-left := x-bill-adjust(#l) - #rest-amt
          else
            reset #badj-left
          end-if
        end-if                                                              /* vt4 /
        IF TRAN-TYPE(#L,#M) =  'DUEPPS'                                    /* VT6 \/
          MOVE TRUE TO #IS-PS
        ELSE
          RESET #IS-PS
        END-IF                                                             /* VT6/\
        IF TRAN-TYPE(#L,#M) = 'PREP' OR= 'DUEP' OR= 'RIDP'
            OR = 'DUEPPS'                                                  /* VT6
          MOVE POLICY-NBR (#L) TO #POL-NBR
          IF  #REST-AMT GE DUE-AMOUNT (#L,#M)
            COMPUTE #REST-AMT = #REST-AMT - DUE-AMOUNT (#L,#M)
            PERFORM ONE-MONTH-PAYMENT
          ELSE
            MOVE TRUE TO #HAS-ADJ
            IF TRAN-TYPE (#L,1) = 'BADJ'      /* ADJUSTMENT IS THE FIRST TRANSACTION #M = 1
              MOVE DUE-AMOUNT (#L,1) TO #BILL-ADJ-AMT
            ELSE
              RESET #BILL-ADJ-AMT
            END-IF
            #X := DUE-AMOUNT (#L,#M) - ( #REST-AMT - #BILL-ADJ-AMT )
            DECIDE FOR FIRST CONDITION
              WHEN #X = 0
                PERFORM ONE-MONTH-PAYMENT /* AR: DUE-AMOUNT (#L,#M);   ST: 1 MONTH PAYMENT
                #AR-ADJUSTMENT(#L) := #BILL-ADJ-AMT /* AR: ADJUSTMENT #BILL-ADJ-AMT
                RESET #ST-ADJUSTMENT
              WHEN #X > 0
                #AR-ADJUSTMENT(#L) := #REST-AMT  /* AR: ADJ #REST-AMT
                #ST-ADJUSTMENT := #BILL-ADJ-AMT - #REST-AMT
              WHEN #X < 0
                PERFORM ONE-MONTH-PAYMENT  /* AR: DUE-AMOUNT (#L,#M);  ST: 1 MONTH PAYMENT
                #AR-ADJUSTMENT (#L) := #REST-AMT - DUE-AMOUNT (#L,#M) /* AR: ADJ DUE-AMOUNT (#L,#M)
                #ST-ADJUSTMENT := #BILL-ADJ-AMT - #AR-ADJUSTMENT (#L)
              WHEN ANY
                PERFORM APPLY-BADJ
                RESET #REST-AMT
              WHEN NONE IGNORE
            END-DECIDE
            ESCAPE BOTTOM  (FOR1.)
          END-IF
        END-IF
      END-FOR
    END-IF
  END-FOR
END-FOR
*
FOR #L 1 TO C@PAY-POLICY
  #ISSUE-DATE    := CC-PAYMENT.ISSUE-DATE (#L)
  MOVE POLICY-NBR ( #L ) TO #POL-NBR
  #CASH-CODE:= 'I'
  DECIDE FOR EVERY CONDITION
    WHEN #TOT-PREP-AMT ( #L,1) GT 0
      #SCR-TRAN-AMT (1) := #TOT-PREP-AMT ( #L, 1 )
      #SCR-TRAN-CODE(1) := 'PREP'
      PERFORM PREPARE-ACCT-REG                             /* VT 09052012
      PERFORM WRITE-REPORT                                 /* VT 09052012
    WHEN #TOT-PREP-AMT ( #L,2) GT 0
      #SCR-TRAN-AMT (1) := #TOT-PREP-AMT ( #L, 2 )
      #SCR-TRAN-CODE(1) := 'DUEP'
      PERFORM PREPARE-ACCT-REG                             /* VT 09052012
      PERFORM WRITE-REPORT                                 /* VT 09052012
    WHEN #TOT-PREP-AMT ( #L,3) GT 0
      #SCR-TRAN-AMT (1) := #TOT-PREP-AMT ( #L, 3 )
      #SCR-TRAN-CODE(1) := 'RIDP'
      PERFORM PREPARE-ACCT-REG                             /* VT 09052012 \/
      PERFORM WRITE-REPORT
    WHEN #TOT-PREP-AMT ( #L,4) GT 0                       /* vt 01/17/2017 \/
      #scr-tran-amt(1) := #tot-prep-amt (#l, 4)
      perform apply-ps
      perform write-report                               /* vt 01/17/2017 /\
*     WHEN ANY
*       PERFORM PREPARE-ACCT-REG
*       PERFORM WRITE-REPORT                               /* VT 09052012 /\
    WHEN NONE IGNORE
  END-DECIDE
END-FOR
*
FOR #L 1 TO C@PAY-POLICY
  IF #AR-ADJUSTMENT (#L) > 0   /* ADJUUSTMENT WITH NO PAYMENTS
      AND #TOT-PREP-AMT ( #L, 1 ) = 0
      AND #TOT-PREP-AMT ( #L, 2 ) = 0
      AND #TOT-PREP-AMT ( #L, 3 ) = 0
    #SCR-TRAN-CODE(1) := 'BADJ'
    #plan := st-v.plan(#l)                                                      /* vt5
    #pol-nbr := policy-nbr ( #L )                                               /* vt5
    PERFORM PREPARE-ACCT-REG
    PERFORM WRITE-REPORT
  END-IF
END-FOR
*
*****************
DEFINE SUBROUTINE ONE-MONTH-PAYMENT
*****************
*
MOVE SEGMENT(#L) TO #CC-X
#INP-AMT   := DUE-AMOUNT (#L,#M)
#CASH-CODE := 'I'
DECIDE ON FIRST VALUE OF TRAN-TYPE(#L,#M)
  VALUE 'PREP'
    ADD DUE-AMOUNT (#L,#M) TO #TOT-PREP-AMT ( #L,1 )
    #INP-TR-CD := 'PREP'
    PERFORM APPLY-PREP
  VALUE 'DUEPPS'                                                             /* VT6
    IF #IS-PS                                                                /* VT6
      ADD DUE-AMOUNT (#L,#M) TO #TOT-PREP-AMT ( #L,4 )                       /* vt6  
    END-IF                                                                   /* VT6
  VALUE 'DUEP'
    ADD DUE-AMOUNT (#L,#M) TO #TOT-PREP-AMT ( #L,2 )
    #INP-TR-CD := 'DUEP'
    PERFORM APPLY-DUEP
  VALUE 'RIDP'
    ADD DUE-AMOUNT (#L,#M) TO #TOT-PREP-AMT ( #L,3 )
    #INP-TR-CD := 'RIDP'
    PERFORM APPLY-RIDP
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-PREP
*****************
*
MOVE 1 TO #ILN1
MOVE #CC-X TO #LX
MOVE ST-V.ID-NUMBER TO #SCR-ID-SSN    (1)
#SCR-EFF-DT (1) := #DATE-MMDDYYYY-A
*
MOVE #INP-TR-CD     TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT       TO #SCR-TRAN-AMT  (1)
*
* WRITE '=' ST-V.ID-NUMBER '=' #CC-X '=' #LX
DECIDE ON FIRST VALUE ST-V.MODE(#LX)
  VALUE '4','2','1'
    #MODE := '0'
  VALUE 'A','S','Q'
    #MODE := 'M'
  VALUE 'G'
    IF ST-V.PAY-STATUS (#LX) = '21'
      #MODE := ST-V.MODE(#LX)
    ELSE
      #MODE := 'M'
    END-IF
  NONE VALUE
    #MODE := ST-V.MODE(#LX)
END-DECIDE
*
MOVE ST-V.PLAN(#LX) TO #PLAN             /* vt2
move 'NEWINVP' to #source-prog                                      /* vt4
RESET DATE-OF-BIRTH
DATE-OF-BIRTH := GET-DATE-OF-BIRTH(<ST-V.MEMBER-CONTACT-ID>)        /* TT2
CALLNAT 'CPREPSAM' #SCR-LINES
  DATE-OF-BIRTH                                                     /* TT2
  ST-V.STATUS            (#LX)
  ST-V.PAY-STATUS        (#LX)
  #MODE
  ST-V.PLAN              (#LX)
  ST-V.ISSUE-DATE        (#LX)
  ST-V.PAID-TO-DATE      (#LX)
  ST-V.PAID-UP-DATE      (#LX)
  ST-V.ANNUAL-PREM       (#LX)
  ST-V.MTD-ACV-PREM-ADJ  (1:9)
  ST-V.MONTH-ALLOC-AMT   (#LX)
  ST-V.X-BILL-ADJUST     (#LX)
  ST-V.X-BILL-DOLLAR     (#LX)
  ST-V.OWNERSHIP-FLAG    (#LX)
  ST-V.DUES-ALL-PAID-IND
  ST-V.DUES-BALANCE
  ST-V.DUES-FPF
  ST-V.DUES-TOT-PAID
  ST-V.INTRO-FLAG
  ST-V.RID-PLAN          (#LX)
  ST-V.RID-EFF-DT        (#LX)
  ST-V.RID-PD-TO         (#LX)
*
  #ILN1
  #ILN2
  #UPDATE-MODE
  #SG-TBL (1:15)
  #LX
  #CAP-POLICY                 /* YK3
  #ERROR-MESSAGE              /* YK1
  #WEB-CHARGE                 /* YK1
  #source-prog                /* vt4
*
UPDATE (0227)
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-DUEP
*****************
*
MOVE 1 TO #ILN1
MOVE ST-V.ID-NUMBER   TO #SCR-ID-SSN    (1)
MOVE #DATE-MMDDYYYY-A TO #SCR-EFF-DT (1)
MOVE #INP-TR-CD       TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT         TO #SCR-TRAN-AMT  (1)
*
CALLNAT 'CDUESSAM' #SCR-LINES
  ST-V.DUES-FPF
  ST-V.DUES-BALANCE
  ST-V.DUES-TOT-PAID
  #ILN1
  #ILN2
  #SG-TBL (1:15)
  #ERROR-MESSAGE
*
UPDATE (0227)
*
END-SUBROUTINE
*
****************
DEFINE SUBROUTINE APPLY-PS                                             /* VT6    \/
*****************
*
RESET PARM-SVC
PARM-SVC.ACTION         := 'APPLY'
PARM-SVC.USER           := 'EDS'
PARM-SVC.SVC-MEMBER-ID  := ST-V.ID-NUMBER
PARM-SVC.SVC-PLAN       := 'PSM'
PARM-SVC.CASH-MODE      := #CASH-CODE
PARM-SVC.SVC-PAY-AMOUNT := #scr-tran-amt(1)
PARM-SVC.TRANSACTION-DATN := *datn
PARM-SVC.TRANSACTION-TIMN := #TIMN
CALLNAT 'SVCN0003' PARM-SVC #MSG 1X ST-V.DEBIT-CREDIT-AMT
*
END-SUBROUTINE                                                        /* VT6   /\
*
*****************
DEFINE SUBROUTINE APPLY-RIDP
*****************
*
MOVE 1 TO #ILN1
MOVE #CC-X TO #LX
MOVE ST-V.ID-NUMBER   TO #SCR-ID-SSN    (1)
MOVE #DATE-MMDDYYYY-A TO #SCR-EFF-DT (1)
MOVE #INP-TR-CD       TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT         TO #SCR-TRAN-AMT  (1)
*
CALLNAT 'CRIDRSAM' #SCR-LINES
  ST-V.X-RID-FPF     (1:9)
  ST-V.X-RID-BALANCE (1:9)
  ST-V.RID-TOT-PAID
  ST-V.RID-PLAN      (1:9)
  ST-V.RID-EFF-DT    (1:9)
  ST-V.RID-PD-TO     (1:9)
  #ORIG-MODE        (1:9)
*
  #ILN1
  #ILN2
  #SG-TBL (1:15)
  #LX
  #ERROR-MESSAGE
*
ST-V.RID-PD-TO(#CC-X) := ST-V.PAID-TO-DATE(#CC-X)             /* YK1
UPDATE (0227)
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-BADJ
*****************
MOVE #INP-TR-CD     TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT       TO #SCR-TRAN-AMT  (1)
*
** FOR #J 1 9
**  CALLNAT 'GPLNMSXX' #POL-NBR-X CC-PAYMENT.ID-NUMBER #J
**  IF #POL-NBR-X = POLICY-NBR ( #L )
move segment(#l) to #j
find st-v with st-v.id-number = cc-payment.ID-NUMBER
  if #badj-left ne 0                                    /* vt4
    st-v.x-bill-adjust (#j) := #badj-left               /* vt4
  else                                                  /* vt4
    st-v.X-BILL-ADJUST (#j) := #ST-ADJUSTMENT
  end-if                                                /* vt4
  UPDATE (0526)
END-FIND
***    ESCAPE BOTTOM
**  END-IF
**END-FOR
*
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE PREPARE-ACCT-REG
*****************
*
WRITE '=' #SCR-TRAN-AMT(1) '=' #ILN1
*
RESET AR-V
AR-V.ID-NUMBER               := ST-V.ID-NUMBER
AR-V.TRANSACTION-DATN        := *DATN
AR-V.TRANSACTION-TIMN        := #TIMN
AR-V.ACCT-DATE               := *DATN
AR-V.CASH-CODE               := 'I'
AR-V.NAME                    := ST-V.NAME
AR-V.CLERK-ID                := 'EDS'
AR-V.TERMINAL-ID             := *INIT-ID
AR-V.TXN-CODE                := #SCR-TRAN-CODE (1)
AR-V.PROCESS-IND             := ST-V.PROCESS-IND
AR-V.AALP-FLAG               := #SCR-ALP-CODE  (1)
AR-V.POLICY-NUMBER           := #POL-NBR
IF AR-V.TXN-CODE = 'BADJ'
  AR-V.CREDIT-AMOUNT         := #AR-ADJUSTMENT(#L)
  ar-v.sg-amount (1)         := #ar-adjustment(#l)           /* vt2
ELSE
  AR-V.SG-AMOUNT           (1) := #SCR-TRAN-AMT (1)
  IF #HAS-ADJ AND AR-V.TXN-CODE   = 'PREP'                           /* VT 08062013
      or ( #plan = 'SO' )                                  /* vt2
    AR-V.SG-AMOUNT         (2) := #AR-ADJUSTMENT(#L)
    AR-V.SG-CATEGORY-1     (2) := 'UN'
    AR-V.CREDIT-AMOUNT         := #SCR-TRAN-AMT(1) + #AR-ADJUSTMENT(#L)
  ELSE
    AR-V.CREDIT-AMOUNT         := #SCR-TRAN-AMT(1)
  END-IF
END-IF
AR-V.MESSAGE-CODE            := '1'
IF #plan = 'SO'
  ar-v.txn-code := 'DUEP'                                                      /* vt2
  ar-v.sg-category-1(1) := 'SO'                                                /* vt2
  AR-V.TXN-ACCT-NUMBER  := 422
ELSE
  AR-V.TXN-ACCT-NUMBER  := 420
END-IF
*
if #plan = 'OL' OR= '20P' OR= '30P' OR= '7P' OR= 'SO' OR= 'SPF' OR= 'FSO'          /* vt2  \/
    OR= 'LT' OR= 'RT' OR = 'GPL' OR = 'EZ' or = 'GP2'  or = 'AL' or = 'AL2'       /* vt5
  move #plan to ar-v.sg-category-2(1)
else
  if f-lt2-true(<#plan>)
    move 'VT' to ar-v.sg-category-2(1)
  else
    if (#plan = mask (NN'F'))
        or (#plan = mask (N'PF'))
        or (#plan = 'SPF')
      move 'FL' TO ar-v.sg-category-2(1)
    else
      move 'FX' to ar-v.sg-category-2(1)
    end-if
  end-if
end-if                                                                              /* vt2 /\
*
IF AR-V.TXN-CODE = 'BADJ'
  AR-V.TXN-ACCT-NUMBER  := 420
END-IF
IF AR-V.TXN-CODE = 'DUEP'
  AR-V.TXN-ACCT-NUMBER  := 422
END-IF
IF AR-V.TXN-CODE = 'RIDP'
  AR-V.TXN-ACCT-NUMBER  := 434
  AR-V.SG-CATEGORY-2(1) := 'RD'                       /* 09212012
END-IF
IF #TIMN = 0 AND AR-V.TXN-ACCT-NUMBER   NE 999
  AR-V.TXN-ACCT-NUMBER  := 999
END-IF
AR-V.DESCRIPTION             := 'INV'
*
IF #SCR-TRAN-CODE (1) = 'PREP' OR = 'RIDP'             /* 09212012
  IF #ISSUE-DATE GT #1-YR-AGO
    MOVE '1Y' TO AR-V.SG-CATEGORY-1 (1)
  ELSE
    MOVE 'RN' TO AR-V.SG-CATEGORY-1 (1)
  END-IF
END-IF
IF #PLAN = 'SO'                                               /* vt3 \/
  MOVE #PLAN TO AR-V.SG-CATEGORY-1(1)
END-IF                                                        /* vt3 /\
*
STORE AR-V
END-SUBROUTINE
*
*****************
define subroutine WRITE-REPORT
*****************
#TRAN-CODE := #SCR-TRAN-CODE (1)
compress #DATN-MM '/' #DATN-DD '/' #DATN-YYYY into #DATN-A leaving no
move edited #SCR-TRAN-AMT(1) (EM=ZZZZZZ9.99) to #AMOUNT
compress ST-V.ID-NUMBER #TAB
  #TRAN-CODE              #TAB
  #AMOUNT                 #TAB
  #DATN-A                 #TAB
  INTO #OUT-REC leaving no
write work 3 #OUT-REC
*
end-subroutine
*
END
