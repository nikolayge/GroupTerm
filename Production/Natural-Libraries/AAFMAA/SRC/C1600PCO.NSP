* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* PGM-ID: C1600PCO - Conservation Options
*
************************************************************************
*                       MODIFICATION LOG                               *
* USER   DATE      TAG     REASON                                      *
*                                                                      *
* PAM    09152004  PM1     Added note at top for bankruptcy cases.     *
* DRW    09282004  DW2     Cred Card processing                        *
* DRW    10252004  DW3     FIX "IN-THE-CORRIDOR" logic                 *
* PAM    12162004  PM4     Do not display splits for flex policies.    *
* PAM    12162004  PM5     Adjusted premiumn display to 5 digits.      *
* DRW    12232004  DW6     Show OLD/NEW/NXT IN-THE-CORRIDOR RPU's      *
* DRW    12272004  DW6     Increase VAR-LOAN to Alow 999,999.00        *
* PAM    01272005  PM7     Do not display 'PDUP' option if policy is   *
*                          overloaned (75% of CSV).                    *
* PAM    02102005  PM8     Increase #LUMP-PMT and #LUMP-SUM from 5.2   *
*                          to 6.2.                                     *
* PAM    02162005  PM9     RSGN request now 1 letter - do not need     *
*                          need to select a '1' or a '2'               *
* DRW    03052005  DW10    ADD AL (Annuity Life) Processing
* DRW    05152005  DW11    Add face Amt & TPP linkage to CVALUSXX
* DRW    05162005  DW12    Add Sex for LTII Rates
* DRW    05162005  DW12    Add Sex for LTII Rates
* DRW    05242005  DW13    Use Curr Date on RPU if Already PD-UP
* DRW    07252005  DW14    BYPASS RPU CALC IF < AGE 14 TO PREVENT ABEND?
* DRW    07262005  DW15  ADD TEXT RE INSURABILITY
* DRW    08252005  DW15  ADD AGE 1 THRU 13 TO TBL SO RPU'S WORK 4 <AG 13
* DRW    02242006  DW16  Use Actual Seg # for Address processing
* DRW    06262006  DW17  Add Dues due to PUAP Calc  (task 124)
* DRW    04092007  DW18  Allow CSV Splits to me mult of 1K
* DRW    04102007  DW19  Check for 1035 or Lump-Sum for Splits
* DRW    04142007  DW20  Calc Nu Prem if Flex-Prem
* YAK    04202007  YK1   Add military status and allotment change auth
*                        to view and parms
* YAK    08292007  YK2   Check for paying by allotment and pass this
*                        parm to subprograms
* YAK    12052007  YK3   Remove hardcording for interest rates
*                        (Read GEN-TABLE through OBJNGENT)
* YAK    02052008  YK4   Change code to use FUNCTION-INT-RATE
*                         to get rate from GEN-TABLE
* DRW  08/28/2008 DW21   Gen Plus Processing
* PAM  03/17/2009 PM22   Replaced RLB with CEB
* DRW 09/22/2009 DW23 SVC-FEE CALC  /  PROCESS-IND / Number-memberships /600000
* PAM  12/01/2009 PM23   Trade-up note
* VXT  11/01/2011 vt1    Change the source of DOB, SSN, Insured-name, Owner-name
*                        signature-name and salutation on the letter .
* bz1  8/1/2012          Exclude MR   bz1
* YAK  10/01/2012 YK5    Use function to identify Level Term II plans
* YAK  11/07/2012 YK6    Add No Medical Term plan (EZ)
* NGG  02/04/2013  NG1   Add Nursing Home Pay Status
* TMT  11/07/2013  TT1   1 MILLION DOLLAR POLICY STABILITY PROJECT
* vxt  04/11/2014  vt2   /Ticket 2738/
* TMT  06/23/2014  TT2   Contact Normalization
* TMT  10/10/2014  TT3   ANNUITY LIFE STABILIZATION
* bz   10/22/2014  bz     (OI-3145)
* vxt  02/05/2016  vt3   /Ticket 4019/
* vxt  04/08/2016  vt4   /Ticket 4401 -change the text for remark/
* * bz-Name 07/07/2017     Fine Names
************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK.CI-BLOCK
LOCAL USING G3500AAD
LOCAL USING GONERLXX
LOCAL
*
* 1 #CURR-VAR-INT-RATE  (P2.3) INIT <8.10>      /* YK3
1 #CURR-VAR-INT-RATE  (P2.3)                    /* YK3
*
1 #NUM-SPL   (N2)
1 #AS-OF-DT   (N8)
1 #LOAN-BAL   (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT    (N7.2/9)
1 #ACC-INT-2  (N7.2/9)
1 #CSV        (N7.2/9)
1 #CVALUE     (N7.2/9)
1 #LVALUE     (N7.2/9)
1 #MCSV       (N7.2/9)
1 #DB         (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #ANN-PREM    (N7.2)    /* DW20      /* vt2 was n6.2
1 #DESIRED-YEARS  (N3)   /* DW17
1 #FACE-AMT    (N7.2/9)  /* DW11
1 #TPP         (N7.2/9)  /* DW11
1 #DUES-DUE    (N5.2)    /* DW17
1 #HAS-1035-LUMP-SUM  (L)   /* DW19
*
1 #FLEX       (L) /* PM4
1 #NXT        (L) /* DW6
1 #NEW-FLDS   (L)
1 #HOLD-NXT-MCV     (P7.2)
1 #IN-THE-CORRIDOR   (L)
1 #TRAN-DATE    (N8)
1 #CONV-TO-PAY  (N2)
1 #CONV-TO-PAY-CV (C)
1 #LAST-CONV-TO-PAY(N2)
1 #SPLIT    (L)
1 #NEW-FACE   (N6.2)
1 #AAFMAA-TPP    (P6.2)
1 #PAY-STATUS-48 (A2)   INIT <'48'>
*
1 #SUFFIX      (A3)
1 #MAX-7-PAY   (P6.2)
1 #MEC-PREMS-PAID-TO-DATE (P7.2)            /*TT1
1 #EXCEEDS-MEC (P7.2)
1 #1035-NX     (A60)
1 #1035-EXCH-AMT  (P6.2)
1 #LUMP-PMT  (P6.2)                                               /* PM8
1 #AP-PREMS-PAID (P7.2)
*
1 #1035-DISP    (A10)

1 #CB-DISP      (A10)
1 #CURR-COST-BASIS (P7.2)
1 #1035-PRO     (P6.2) /* prorated 1035 exch amt
1 #AAFMAA-TPP-PRO (P7.2)        /*tt1
1 #CB-PRO       (P6.2)
1 #FORMATED-NAME-35 (A35)
1 #CAP-LOAN-MONS   (N3)
1 #CAP-CSV-MONS    (N3)
1 #CAP-REMAIN-MONS (N3)
1 #INSURED-NAME    (A35)
*
1 VA-V VIEW OF A-VA-HISTORY
  2 YEAR-MONTH-M      (P7/13)
  2 PREMIUM-M         (13)
  2 ACCUM-CASH-VALUE-M  (13)
  2 INTEREST-M          (13)
  2 COST-OF-INSURANCE-M (13)
  2 PRORAT-LOAN-BAL-M   (13)
  2 PRORAT-LN-ACC-INT-M (13)
*
1 #PREV-ACV     (P7.2)
1 #NEW-ACV      (P7.2)
1 #ACV-DIFF     (P7.2)
1 #REAL-PREM    (N6.2)
1 #I4    (I2)
*
1 #HIST-KEY        (N15)
1 REDEFINE #HIST-KEY
  2 #HIST-KEY-ID     (N6)
  2 #HIST-KEY-ISS    (N8)
  2 #HIST-KEY-SPL    (N1)
*
1 FR-V VIEW OF A-FIRS
*
1 #WORK-CAP-CONV-ACV (P9.2)
1 #CAP-LOAN-END-DATE (N8)
1 #CAP-CONV-ACV (P7.2)
1 #CSV-4-CAP-CALC  (P7.2)
1 #CAP-CSV    (P7.2)
*
1 #SVC-FEE    (N2.2)
1 #SVC-FEE-SP (N3.2) INIT <450.00>
1 #SVC-FEE-2P (N2.2) INIT <18.50>
1 #SVC-FEE-3P (N2.2) INIT <12.50>
1 #SVC-FEE-4P (N1.2) INIT <9.50>
1 #SVC-FEE-5P (N1.2) INIT <7.50>
1 #SVC-FEE-6P (N1.2) INIT <6.50>
1 #SVC-FEE-7P (N1.2) INIT <6.00>
1 #SVC-FEE-10 (N1.2) INIT <4.50>
1 #SVC-FEE-20 (N1.2) INIT <3.00>
1 #SVC-FEE-30 (N1.2) INIT <2.50>
1 #SVC-FEE-OL (N1.2) INIT <2.00>
1 #SVC-FEE-TM (N1.2) INIT <2.00>
1 #POLICY-OWNER  (N6)
1 #POLICY-OWNER-CI  (N8)
*
1 #SCR-SUFFIX      (A3)
1 #SCR-TYPES    (16)   /* up to 16 types on conversions
  2 #SCR-SELECT-CV         (C)
  2 #SCR-SELECT            (A1)
  2 #SCR-TO-PLAN           (A6)
  2 #SCR-NU-DB-DISP        (A12)         /* TT1
* 2 #SCR-NU-PREM-DISP      (A7)
  2 #SCR-NU-PREM-DISP      (A8) /* PM5
  2 #SCR-AMT-LUMP-SUM-DISP (A11)
  2 #SCR-TAXABLE-INC-DISP  (A10)
  2 #SCR-REMARKS           (A24)      /*TT1
*
1 #CT-TBL-ACTUAL-SEG (I2/9) /* for below   /* DW16
1 #CT-TBL-POLS       (9) /*9 possible certs (axx must match below)
  2 #CT-POL-NUM        (A14)
  2 #CT-ISS-DT         (N8)
  2 #CT-CONV-DUR       (N3)
  2 #CT-ISSUE-DATE     (A10)
  2 #CT-CURR-PLAN      (A6)
  2 #CT-FREQ           (A11)
  2 #CT-CURR-FACE      (N7.2)
  2 #CT-CURR-CSV       (N7.2)
  2 #CT-CURR-DB        (N9.2)
  2 #CT-LN-INT         (N6.2)
*
  2 #CONV-TBL-TYPES (16)   /* 16 possible conversion types
    3 #CT-SELECT            (A1)
    3 #CT-TO-PLAN           (A6)
    3 REDEFINE #CT-TO-PLAN
      4 #CT-TO-PLAN-$        (A1)
      4 #CT-TO-PLAN-X        (N1)
      4 #CT-TO-PLAN-4        (A4)
    3 #CT-TERM-FACE         (N7.2)
    3 #CT-NU-PREM           (N5.2)
    3 #CT-NU-DB             (N9.2)
    3 #CT-AMT-LUMP-SUM      (N9.2)
    3 #CT-PREMS-PAID        (N9.2)
    3 #CT-TAXABLE-INC       (N9.2)
    3 #CT-TAMRA-IND         (A1)
    3 #CT-RPU-LOAN-IND      (A1)
    3 #CT-BYPASS            (L)
    3 #INS-REQ              (L)    /* DW15
    3 #CT-DUES-PAID         (N3.2) /* DW17
*
1 #SCR-CT-REMARKS-TBL (9)
  2 #SCR-CT-REMARKS    (A24/16)       /* TT1 DECREASED FROM 30 TO 24
1 #SCR-POLS    (A76)
*
1 #DO-CSV  (L)
1 #DO-RSGN (L)
1 #FIND-CO-TYPE  (L)
1 #CO-MR-TYPE      (A2)
1 REDEFINE #CO-MR-TYPE
  2 #CO-MR-TYPE-1  (A1)
  2 #CO-MR-TYPE-2  (A1)
1 #NO-MR-REC       (L)
1 #NUM-SEL         (P3)
1 #Y-N             (A1)
1 #PROGRAM         (A8)
1 #SCR-MAX-LINES   (P3)
1 #COMP-1035       (A50)
1 #CERT-INFO
  2 #CERT            (A12)
  2 #CERT-COM        (A13)
  2 #CERT-COL        (A13)
1 #FAC-AMT          (N7.2)
1 #PAY-STAT         (A4)
1 #EFF-DATE         (N8)
1 #PLAN                (A3)
1 REDEFINE #PLAN
  2 #PLAN-N2   (N2)
1 REDEFINE #PLAN
  2 #PLAN-N1   (N1)
1 REDEFINE #PLAN
  2 #PLAN-A1   (A1)
  2 #PLAN-A2   (A2)

1 #TO-PLAN             (A3)   /* chg from (a3) 11/2000
1 REDEFINE #TO-PLAN
  2 #TO-PLAN-N          (N2)
1 REDEFINE #TO-PLAN
  2 #TO-PLAN-A1         (A1)
1 #PLAN-N    (N2)
1 #PLAN-A    (A3)
1 #OUTPUT-CALC-AMT     (P7.2)     /* passed to c1601sco for results
1 #OUTPUT-OLD-PDUP-AMT (P7.2) /* passed to c1601sco for results
1 #PRORATE-LOAN        (L)
1 #RPU-ACV             (P7.2)
1 #NU-ANN-PREM         (N7.2)      /*TT1 INCREASED FROM 6.2 TO 7.2
1 #OUTPUT-PREM-DIFF    (N6.2)
1 #NU-ANN-PREM-W-DUES  (N6.2)
1 #DUES-DIFF           (N5.2)
1 #LUMP-SUM            (N6.2)                                     /* PM8
1 #TOT-LOAN-AMOUNT     (P6.2)
1 #TOT-CURR-ACCUM-INT  (P5.2)
1 #SCN-POLICY-NUMBER (A16)
*
1 #W-K           (P3)
1 #TEXT          (A78)    /*TT1 REDUCED FROM 78 TO 76
1 #HOLD-PLAN     (A6)
1 #CASH-VALUE    (P7.2)
1 #NUM           (A3)
1 #FIRST-LAST    (A25)
*
1 #SCR-DOB-X   (A11)
1 #SCR-PD-TO-DT (A7)
1 #WORK-AMT   (N7.5)
1 #CURR-AGE    (P3)
1 #SCR-SSN     (A11)
1 #SCR-CSV-DISP          (A13)           /*TT1 INCREASED FROM 11 TO 13
1 #SCR-PREMS-PAID        (A13)           /*TT1 INCREASED FROM 11 TO 13
1 #SCR-LN-INT            (A11)
1 #SCR-LOAN-BAL-DISP     (A10)
1 #SCR-LOAN-BAL-DISP-2   (A11)
1 #SCR-CURR-ACC-INT-DISP (A10)
1 #SCR-CURR-ACC-INT-DISP-2 (A10)
1 #SCR-ISSUE-DATE        (A10)
1 #SCR-CURR-PLAN         (A10)
1 #SCR-CURR-DB-DISP      (A13)
1 #SCR-FACE-DISP         (A11)           /* TT1 INCREASED FROM 9 TO 11
* 1 #SCR-PREM-DISP         (A9)
1 #SCR-PREM-DISP         (A10) /* PM5
1 #CSV-FACE              (P6)
1 #MODAL-PREM            (P5.2)
1 #NU-MODAL-PREM         (P5.2)
1 #SCR-MODE-DISP         (A16)
*
1 #THIS-IS     (A33)
1 #TOT-POLS    (N1)
1 #TOT-POLS-W-CSV (N1)
1 #P-X         (I2)
1 #T-X         (I2)
1 #CSV-X       (I2)
*
1 MR-V VIEW OF A-REQUEST
  2 ID-NUMBER        (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A    (A6)
  2 RQST-TABLE       (A10)
  2 REDEFINE RQST-TABLE
    3 BEN-IND         (A1)
    3 MAL-IND         (A1)
    3 BEN-SHO-IND     (A1)
    3 ACC-IND         (A1)
    3 ALI-IND         (A1)
    3 APP-IND         (A1)
    3 PIL-IND         (A1)
    3 CO-IND          (A1)
  2 INFO          (A50)
  2 CO-RQSTS      (A3/10)
  2 REDEFINE CO-RQSTS
    3 CO-RQSTS-OCC  (10)
      4 CO-CERT-SEQ  (N1)
      4 CO-CONV-TYPE (A2)
      4 REDEFINE CO-CONV-TYPE
        5 CO-CONV-TYPE-1 (A1)
        5 CO-CONV-TYPE-2 (A1)
*
1 ST-V VIEW OF A-STATUS
  2 NOTE-REC-IND
  2 RANK
  2 MILITARY-STATUS                        /* YK1
  2 ALOT-CHG-AUTH                          /* YK1
  2 RESTRICT-MBR-SW
  2 CHIEF-OF-STAFF-IND
  2 NAME-SP
  2 PROCESS-IND
  2 INTRO-FLAG
  2 X-FIRST-PLACE-FEE  (9)
  2 POLICY-ID          (9)
  2 X-BILL-ADJUST      (9)
  2 MODE               (9)
  2 DUES-ALL-PAID-IND
  2 DUES-TOT-PAID
  2 CAP-CONV-ACV
  2 PREM-RATING    (9)
  2 MEC-IND        (9)
  2 X-LOAN-AMOUNT      (9)
  2 X-LOAN-AMOUNT-2    (9)
  2 X-ACCUM-INTEREST   (9)
  2 X-ACCUM-INTEREST-2 (9)
  2 X-NXT-YR-ACCUM-INT (9)
  2 X-NXT-YR-ACCUM-INT-2 (9)
  2 X-INTEREST-RATE    (9)
  2 X-LOAN-DATE        (9)
  2 REDEFINE X-LOAN-DATE
    3 X-LOAN-DATE-OCC   (9)
      4 X-LOAN-DATE-YYYY (N4)
      4 X-LOAN-DATE-MM   (N2)
      4 X-LOAN-DATE-DD   (N2)
  2 X-LOAN-DATE-2      (9)
  2 REDEFINE X-LOAN-DATE-2
    3 X-LOAN-DATE-OCC-2   (9)
      4 X-LOAN-DATE-YYYY-2 (N4)
      4 X-LOAN-DATE-MM-2   (N2)
      4 X-LOAN-DATE-DD-2   (N2)
  2 MEMBER-CONTACT-ID                          /* vt1
  2 version (9)                                /* vt 07/12/2016
*
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER            (N6)                                      /* PM1
  2 NOTE-TEXT            (A60/60)                                  /* PM1
*
1 #BANKRUPT             (L)                                       /* PM1
1 #TRADE-UP             (L)                                       /* PM23
1 #LV-DISP        (A12)
1 #LOAN-DISP        (A10)
1 #SCR-INT-RATE     (A6)
1 #SCR-INT-RATE-2   (A6)
1 #SCR-INT-TYPE     (A1)
1 #SCR-DAILY-INT    (P3.7)
1 #SCR-DAILY-INT-2  (P3.7)
1 #SCR-ACC-INT      (P5.2)
1 #SCR-ACC-INT-DISP (A9)
1 #SCR-ACC-INT-2    (P5.2)
1 #SCR-ACC-INT-2-DISP (A9)
1 #SCR-NXT-YR-ACC-INT  (P5.2)
1 #CURR-CSV       (P7.2)
1 #CURR-CSV-RPU   (P7.2)
1 #TOT-CSV        (P7.2)
1 #TOT-CSV-X      (P7.2)
1 #LV         (P7.2)
1 #PERCENT        (P1.4)
1 #W-PLAN         (A2)
*
1 #SSN-9     (N9)
1 REDEFINE #SSN-9
  2 #SSN-1    (A3)
  2 #SSN-2    (A2)
  2 #SSN-3    (A4)
1 #WHOLE-DOLLARS   (P6)
*
1 #I2     (I2)
*
1 #CURR-DB       (P7.2)
1 #TOT-CURR-DB   (P7.2)
1 #TOT-FACE         (P7)
1 #TOT-ACTUAL-FACE  (P7)
1 #CASH-AVAIL       (N7.2)
*
1 #WYYYYMMDD
  2 #WCENT    (N2)
  2 #WYY      (N2)
  2 #WMM      (N2)
  2 #WDD      (N2)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-N (N8)
1 REDEFINE #WYYYYMMDD
  2 #WYYYY-N   (N4)
  2 #WMMDD-N   (N4)
1 REDEFINE #WYYYYMMDD
  2 #WCENT-A   (A2)
  2 #WYY-A     (A2)
  2 #WMM-A     (A2)
  2 #WDD-A     (A2)
*
1 #YYYYMMDD   (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY   (N4)
    3 #MM     (N2)
  2 #DD     (N2)
*
1 #MONTHS (A36)  INIT
  <'JanFebMarAprMayJunJulAugSepOctNovDec'>
1 REDEFINE #MONTHS
  2 #MON       (A3/12)
*
1 #SPLIT-AMTS   (A39)
1 REDEFINE #SPLIT-AMTS
  2 #SPL-AMTS (N3/13)
1 REDEFINE #SPLIT-AMTS
  2 #SPL-AMTS-A (A3/13)
*       if #WL-ALL amts are chged c1601sco must change
1 #WL-ALL (A27) INIT <'010025050075100200300400500'>
*
1 #TM-100 (A15) INIT <'050060070080090'>
1 #TM-200 (A39) INIT <'050060080090100110120130140150160175190'>
1 #TM-400 (A39) INIT <'050075100125150175200250275300325350375'>
1 #TM-600 (A39) INIT <'050075100150200250300350400450500525550'>
*
* BELOW for CALC-PREMS-PAID
1 #PP-DATE-OF-BIRTH  (N8)
1 #PP-ANNUAL-PREM    (N5.2)
1 #PP-PAY-STATUS     (A2)
1 #PP-TOT-PREMIUMS-PAID (N7.2)
1 #PP-PAID-TO-DATE   (N8)
1 #PP-ISSUE-DATE     (N8)
1 #PP-MODE           (A1)
1 #PP-PLAN           (A3)
1 #PP-COST-BASIS      (N7.2)
1 #PP-MONTH-ALLOC-AMT (N7.2)          /*TT1
1 #PP-INTRO-FLAG     (A1)
1 #PP-FIRST-PLACE-FEE (N7.2)
1 #PREMS-PAID         (P7.2)
1 #SUB-PREMS-PAID     (P7.2)
1 #PP-BADJ            (P5.2)
1 #MODE               (A1)             /* YK2
1 #SALUTATION          (A) DYNAMIC                    /* vt1 \/
1 #OWNER-NAME          (A) DYNAMIC
1 CT-V VIEW OF A-CONTACTS
  2 ID-NUMBER
  2 DATE-OF-BIRTH
  2 SSN
  2 CONTACT-TYPE
1 #DOB            (N8)
1 REDEFINE #DOB
  2 #DOB-YYYY     (A4)
  2 #DOB-MM       (A2)
  2 #DOB-DD       (A2)
1 #SSN-CT            (N9)                               /* vt1 /\
*
1 #MEC            (A1)
1 #xx             (I2)
1 #SEX            (A1)                   /* TT2
* ABOVE for CALC-PREMS-PAID

END-DEFINE
* * * * * * * * *
INCLUDE GONERCXX
* * * * * * * * *
*
GET CI-V #CGA-ISN
GET ST-V #CGA-ISN
*
RESET #SEX                                           /* TT2
#SEX := GET-GENDER(<CI-V.MEMBER-CONTACT-ID>)         /* TT2
*
IF NOT #CGA-CLERK    = 'VXT' OR = 'CEB' OR = 'KHB'  /* PM22  vt 06/19/2013
  MOVE (AD=P) TO #CONV-TO-PAY-CV
END-IF
*
IF   (#CGA-SCR-COMMAND = 'CO')     /* bypass if return from NT
* AND (ST-V.PROCESS-IND NE 'S')   /* DW23
    AND (#CGA-USER-COMPANY NE 'S')
    AND (*DEVICE NE 'BATCH')
  CALLNAT 'C2650SST'
    #CGA-SCR-COMMAND #CGA-SCR-ID #CGA-SCR-SUFFIX
    #CGA-ORIG-ID
    #CGA-MF-SCR-COMMAND
    #CGA-MF-SCR-PARM-1
END-IF
*
* IF   (#CGA-SCR-COMMAND = 'CO') /* not returning from NS
*  AND (*DEVICE NE 'BATCH')
*  AND (#CGA-SCR-SUFFIX NE 'QCK') /* quick CO
*   MOVE #FORMATED-NAME TO #FORMATED-NAME-35
*   CALLNAT 'C1605SCO'
*     #CGA-ISN
*     #CGA-SCR-COMMAND
*     #CGA-SCR-ID
*     #CGA-SCR-SUFFIX
*     #CGA-ID-G
*     #CGA-CLERK
*     #FORMATED-NAME-35
* END-IF
*
IF   (*DEVICE NE 'BATCH')
    AND (#CGA-SCR-COMMAND = 'CO') /* not returning from NS
    AND (#CGA-SCR-SUFFIX NE 'QCK') /* quick CO
  MOVE '*' TO #CGA-SCR-COMMAND
  FETCH 'G4020PNS'
END-IF
MOVE 'CO' TO #CGA-SCR-COMMAND /* reset after possible call to NS above
*
IF ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
  MOVE TRUE TO #USE-SPS-GEN-INFO
END-IF
*
CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD #SCN-POLICY-NUMBER /* get insured name
if #use-sps-gen-info                                              /* vt3
    or #id-num ne #sps-gen-id and #sps-gen-id ne 0                                                   /* vt3 02/08/2016
  move #SPS-gen-name to #insured-name                             /* vt3
else                                                              /* vt3
  MOVE #EXT-FORMATED-NAME TO #INSURED-NAME              /* vt1
end-if                                                            /* vt3
RESET #USE-SPS-GEN-INFO
* MOVE #FORMATED-NAME TO #INSURED-NAME                /* vt1
COMPRESS #FIRST-NAME #LAST-NAME INTO #FIRST-LAST
*
MOVE *DATN TO #TODAY-YYYYMMDD-N
*
IF #CGA-SCR-SUFFIX = 'DW*' OR (*DEVICE = 'BATCH')
  FIND (1) MR-V WITH ID-NUMBER = #CGA-ID
    IF NO RECORD FOUND
      WRITE 'no "MR" rec found'
      ESCAPE BOTTOM
    END-NOREC
*
    IF CO-IND NE '1'
      WRITE 'MR CO not requested'
    END-IF
    MOVE INFO TO #COMP-1035
  END-FIND
END-IF
*
IF *DEVICE = 'BATCH'
  MOVE 66 TO #SCR-MAX-LINES
ELSE
  MOVE 21 TO #SCR-MAX-LINES
END-IF
*
FIND CT-V WITH CT-V.CONTACT-ID = ST-V.MEMBER-CONTACT-ID       /*  vt1  \/
  IF NO
    ESCAPE BOTTOM
  END-NOREC
  MOVE CT-V.DATE-OF-BIRTH TO #DOB
  MOVE CT-V.SSN           TO #SSN-CT
END-FIND                                                       /*  vt1 /\
*
MOVE *DATN TO #WYYYYMMDD-N
* SUBTRACT DATE-OF-BIRTH FROM #WYYYYMMDD-N      /* vt1
SUBTRACT #DOB FROM #WYYYYMMDD-N                 /* vt1
MOVE #WYYYY-N TO #CURR-AGE
* MOVE SSN TO #SSN-9                            /* vt1
MOVE #SSN-CT TO #SSN-9                          /* vt1
COMPRESS #SSN-1 #SSN-2 #SSN-3 INTO #SCR-SSN WITH '-'
* MOVE DATE-OF-BIRTH TO #WYYYYMMDD-N            /* vt1
MOVE #DOB TO #WYYYYMMDD-N                       /* vt1
COMPRESS #WDD #MON (#WMM) #WYYYY-N INTO #SCR-DOB-X WITH '-'
*
* MOVE DATE-OF-BIRTH TO #WYYYYMMDD-N            /* vt1
MOVE #DOB  TO #WYYYYMMDD-N                      /* vt1
*
MOVE *DATN TO #AS-OF-DT
MOVE 'NTP' TO #SUFFIX /* do not replace w tpp
MOVE FACE-AMOUNT (*) TO #FACE-AMT (*)   /* DW11
CALLNAT 'CVALUSXX'
  CI-V.ID-NUMBER
  #SUFFIX
  #AS-OF-DT
  #LOAN-BAL   (1:9)
  #LOAN-BAL-2 (1:9)
  #ACC-INT    (1:9)
  #ACC-INT-2  (1:9)
  #CSV        (1:9)
  #CVALUE     (1:9)
  #LVALUE     (1:9)
  #MCSV       (1:9)
  #DB         (1:9)
  #ANN-PREMIUM  (1:9)
  #FACE-AMT   (1:9)   /* DW11
  #TPP        (1:9)   /* DW11
*
IF *DEVICE NE 'BATCH'                                             /* PM1
  RESET #BANKRUPT #TRADE-UP                                       /* PM1 PM23
  FIND NT-V WITH NT-V.ID-NUMBER = #CGA-SCR-ID                     /* PM1
*
    EXAMINE NOTE-TEXT(*) FOR 'IS A TRADE-UP'                        /* PM23
      GIVING INDEX #I1                                                /* PM23
    IF #I1 NE 0 AND #I1 LE 60                                      /* PM23
      MOVE TRUE TO #TRADE-UP                                        /* PM23
    END-IF                                                         /* PM23
*
    FOR #I1 1 TO 60                                               /* PM1
      IF NOTE-TEXT (#I1) = ' '                                    /* PM1
        ESCAPE BOTTOM                                             /* PM1
      END-IF                                                      /* PM1
*                                                                 /* PM1
      IF NOTE-TEXT (#I1) = MASK ('*Mbr in bnkrptcy')              /* PM1
        MOVE TRUE TO #BANKRUPT                                    /* PM1
        ESCAPE BOTTOM                                             /* PM1
      END-IF                                                      /* PM1
    END-FOR                                                       /* PM1
  END-FIND                                                        /* PM1
END-IF                                                            /* PM1
*
FOR #IFL 1 TO 9
  IF  (STATUS (#IFL) NE 'D')
*  OR (PAY-STATUS (#IFL)= '44')  /* eti
    ESCAPE TOP
  END-IF
*
  MOVE PLAN (#IFL) TO #PLAN
  MOVE *DATN TO #EFF-DATE
*   IF ((PLAN (#IFL) = 'LT') AND (DATE-OF-BIRTH LE #EFF-DATE - 400000))     /* vt1
  IF ((PLAN (#IFL) = 'LT') AND (#DOB LE #EFF-DATE - 400000))                /* vt1
      OR ((PLAN (#IFL) = 'RT') AND (ISSUE-AGE (#IFL) GT '65'))
      OR ((PLAN (#IFL) = 'EZ') AND (PAID-UP-DATE(#IFL) LE #EFF-DATE))       /* YK6
*     OR  (((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))                        /* YK5
      OR  (F-LT2-TRUE(<#PLAN>)                                              /* YK5
      AND ((ISSUE-DATE(#IFL) + 40000) LE #EFF-DATE))
      OR (IS-ANNUITY-LIFE (< PLAN (#IFL)>))   /* DW10   /* TT3
*
    CALLNAT 'GDROPSTM' USING
      PLAN          (#IFL)
      SMOKER-FLAG   (#IFL)
/*      DATE-OF-BIRTH                          /* vt1
      #DOB                                     /* vt1
      ISSUE-DATE    (#IFL)
      PAID-UP-DATE  (#IFL)
      #EFF-DATE
      ISSUE-AGE     (#IFL)
      #PAY-STAT
      FACE-AMOUNT   (#IFL)
      DEATH-BENEFIT (#IFL)
      CASH-VALUE    (#IFL)
      BEG-CASH-VALUE(#IFL)
*
    IF NOT (IS-ANNUITY-LIFE (< PLAN (#IFL)>))  /* DW10   /* TT3
      MOVE DEATH-BENEFIT (#IFL) TO NXT-MON-DEATH-BENEFIT (#IFL)
    END-IF
  END-IF
*
  IF MTD-ACV-PREM-ADJ (#IFL) NE 9999999.99
    ADD MTD-ACV-PREM-ADJ (#IFL) TO CI-V.ACC-CASH-VALUE (#IFL)
    ADD MTD-ACV-PREM-ADJ (#IFL) TO CI-V.CASH-VALUE (#IFL)
    ADD MTD-ACV-PREM-ADJ (#IFL) TO CI-V.NXT-MON-CASH-VALUE (#IFL)
  END-IF
*
  IF MTD-ACV-INT-ADJ (#IFL) NE 99999.99
    ADD MTD-ACV-INT-ADJ (#IFL) TO CI-V.ACC-CASH-VALUE (#IFL)
    ADD MTD-ACV-INT-ADJ (#IFL) TO CI-V.CASH-VALUE (#IFL)
    ADD MTD-ACV-INT-ADJ (#IFL) TO CI-V.NXT-MON-CASH-VALUE (#IFL)
  END-IF
*
  IF MTD-ACV-COI-ADJ (#IFL) NE 99999.99
    SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM CI-V.ACC-CASH-VALUE (#IFL)
    SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM CI-V.CASH-VALUE (#IFL)
    SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM CI-V.NXT-MON-CASH-VALUE (#IFL)
  END-IF
*
  ADD 1 TO #TOT-POLS
  MOVE #CSV (#IFL) TO #CURR-CSV
*
  IF #CURR-CSV NE 0
    ADD 1 TO #TOT-POLS-W-CSV
  END-IF
*
  IF ((PAY-STATUS (#IFL) GE '42') OR (LAST-DURATION (#IFL) GE 2))
    ADD #CURR-CSV TO #TOT-CSV
  END-IF
  ADD CASH-VALUE (#IFL) TO #TOT-CSV-X  /* to make co match ci rpu
*
  IF PAY-STATUS (#IFL) = '45'  /* rpu
    IF ISSUE-DATE (#IFL) LT 19941201
      COMPUTE #TOT-FACE = #TOT-FACE + (NUM-MBRSHIPS (#IFL) * 5000)
    ELSE
      COMPUTE #TOT-FACE = #TOT-FACE + (EXPIRY-DAY (#IFL) * 5000)
    END-IF
  ELSE
    ADD FACE-AMOUNT (#IFL) TO #TOT-FACE
  END-IF
  ADD FACE-AMOUNT (#IFL) TO #TOT-ACTUAL-FACE
*
  ADD #DB (#IFL) TO #TOT-CURR-DB
END-FOR
*
#CURR-VAR-INT-RATE := FUNCTION-INT-RATE(<'RATE5AB'>)  /* YK4
*
FOR #IFL 1 TO 9
  IF  (STATUS (#IFL) NE 'D')
      OR (CONV-DURATION (#IFL) = 888)
*  OR (PAY-STATUS (#IFL)= '44')
    ESCAPE TOP
  END-IF
*
  ADD 1 TO #P-X
  MOVE #IFL TO #CT-TBL-ACTUAL-SEG (#P-X)  /* DW16
  RESET #T-X
  RESET #TEXT
  MOVE (AD=P) TO #SCR-SELECT-CV(*)
  RESET #SCR-SELECT            (*)
  RESET #SCR-TO-PLAN           (*)
  RESET #SCR-NU-DB-DISP        (*)
  RESET #SCR-NU-PREM-DISP      (*)
  RESET #SCR-AMT-LUMP-SUM-DISP (*)
  RESET #SCR-TAXABLE-INC-DISP  (*)
  RESET #SCR-REMARKS           (*)
  RESET #TOT-LOAN-AMOUNT #TOT-CURR-ACCUM-INT
*
  RESET #FLEX /* PM4
  IF  (PLAN (#IFL) = MASK (..'F'))
      OR (PLAN (#IFL) = MASK (.'F'))
    MOVE TRUE TO #FLEX
  END-IF
*
  RESET #NXT                                  /* DW6
  IF   (ISSUE-DATE (#IFL) GE 19970101)        /* DW6
      AND (MONTH-ALLOC-AMT (#IFL) NE 999.99)
    MOVE TRUE TO #NXT
  END-IF
*
  IF #TOT-POLS = 1
    MOVE 'This is the only certificate' TO #THIS-IS
  ELSE
    DECIDE ON FIRST VALUE OF #P-X
      VALUE 1 MOVE '1st' TO #NUM
      VALUE 2 MOVE '2nd' TO #NUM
      VALUE 3 MOVE '3rd' TO #NUM
      VALUE 4 MOVE '4th' TO #NUM
      VALUE 5 MOVE '5th' TO #NUM
      VALUE 6 MOVE '6th' TO #NUM
      VALUE 7 MOVE '7th' TO #NUM
      VALUE 8 MOVE '8th' TO #NUM
      VALUE 9 MOVE '9th' TO #NUM
      NONE  IGNORE
    END-DECIDE
    COMPRESS 'This is the' #NUM 'of' #TOT-POLS 'certificates'
      INTO #THIS-IS
  END-IF
*
  MOVE #CSV       (#IFL) TO #CURR-CSV
  MOVE CASH-VALUE (#IFL) TO #CURR-CSV-RPU
  MOVE #DB        (#IFL) TO #CURR-DB
*
  MOVE #ACC-INT   (#IFL) TO #SCR-ACC-INT
  ADD  #LOAN-BAL  (#IFL) TO #TOT-LOAN-AMOUNT
  ADD  #ACC-INT   (#IFL) TO #TOT-CURR-ACCUM-INT
*
  IF #LOAN-BAL (#IFL) = 0
    RESET #SCR-INT-RATE
  ELSE
    MOVE EDITED X-INTEREST-RATE (#IFL) (EM=ZZ.999) TO #SCR-INT-RATE
  END-IF
*
  MOVE #ACC-INT-2   (#IFL) TO #SCR-ACC-INT-2
  ADD  #LOAN-BAL-2  (#IFL) TO #TOT-LOAN-AMOUNT
  ADD  #ACC-INT-2   (#IFL) TO #TOT-CURR-ACCUM-INT
*
  IF X-LOAN-AMOUNT-2 (#IFL) = 0
    RESET #SCR-INT-RATE-2
  ELSE
    MOVE EDITED #CURR-VAR-INT-RATE (EM=ZZ.999) TO #SCR-INT-RATE-2
  END-IF
*
  MOVE EDITED #LOAN-BAL (#IFL) (EM=ZZ,ZZZ.99) TO #SCR-LOAN-BAL-DISP
  COMPRESS '$' #SCR-LOAN-BAL-DISP INTO #SCR-LOAN-BAL-DISP LEAVING NO
  MOVE EDITED #LOAN-BAL-2 (#IFL) (EM=ZZZ,ZZZ.99) TO #SCR-LOAN-BAL-DISP-2
  COMPRESS '$' #SCR-LOAN-BAL-DISP-2 INTO #SCR-LOAN-BAL-DISP-2 LEAVING NO
  MOVE EDITED #ACC-INT (#IFL) (EM=ZZ,ZZZ.99) TO #SCR-CURR-ACC-INT-DISP
  COMPRESS '$' #SCR-CURR-ACC-INT-DISP
    INTO #SCR-CURR-ACC-INT-DISP LEAVING NO
  MOVE EDITED #ACC-INT-2(#IFL)(EM=ZZ,ZZZ.99) TO #SCR-CURR-ACC-INT-DISP-2
  COMPRESS '$' #SCR-CURR-ACC-INT-DISP-2
    INTO #SCR-CURR-ACC-INT-DISP-2 LEAVING NO
*
  COMPUTE ROUNDED #LV = #LVALUE (#IFL)
    - #LOAN-BAL    (#IFL) - #ACC-INT   (#IFL)
    - #LOAN-BAL-2  (#IFL) - #ACC-INT-2 (#IFL)
*
  IF #LV LT 0
    RESET #LV
  END-IF
*
  MOVE EDITED #LV (EM=Z,ZZZ,ZZZ) TO #LV-DISP
  COMPRESS '$' #LV-DISP INTO #LV-DISP LEAVING NO
*
  COMPUTE #RPU-ACV = #CURR-CSV    /* chg 5/98 to match ci
    - #LOAN-BAL   (#IFL)   - #ACC-INT   (#IFL)
    - #LOAN-BAL-2 (#IFL)   - #ACC-INT-2 (#IFL)
*
  COMPUTE #CT-LN-INT (#P-X) = #LOAN-BAL    (#IFL)
    + #LOAN-BAL-2  (#IFL)
    + #ACC-INT   (#IFL)
    + #ACC-INT-2 (#IFL)
  MOVE PLAN (#IFL) TO #CT-CURR-PLAN (#P-X)
  MOVE FACE-AMOUNT (#IFL) TO #CT-CURR-FACE (#P-X)
  MOVE #CURR-CSV   TO #CT-CURR-CSV  (#P-X)
  MOVE #CURR-DB    TO #CT-CURR-DB (#P-X)
  COMPRESS ISSUE-DATE-MM (#IFL) ISSUE-DATE-DD (#IFL)
    ISSUE-DATE-YYYY (#IFL) INTO #CT-ISSUE-DATE (#P-X) WITH '-'
  MOVE ISSUE-DATE (#IFL) TO #CT-ISS-DT (#P-X)
  MOVE CONV-DURATION (#IFL) TO #CT-CONV-DUR (#P-X)
  COMPRESS PAID-TO-DATE-MM (#IFL) PAID-TO-DATE-YYYY (#IFL)
    INTO #SCR-PD-TO-DT WITH '-'
*
  IF  (LAST-DURATION (#IFL) GE 2)
      OR #NXT     /* DW6
    MOVE EDITED #CURR-CSV          (EM=Z,ZZZ,ZZZ.99) TO #SCR-CSV-DISP
    COMPRESS '$' #SCR-CSV-DISP INTO #SCR-CSV-DISP LEAVING NO
  ELSE
    RESET #SCR-CSV-DISP #LV-DISP
  END-IF
*
  MOVE #IFL TO #I1
  RESET #PREMS-PAID
  PERFORM CALC-PREMS-PAID-SETUP
*
  MOVE PLAN (#IFL) TO #PLAN
* IF  ((CONV-DURATION (#IFL) = 999) /* - removed 5/24/2004
*  AND (ISSUE-DATE (#IFL) GE 19990101))
  IF   (X-FIRST-PLACE-FEE (#IFL) NE 0)   /* HAVN'T PAID FPF YET
*   OR (PROCESS-IND = 'S')    /* AFSC MEMBER    /* DW23
      OR (#PREMS-PAID LE #CURR-CSV)
      OR (PAY-STATUS (#I1) = '45')   /* rpu's do not use tpp
*     OR (#PLAN = 'RT' OR = 'LT' OR = 'SO')                     /* YK5
*     OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))              /* YK5
      OR #PLAN = 'SO'                                           /* YK5
      OR FUNCTION-TERM-POLICY(<#PLAN>)                          /* YK5
    IGNORE
  ELSE
    MOVE #PREMS-PAID TO #CURR-CSV
    MOVE #PREMS-PAID TO #CT-CURR-CSV (#P-X)
  END-IF
*
  CALLNAT 'GPLNMSXX' #SCN-POLICY-NUMBER ID-NUMBER #IFL
  MOVE #SCN-POLICY-NUMBER TO #CT-POL-NUM (#P-X)
*
  MOVE EDITED CI-V.FACE-AMOUNT(#IFL) (EM=Z,ZZZ,ZZZ) TO #SCR-FACE-DISP        /* TT1
  COMPRESS '$' #SCR-FACE-DISP INTO #SCR-FACE-DISP LEAVING NO
*
  MOVE PLAN (#IFL) TO #TO-PLAN
  PERFORM CALC-DUES
*
  DECIDE ON FIRST MODE (#IFL)
    VALUE 'A' MOVE 'Annual' TO #SCR-MODE-DISP
      MOVE 'annual' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = ANNUAL-PREM (#IFL) + (#SVC-FEE * 12)
    VALUE 'S' MOVE 'Semi-annual' TO #SCR-MODE-DISP
      MOVE 'semi-annual' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM (#IFL) / 2)
        + (#SVC-FEE * 6)
    VALUE 'Q' MOVE 'Quarterly' TO #SCR-MODE-DISP
      MOVE 'quarterly' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM (#IFL) / 4)
        + (#SVC-FEE * 3)
    VALUE 'M' MOVE 'Monthly' TO #SCR-MODE-DISP
      MOVE 'monthly' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM(#IFL) / 12) + #SVC-FEE
    VALUE '0' MOVE 'Monthly CC' TO #SCR-MODE-DISP
      MOVE 'monthly' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM(#IFL) / 12) + #SVC-FEE
    VALUE '1' MOVE 'Annual CC' TO #SCR-MODE-DISP
      MOVE 'annual' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = ANNUAL-PREM (#IFL) + (#SVC-FEE * 12)
    VALUE '2' MOVE 'Semi-ann CC' TO #SCR-MODE-DISP
      MOVE 'semi-annual' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM (#IFL) / 2)
        + (#SVC-FEE * 6)
    VALUE '4' MOVE 'Quartrly CC' TO #SCR-MODE-DISP
      MOVE 'quarterly' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM (#IFL) / 4)
        + (#SVC-FEE * 3)
    VALUE 'E' MOVE 'EZPAY' TO #SCR-MODE-DISP
      MOVE 'monthly' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM(#IFL) / 12) + #SVC-FEE
    VALUE 'G' MOVE 'Allotment' TO #SCR-MODE-DISP
      MOVE 'monthly' TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM(#IFL) / 12) + #SVC-FEE
    NONE      MOVE MODE (#IFL) TO #SCR-MODE-DISP
      MOVE MODE (#IFL) TO #CT-FREQ (#IFL)
      COMPUTE #MODAL-PREM = (ANNUAL-PREM(#IFL) / 12) + #SVC-FEE
  END-DECIDE
*
  COMPRESS #SCR-MODE-DISP 'Pymt' INTO #SCR-MODE-DISP
  MOVE EDITED #MODAL-PREM (EM=ZZ,ZZZ.99) TO #SCR-PREM-DISP /* PM5
  COMPRESS '$' #SCR-PREM-DISP INTO #SCR-PREM-DISP LEAVING NO
  MOVE #CT-ISSUE-DATE (#P-X)    TO #SCR-ISSUE-DATE
  MOVE #CT-CURR-PLAN  (#P-X)    TO #SCR-CURR-PLAN
*
  DECIDE ON FIRST PAY-STATUS (#IFL)
    VALUE '42' COMPRESS #SCR-CURR-PLAN '-PDUP' INTO #SCR-CURR-PLAN
    VALUE '45' COMPRESS #SCR-CURR-PLAN '-RPU'  INTO #SCR-CURR-PLAN
    VALUE '47' COMPRESS #SCR-CURR-PLAN '-PUSP' INTO #SCR-CURR-PLAN
    VALUE '48' COMPRESS #SCR-CURR-PLAN '-PUAP' INTO #SCR-CURR-PLAN
    NONE IGNORE
  END-DECIDE
*
  MOVE EDITED #CT-LN-INT (#P-X) (EM=ZZZ,ZZZ.99)
    TO #SCR-LN-INT    /* DW6
  COMPRESS '$' #SCR-LN-INT INTO #SCR-LN-INT LEAVING NO
  MOVE EDITED #CT-CURR-DB (#P-X) (EM=Z,ZZZ,ZZZ.99) TO #SCR-CURR-DB-DISP
  COMPRESS '$' #SCR-CURR-DB-DISP INTO #SCR-CURR-DB-DISP LEAVING NO
*
  MOVE EDITED #PREMS-PAID        (EM=Z,ZZZ,ZZZ.99) TO #SCR-PREMS-PAID
  COMPRESS '$' #SCR-PREMS-PAID INTO #SCR-PREMS-PAID LEAVING NO
*
  RESET #IN-THE-CORRIDOR           /* DW3
*
* IF   (DEATH-BENEFIT (#IFL) GT NXT-MON-DEATH-BENEFIT (#IFL))
  IF   (#DB           (#IFL) GT NXT-MON-DEATH-BENEFIT (#IFL))   /* DW3
      AND (DEATH-BENEFIT (#IFL) GT FACE-AMOUNT (#IFL))             /* DW3
    MOVE TRUE TO #IN-THE-CORRIDOR
    COMPRESS #TEXT '*In the corridor' INTO #TEXT
  END-IF
*
  MOVE PLAN (#IFL) TO #PLAN
  IF (PAY-STATUS (#IFL) LT '42')  /* conv to paid-up
*       AND (NOT #PLAN = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO'                /* YK5
*       OR = 'GPL')                     /* DW21                             /* YK5
*     AND ((#PLAN-A1 LT 'U') OR (#PLAN-A1 GT 'Z'))   /* BYPASS VAR-TERM     /* YK5
      AND (NOT #PLAN = 'SO' OR = 'FSO' OR = 'GPL' OR= 'GP2')                /* YK5
      AND ( NOT FUNCTION-TERM-POLICY(<#PLAN>) )                             /* YK5
*
    ADD 1 TO #T-X
*
    IF NOT #NXT     /* DW6
      MOVE 'SI' TO #TO-PLAN
      MOVE 'SI' TO #PLAN
      MOVE CI-V.FACE-AMOUNT (#IFL) TO #FAC-AMT
      PERFORM CALC-NU-PREM
    END-IF
    MOVE NXT-YR-MIN-CASH-VALUE (#IFL) TO #HOLD-NXT-MCV /* rstr later
*
    MOVE 'AP' TO #TO-PLAN
    MOVE PAID-TO-DATE (#IFL) TO #TRAN-DATE
    PERFORM CALL-AOCX2V6A
    MOVE #HOLD-NXT-MCV TO NXT-YR-MIN-CASH-VALUE (#IFL)
    MOVE ROUNDED #OUTPUT-CALC-AMT TO #WHOLE-DOLLARS
*
    IF #NXT                                    /* DW17
      IF #DUES-DIFF GT 0
        MOVE EDITED #DUES-DIFF (EM=ZZZ.99)
          TO #SCR-CT-REMARKS (#P-X, #T-X)
*        DISPLAY #WHOLE-DOLLARS DUES-TOT-PAID #DUES-DIFF
        COMPRESS 'Includes' #SCR-CT-REMARKS (#P-X, #T-X) 'Dues'
          INTO #SCR-CT-REMARKS (#P-X, #T-X)
      END-IF
    END-IF
*
    MOVE 'PDUP'    TO #CT-TO-PLAN     (#P-X, #T-X)
    RESET             #CT-NU-PREM (#P-X, #T-X)
    MOVE #CURR-DB  TO #CT-NU-DB       (#P-X, #T-X)
    MOVE #WHOLE-DOLLARS TO #CT-AMT-LUMP-SUM (#P-X, #T-X)
    MOVE #DUES-DIFF     TO #CT-DUES-PAID (#P-X, #T-X)   /* DW17
    ADD #DUES-DIFF      TO #CT-AMT-LUMP-SUM (#P-X, #T-X)
*
    IF   (ISSUE-DATE (#IFL) GT 19880620)
        AND (*DATN - ISSUE-DATE (#IFL) LT 70000) /* PUAP within 7 years
      COMPUTE #AP-PREMS-PAID = #PREMS-PAID + #WHOLE-DOLLARS
        + #DUES-DIFF
      MOVE *DATN TO #YYYYMMDD
*
      RESET #SUFFIX
      PERFORM CALL-GMECCSXX
*
      IF #EXCEEDS-MEC NE 0
        MOVE 'Y' TO #CT-TAMRA-IND (#P-X, #T-X)
        MOVE 'TAMRA Restrictions/MEC' TO #SCR-CT-REMARKS (#P-X, #T-X)
      END-IF
    END-IF
*
    IF #CT-LN-INT (#P-X) > #CURR-CSV * .75                        /* PM7
      MOVE 'Loan > 75%-Not Recommended.'                          /* PM7
        TO #SCR-CT-REMARKS (#P-X, #T-X)                         /* PM7
    END-IF                                                        /* PM7
*
    PERFORM STORE-FOR-SCREEN
  END-IF
*
* #YYYYMMDD #PAY-STATUS-48 #AP-PREMS-PAID not needed for "135"
  MOVE '135' TO #SUFFIX
  PERFORM CALL-GMECCSXX /* get 1035 note info
*
  IF COST-BASIS (#IFL) = 0
    MOVE #PREMS-PAID TO #CURR-COST-BASIS
  ELSE
    COMPUTE #CURR-COST-BASIS = COST-BASIS (#IFL)
      + (#PREMS-PAID - TOT-PREMIUMS-PAID (#IFL))  /* AAFMAA TPP
  END-IF
*
  IF #CONV-TO-PAY NE 0  /* 2nd time around w entered term to pay
      AND #NXT     /* DW6
      AND NOT #IN-THE-CORRIDOR
    COMPRESS #CONV-TO-PAY 'F' TO #TO-PLAN LEAVING NO /* CONV TO ?-Pay
    MOVE #CONV-TO-PAY TO #PLAN-N
    MOVE #TO-PLAN TO #PLAN-A
    MOVE #TO-PLAN TO #PLAN
    COMPRESS #CONV-TO-PAY '-Pay' TO #CT-TO-PLAN (#P-X, #T-X + 1)
      LEAVING NO
    PERFORM CONV-PP
  END-IF
*
  MOVE '7P' TO #TO-PLAN     /* CONV TO 7-Pay
  MOVE 7    TO #PLAN-N
  MOVE '7P' TO #PLAN-A
  MOVE '7P' TO #PLAN
  MOVE '7-Pay' TO #CT-TO-PLAN (#P-X, #T-X + 1)
  PERFORM CONV-PP
*
  MOVE '20'  TO #TO-PLAN    /* CONV TO 20-PAY
  MOVE 20    TO #PLAN-N
  MOVE '20P' TO #PLAN-A
  MOVE '20P' TO #PLAN
  MOVE '20-Pay' TO #CT-TO-PLAN (#P-X, #T-X + 1)
  PERFORM CONV-PP
*
  MOVE '30'  TO #TO-PLAN    /* CONV TO 30-PAY
  MOVE 30    TO #PLAN-N
  MOVE '30P' TO #PLAN-A
  MOVE '30P' TO #PLAN
  MOVE '30-Pay' TO #CT-TO-PLAN (#P-X, #T-X + 1)
  PERFORM CONV-PP
*
  IF #NXT     /* DW6
    IF ISSUE-AGE-N (#IFL) = 0
      MOVE 99 TO #PLAN-N
    ELSE
      COMPUTE #PLAN-N = 100 - ISSUE-AGE-N (#IFL)
    END-IF
*
    MOVE #PLAN-N TO #TO-PLAN-N
  ELSE
    MOVE 'OL' TO #TO-PLAN    /* CONV TO OL
    MOVE 96 TO #PLAN-N
  END-IF
*
  MOVE 'OL' TO #PLAN-A
  MOVE 'OL' TO #PLAN
  MOVE 'OL' TO #CT-TO-PLAN (#P-X, #T-X + 1)
  PERFORM CONV-PP
*
  MOVE PLAN (#IFL) TO #PLAN
  IF  ((PAY-STATUS (#IFL) LT '42')  /* CONV TO RPU W LOAN PRORATE
      OR  (X-LOAN-AMOUNT (#IFL) NE 0) OR (X-LOAN-AMOUNT-2 (#IFL) NE 0))
      AND (NOT PAY-STATUS (#IFL) EQ '43' OR= '73')   /* PULT OR NH    NG1
*     AND (NOT #PLAN = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO')        /* YK5
*     AND ((#PLAN-A1 LT 'U') OR (#PLAN-A1 GT 'Z'))                 /* YK5
      AND (NOT #PLAN = 'SO' OR = 'FSO')                            /* YK5
      AND ( NOT FUNCTION-TERM-POLICY(<#PLAN>) )                    /* YK5
*  AND (ISSUE-AGE (#IFL) GT '15') /* rpu's must be 15-removed 3/2005 RLB
*  AND (ISSUE-AGE (#IFL) GT '13') /* rpu's under age 14 abend ????? DW14
*  AND ((ISSUE-AGE-N (#IFL) + LAST-DURATION (#IFL))
*       GT 13) /* rpu's under age 14 abend/ commented out DW15
*  AND ((ID-NUMBER = 35448) OR (LAST-DURATION (#IFL) GE 2)) /* 10/98 skh
*     above removed 4/99 all rpus are valid if db over 500.00
      AND (ONLINE-ACTION-GN NE '2')     /* NEW member THIS MONTH
      AND (ONLINE-ACTION (#IFL) NE '1') /* NEW POLICY THIS MONTH
*  AND (#TOT-POLS-W-CSV GT 1)
*  AND (NOT #NXT    /* old & new in the corr allowed a/o 12/23/04 DW6
*   OR NOT #IN-THE-CORRIDOR)
    MOVE 'RP' TO #TO-PLAN
    MOVE TRUE TO #PRORATE-LOAN   /* use this policies loan
*
    IF PAY-STATUS (#IFL) GT '40'   /* DW13
      MOVE *DATN TO #TRAN-DATE
    ELSE
      MOVE PAID-TO-DATE (#IFL) TO #TRAN-DATE
    END-IF
    PERFORM CALL-AOCX2V6A     /* to get death benefit
*
*   IF  (#TOT-POLS = 1)    /* removed 6/98 as per LCC
    IF   (#OUTPUT-CALC-AMT LT 5000.00)  /* was 500 chged 9/2003 bmg
*     AND (NOT #CGA-CLERK = 'KHB' OR = 'DRW') /* added 1/10/2002 khb
      IGNORE
    ELSE
      ADD 1 TO #T-X
      MOVE #OUTPUT-CALC-AMT TO #CT-NU-DB (#P-X, #T-X)
      MOVE 'RPU' TO #CT-TO-PLAN (#P-X, #T-X)
      RESET #CT-RPU-LOAN-IND (#P-X,#T-X)
*
      IF (X-LOAN-AMOUNT (#IFL) NE 0) OR (X-LOAN-AMOUNT-2 (#IFL) NE 0)
        MOVE 'P' TO #CT-RPU-LOAN-IND (#P-X, #T-X)
        COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'With loan/int pd-off'
          INTO #SCR-CT-REMARKS (#P-X, #T-X)
      END-IF
*
      COMPUTE #CT-TAXABLE-INC (#P-X, #T-X)
        = #CT-LN-INT (#P-X) - #CURR-COST-BASIS /* was #prems-paid 3/2003
      RESET  #CT-NU-PREM (#P-X, #T-X)
      RESET #CT-AMT-LUMP-SUM (#P-X, #T-X)
      PERFORM STORE-FOR-SCREEN
    END-IF
  END-IF
*
* MOVE PLAN (#IFL) TO #PLAN
* IF  ((PAY-STATUS (#IFL) LT '42')  /* CONV TO RPU USING ALL OF LOAN
*  OR  (X-LOAN-AMOUNT (#IFL) NE 0) OR (X-LOAN-AMOUNT-2 (#IFL) NE 0))
*  AND (NOT #PLAN = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO')
*  AND ((#PLAN-A1 LT 'U') OR (#PLAN-A1 GT 'Z'))
*  AND (ISSUE-AGE (#IFL) GT '15') /* rpu's must be at least 15
*  AND (ONLINE-ACTION-GN NE '2')     /* NEW member THIS MONTH
*  AND (ONLINE-ACTION (#IFL) NE '1') /* NEW POLICY THIS MONTH
*  AND (#TOT-LOAN-AMOUNT GT 0)
*  AND (#TOT-POLS-W-CSV GT 1)
*  AND (#TOT-LOAN-AMOUNT + #TOT-CURR-ACCUM-INT) LT #CURR-CSV
*   MOVE 'RP' TO #TO-PLAN
*   RESET #PRORATE-LOAN
*
*   MOVE PAID-TO-DATE (#IFL) TO #TRAN-DATE
*   PERFORM CALL-AOCX2V6A     /* to get death benefit
*
*   IF  (#TOT-POLS = 1)    /* removed 6/98 as per LCC
*   IF   (#OUTPUT-CALC-AMT LT 500.00)
*     IGNORE
*   ELSE
*     ADD 1 TO #T-X
*     MOVE 'RPU'     TO #CT-TO-PLAN (#P-X, #T-X)
*     MOVE 'A' TO #CT-RPU-LOAN-IND (#P-X,#T-X)
*
*     IF (#TOT-LOAN-AMOUNT + #TOT-CURR-ACCUM-INT) GT #PREMS-PAID
*       COMPUTE #CT-TAXABLE-INC (#P-X, #T-X)
*        = (#TOT-LOAN-AMOUNT + #TOT-CURR-ACCUM-INT) - #PREMS-PAID
*
*       IF #CT-TAXABLE-INC (#P-X, #T-X) LT 10.00
*         RESET #CT-TAXABLE-INC (#P-X, #T-X)
*       END-IF
*     END-IF
*
*     RESET             #CT-NU-PREM (#P-X, #T-X)
*     MOVE #OUTPUT-CALC-AMT TO #CT-NU-DB (#P-X, #T-X)
*     RESET #CT-AMT-LUMP-SUM (#P-X, #T-X)
*     MOVE 'Using all of loan' TO #SCR-CT-REMARKS (#P-X, #T-X)
*     PERFORM STORE-FOR-SCREEN
*   END-IF
* END-IF
*
  RESET #DO-RSGN
  MOVE PLAN (#IFL) TO #PLAN
  IF (PAY-STATUS (#IFL) LT '42')   /* RESIGN SETUP
      AND (NOT PAY-STATUS (#IFL) EQ '43' OR= '73')   /* PULT OR NH  NG1
      AND (#CURR-CSV LE 0)   /* should do csv - added 4/2003
      AND ((((CONV-DURATION (#IFL) NE 999)    /* NON-CAP POL
      AND  (LAST-DURATION (#IFL) LT 2))
*  OR ((CONV-DURATION (#IFL) = 999)       /* CAP POL
*       AND (X-LOAN-AMOUNT (#IFL) LE 200.00)     /* WAS 5.00
*       AND (#CURR-CSV LE 0)))    /* removed 6/5/2001 elb
*   above replaced by below 3/10/2003 as per khb
      OR  (CONV-DURATION (#IFL) = 999))     /* CAP POL
*     OR  (#PLAN = 'LT' OR = 'RT' OR = 'SO')                        /* YK5
*     OR  ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z')))  /* VAR-TERM   /* YK5
      OR  (#PLAN = 'SO')                                            /* YK5
      OR FUNCTION-TERM-POLICY(<#PLAN>))               /* VAR-TERM   /* YK5
    MOVE TRUE TO #DO-RSGN
  END-IF
*
  IF #DO-RSGN                               /* FULL RESIGN
    ADD 1 TO #T-X
    MOVE 'RSGN' TO #CT-TO-PLAN (#P-X, #T-X)
    RESET #CT-NU-PREM (#P-X, #T-X)
    RESET #CT-NU-DB   (#P-X, #T-X)
    RESET #CT-AMT-LUMP-SUM (#P-X, #T-X)
    RESET #CT-PREMS-PAID (#P-X, #T-X)
    RESET #CT-TAXABLE-INC (#P-X, #T-X)
*
    PERFORM STORE-FOR-SCREEN
  END-IF
*
  MOVE PLAN (#IFL) TO #PLAN
*  IF #PLAN = 'LT' OR = 'RT'                                         /* YK5
*    OR  ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))   /* VAR-TERM     /* YK5
  IF FUNCTION-TERM-POLICY(<#PLAN>)                                  /* YK5
    IF FACE-AMOUNT (#IFL) GE 600000
      MOVE #TM-600 TO #SPLIT-AMTS
      MOVE 13 TO #NUM-SPL
    ELSE
      IF FACE-AMOUNT (#IFL) GE 400000
        MOVE #TM-400 TO #SPLIT-AMTS
        MOVE 13 TO #NUM-SPL
      ELSE
        IF FACE-AMOUNT (#IFL) GE 200000
          MOVE #TM-200 TO #SPLIT-AMTS
          MOVE 13 TO #NUM-SPL
        ELSE
          IF FACE-AMOUNT (#IFL) GE 100000
            MOVE #TM-100 TO #SPLIT-AMTS
            MOVE 5 TO #NUM-SPL
          END-IF
        END-IF
      END-IF
    END-IF
  ELSE
    MOVE #WL-ALL TO #SPLIT-AMTS
    MOVE 9 TO #NUM-SPL
  END-IF
*
  FOR #I2 1 TO #NUM-SPL /* rsgn split of variable amts
    IF #SPL-AMTS-A (#I2) = ' '
        OR #FLEX /* PM42
        OR (PLAN (#IFL) = 'GPL' OR='GP2')                   /* DW21
      ESCAPE BOTTOM
    END-IF
*
    IF (#NEW-FACE NE 0)
      IF #I2 GT 1
        ESCAPE BOTTOM
      END-IF
*
*     COMPUTE #CSV-X = #NEW-FACE / 5000   /* DW18
      COMPUTE #CSV-X = #NEW-FACE / 1000   /* DW18
    ELSE
*     COMPUTE #CSV-X = #SPL-AMTS (#I2) / 5   /* DW18
      COMPUTE #CSV-X = #SPL-AMTS (#I2) / 1   /* DW18
    END-IF
*
*   COMPUTE #CSV-FACE = 5000 * #CSV-X     /* DW18
    COMPUTE #CSV-FACE = 1000 * #CSV-X     /* DW18

    MOVE PLAN (#IFL) TO #PLAN
    IF   #DO-RSGN
        AND (#CSV-FACE LT FACE-AMOUNT (#IFL))
      ADD 1 TO #T-X
      COMPUTE #CT-TERM-FACE (#P-X, #T-X) =
        FACE-AMOUNT (#IFL) - #CSV-FACE
*     COMPUTE #W-K = #CSV-X * 5                /* DW18
      COMPUTE #W-K = #CSV-X * 1                /* DW18

      MOVE EDITED #W-K (EM=ZZ9) TO #CT-TO-PLAN (#P-X, #T-X)
      COMPRESS 'R$' #CT-TO-PLAN (#P-X, #T-X) 'K'
        INTO #CT-TO-PLAN (#P-X, #T-X) LEAVING NO
      MOVE PLAN (#IFL) TO #TO-PLAN
      MOVE PLAN (#IFL) TO #PLAN
      MOVE #CSV-FACE TO #FAC-AMT
      PERFORM CALC-NU-PREM /* recalculate Prem
      MOVE #NU-MODAL-PREM TO #CT-NU-PREM (#P-X, #T-X)
*     COMPUTE #CT-NU-DB (#P-X, #T-X) = #CSV-X * 5000
      COMPUTE #CT-NU-DB (#P-X, #T-X) = #CSV-X * 1000    /* DW18
*
      PERFORM STORE-FOR-SCREEN
    END-IF
  END-FOR
*
  RESET #DO-CSV
*  IF   (NOT #PLAN  = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO')                /* YK5
*     AND ((#PLAN-A1 LT 'U') OR (#PLAN-A1 GT 'Z'))  /* BYPASS VAR-TERM    /* YK5
  IF   (NOT #PLAN = 'SO' OR = 'FSO')                                     /* YK5
      AND ( NOT FUNCTION-TERM-POLICY(<#PLAN>))                            /* YK5
      AND (NOT PAY-STATUS (#IFL) EQ '43' OR= '73')   /* PULT OR NH           NG1
      AND (#CURR-CSV GT 0)
      AND ((CONV-DURATION (#IFL) NE 999)   /* not cap
      OR  (CONV-DURATION(#IFL) = 999)
      AND (X-LOAN-AMOUNT (#IFL) = 0)) /* PD-OFF CAP
      OR (ID-NUMBER = 163732)           /* PM99
    MOVE TRUE TO #DO-CSV
  END-IF
*
  MOVE PLAN (#IFL) TO #PLAN
  IF #DO-CSV                         /* full cash value
    RESET #HAS-1035-LUMP-SUM                 /* DW19
    MOVE '135' TO #SUFFIX
    PERFORM CALL-GMECCSXX
    IF (#1035-EXCH-AMT NE 0) OR (#LUMP-PMT NE 0)
      MOVE TRUE TO #HAS-1035-LUMP-SUM           /* DW19
    END-IF
*
    ADD 1 TO #T-X
    MOVE 'CSV' TO #CT-TO-PLAN (#P-X, #T-X)
    RESET #CT-NU-PREM (#P-X, #T-X)
    RESET #CT-NU-DB   (#P-X, #T-X)
*
    IF   (CONV-DURATION (#IFL) = 999)    /* CAP POL issued < 1/1/99
        AND (#PREMS-PAID GT #CURR-CSV) /* have tot prem pd
        AND (ISSUE-DATE (#IFL) LT 19990101)   /* guaranteed
      COMPUTE #CT-AMT-LUMP-SUM (#P-X, #T-X) = #PREMS-PAID
        - #TOT-LOAN-AMOUNT - #TOT-CURR-ACCUM-INT
    ELSE
      COMPUTE #CT-AMT-LUMP-SUM (#P-X, #T-X) = #CURR-CSV
        - #TOT-LOAN-AMOUNT - #TOT-CURR-ACCUM-INT
    END-IF
*
*  BELOW ADDED 10/5/2000 AS PER ELB
    SUBTRACT DEBIT-CREDIT-AMT FROM #CT-AMT-LUMP-SUM (#P-X, #T-X)
*
*   IF #CT-AMT-LUMP-SUM (#P-X, #T-X) LT 0 /* removed 3/2002 khb
*     RESET #CT-AMT-LUMP-SUM (#P-X, #T-X)
*   END-IF
    MULTIPLY #CT-AMT-LUMP-SUM (#P-X, #T-X) BY -1
*
*
    COMPUTE #CT-TAXABLE-INC (#P-X, #T-X) = #CURR-CSV - #CURR-COST-BASIS
*    IF  ((PAY-STATUS (#IFL) = '47')    /* ADDED  3/2003
*     AND (#1035-EXCH-AMT = 0))
*     or (internal exchange)
*     OR (ID-NUMBER = 50933)
*      COMPUTE #CT-TAXABLE-INC (#P-X, #T-X) = #CURR-CSV - #CURR-CB
*    ELSE
*      COMPUTE #AAFMAA-TPP = #PREMS-PAID - #1035-EXCH-AMT
*      COMPUTE #CT-TAXABLE-INC (#P-X, #T-X) =  #CURR-CSV
*         - CI-V.COST-BASIS  (#IFL) - #AAFMAA-TPP
*    END-IF
*
    IF (#1035-EXCH-AMT NE 0) OR (CI-V.COST-BASIS (#IFL) NE 0)
      MOVE EDITED #1035-EXCH-AMT (EM=ZZZ,ZZZ.99) TO #1035-DISP
      MOVE EDITED CI-V.COST-BASIS (#IFL) (EM=ZZZ,ZZZ.99) TO #CB-DISP
      COMPRESS '1035 Exch Amt =' #1035-DISP
        'Cost Basis =' #CB-DISP #TEXT INTO #TEXT
*
      IF #TRADE-UP                                                  /* PM23
        COMPRESS 'TRADE-UP - VERIFY AMOUNTS' #TEXT INTO #TEXT       /* PM23
      END-IF                                                        /* PM23
    END-IF
*
    IF #CT-TAXABLE-INC (#P-X, #T-X) LT 10.00
      RESET #CT-TAXABLE-INC (#P-X, #T-X)
    END-IF
*
*   MOVE #PREMS-PAID TO #CT-PREMS-PAID (#P-X, #T-X) /* repl 3/2003
    COMPUTE #CT-PREMS-PAID (#P-X, #T-X) =
      #CURR-CSV - #CT-TAXABLE-INC (#P-X, #T-X)
*
    IF   (MEC-IND (#IFL) = 'Y')
      MOVE 'Y' TO #CT-TAMRA-IND (#P-X, #T-X)
      MOVE 'MEC/TAMRA Restrictions' TO #SCR-CT-REMARKS (#P-X, #T-X)              /* vt4 was just 'TAMRA Restrictions' 
    END-IF
*
    IF  (X-LOAN-AMOUNT      (#IFL) NE 0)
        OR (X-LOAN-AMOUNT-2    (#IFL) NE 0)
        OR (X-ACCUM-INTEREST   (#IFL) NE 0)
        OR (X-ACCUM-INTEREST-2 (#IFL) NE 0)
      COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'With loan/int'
        INTO #SCR-CT-REMARKS (#P-X, #T-X)
      IF #CT-AMT-LUMP-SUM (#P-X, #T-X) LT 0
        COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'pd-off'
          INTO #SCR-CT-REMARKS (#P-X, #T-X)
      ELSE
        COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'remaining'
          INTO #SCR-CT-REMARKS (#P-X, #T-X)
      END-IF
    END-IF
*
    PERFORM STORE-FOR-SCREEN
  END-IF
*
  MOVE PLAN (#IFL) TO #PLAN
  IF #HAS-1035-LUMP-SUM      /* DW19
    WRITE 'Bypassed CSV splits on Pol Issued' ISSUE-DATE (#IFL)
      'due to Having 1035 Amt or Lump Sum Pmt'
      // 'Press ENTER to Continue'
  END-IF
*
  FOR #I2 1 TO 9
    IF  (#SPL-AMTS-A (#I2) = ' ')
*    or (#PLAN = mask (..'F'))   /* DW19
*    OR #FLEX /* PM4     DW19
        OR #HAS-1035-LUMP-SUM  /* DW19
        OR IS-ANNUITY-LIFE (< PLAN(#IFL) >)   /* DW10 /* TT3
        OR (PLAN (#IFL) = 'GPL' OR= 'GP2')                   /* DW21
      ESCAPE BOTTOM
    END-IF
*
    IF #NEW-FACE NE 0    /* DW18
      IF #NEW-FACE LT 10000
        MOVE 10000 TO #NEW-FACE
        WRITE 'New Face must be at least $10,000'
          // 'Press ENTER to Continue'
      END-IF
*
      IF #I2 GT 1
        ESCAPE BOTTOM
      END-IF
*
      COMPUTE #CSV-X = #NEW-FACE / 1000   /* DW18
    ELSE
      COMPUTE #CSV-X = #SPL-AMTS (#I2) / 1   /* DW18
*     COMPUTE #CSV-X = #SPL-AMTS (#I2) / 5   /* DW18
    END-IF
*
    COMPUTE #CSV-FACE = 1000 * #CSV-X     /* DW18
*   COMPUTE #CSV-FACE = 5000 * #CSV-X     /* DW18
*
    IF   (FACE-AMOUNT (#IFL) GT #CSV-FACE)
        AND (#T-X LT 16)
        AND #DO-CSV
*
      ADD 1 TO #T-X
      COMPUTE #CT-TERM-FACE (#P-X, #T-X) =
        FACE-AMOUNT (#IFL) - #CSV-FACE
      COMPRESS 'C' #I2 INTO #TO-PLAN LEAVING NO /* C1 to C9
      MOVE PAID-TO-DATE (#IFL) TO #TRAN-DATE
*     PERFORM CALL-AOCX2V6A /* <<<<<<<<<<<<<<<<<<<<<<<<   DW99
*     COMPUTE #W-K = #CSV-X * 5    /* DW18
      COMPUTE #W-K = #CSV-X * 1    /* DW18

      MOVE EDITED #W-K (EM=ZZ9) TO #CT-TO-PLAN (#P-X, #T-X)
      COMPRESS '$' #CT-TO-PLAN (#P-X, #T-X) 'K'
        INTO #CT-TO-PLAN (#P-X, #T-X) LEAVING NO
*
      IF PAY-STATUS (#IFL) GE '40'
        RESET #CT-NU-PREM (#P-X, #T-X)
      ELSE
        MOVE PLAN (#IFL) TO #TO-PLAN
        MOVE PLAN (#IFL) TO #PLAN
        MOVE #CSV-FACE TO #FAC-AMT
        PERFORM CALC-NU-PREM /* recalculate Prem
        MOVE #NU-MODAL-PREM TO #CT-NU-PREM (#P-X, #T-X)
*
        IF (#1035-EXCH-AMT NE 0)
          COMPRESS #SCR-CT-REMARKS (#P-X, #T-X)
            'Invalid/up-front cash' INTO
            #SCR-CT-REMARKS (#P-X, #T-X)
        END-IF
      END-IF
*
*     MOVE #OUTPUT-CALC-AMT TO #CT-NU-DB (#P-X, #T-X) /* repl 11/2003
      COMPUTE ROUNDED #WORK-AMT = #CURR-DB *
*          (FACE-AMOUNT (#IFL) - #CSV-FACE) / FACE-AMOUNT (#IFL)
        #CSV-FACE / FACE-AMOUNT (#IFL)
      MOVE ROUNDED #WORK-AMT TO #CT-NU-DB (#P-X, #T-X)
      MOVE #CSV-FACE TO #CT-NU-DB (#P-X, #T-X)
      COMPUTE ROUNDED #WORK-AMT = #CURR-CSV *
        (FACE-AMOUNT (#IFL) - #CSV-FACE) / FACE-AMOUNT (#IFL)
      MOVE ROUNDED #WORK-AMT TO #CASH-AVAIL
      COMPUTE #CT-AMT-LUMP-SUM (#P-X, #T-X) = #CASH-AVAIL
        - #TOT-LOAN-AMOUNT - #TOT-CURR-ACCUM-INT
*
      MULTIPLY #CT-AMT-LUMP-SUM (#P-X, #T-X) BY -1
*
      COMPUTE ROUNDED #WORK-AMT = #AAFMAA-TPP *
        (FACE-AMOUNT (#IFL) - #CSV-FACE) / FACE-AMOUNT (#IFL)
      MOVE ROUNDED #WORK-AMT TO #AAFMAA-TPP-PRO
      COMPUTE ROUNDED #WORK-AMT = #1035-EXCH-AMT *
        (FACE-AMOUNT (#IFL) - #CSV-FACE) / FACE-AMOUNT (#IFL)
      MOVE ROUNDED #WORK-AMT TO #1035-PRO
      COMPUTE ROUNDED #WORK-AMT = CI-V.COST-BASIS (#IFL) *
        (FACE-AMOUNT (#IFL) - #CSV-FACE) / FACE-AMOUNT (#IFL)
      MOVE ROUNDED #WORK-AMT TO #CB-PRO
*
      COMPUTE ROUNDED #WORK-AMT = #CURR-COST-BASIS /* was #prms-pd 3/03
        * (FACE-AMOUNT (#IFL) - #CSV-FACE) / FACE-AMOUNT (#IFL)
*
      IF PAY-STATUS (#IFL) = '47'    /* ADDED  3/2003
          AND (#1035-EXCH-AMT = 0)
        COMPUTE #CT-TAXABLE-INC (#P-X, #T-X) = #CASH-AVAIL - #WORK-AMT
      ELSE
        COMPUTE #AAFMAA-TPP-PRO = #WORK-AMT - #1035-PRO
        COMPUTE #CT-TAXABLE-INC (#P-X, #T-X) =  #CASH-AVAIL
          - #CB-PRO - #AAFMAA-TPP-PRO      /* new a/o 3/2003
      END-IF
*
      IF #CT-TAXABLE-INC (#P-X, #T-X) LT 10.00
        RESET #CT-TAXABLE-INC (#P-X, #T-X)
      END-IF
*
      COMPUTE #CT-PREMS-PAID (#P-X, #T-X) =
        #CURR-CSV - #CT-TAXABLE-INC (#P-X, #T-X)
*
      IF  (X-LOAN-AMOUNT      (#IFL) NE 0)
          OR (X-LOAN-AMOUNT-2    (#IFL) NE 0)
          OR (X-ACCUM-INTEREST   (#IFL) NE 0)
          OR (X-ACCUM-INTEREST-2 (#IFL) NE 0)
        COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'With loan/int'
          INTO #SCR-CT-REMARKS (#P-X, #T-X)
        IF #CT-AMT-LUMP-SUM (#P-X, #T-X) LT 0
          COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'pd-off'
            INTO #SCR-CT-REMARKS (#P-X, #T-X)
        ELSE
          COMPRESS #SCR-CT-REMARKS (#P-X, #T-X) 'remaining'
            INTO #SCR-CT-REMARKS (#P-X, #T-X)
        END-IF
      END-IF
*
      PERFORM STORE-FOR-SCREEN
    END-IF
  END-FOR
*
  IF *DEVICE NE 'BATCH'
    IF #BANKRUPT                                                  /* PM1
      COMPRESS '* Member in Bankruptcy *' #TEXT INTO #TEXT    /* PM1
    END-IF
*
    RESET #NEW-FACE
    MOVE '*' TO #CGA-SCR-COMMAND
    INPUT TEXT #TEXT MARK *#SCR-SELECT (1) USING MAP 'C1600MCO'
*
    IF #CGA-SCR-COMMAND NE '*'
      FETCH 'G1000PXX'
    END-IF
  END-IF
*

  IF (#NEW-FACE NE 0)
      OR ((#CONV-TO-PAY NE 0) AND (#CONV-TO-PAY NE #LAST-CONV-TO-PAY))
    MOVE #CONV-TO-PAY TO #LAST-CONV-TO-PAY
    RESET #CT-SELECT      (#IFL, *)
    RESET #CT-TO-PLAN     (#IFL, *)
    RESET #CT-TERM-FACE   (#IFL, *)
    RESET #CT-NU-PREM     (#IFL, *)
    RESET #CT-NU-DB       (#IFL, *)
    RESET #CT-AMT-LUMP-SUM(#IFL, *)
    RESET #CT-PREMS-PAID  (#IFL, *)
    RESET #CT-TAXABLE-INC (#IFL, *)
    RESET #CT-TAMRA-IND   (#IFL, *)
    RESET #CT-RPU-LOAN-IND(#IFL, *)
    RESET #CT-BYPASS      (#IFL, *)
    SUBTRACT 1 FROM #IFL /* to do this line again
    SUBTRACT 1 FROM #P-X
    ESCAPE TOP
  END-IF
*
  RESET #CT-SELECT (#P-X, *)
  FOR #T-X 1 TO 16
    IF  (#SCR-SELECT (#T-X) NE ' ')
      IF  (#CT-TO-PLAN (#P-X, #T-X) = 'CSV')
          OR (#CT-TO-PLAN (#P-X, #T-X) = MASK ('$'))
        IF NOT #SCR-SELECT (#T-X) = ' ' OR = '1' OR = '2'
          REINPUT 'Code must be "1" for CSV or "2" for 1035-exchange'
            MARK *#SCR-SELECT (#T-X)
        END-IF
      ELSE
        IF  (#CT-TO-PLAN (#P-X, #T-X) = 'RSGN')
            OR (#CT-TO-PLAN (#P-X, #T-X) = MASK ('R$'))
          IF NOT #SCR-SELECT (#T-X) = ' ' OR = 'X'                /* PM9
            REINPUT 'CODE MUST BE "X" to select or " " to bypass' /* PM9
              MARK *#SCR-SELECT (#T-X)
          END-IF
        ELSE
          IF NOT #SCR-SELECT (#T-X) = ' ' OR = 'X'
            REINPUT 'CODE MUST BE "X" to select or " " to bypass'
              MARK *#SCR-SELECT (#T-X)
          END-IF
        END-IF
      END-IF
*
      MOVE #SCR-SELECT (#T-X) TO #CT-SELECT (#P-X, #T-X)
      ADD 1 TO #NUM-SEL
    END-IF
  END-FOR
END-FOR
*
FOR #P-X 1 TO 9
  FOR #T-X 1 TO 16
    IF   (#CT-SELECT (#P-X, #T-X) NE ' ')
        AND (NOT #CT-BYPASS (#P-X, #T-X))
      MOVE #CT-TBL-ACTUAL-SEG (#P-X) TO #CONTACT-SEG      /* DW16
      IF  (#CT-TO-PLAN (#P-X, #T-X) = MASK ('$'))
          OR (#CT-TO-PLAN (#P-X, #T-X) = MASK ('R$'))
        MOVE TRUE TO #SPLIT
      END-IF
*
      #MODE := MODE(#P-X)                               /* YK2
      #SCN-POLICY-NUMBER := ST-V.POLICY-ID(#CONTACT-SEG)
      CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD #SCN-POLICY-NUMBER
*
      #POLICY-OWNER-CI := GET-POL-OWNER-CI (<#SCN-POLICY-NUMBER>) (1)
      #SALUTATION       := 'TOWHOM'
      CALLNAT 'GPRS0CNT' #POLICY-OWNER-CI #SALUTATION
*      #SALUTATION := EDIT_NAME_LOWCASE (< #SALUTATION >)   /* vt1 /\ /*  bz-Name
      IF MEMBER-CONTACT-ID NE #POLICY-OWNER-CI
        #OWNER-NAME := '!LETTER'
        CALLNAT 'GPRS0CNT' #POLICY-OWNER-CI #OWNER-NAME
        #EXT-FORMATED-NAME := #OWNER-NAME
      END-IF
      MOVE 'C1610SCO' TO #PROGRAM
      PERFORM CALL-C16XXSCO
*
      MOVE 'C1620SCO' TO #PROGRAM

      PERFORM CALL-C16XXSCO
      #FORMATED-NAME-35 := #SALUTATION
    END-IF
  END-FOR
END-FOR
*
IF *DEVICE = 'BATCH'  /* go back to calling program
  ESCAPE ROUTINE
END-IF
*
IF #SPLIT
  WRITE /// 'MR is invalid when splits are selected'
    //  'Mailing must be done by you'
    //  'Press Enter to continue'
  RESET #NUM-SEL
END-IF
*
IF #NUM-SEL GT 0
  MOVE 'N' TO #Y-N
  INPUT MARK *#Y-N USING MAP 'C1601MCO'
*
  IF #CGA-SCR-COMMAND NE '*'
    FETCH 'G1000PXX'
  END-IF
*
  IF #Y-N = 'Y'
*    PERFORM MR-PROCESSING
    MOVE '"MR" has been bypassed. Depricated.' TO #TEXT  /* bz1
  ELSE
    MOVE '"MR" has been bypassed' TO #TEXT
  END-IF
*
  MOVE (AD=P) TO #SCR-CV
  INPUT TEXT #TEXT USING MAP 'C1601MCO'
END-IF
*
IF #CGA-SCR-COMMAND = '*'
  MOVE 'CO' TO #CGA-SCR-COMMAND
END-IF
*
FETCH 'G1000PXX'
*
* * * * * * * * * * * * *
DEFINE SUBROUTINE CONV-PP
* * * * * * * * * * * * *
IF   (PAY-STATUS (#IFL) LT '42')
* YK5 Start
*     AND (NOT PLAN(#IFL) = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO' OR = #PLAN-A
*     OR = 'GPL')                              /* DW21
*     AND (PLAN (#IFL) NE MASK ('U'))
*     AND (PLAN (#IFL) NE MASK ('V'))
*     AND (PLAN (#IFL) NE MASK ('W'))
*     AND (PLAN (#IFL) NE MASK ('X'))
*     AND (PLAN (#IFL) NE MASK ('Y'))
*     AND (PLAN (#IFL) NE MASK ('Z'))
    AND (NOT PLAN(#IFL) = 'SO' OR = 'FSO' OR = #PLAN-A OR = 'GPL' OR='GP2')
    AND (NOT FUNCTION-TERM-POLICY(<PLAN(#IFL)>))
* YK5 end
    AND (ONLINE-ACTION-GN NE '2')     /* NEW MEMBER THIS MONTH
    AND (ONLINE-ACTION (#IFL) NE '1') /* NEW POLICY THIS MONTH
*   AND (LAST-DURATION (#IFL) LT #PLAN-N)
    AND (LAST-DURATION (#IFL) LT #PLAN-N - 1) /* added 7/2003 rlb
    AND NOT #IN-THE-CORRIDOR
* you can only convert if you're not "in the corridor" ie DB not growing
  ADD 1 TO #T-X
*
  IF NOT #NXT     /* DW6
    MOVE CI-V.FACE-AMOUNT (#IFL) TO #FAC-AMT
    PERFORM CALC-NU-PREM
  END-IF
*
  MOVE PAID-TO-DATE (#IFL) TO #TRAN-DATE
  PERFORM CALL-AOCX2V6A
*
  #SCR-CT-REMARKS (#P-X, #T-X) := ' '                   /*  BZ OI-3145
  IF (#NU-ANN-PREM-W-DUES LT CI-V.ANNUAL-PREM (#IFL))
    MOVE 'Insurability required' TO #SCR-CT-REMARKS (#P-X, #T-X)
    MOVE TRUE TO #INS-REQ (#P-X, #T-X)
  END-IF
*
  MOVE #NU-MODAL-PREM TO #CT-NU-PREM (#P-X, #T-X)
  MOVE #CURR-DB       TO #CT-NU-DB   (#P-X, #T-X)
  MOVE #OUTPUT-CALC-AMT TO #CT-AMT-LUMP-SUM (#P-X, #T-X)
  ADD #DUES-DIFF      TO #CT-AMT-LUMP-SUM (#P-X, #T-X)
  PERFORM STORE-FOR-SCREEN
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * *
* DEFINE SUBROUTINE MR-PROCESSING             /* bz1 commented out Start
* * * * * * * * * * * * * * * * * * *
* *
* CALLNAT 'C1604SCO'
*   #CGA-ID
*   #CGA-SCR-ID
*   #CGA-SCR-SUFFIX
*   #SCR-SUFFIX
*   #CGA-CLERK
*   #FIRST-LAST
*   #TODAY-YYYYMMDD-N
*   #COMP-1035
*   #FIND-CO-TYPE
*   #TEXT
*   #SCR-TYPES          (*)
*   #SCR-CT-REMARKS-TBL (*)
*   #CT-TBL-POLS        (*)
*   #CO-MR-TYPE
* *
* END TRANSACTION
* *
* END-SUBROUTINE                               /* bz1 commented out End
*
* * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALL-C16XXSCO
* * * * * * * * * * * * * * * * * *
*
* MOVE #FORMATED-NAME TO #FORMATED-NAME-35                /* vt1
#xx := #CT-TBL-ACTUAL-SEG(#P-X)
#MEC := MEC-IND(#xx)
MOVE #EXT-FORMATED-NAME TO #FORMATED-NAME-35               /* vt1
CALLNAT #PROGRAM #CGA-ISN #CGA-SCR-COMMAND #CGA-SCR-ID #CGA-SCR-SUFFIX
  #CGA-CLERK #TODAY-YYYYMMDD-N #FULL-RANK #LAST-NAME #FORMATED-NAME-35
  #FIRST-LAST #COMP-1035 #SCR-MAX-LINES #SCR-POLS #CERT-INFO #P-X #T-X
  #TOT-LOAN-AMOUNT #TOT-CURR-ACCUM-INT
  #CT-TBL-POLS (1:9) INTRO-FLAG PROCESS-IND #INSURED-NAME
  #EDS-ZIP-BAR-CODE #FIRST-ADDRESS #SECOND-ADDRESS #THIRD-ADDRESS
  DEBIT-CREDIT-AMT #NUM-OWNERS #MULT-OWNERS (*)
  MILITARY-STATUS ALOT-CHG-AUTH #MODE                      /* YK1
  #SALUTATION                                                        /* vt1
  #MEC                                                               /* bz1
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE STORE-FOR-SCREEN
* * * * * * * * * * * * * * * * *
*
CALLNAT 'C1603SCO'
  #FIND-CO-TYPE
  CO-RQSTS (*)
  #CGA-SCR-SUFFIX
  #SCR-SUFFIX
  #SCR-TYPES    (*)
  #CT-TBL-POLS  (*)
  #SCR-CT-REMARKS-TBL (*)
  #CO-MR-TYPE
  #P-X
  #T-X
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALL-AOCX2V6A
* * * * * * * * * * * * * * * * *
*
CALLNAT 'C1601SCO'
  #CGA-ORIG-COMMAND
  #CGA-ORIG-ID
  #CGA-ID
  #CGA-SCR-SUFFIX
  #TO-PLAN
  #SEX                                                      /* TT2
  #IFL
  #TRAN-DATE          /* was #today-yyyymmdd-n
  STATUS          (1:9)
  PLAN            (1:9)
  ONLINE-ACTION   (1:9)
  MODE            (1:9)
  CONVERSION-FLAG (1:9)
  SMOKER-FLAG     (1:9)
  ISSUE-AGE       (1:9)
  PAY-STATUS      (1:9)
  ISSUE-DATE      (1:9)
  PAID-TO-DATE    (1:9)
  FACE-AMOUNT     (1:9)
  ANNUAL-PREM     (1:9)
  LAST-DURATION   (1:9)
  CASH-VALUE      (1:9)
  DEATH-BENEFIT   (1:9)
  NUM-MBRSHIPS    (1:9)
  DURATION        (1:9)
  MONTH-IND       (1:9)
  MIN-CASH-VALUE  (1:9)
  NXT-YR-MIN-CASH-VALUE (1:9)
  NXT-MON-CASH-VALUE    (1:9)
  NXT-MON-DEATH-BENEFIT (1:9)
  ACC-CASH-VALUE        (1:9)
  CONV-DURATION         (1:9)
  MONTH-ALLOC-AMT       (1:9)
  PREM-DEFICIENCY       (1:9)
  BEG-CASH-VALUE        (1:9)
  NET-PR-RATIO          (1:9)
  #OUTPUT-CALC-AMT
  #OUTPUT-OLD-PDUP-AMT
  #PRORATE-LOAN
  #RPU-ACV
  #TOT-LOAN-AMOUNT
  #TOT-CURR-ACCUM-INT
  #NU-ANN-PREM
  #OUTPUT-PREM-DIFF
  #DUES-DIFF
  #LUMP-SUM
*
IF #TO-PLAN = 'RP'
  ESCAPE ROUTINE
END-IF
*
IF #NXT     /* DW6
  IF #TO-PLAN = 'AP'
    MOVE #NU-ANN-PREM TO #OUTPUT-CALC-AMT
  ELSE
    PERFORM CALC-DUES
    COMPUTE #NU-ANN-PREM-W-DUES = #NU-ANN-PREM + (#SVC-FEE / 12)
    PERFORM CALC-MODAL-PREM
    RESET #OUTPUT-CALC-AMT
  END-IF
ELSE
  IF #OUTPUT-CALC-AMT LT 0  /*  2/98 AS PER LCC TO PREVENT REFUNDS
      AND (#TO-PLAN = 'AP')   /* ON PAID-UPS
    RESET #OUTPUT-CALC-AMT
  END-IF
END-IF
*
END-SUBROUTINE /* (1752)
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-NU-PREM
* * * * * * * * * * * * * * * * *
*
* IF  (#PLAN = 'RT' OR = 'LT' OR = 'SO')                /* DW20      /* YK5
*     OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))                   /* YK5
IF (#PLAN = 'SO' OR FUNCTION-TERM-POLICY(<#PLAN>))                   /* YK5
    OR (#PLAN = '7P' OR = '20P' OR = '30P' OR = 'OL' OR = 'SP' OR = 'SI'
    OR = 'GPL' OR= 'GP2')                            /* DW921
*          Calc Premium using Tables
  RESET #SCR-SUFFIX
  IF MONTH-ALLOC-AMT (#IFL) = 999.99   /* use old prems
    MOVE 'OLD' TO #SCR-SUFFIX
  END-IF
*
  IF PREM-RATING (#IFL) NE ' '
    COMPRESS 'SB' PREM-RATING (#IFL) INTO #SCR-SUFFIX LEAVING NO
  END-IF
*
  CALLNAT 'GPREMSXX' #CGA-SCR-COMMAND #CGA-SCR-ID #SCR-SUFFIX
    #PLAN CI-V.ISSUE-AGE-N (#IFL) #NU-ANN-PREM
    CI-V.ISSUE-DATE (#IFL) CI-V.SMOKER-FLAG (#IFL) #FAC-AMT
    #SEX    /* DW12                                                 /* TT2
ELSE      /* Calc Whole Life Premiums using Formula
  PERFORM CALC-FLEX-PREM                            /* DW20
  MOVE #ANN-PREM TO #NU-ANN-PREM
END-IF
*
PERFORM CALC-DUES
COMPUTE #NU-ANN-PREM-W-DUES = #NU-ANN-PREM  + (#SVC-FEE * 12)
*
PERFORM CALC-MODAL-PREM
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-DUES
* * * * * * * * * * * * * *
*
RESET #SVC-FEE
IF #NXT     /* DW6
    AND (NOT #TO-PLAN = 'SO' OR = 'FS')
    AND (NOT INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    OR = 'O' OR = 'P' OR = 'Q')
    AND (#IFL = 1)
    AND (ST-V.DUES-ALL-PAID-IND NE 'Y')
    AND (ST-V.PROCESS-IND = 'G')           /* MUST BE G/F         DW23
  DECIDE ON FIRST VALUE #TO-PLAN
    VALUE '2P' MOVE #SVC-FEE-2P TO #SVC-FEE
    VALUE '3P' MOVE #SVC-FEE-3P TO #SVC-FEE
    VALUE '4P' MOVE #SVC-FEE-4P TO #SVC-FEE
    VALUE '5P' MOVE #SVC-FEE-5P TO #SVC-FEE
    VALUE '6P' MOVE #SVC-FEE-6P TO #SVC-FEE
    VALUE '7P' MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '8P' MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '9P' MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '20' MOVE #SVC-FEE-20 TO #SVC-FEE
    VALUE '30' MOVE #SVC-FEE-30 TO #SVC-FEE
    VALUE 'OL' MOVE #SVC-FEE-OL TO #SVC-FEE
*   VALUE 'RT' MOVE #SVC-FEE-TM TO #SVC-FEE            /* YK5
*   VALUE 'LT' MOVE #SVC-FEE-TM TO #SVC-FEE            /* YK5
    NONE        IGNORE
  END-DECIDE
*
* IF (#TO-PLAN-A1 GE 'U') AND (#TO-PLAN-A1 LE 'Z')      /* YK5
  IF FUNCTION-TERM-POLICY(<#TO-PLAN>)                   /* YK5
    MOVE #SVC-FEE-TM TO #SVC-FEE
  END-IF
*
  IF (#TO-PLAN = MASK (NN)) AND (#SVC-FEE = 0)
    IF #TO-PLAN LE '19' MOVE #SVC-FEE-10 TO #SVC-FEE ELSE
      IF #TO-PLAN LE '29' MOVE #SVC-FEE-20 TO #SVC-FEE ELSE
        IF #TO-PLAN LE '34' MOVE #SVC-FEE-30 TO #SVC-FEE ELSE
          MOVE #SVC-FEE-OL TO #SVC-FEE
        END-IF END-IF END-IF
  END-IF
*
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-MODAL-PREM
* * * * * * * * * * * * * * * * *
*
DECIDE ON FIRST MODE (#IFL)
  VALUE 'A' MOVE #NU-ANN-PREM-W-DUES TO #NU-MODAL-PREM
  VALUE '1' MOVE #NU-ANN-PREM-W-DUES TO #NU-MODAL-PREM
  VALUE 'S' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 2)
  VALUE '2' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 2)
  VALUE 'Q' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 4)
  VALUE '4' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 4)
  VALUE 'M' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 12)
  VALUE '0' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 12)
  VALUE 'G' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 12)
  VALUE 'E' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 12)
  VALUE 'G' COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 12)
  NONE      COMPUTE #NU-MODAL-PREM = (#NU-ANN-PREM-W-DUES / 12)
END-DECIDE
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * *
DEFINE CALC-PREMS-PAID-SETUP
* * * * * * * * * * * * * * *
*
* MOVE CI-V.DATE-OF-BIRTH           TO #PP-DATE-OF-BIRTH       /* vt1
MOVE #DOB                         TO #PP-DATE-OF-BIRTH         /* vt1
MOVE CI-V.ANNUAL-PREM (#I1)       TO #PP-ANNUAL-PREM
MOVE CI-V.PAY-STATUS (#I1)        TO #PP-PAY-STATUS
MOVE CI-V.TOT-PREMIUMS-PAID (#I1) TO #PP-TOT-PREMIUMS-PAID
MOVE CI-V.PAID-TO-DATE (#I1)      TO #PP-PAID-TO-DATE
MOVE CI-V.ISSUE-DATE (#I1)        TO #PP-ISSUE-DATE
MOVE CI-V.MODE (#I1)              TO #PP-MODE
MOVE CI-V.PLAN (#I1)              TO #PP-PLAN
MOVE CI-V.COST-BASIS (#I1)        TO #PP-COST-BASIS
MOVE CI-V.MONTH-ALLOC-AMT (#I1)   TO #PP-MONTH-ALLOC-AMT
MOVE ST-V.INTRO-FLAG              TO #PP-INTRO-FLAG
MOVE ST-V.X-FIRST-PLACE-FEE (#I1) TO #PP-FIRST-PLACE-FEE
MOVE ST-V.X-BILL-ADJUST     (#I1) TO #PP-BADJ
*
CALLNAT 'GPRPDSCO'
  #PP-DATE-OF-BIRTH
  #PP-ANNUAL-PREM
  #PP-PAY-STATUS
  #PP-TOT-PREMIUMS-PAID
  #PP-PAID-TO-DATE
  #PP-ISSUE-DATE
  #PP-MODE
  #PP-PLAN
  #PP-COST-BASIS
  #PP-MONTH-ALLOC-AMT
  #PP-INTRO-FLAG
  #PP-FIRST-PLACE-FEE
  #PREMS-PAID
  #SUB-PREMS-PAID
  #PP-BADJ
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-CAP-CSV
* * * * * * * * * * * * * * * *
*
IF PAY-STATUS (#IFL) GE '40'
  MOVE #CSV-4-CAP-CALC TO #CAP-CSV
  ESCAPE ROUTINE
END-IF
*
IF FACE-AMOUNT (#IFL) GT 10000.00
  COMPUTE ROUNDED #WORK-CAP-CONV-ACV =
    ((#CSV-4-CAP-CALC - #CAP-CONV-ACV) * (FACE-AMOUNT (#IFL) - 10000))
    / FACE-AMOUNT (#IFL)
  ADD #WORK-CAP-CONV-ACV TO #CAP-CONV-ACV
END-IF
*
IF ST-V.X-LOAN-AMOUNT (#IFL) = 0
  MOVE ST-V.X-LOAN-DATE (#IFL) TO #CAP-LOAN-END-DATE
ELSE
  RESET #CAP-LOAN-END-DATE
END-IF
*
MOVE *DATN TO #WYYYYMMDD-N
CALLNAT 'CCAPCSVP'
  ID-NUMBER
  CI-V.ISSUE-DATE (#IFL)
  #CAP-LOAN-END-DATE
  #WYYYYMMDD-N
  #CAP-CONV-ACV
  #CSV-4-CAP-CALC
  #CAP-CSV
  #CAP-LOAN-MONS
  #CAP-CSV-MONS
  #CAP-REMAIN-MONS
*
END-SUBROUTINE  /* (1966)
*
**********************************
DEFINE SUBROUTINE CALC-REAL-PREM
**********************************
*
FOR #I4 1 TO 800
  IF   (#ACV-DIFF GT ((#I4 * 1000) - 10))
      AND (#ACV-DIFF LT ((#I4 * 1000) + 10))
    IF #NEW-ACV LT ACCUM-CASH-VALUE-M (13)
      ADD (#I4 * 1000) TO #REAL-PREM
    ELSE
      SUBTRACT (#I4 * 1000) FROM #REAL-PREM
    END-IF
*
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALL-GMECCSXX
* * * * * * * * * * * * * * * *
*
CALLNAT 'GMECCSXX' CI-V.ID-NUMBER
  #SUFFIX
  PLAN        (#IFL)
  ISSUE-DATE  (#IFL)
  PAID-TO-DATE(#IFL)
  #YYYYMMDD   /* assumed PAID-UP-DATE(#IFL)
  ISSUE-AGE   (#IFL)
  ANNUAL-PREM (#IFL)
  SMOKER-FLAG (#IFL)
  FACE-AMOUNT (#IFL)
  DURATION    (#IFL)
  #PAY-STATUS-48 /* assumed PAY-STATUS  (#IFL)
  TOT-PREMIUMS-PAID (#IFL)
  #AP-PREMS-PAID  /* calc tpp
*
  #MAX-7-PAY
  #MEC-PREMS-PAID-TO-DATE
  #EXCEEDS-MEC
  #1035-NX
  #1035-EXCH-AMT
  #LUMP-PMT
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-FLEX-PREM           /* DW20
* * * * * * * * * * * * * * * * *
*
IF #PLAN = MASK (N'PF')
  MOVE #PLAN-N1 TO #DESIRED-YEARS
ELSE
  IF #PLAN = MASK (NN'F')
    MOVE #PLAN-N2 TO #DESIRED-YEARS
  ELSE
    WRITE 'Invalid Flex Plan=' #PLAN
    ESCAPE ROUTINE
  END-IF
END-IF
*
CALLNAT 'GFPRMSXX'
  #CGA-SCR-COMMAND
  #CGA-SCR-ID
  #AS-OF-DT
  ISSUE-AGE-N (#IFL)
  ISSUE-DATE  (#IFL)
  PREM-RATING (#IFL)
*  DATE-OF-BIRTH                            /* vt1
  #DOB                                      /* vt1
  #SEX                                      /* TT2
  #DESIRED-YEARS
  SMOKER-FLAG (#IFL)
  #FAC-AMT
  #ANN-PREM
  #ifl                                                 /* vt 07/12/2016
  st-v.version(#ifl)                                   /* vt 07/12/2016
*
END-SUBROUTINE
*
END
