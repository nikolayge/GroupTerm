* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: ATHPDEMO  COMPUTE DEMOGRAPHIC STATISTICS.
*                       THIS PROGRAM IS CALLED FROM ATHPSTAT.
************************************************************************
*                       MODIFICATION LOG                               *
* USER DATE     TAG  REASON                                            *
* PAM 03/11/2005  PM1  Reset display fields for GRANKSXX               *
* PAM 05/31/2005  PM2  Added AL plans to balancing.                    *
* DRW 09/06/2006  DW3  Increase size of #recs-read.                    *
* DRW 08/20/2008  DW4  Gen Plus statistics                             *
* PAM 01/31/2009  PM5  Include Gen Plus in balancing                   *
* RSE 09/22/2009  RE1  Change PROCESS-IND logic for Unification        *
* RSE 01/19/2013  RE2  Add LT2+ and EZ Term                            *
* TMT 06/10/2014  TT1  CONTACT NORMALIZATION - GENDER AND DOB          *
************************************************************************
*
DEFINE DATA
LOCAL USING CONTPDA1                  /* TT1
LOCAL
1 NT-V-X VIEW OF A-NOTES
  2 NOTE-DATE   (N8/60)
  2 NOTE-TEXT   (A60/60)
  2 REDEFINE NOTE-TEXT
    3 NOTE-TEXT-OCC  (60)
      4 NOTE-TEXT-21   (A21)
      4 NOTE-TEXT-3    (A3)
      4 NOTE-TEXT-29   (A36)
*
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER
  2 NOTE-TEXT  (A60/60)
  2 REDEFINE NOTE-TEXT /* if this is changed also chg ATHPCAPN & others
    3 CAPS-CONV-BY-YEAR  (10)    /* 10 past years
      4 CAPS-CONV-BY-ORIGIN (13)  /* 13th is for unknown
        5 CAPS-CONV-ORIG   (N5)
*
    3 CAPS-CONV-BY-MON  (12)    /* 12 last months (jan thru dec)
      4 CAPS-CONV-MON    (N5)
*
1 MD-V VIEW OF A-MBRSHIP-MTD-DETAIL
  2 ID-NUMBER
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A     (A6)
  2 ENTRY-DATE
  2 REDEFINE ENTRY-DATE
    3 ENTRY-DATE-YYYYMM (N6)
    3 ENTRY-DATE-DD     (N2)
  2 CODE
  2 USER
  2 REC-ISN
  2 ISSUE-DATE
*
1 MS-V VIEW OF A-MBRSHIP-STATS
  2 GAIN-MBRS          (27)      /* RE2 was 23
  2 SPS-GEN-GAIN-PLANS (25)      /* was 19             /* PM2  DW4   RE2 was 21
  2 GAINS-BY-PLAN      (9)       /* PM5                              RE2 was 7
*
1 MS-X-V VIEW OF A-MORE-STATS
  2 MONTH-KEY        (N6)
  2 POL-ST-SEX-CNT         (8, 2)
  2 POL-ST-SEX-TOT-AGE     (8, 2)
  2 POL-ST-SEX-TOT-FACE    (8, 2)
  2 POL-ST-CAT-CNT         (8, 7)
  2 POL-ST-CAT-TOT-AGE     (8, 7)
  2 POL-ST-CAT-TOT-FACE    (8, 7)
  2 POL-ST-CAP-CNT         (8, 2)
  2 POL-ST-CAP-TOT-AGE     (8, 2)
  2 POL-ST-CAP-TOT-FACE    (8, 2)
  2 POL-ST-POL-CNT         (8, 6)     /* RE2  was 8,4
  2 POL-ST-POL-TOT-AGE     (8, 6)     /* RE2  was 8,4
  2 POL-ST-POL-TOT-FACE    (8, 6)     /* RE2  was 8,4
  2 POL-ST-STAT-CNT        (8, 3)
  2 POL-ST-STAT-TOT-AGE    (8, 3)
  2 POL-ST-STAT-TOT-FACE   (8, 3)
*
1 #POL-STATS-OCC (8)
  2 #POL-STATS-SEX           (P5/2)
  2 #POL-STATS-SEX-AGE       (P7/2)
  2 #POL-STATS-SEX-FACE      (P9.2/2)
  2 #POL-STATS-CAP           (P5/2)
  2 #POL-STATS-CAP-AGE       (P7/2)
  2 #POL-STATS-CAP-FACE      (P9.2/2)
  2 #POL-STATS-CAT           (P5/7)
  2 #POL-STATS-CAT-AGE       (P7/7)
  2 #POL-STATS-CAT-FACE      (P9.2/7)
  2 #POL-STATS-POL-TYPE      (P3/6)   /* RE2 was 4
  2 #POL-STATS-POL-AGE       (P7/6)   /* RE2 was 4
  2 #POL-STATS-POL-TYPE-FACE (P9.2/6) /* RE2 was 4
  2 #POL-STATS-STAT          (P5/3)
  2 #POL-STATS-STAT-AGE      (P7/3)
  2 #POL-STATS-STAT-FACE     (P9.2/3)
*
1 #MULTIPE-ISSUE-DATE-TBL   (1000)  /* 082503
  2 #ID-NUMBER               (N6)    /* 082503
  2 #ISSUE-DATE              (N8)    /* 082503
1 #POLICY-CNT               (N2)    /* 082503
1 #POLICY-IDX               (I4)    /* 082503
1 #POLICY-IDX-2             (I4)    /* 082503
1 #IDEX-2                   (I2)    /* 082503
*
1 LK-V VIEW OF A-STATUS
  2 MILITARY-SERVICE
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER      (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NBR       (A6)
  2 LINKED-CN     (N6/1)
  2 REDEFINE LINKED-CN
    3 LINKED-CN-A  (A6/1)
  2 MEMBER-CONTACT-ID              /* TT1
  2 PROCESS-IND
*  2 DATE-OF-BIRTH                 /* TT1
  2 ISSUE-DATE          (N8/9)
  2 REDEFINE ISSUE-DATE
    3 ISSUE-DATE-OCC    (9)
      4 ID-YYYYMM   (N6)
      4 REDEFINE ID-YYYYMM    /* THIS WAS REDEFINESD IMPROPERLY
        5 ID-YYYY    (N4)
        5 ID-MM      (N2)
      4 ID-DD       (N2)
  2 STATUS         (9)
  2 NUM-MBRSHIPS   (9)
  2 PLAN           (9)
  2 REDEFINE PLAN
    3 PLAN-OCC      (9)
      4 PLAN-A1      (A1)
      4 PLAN-A2      (A2)
  2 MILITARY-SERVICE
  2 MILITARY-STATUS
*  2 SEX                           /* TT1
  2 RANK
  2 INTRO-FLAG
  2 CONV-DURATION            (9)
  2 FACE-AMOUNT              (9)
  2 ONLINE-ACTION            (9)
*
1 #MBRX                (I2)
1 #SRVX                (I2)
1 #SEXX                (I2)
1 #CAPX                (I2)
1 #CATX                (I2)
1 #POLX                (I2)
1 #STAX                (I2)
1 #IDEX                (I2)
1 #NO-MS-REC           (L)
1 #MIL-SERV      (A3)
1 #ST-NOT-FOUND  (L)
1 #NOT-FND       (L)
1 #MD-CNT        (N3)
1 #GAIN-PLANS    (N3)
1 #CAP-DIFF      (N3)
1 #PLAN-DIFF     (N3/6)   /* RE2
1 #FND-CURR-REIN     (L)
1 #FND-CURR-TERM     (L)
*
1 #COMMAND                  (A2) INIT <'BA'>
1 #INVALID                  (L)
1 #RANK-DISPL               (P2)
1 #RANK-LIT                 (A23)
1 #RANK-DISPLAY            (A5)
1 #CURR-AGE                 (P3)
1 #ISN                      (P8)
*
1 #JCL-PARM       (A32)
1 REDEFINE #JCL-PARM
  2 #JCL-WEEKLY-MONTHLY (A7)     /* 'WEEKLY ' OR 'MONTHLY' OR 'PRE-M-E'
1 REDEFINE #JCL-PARM
  2 #JCL-MM            (N2)   /* DATE PARM 03/01/1999
  2 #JCL-X1            (A1)
  2 #JCL-DD            (N2)
  2 #JCL-X2            (A1)
  2 #JCL-YYYY          (N4)
*
1 #WEEKLY-MONTHLY (A7)
1 #NEXT-MON-YYYYMM (N6)
1 #LAST-MON-YYYYMM (N6)
1 REDEFINE #LAST-MON-YYYYMM
  2 #LAST-YYYY      (N4)
  2 #LAST-MM        (N2)
1 #UPDATE-NOUPDATE (A8)
*
1 #COUNTERS
  2 #RECS-READ        (P7)    /* DW3
  2 #DEMO-ACCUM       (P5)
  2 #I1               (I2)
  2 #I2               (I2)
  2 #I3               (I2)
*
1 #DATN     (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY (N4)
  2 #DATN-MMDD (N4)
*
1 #YYYYMMDD     (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY    (N4)
  2 #MM      (N2)
  2 #DD      (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM  (N6)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A (A8)
*
1 #CAP-YYYYMM     (N6)
1 #NON-CAP-YYYYMM     (N6)
1 #1-MON-AGO-YYYYMMDD  (N8)
1 REDEFINE #1-MON-AGO-YYYYMMDD
  2 #1-MON-AGO-YYYYMM   (N6)
  2 REDEFINE #1-MON-AGO-YYYYMM
    3 #1-MON-AGO-YYYY    (N4)
    3 #1-MON-AGO-MM      (N2)
  2 #1-MON-AGO-DD       (N2)
1 #1-MON-AGO-INVERSE   (N8)
1 REDEFINE #1-MON-AGO-INVERSE
  2 #1-MON-AGO-YYYYMM-INVERSE (N6)
  2 #1-MON-AGO-DD-INVERSE     (N2)
1 #PARM-DATE-INVERSE   (N8)
1 #ENTRY-DATE-INVERSE  (N8)
*
1 DATE-OF-BIRTH        (N8.0)            /* TT1
END-DEFINE
*
FORMAT  LS=133 PS=76
WRITE   TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'PROGRAM MESSAGES'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
MOVE *DATN TO #DATN
READ WORK 1 ONCE RECORD #JCL-PARM
MOVE #JCL-WEEKLY-MONTHLY TO #WEEKLY-MONTHLY
READ WORK 1 ONCE RECORD #JCL-PARM
READ WORK 1 ONCE RECORD #UPDATE-NOUPDATE
WRITE 'JCL-PARM = ' #JCL-PARM
WRITE 'WEEKLY-MONTHLY = ' #WEEKLY-MONTHLY
WRITE 'UPDATE-NOUPDATE = ' #UPDATE-NOUPDATE
*
MOVE #JCL-YYYY TO #YYYY
MOVE #JCL-MM   TO #MM
MOVE #JCL-DD   TO #DD
MOVE #YYYYMM   TO #CAP-YYYYMM
*
COMPUTE #PARM-DATE-INVERSE = 99999999 - #YYYYMMDD
*
SUBTRACT 1 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
*
MOVE #YYYYMM TO #NON-CAP-YYYYMM
MOVE #YYYYMMDD TO #1-MON-AGO-YYYYMMDD
COMPUTE #1-MON-AGO-INVERSE = 99999999 - #YYYYMMDD
WRITE 'read MD records from' #1-MON-AGO-INVERSE #YYYYMMDD
*
* READ ST-V BY MEMBER-KEY FROM '001900'   /* process by ISS-DATE
* below is process by entry-date
* if below chged also chg next read
READ MD-V BY ENTRY-DATE FROM #PARM-DATE-INVERSE
  COMPUTE #ENTRY-DATE-INVERSE = 99999999 - MD-V.ENTRY-DATE
* WRITE 'Just read MD record' ENTRY-DATE CODE #ENTRY-DATE-INVERSE
* IF MD-V.ENTRY-DATE-YYYYMM LT #1-MON-AGO-YYYYMM-INVERSE /* put back in
*   WRITE 'escape top'
*   ESCAPE TOP
* END-IF
*
  IF MD-V.ENTRY-DATE-YYYYMM GT #1-MON-AGO-YYYYMM-INVERSE   /* was ne
*   WRITE 'escape bottom'
    ESCAPE BOTTOM
  END-IF
*
  IF NOT CODE = 'N' OR = 'A'
*   WRITE 'escape top not a/n'
    ESCAPE TOP
  END-IF
*
  PERFORM FIND-POLICY
END-READ
*
WRITE 'Find MS using' #1-MON-AGO-YYYYMM 'for matching stats'
FIND (1) MS-V WITH MONTH-KEY = #1-MON-AGO-YYYYMM
  WRITE 'Found MS'
  ADD MS-V.GAIN-MBRS (1:20) TO #GAIN-PLANS
  ADD MS-V.GAIN-MBRS (22:27) TO #GAIN-PLANS         /* RE1 was (22:23)
  ADD MS-V.SPS-GEN-GAIN-PLANS (*) TO #GAIN-PLANS
*
  WRITE 'GAINS-BY-PLAN' GAINS-BY-PLAN (*)
END-FIND
*
WRITE 'Find NT using 800106 for matching CAP NUM'
FIND (1) NT-V WITH ID-NUMBER = 800106
  WRITE 'Found NT - New CAPS =' CAPS-CONV-MON (#1-MON-AGO-MM)
END-FIND
*
WRITE 'before Reinstatements'
  'tot MS gains=' #GAIN-PLANS ' tot MD gains=' #DEMO-ACCUM #RECS-READ
*
IF #DEMO-ACCUM LT #GAIN-PLANS
* below is process by entry-date
* if below chged also chg next read
  READ MD-V BY ENTRY-DATE FROM #PARM-DATE-INVERSE
    COMPUTE #ENTRY-DATE-INVERSE = 99999999 - MD-V.ENTRY-DATE
*   WRITE 'Just read MD record' ENTRY-DATE CODE #ENTRY-DATE-INVERSE
*  IF MD-V.ENTRY-DATE-YYYYMM LT #1-MON-AGO-YYYYMM-INVERSE /* put back in
*     WRITE 'escape top'
*     ESCAPE TOP
*   END-IF
*
    IF MD-V.ENTRY-DATE-YYYYMM GT #1-MON-AGO-YYYYMM-INVERSE   /* was ne
        OR (#DEMO-ACCUM GE #GAIN-PLANS)    /* we match
*     WRITE 'escape bottom'
      ESCAPE BOTTOM
    END-IF
*
    IF CODE NE 'R'    /* PROCESS REINSTATEMENTS
*     WRITE 'ESCAPE TOP - NOT R OR ISSUED THIS MONTH' ST-V.ID-NUMBER
      ESCAPE TOP
    END-IF
*
    PERFORM FIND-POLICY
  END-READ
END-IF
*
WRITE 'After Reinstatements'
  'tot MS gains=' #GAIN-PLANS ' tot MD gains=' #DEMO-ACCUM #RECS-READ
*
* below calcs are to adjust demo to match MS as per rlb
*
ADD  #POL-STATS-CAP     (2, 1) TO #POL-STATS-CAP      (2, 2) /* AGG, cap
ADD  #POL-STATS-CAP-AGE (2, 1) TO #POL-STATS-CAP-AGE  (2, 2) /* AGG, cap
ADD  #POL-STATS-CAP-FACE(2, 1) TO #POL-STATS-CAP-FACE (2, 2) /* AGG, cap
RESET  #POL-STATS-CAP      (2, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-AGE  (2, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-FACE (2, 1)                         /* AGG, cap
ADD  #POL-STATS-CAP     (4, 1) TO #POL-STATS-CAP      (4, 2) /* AGG, cap
ADD  #POL-STATS-CAP-AGE (4, 1) TO #POL-STATS-CAP-AGE  (4, 2) /* AGG, cap
ADD  #POL-STATS-CAP-FACE(4, 1) TO #POL-STATS-CAP-FACE (4, 2) /* AGG, cap
RESET  #POL-STATS-CAP      (4, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-AGE  (4, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-FACE (4, 1)                         /* AGG, cap
ADD  #POL-STATS-CAP     (6, 1) TO #POL-STATS-CAP      (6, 2) /* AGG, cap
ADD  #POL-STATS-CAP-AGE (6, 1) TO #POL-STATS-CAP-AGE  (6, 2) /* AGG, cap
ADD  #POL-STATS-CAP-FACE(6, 1) TO #POL-STATS-CAP-FACE (6, 2) /* AGG, cap
RESET  #POL-STATS-CAP      (6, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-AGE  (6, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-FACE (6, 1)                         /* AGG, cap
ADD  #POL-STATS-CAP     (8, 1) TO #POL-STATS-CAP      (8, 2) /* AGG, cap
ADD  #POL-STATS-CAP-AGE (8, 1) TO #POL-STATS-CAP-AGE  (8, 2) /* AGG, cap
ADD  #POL-STATS-CAP-FACE(8, 1) TO #POL-STATS-CAP-FACE (8, 2) /* AGG, cap
RESET  #POL-STATS-CAP      (8, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-AGE  (8, 1)                         /* AGG, cap
RESET  #POL-STATS-CAP-FACE (8, 1)                         /* AGG, cap
*
COMPUTE #CAP-DIFF = NT-V.CAPS-CONV-MON (#1-MON-AGO-MM) /* NEW CAPS
  - #POL-STATS-CAP (1, 1) /* AGGREGATE-NEW, cap
COMPUTE #PLAN-DIFF (1) = MS-V.GAINS-BY-PLAN (1)  /* W/L gains
  + MS-V.GAINS-BY-PLAN (4)                   /* PM2
  + MS-V.GAINS-BY-PLAN (7)                   /* PM5
  - #POL-STATS-POL-TYPE (1, 1) /* AGGREGATE-NEW, w/l
  - #POL-STATS-POL-TYPE (2, 1) /* AGGREGATE-ADDL, w/l
COMPUTE #PLAN-DIFF (2) = MS-V.GAINS-BY-PLAN (2)  /* LT gains
  - #POL-STATS-POL-TYPE (1, 2) /* AGGREGATE-NEW, LT
  - #POL-STATS-POL-TYPE (2, 2) /* AGGREGATE-ADDL, LT
COMPUTE #PLAN-DIFF (3) = MS-V.GAINS-BY-PLAN (3)  /* RT gains
  - #POL-STATS-POL-TYPE (1, 3) /* AGGREGATE-NEW, RT
  - #POL-STATS-POL-TYPE (2, 3) /* AGGREGATE-ADDL, RT
COMPUTE #PLAN-DIFF (4) = MS-V.GAINS-BY-PLAN (6)  /* LTII gains
  - #POL-STATS-POL-TYPE (1, 4) /* AGGREGATE-NEW, LTii
  - #POL-STATS-POL-TYPE (2, 4) /* AGGREGATE-ADDL, LTii
COMPUTE #PLAN-DIFF (5) = MS-V.GAINS-BY-PLAN (9)  /* LTii+ gains        /* RE2 START
  - #POL-STATS-POL-TYPE (1, 5) /* AGGREGATE-NEW, LTii+
  - #POL-STATS-POL-TYPE (2, 5) /* AGGREGATE-ADDL, LTii+
COMPUTE #PLAN-DIFF (6) = MS-V.GAINS-BY-PLAN (8)  /* EZ gains
  - #POL-STATS-POL-TYPE (1, 6) /* AGGREGATE-NEW, EZ
  - #POL-STATS-POL-TYPE (2, 6) /* AGGREGATE-ADDL, EZ             /* RE2 END
*
WRITE 'MS' NT-V.CAPS-CONV-MON (#1-MON-AGO-MM)
WRITE 'MS' MS-V.GAINS-BY-PLAN (*)
WRITE 'CAP agg new'    #POL-STATS-CAP (1, *)
WRITE 'CAP agg addl'   #POL-STATS-CAP (2, *)
WRITE 'CAP army new'   #POL-STATS-CAP (3, *)
WRITE 'CAP army addl'  #POL-STATS-CAP (4, *)
WRITE 'PLAN agg new'   #POL-STATS-POL-TYPE (1, *)
WRITE 'PLAN agg addl'  #POL-STATS-POL-TYPE (2, *)
WRITE 'PLAN army new ' #POL-STATS-POL-TYPE (3, *)
WRITE 'PLAN army addl' #POL-STATS-POL-TYPE (4, *)
WRITE 'CAP-DIFF =' #CAP-DIFF
WRITE 'PLAN-DIFF=' #PLAN-DIFF (*)
*
ADD      #CAP-DIFF TO   #POL-STATS-CAP (1, 1) /* AGGREGATE-new, cap
SUBTRACT #CAP-DIFF FROM #POL-STATS-CAP (1, 2) /* AGGREGATE-NEW, reg
ADD      #CAP-DIFF TO   #POL-STATS-CAP (3, 1) /* ARMY-new, cap
SUBTRACT #CAP-DIFF FROM #POL-STATS-CAP (3, 2) /* ARMY-NEW, reg
*
ADD #PLAN-DIFF (1) TO #POL-STATS-POL-TYPE (1, 1) /* AGGREGATE-new, w/l
ADD #PLAN-DIFF (1) TO #POL-STATS-POL-TYPE (3, 1) /* ARMY-new, w/l
ADD #PLAN-DIFF (2) TO #POL-STATS-POL-TYPE (1, 2) /* AGGREGATE-new, ltl
ADD #PLAN-DIFF (2) TO #POL-STATS-POL-TYPE (3, 2) /* ARMY-new, lt
ADD #PLAN-DIFF (3) TO #POL-STATS-POL-TYPE (1, 3) /* AGGREGATE-new, rt
ADD #PLAN-DIFF (3) TO #POL-STATS-POL-TYPE (3, 3) /* ARMY-new, rt
ADD #PLAN-DIFF (4) TO #POL-STATS-POL-TYPE (1, 4) /* AGGREGATE-new, ltII
ADD #PLAN-DIFF (4) TO #POL-STATS-POL-TYPE (3, 4) /* ARMY-new, ltII
ADD #PLAN-DIFF (5) TO #POL-STATS-POL-TYPE (1, 5) /* AGGREGATE-new, ltII+    /* RE2 START
ADD #PLAN-DIFF (5) TO #POL-STATS-POL-TYPE (3, 5) /* ARMY-new, ltII+
ADD #PLAN-DIFF (6) TO #POL-STATS-POL-TYPE (1, 6) /* AGGREGATE-new, EZ
ADD #PLAN-DIFF (6) TO #POL-STATS-POL-TYPE (3, 6) /* ARMY-new, EZ            /* RE2 END
*
WRITE 'CAP agg new'    #POL-STATS-CAP (1, *)
WRITE 'CAP agg addl'   #POL-STATS-CAP (2, *)
WRITE 'CAP army new'   #POL-STATS-CAP (3, *)
WRITE 'CAP army addl'  #POL-STATS-CAP (4, *)
WRITE 'PLAN agg new'   #POL-STATS-POL-TYPE (1, *)
WRITE 'PLAN agg addl'  #POL-STATS-POL-TYPE (2, *)
WRITE 'PLAN army new ' #POL-STATS-POL-TYPE (3, *)
WRITE 'PLAN army addl' #POL-STATS-POL-TYPE (4, *)
*
IF #WEEKLY-MONTHLY = 'MONTHLY'
  MOVE #JCL-YYYY TO #YYYY
  MOVE #JCL-MM TO #MM
  MOVE #YYYYMM TO #NEXT-MON-YYYYMM
  RESET #NO-MS-REC
  WRITE 'updating MS record' #NEXT-MON-YYYYMM
  FIND (1) MS-X-V WITH MONTH-KEY = #NEXT-MON-YYYYMM
    IF NO RECORD FOUND
      MOVE TRUE TO #NO-MS-REC
      RESET MS-X-V
      WRITE 'MS RECORD NOT FOUND' #NEXT-MON-YYYYMM
    END-NOREC
    MOVE *ISN TO #ISN
  END-FIND
*
  IF NOT #NO-MS-REC
    WRITE 'GET MS RECORD WITH ISN=' #ISN
    GET MS-X-V #ISN
  END-IF
  FOR #I1 1 TO 6
    FOR #I2 1 TO 2
      MOVE #POL-STATS-SEX      (#I1,#I2) TO POL-ST-SEX-CNT      (#I1,#I2)
      MOVE #POL-STATS-SEX-AGE  (#I1,#I2) TO POL-ST-SEX-TOT-AGE  (#I1,#I2)
      MOVE #POL-STATS-SEX-FACE (#I1,#I2) TO POL-ST-SEX-TOT-FACE (#I1,#I2)
      MOVE #POL-STATS-CAP      (#I1,#I2) TO POL-ST-CAP-CNT      (#I1,#I2)
      MOVE #POL-STATS-CAP-AGE  (#I1,#I2) TO POL-ST-CAP-TOT-AGE  (#I1,#I2)
      MOVE #POL-STATS-CAP-FACE (#I1,#I2) TO POL-ST-CAP-TOT-FACE (#I1,#I2)
    END-FOR
    FOR #I2 1 TO 7
      MOVE #POL-STATS-CAT      (#I1,#I2) TO POL-ST-CAT-CNT      (#I1,#I2)
      MOVE #POL-STATS-CAT-AGE  (#I1,#I2) TO POL-ST-CAT-TOT-AGE  (#I1,#I2)
      MOVE #POL-STATS-CAT-FACE (#I1,#I2) TO POL-ST-CAT-TOT-FACE (#I1,#I2)
    END-FOR
    FOR #I2 1 TO 6                                                           /* RE2
      MOVE #POL-STATS-POL-TYPE (#I1,#I2) TO POL-ST-POL-CNT      (#I1,#I2)
      MOVE #POL-STATS-POL-AGE  (#I1,#I2) TO POL-ST-POL-TOT-AGE  (#I1,#I2)
      MOVE #POL-STATS-POL-TYPE-FACE(#I1,#I2)
        TO POL-ST-POL-TOT-FACE(#I1,#I2)
    END-FOR
    FOR #I2 1 TO 3
      MOVE #POL-STATS-STAT     (#I1,#I2) TO POL-ST-STAT-CNT     (#I1,#I2)
      MOVE #POL-STATS-STAT-AGE (#I1,#I2) TO POL-ST-STAT-TOT-AGE (#I1,#I2)
      MOVE #POL-STATS-STAT-FACE(#I1,#I2) TO POL-ST-STAT-TOT-FACE(#I1,#I2)
    END-FOR
  END-FOR
*
  WRITE 'TOTAL RECORDS READ:           '  #RECS-READ
  WRITE 'TOTAL DEMOGRAPHICS PROCESSED: '  #DEMO-ACCUM
  WRITE 'DATES PROCESSED: ' #YYYYMM #NON-CAP-YYYYMM #CAP-YYYYMM
  FOR #I1 1 TO 8
    IF #I1 = 1 WRITE 'NEW  STATS' END-IF
    IF #I1 = 2 WRITE 'ADDL STATS' END-IF
    IF #I1 = 3 WRITE 'NEW ARMY STATS' END-IF
    IF #I1 = 4 WRITE 'ADDL ARMY STATS' END-IF
    IF #I1 = 5 WRITE 'NEW AIRF STATS' END-IF
    IF #I1 = 6 WRITE 'ADDL AIRF STATS' END-IF
    IF #I1 = 7 WRITE 'NEW OTHER STATS' END-IF
    IF #I1 = 8 WRITE 'ADDL OTHER STATS' END-IF
    WRITE '#POL-STATS-SEX      '  POL-ST-SEX-CNT      (#I1, *)
* WRITE '#POL-STATS-SEX      '  #POL-STATS-SEX      (#I1, *)
    WRITE '#POL-STATS-SEX-AGE  '  POL-ST-SEX-TOT-AGE  (#I1, *)
    WRITE '#POL-STATS-SEX-FACE '  POL-ST-SEX-TOT-FACE (#I1, *)
    WRITE '#POL-STATS-CAT      '  POL-ST-CAT-CNT      (#I1, *)
    WRITE '#POL-STATS-CAT-AGE  '  POL-ST-CAT-TOT-AGE  (#I1, *)
    WRITE '#POL-STATS-CAT-FACE '  POL-ST-CAT-TOT-FACE (#I1, *)
    WRITE '#POL-STATS-CAP      '  POL-ST-CAP-CNT       (#I1, *)
* WRITE '#POL-STATS-CAP      '  #POL-STATS-CAP       (#I1, *)
    WRITE '#POL-STATS-CAP-AGE  '  POL-ST-CAP-TOT-AGE  (#I1, *)
    WRITE '#POL-STATS-CAP-FACE '  POL-ST-CAP-TOT-FACE (#I1, *)
    WRITE '#POL-STATS-POL-TYPE '  POL-ST-POL-CNT      (#I1, *)
* WRITE '#POL-STATS-POL-TYPE '  #POL-STATS-POL-TYPE (#I1, *)
    WRITE '#POL-STATS-POL-AGE  '  POL-ST-POL-TOT-AGE  (#I1, *)
* WRITE '#POL-STATS-POL-AGE  '  #POL-STATS-POL-AGE(#I1, *)
    WRITE '#POL-STATS-TYPE-FACE'  POL-ST-POL-TOT-FACE (#I1, *)
* WRITE '#POL-STATS-TYPE-FACE'  #POL-STATS-POL-TYPE-FACE(#I1, *)
    WRITE '#POL-STATS-STAT     '  POL-ST-STAT-CNT     (#I1, *)
    WRITE '#POL-STATS-STAT-AGE '  POL-ST-STAT-TOT-AGE (#I1, *)
    WRITE '#POL-STATS-STAT-FACE'  POL-ST-STAT-TOT-FACE(#I1, *)
  END-FOR
*
  IF #NO-MS-REC
    WRITE 'NEW NEXT-MONTH MS REC STORED' #NEXT-MON-YYYYMM
    MOVE #NEXT-MON-YYYYMM TO MONTH-KEY
    IF #UPDATE-NOUPDATE = 'UPDATE'
      STORE MS-X-V
    END-IF
  ELSE
    IF #UPDATE-NOUPDATE = 'UPDATE'
      WRITE 'NEXT-MONTH MS REC UPDATED' #NEXT-MON-YYYYMM
      UPDATE (0438)
    END-IF
  END-IF
  END TRANSACTION
END-IF
*
* * * * * * * * * * * * * * *
DEFINE SUBROUTINE FIND-POLICY
* * * * * * * * * * * * * * *
*
* GET ST-V MD-V.REC-ISN
* above is process by entry-date
*
RESET #NOT-FND
FIND ST-V WITH MEMBER-KEY = MD-V.ID-NUMBER-A
  IF NO RECORDS FOUND
    FIND ST-V WITH WIDOW-KEY = MD-V.ID-NUMBER-A
      IF NO RECORDS FOUND
        MOVE TRUE TO #NOT-FND
        WRITE 'ST NOT FOUND USING MD ID-NUMBER'  MD-V.ID-NUMBER
        WRITE   'MD CODE=' MD-V.CODE
        WRITE   'MD USER=' MD-V.USER
        WRITE   'MD ENTRY DATE=' MD-V.ENTRY-DATE
        WRITE   'MD REC-ISN=' MD-V.REC-ISN
      END-NOREC
    END-FIND
  END-NOREC
END-FIND
*
IF #NOT-FND
  ESCAPE TOP
END-IF
*
*  IF  (ST-V.PROCESS-IND = 'S' OR = 'C')   /* BYPASS AFSC RECORDS    RE1
IF  (ST-V.PROCESS-IND = 'C')                                    /* RE1
    OR AFFL-ONLY-CLIENT(<ST-V.ID-NUMBER>)                          /* RE1
    OR (MD-V.ISSUE-DATE = 0)              /* must be pending at
  ESCAPE TOP
END-IF
*
ADD 1 TO #MD-CNT
* WRITE 'processing' ST-V.ID-NUMBER MD-V.CODE MD-V.ISSUE-DATE
*    'entry-date =' #ENTRY-DATE-INVERSE 'CNT' #MD-CNT
*
IF  #ENTRY-DATE-INVERSE = 20030801 /* needed if redoing parm 9/1/2003
  IF INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
    WRITE 'escape top' ST-V.ID-NUMBER 'July CAP'
    ESCAPE TOP
  ELSE
    IGNORE
  END-IF
END-IF
*
ADD 1 TO #RECS-READ
*
MOVE ST-V.MILITARY-SERVICE TO #MIL-SERV
IF ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
  RESET #ST-NOT-FOUND
  FIND (1) LK-V WITH MEMBER-KEY = ST-V.LINKED-CN-A (1)
    IF NO RECORDS FOUND
      FIND LK-V WITH WIDOW-KEY = ST-V.LINKED-CN-A (1)
        IF NO RECORDS FOUND
          MOVE TRUE TO #ST-NOT-FOUND
        END-NOREC
      END-FIND
    END-NOREC
  END-FIND
*
  IF #ST-NOT-FOUND  /* if linked mbr no longer on file assume army
    MOVE 'A' TO #MIL-SERV
  ELSE
    MOVE LK-V.MILITARY-SERVICE TO #MIL-SERV
  END-IF
END-IF
*
RESET PDA-CONTACT                                 /* TT1
P-CONTACT-ID  := ST-V.MEMBER-CONTACT-ID           /* TT1
CALLNAT 'CONTS001' PDA-CONTACT                    /* TT1
DATE-OF-BIRTH  := P-DATE-OF-BIRTH                 /* TT1
*
MOVE *DATN TO #YYYYMMDD
if DATE-OF-BIRTH = 0
  move 19620101 to DATE-OF-BIRTH
  write '=' st-v.id-number
end-if
SUBTRACT DATE-OF-BIRTH FROM #YYYYMMDD
MOVE #YYYY TO #CURR-AGE
MOVE *DATN TO #YYYYMMDD
*
FOR #IDEX 1 TO 9
  IF ST-V.ISSUE-DATE (#IDEX) = MD-V.ISSUE-DATE
    PERFORM CHECK-MULTIPLE-ISSUE-DATES
*                                        /* loop thru all policies and
    IF #POLICY-CNT > 0                 /* search for multiple policies
      PERFORM ADD-POLICY-TO-TABLE      /* with the same issue date
      COMPUTE #IDEX-2 = #IDEX+1
      FOR #IDEX-2 #IDEX-2 TO 9
        IF ST-V.ISSUE-DATE (#IDEX-2) = MD-V.ISSUE-DATE
          SUBTRACT 1 FROM #POLICY-CNT
          IF #POLICY-CNT = 0
            ESCAPE BOTTOM
          END-IF
        END-IF
      END-FOR
*
      MOVE #IDEX-2 TO #IDEX
    ELSE
      COMPUTE #IDEX-2 = #IDEX+1
*
      FOR #IDEX-2 #IDEX-2 TO 9
        IF ST-V.ISSUE-DATE (#IDEX-2) = MD-V.ISSUE-DATE
          PERFORM ADD-POLICY-TO-TABLE
          ESCAPE BOTTOM
        END-IF
      END-FOR
    END-IF
*
    IF #IDEX GT 9
      ESCAPE BOTTOM
    ELSE
      PERFORM ACCUM-POL-STATS
      ESCAPE BOTTOM
    END-IF
  END-IF
END-FOR
*
IF   (CODE = 'R') AND #FND-CURR-REIN AND #FND-CURR-TERM
*   WRITE 'after REIN FOUND ESCAPE TOP'
  ESCAPE TOP
END-IF
*
IF #IDEX GT 9
  FOR #IDEX 1 TO 9
    IF  ((MD-V.CODE = 'N') AND (#IDEX = 1) AND (STATUS (1) = 'D'))
        OR ((MD-V.CODE = 'A') AND (ONLINE-ACTION (#IDEX) = '1'))
*      OR ((ST-V.ID-NUMBER = 54186 OR = 35453 OR = 91767 OR = 80103
*                                  OR = 80520 OR = 123321)
*          AND (ST-V.ISSUE-DATE (#IDEX) GE 20030701)
*          AND (ST-V.ISSUE-DATE (#IDEX) LE 20030731))
      WRITE 'Assumed Pol found' ST-V.ID-NUMBER ST-V.ISSUE-DATE (#IDEX)
      PERFORM ACCUM-POL-STATS
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  IF #IDEX GT 9
    FOR #I3 9 TO 1 STEP -1   /* use mos current policy
      IF STATUS (#I3) = 'D'
        WRITE 'Used last pol' ST-V.ID-NUMBER ST-V.ISSUE-DATE (#I3)
        MOVE #I3 TO #IDEX
        PERFORM ACCUM-POL-STATS
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-IF
*
  IF #IDEX GT 9
    WRITE ST-V.ID-NUMBER MD-V.ISSUE-DATE 'MD iss dt not fnd'
      'ent-dt=' #ENTRY-DATE-INVERSE 'used default plan & amt'
    MOVE 1 TO #IDEX
    MOVE 1      TO ST-V.NUM-MBRSHIPS (1)
    MOVE 250000 TO ST-V.FACE-AMOUNT (1)
    MOVE 'LT'   TO ST-V.PLAN (1)
    RESET ST-V.CONV-DURATION (1)
    PERFORM ACCUM-POL-STATS
  END-IF
END-IF
*
END-SUBROUTINE
*
**********************************
DEFINE SUBROUTINE ACCUM-POL-STATS
**********************************
*
IF CODE = 'R'   /* all REINSTATEMENTS are considered addl
  RESET #FND-CURR-REIN #FND-CURR-TERM
  FIND (1) NT-V-X WITH ID-NUMBER = ST-V.ID-NUMBER
    FOR #I1 1 TO 60
      IF (NT-V-X.NOTE-TEXT-3 (#I1) = 'REI')
          AND (NT-V-X.NOTE-DATE (#I1) GE #1-MON-AGO-YYYYMMDD)
        MOVE TRUE TO #FND-CURR-REIN
        ESCAPE TOP
      END-IF
* below assumes term note is above the corresponding rein note
      IF (NT-V-X.NOTE-TEXT-3 (#I1) = 'LAP' OR = 'CSV' OR = 'RES')
          AND (NT-V-X.NOTE-DATE (#I1) GE #1-MON-AGO-YYYYMMDD)
          AND (NOT #FND-CURR-REIN)
        MOVE TRUE TO #FND-CURR-TERM
        ESCAPE TOP
      END-IF
    END-FOR
  END-FIND
*
  IF #FND-CURR-REIN AND #FND-CURR-TERM
*   WRITE 'bypassed current month REIN' ST-V.ID-NUMBER
    ESCAPE TOP
  END-IF
*
  WRITE' Using this reinstate' ST-V.ID-NUMBER ST-V.PLAN (#IDEX)
    ST-V.ISSUE-DATE (#IDEX) #1-MON-AGO-YYYYMMDD
  MOVE 2 TO #MBRX
  ADD 1 TO #DEMO-ACCUM
ELSE
  IF NUM-MBRSHIPS(#IDEX) = 1
    MOVE 1 TO #MBRX
    ADD 1 TO #DEMO-ACCUM
  ELSE
    IF NUM-MBRSHIPS(#IDEX) > 1
      MOVE 2 TO #MBRX
      ADD 1 TO #DEMO-ACCUM
    ELSE
      WRITE ST-V.ID-NUMBER '# mbrships = 0' NUM-MBRSHIPS (#IDEX) #IDEX
*     WRITE ST-V.ID-NUMBER '# mbrships = 0'
        '- This will make demo mismatch with MS'
      ESCAPE TOP
    END-IF
  END-IF
END-IF
*
IF #MIL-SERV = MASK('A')
  IF #MBRX = 1
    MOVE 3 TO #SRVX
  ELSE
    MOVE 4 TO #SRVX
  END-IF
ELSE
  IF #MIL-SERV = MASK('F')
    IF #MBRX = 1
      MOVE 5 TO #SRVX
    ELSE
      MOVE 6 TO #SRVX
    END-IF
  ELSE
    WRITE ST-V.ID-NUMBER ST-V.ISSUE-DATE (#IDEX) 'NON ARMY/AIRF'
      'serv=' #MIL-SERV
    IF #MBRX = 1
      MOVE 7 TO #SRVX
    ELSE
      MOVE 8 TO #SRVX
    END-IF
  END-IF
END-IF
*
IF P-GENDER = 'M'                     /* TT1
  MOVE 1 TO #SEXX
ELSE
  MOVE 2 TO #SEXX
END-IF
*
ADD 1 TO #POL-STATS-SEX(#MBRX, #SEXX)
ADD #CURR-AGE TO #POL-STATS-SEX-AGE(#MBRX, #SEXX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-SEX-FACE(#MBRX, #SEXX)
*
IF CONV-DURATION(#IDEX) = 999
  MOVE 1 TO #CAPX
ELSE
  MOVE 2 TO #CAPX
END-IF
*
ADD 1 TO #POL-STATS-CAP(#MBRX, #CAPX)
ADD #CURR-AGE TO #POL-STATS-CAP-AGE(#MBRX, #CAPX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-CAP-FACE(#MBRX, #CAPX)
*
PERFORM GET-RANK
DECIDE FOR FIRST CONDITION
  WHEN INTRO-FLAG = 'K' OR = 'G'                 MOVE 6 TO #CATX
  WHEN INTRO-FLAG = 'S'                          MOVE 5 TO #CATX
  WHEN (#RANK-DISPL GE 25 AND #RANK-DISPL LE 30) MOVE 4 TO #CATX
  WHEN (#RANK-DISPL GE 20 AND #RANK-DISPL LE 24) MOVE 3 TO #CATX
  WHEN (#RANK-DISPL GE 15 AND #RANK-DISPL LE 19) MOVE 2 TO #CATX
  WHEN (#RANK-DISPL GE 1  AND #RANK-DISPL LE 14) MOVE 1 TO #CATX
  WHEN NONE                                      MOVE 7 TO #CATX
END-DECIDE
ADD 1 TO #POL-STATS-CAT(#MBRX, #CATX)
ADD #CURR-AGE TO #POL-STATS-CAT-AGE(#MBRX, #CATX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-CAT-FACE(#MBRX, #CATX)
*
**IF (PLAN-A1 (#IDEX) GE 'U') AND (PLAN-A1 (#IDEX) LE 'Z')   /* RE2 START
**  MOVE 4 TO #POLX
**ELSE
**  IF PLAN(#IDEX) = 'RT'
**    MOVE 3 TO #POLX
**  ELSE
**    IF PLAN(#IDEX) = 'LT'
**      MOVE 2 TO #POLX
**    ELSE
**      MOVE 1 TO #POLX
**    END-IF
**  END-IF
**END-IF
DECIDE FOR FIRST CONDITION
  WHEN PLAN(#IDEX) = 'LT'
    MOVE 2 TO #POLX
  WHEN PLAN(#IDEX) = 'RT'
    MOVE 3 TO #POLX
  WHEN (PLAN-A1 (#IDEX) GE 'U') AND (PLAN-A1 (#IDEX) LE 'Z')
    MOVE 4 TO #POLX
  WHEN F-LT2PLUS-TRUE(<PLAN(#IDEX)>)
    MOVE 5 TO #POLX
  WHEN PLAN(#IDEX) = 'EZ'
    MOVE 6 TO #POLX
  WHEN NONE
    MOVE 1 TO #POLX
END-DECIDE                                                   /* RE2 END
*
write '='st-v.id-number '='PLAN(#IDEX) '='#MBRX '='#POLX
ADD 1 TO #POL-STATS-POL-TYPE(#MBRX, #POLX)
ADD #CURR-AGE TO #POL-STATS-POL-AGE(#MBRX, #POLX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-POL-TYPE-FACE(#MBRX, #POLX)
*
IF #POLX = 3
  WRITE 'accuming RT' #MBRX ST-V.ID-NUMBER ST-V.ISSUE-DATE (#IDEX)
    #POL-STATS-POL-TYPE (#MBRX, 3)
END-IF
*
IF MILITARY-STATUS = 'A'
  MOVE 1 TO #STAX
ELSE
  IF MILITARY-STATUS = 'R'
    MOVE 2 TO #STAX
  ELSE
*   WRITE ST-V.ID-NUMBER ST-V.ISSUE-DATE (#IDEX) 'CIVILIAN'
*       MILITARY-STATUS
    MOVE 3 TO #STAX
  END-IF
END-IF
ADD 1 TO #POL-STATS-STAT(#MBRX, #STAX)
ADD #CURR-AGE TO #POL-STATS-STAT-AGE(#MBRX, #STAX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-STAT-FACE(#MBRX, #STAX)
*
ADD 1  TO #POL-STATS-SEX       (#SRVX, #SEXX)
ADD 1  TO #POL-STATS-CAP       (#SRVX, #CAPX)
ADD 1  TO #POL-STATS-CAT       (#SRVX, #CATX)
ADD 1  TO #POL-STATS-POL-TYPE  (#SRVX, #POLX)
ADD 1  TO #POL-STATS-STAT      (#SRVX, #STAX)
*
ADD #CURR-AGE  TO #POL-STATS-SEX-AGE   (#SRVX, #SEXX)
ADD #CURR-AGE  TO #POL-STATS-CAP-AGE   (#SRVX, #CAPX)
ADD #CURR-AGE  TO #POL-STATS-CAT-AGE   (#SRVX, #CATX)
ADD #CURR-AGE  TO #POL-STATS-POL-AGE   (#SRVX, #POLX)
ADD #CURR-AGE  TO #POL-STATS-STAT-AGE  (#SRVX, #STAX)
*
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-SEX-FACE       (#SRVX, #SEXX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-CAP-FACE       (#SRVX, #CAPX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-CAT-FACE       (#SRVX, #CATX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-POL-TYPE-FACE  (#SRVX, #POLX)
ADD FACE-AMOUNT(#IDEX) TO #POL-STATS-STAT-FACE      (#SRVX, #STAX)
*
END-SUBROUTINE
*
***************************
DEFINE SUBROUTINE GET-RANK
****************************
*
RESET #RANK-DISPL #RANK-LIT #RANK-DISPLAY                         /* PM1
CALLNAT 'GRANKSXX' #COMMAND RANK #MIL-SERV
  #INVALID #RANK-DISPL #RANK-LIT #RANK-DISPLAY
*
IF #INVALID OR (#RANK-DISPL = 99)
  RESET #RANK-DISPL
END-IF
*
END-SUBROUTINE
*
********************************************
DEFINE SUBROUTINE CHECK-MULTIPLE-ISSUE-DATES   /* 082503
********************************************
*
RESET #POLICY-CNT
*
FOR #POLICY-IDX 1 TO 100
  IF #ID-NUMBER (#POLICY-IDX) = 0
    ESCAPE BOTTOM
  END-IF
*
  IF #ID-NUMBER (#POLICY-IDX) = ST-V.ID-NUMBER
      AND #ISSUE-DATE (#POLICY-IDX) = MD-V.ISSUE-DATE
    ADD +1 TO #POLICY-CNT
  END-IF
END-FOR
*
END-SUBROUTINE
*
********************************************
DEFINE SUBROUTINE ADD-POLICY-TO-TABLE          /* 082503
********************************************
*
FOR #POLICY-IDX 1 TO 100
  IF #ID-NUMBER (#POLICY-IDX) = 0
    MOVE ST-V.ID-NUMBER  TO #ID-NUMBER (#POLICY-IDX)
    MOVE MD-V.ISSUE-DATE TO #ISSUE-DATE (#POLICY-IDX)
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
END
