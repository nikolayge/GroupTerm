* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
**************************************
* Program : ACCEXTR
*
* Function : Extract data from TA file for archive purposes
*
* vxt 09/291/2014 Initial creation
* bz  09/10/2014  (OI-3078) - Add new routine for CASH-CODE
**************************************
*
define data local
1 ACC VIEW OF A-ACCOUNTING-REGISTER
  2 ACCTTX
    3 ID-NUMBER (N6)
    3 TRANSACTION-DATN (P9)
    3 TRANSACTION-TIMN (P7)
    3 TXN-CODE (A4)

    3 SEQUENCE-NUM (N1)
    3 NAME (A25)
    3 TXN-ACCT-NUMBER
    3 ACCT-DATE (N8)
    3 DATE-LAST-ACCT-UPDATE (N8)
    3 DEBIT-AMOUNT (P7.2)
    3 CREDIT-AMOUNT (P7.2)
    3 DESCRIPTION (A20)
    3 MESSAGE-CODE (A1)
    3 AALP-FLAG (A1)
    3 CLERK-ID (A3)
    3 TERMINAL-ID (A8)
  2 POLICY-NUMBER  (a16)
  2 CASH-CODE (A1)
  2 PROCESS-IND (A1)
  2 USER-COMPANY (A1)
  2 month-end
  2 c*sungard-info
  2 SUNGARD-INFO (1:15)
    3 SG-CATEGORY-1 (A2)
    3 SG-CATEGORY-2 (A2)
    3 SG-AMOUNT (N6.2)
*
1 st-v view of a-status
  2 id-number
  2 plan (9)
*
local
1 #datn (p8)
1 #TAB              (A1)   INIT<H'09'>
1 #ta-extract       (a200)
1 #pay-code         (a4)
1 #account-number   (a4)
1 #cnt-file1        (n10)
1 #cnt-file2        (n10)
1 #cnt-file3        (n10)
1 #cnt-file4        (n10)
1 #cnt-file5        (n10)
1 #cnt-file6        (n10)
1 #cnt-file7        (n10)
1 #cnt-file8        (n10)
1 #cnt-file9        (n10)
1 #cnt-file10       (n10)
1 #cnt-file11       (n10)
1 #cnt-file12       (n10)
1 #cnt-file13       (n10)
1 #cnt-file14       (n10)
1 #cnt-file15       (n10)
1 #cnt-file16       (n10)
1 #cnt-file17       (n10)
1 #cnt-file18       (n10)
1 #cnt-file19       (n10)
1 #cnt-file20       (n10)
1 #k                (i2)
1 #pol-num          (a16)
1 #plan             (a3)
1 #input            (a13)
1 redefine #input
  2 #start-cn         (n6)
  2 #filler             (a1)
  2 #ending-cn           (n6)
1 #TRAN-CODE         (A4)
1 #TRAN-CODE-IN      (A4)
1 #SUN-AMT-SIGN      (A1)
1 #SUN-ACCT-NUM      (A4)
1 #SUN-AMT-D-C       (A1)
1 #SUN-AMT           (N6.2)
1 #SUN-SOURCE        (A2)
1 #ACCOUNT-NUMBER-IN (A4)
1 #debit-amount      (a12)
1 #credit-amount     (a12)
1 #trans-time        (a7)
1 #TIME-HHMMSSX      (N7)
1 REDEFINE #TIME-HHMMSSX
  2 #TIME-HH          (A2)
  2 REDEFINE #TIME-HH
    3 #TIME-HH-N       (N2)
  2 #TIME-MM          (A2)
  2 #TIME-SS          (A2)
  2 #TIME-X           (A1)
1  #eff-date        (a10)
1 #DATE-YYYYMMDD     (N9)
1 REDEFINE #DATE-YYYYMMDD
  2 #DATE-FILL        (A1)
  2 #DATE-YYYY        (A4)
  2 #DATE-MM          (A2)
  2 #DATE-DD          (A2)
  2 REDEFINE #DATE-DD
    3 #DATE-DD-N       (N2)
1 #trn-date          (a10)
1 #BATCH-ID         (A21)
1 #TIMN             (N7)
1 REDEFINE #TIMN
  2 #TIMN-4          (A6)
  2 #TIMN-3          (A1)
1 #YYYYMMDD              (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A           (A8)
1 REDEFINE #YYYYMMDD
  2 #YYYY                 (N4)
  2 #MM                   (N2)
  2 #DD                   (N2)
1 #clerk              (a3)
1 #description        (a20)
1 #cat-1              (a2)
1 #cat-2              (a2)
1 #account-description  (a25)
end-define
*
input #input
write '=' #start-cn /
  '=' #ending-cn
*
* DEFINE WORK FILE 1 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/CN0_10000.TXT' TYPE 'ASCII'
*
COMPRESS 'CN'
  #TAB 'Name'
  #TAB 'EFF-Date'
  #TAB 'Tran-date'
  #TAB 'Tran-Time'
  #TAB 'Clerk'
  #TAB 'Pay-Code'
  #TAB 'Pol-Num'
  #TAB 'GL Num'
  #TAB 'Tran-Code'
  #TAB 'Debit-Amt'
  #TAB 'Credit-Amt'
  #TAB 'Desc'
  #TAB 'Batch-ID'
  INTO #TA-EXTRACT LEAVING NO
WRITE WORK FILE 1 #TA-EXTRACT

********************************************************************************************************
read  acc  by id-number starting from #start-cn ending at   #ending-cn

*
    #PAY-CODE := CASHCD(<ACC.CASH-CODE>)             /* bz OI-3078
*
  #TRAN-CODE := TXN-CODE
  #TRAN-CODE-IN := TXN-CODE
  PERFORM GET-GL-ACCT-NUM
*
  MOVE ACC.TRANSACTION-DATN TO #DATE-YYYYMMDD
  COMPRESS #DATE-MM #DATE-DD #DATE-YYYY INTO #TRN-DATE WITH '-'
*
  MOVE ACC.ACCT-DATE TO #DATE-YYYYMMDD
  COMPRESS #DATE-MM #DATE-DD #DATE-YYYY INTO #EFF-DATE WITH '-'
*
  move acc.transaction-timn to #TIME-HHMMSSX
  COMPRESS #TIME-HH #TIME-MM INTO #trans-TIME WITH ':'
*
  MOVE acc.transaction-datn TO #YYYYMMDD
  MOVE acc.transaction-timn TO #TIMN
*
  MOVE ACC.CLERK-ID         TO #CLERK
*
  COMPRESS #PAY-CODE #YYYYMMDD-A #TIMN-4 #CLERK INTO #BATCH-ID LEAVING NO
*
  if acc.credit-amount ne 0
    MOVE EDITED ACC.CREDIT-AMOUNT (EM=-ZZZZ,ZZ9.99) TO #CREDIT-AMounT
  else
    reset #credit-amount
  end-if
*
  if acc.debit-amount ne 0
    MOVE EDITED ACC.debit-AMOUNT (EM=-ZZZZ,ZZ9.99) TO #debit-AMounT
  else
    reset #debit-amount
  end-if
*
  move acc.description to #description
  if acc.aalp-flag ne ' '
    compress #description 'Flag=' acc.aalp-flag into #description
  end-if
*
  move acc.txn-code to #tran-code-in
*
  if acc.sg-amount(1) = 0
    reset #cat-1
    move acc.sg-category-2(1) to #cat-2
    perform get-gl-acct-num
  else
    for #k 1 15
      if acc.sg-amount(#k) ne 0
        move acc.sg-category-1(#k) to #cat-1
        move acc.sg-category-2(#k) to #cat-2
        perform get-gl-acct-num
        if (#tran-code = 'PREP' or = 'PRER' or = 'DUEP' or = 'DUER')
            and #ACCOUNT-NUMBER-IN = '2235'
          move 'BADJ' to #tran-code
        end-if
      end-if
    end-for
  end-if
*
  compress id-number #tab
    name             #tab
    #eff-date        #tab
    #trn-date        #tab
    #trans-time      #tab
    clerk-id         #tab
    #pay-code        #tab
    policy-number    #tab
    #account-number  #tab
    #TRAN-CODE       #tab
    #debit-amount    #tab
    #credit-amount   #tab
    description      #tab
    #batch-id
    into #ta-extract leaving no
*
  write work 1 #ta-extract
  add 1 to #cnt-file1

*
  at end of data
    write 'rec on file ' '='#cnt-file1 /
  end-enddata
*
end-read
*
*****************************
DEFINE SUBROUTINE GET-GL-ACCT-NUM
******************************
*
IF  #cat-1  = '**'
  RESET  #cat-1
END-IF
*
IF   (#tran-code-in = 'BADJ')
    AND ( #cat-1 = 'UN')
  RESET  #cat-1
END-IF
*
IF   (#tran-code-in = 'ADCR' OR = 'RDCR')
    AND ( #cat-1 = 'DC')
  RESET  #cat-1
END-IF
*
CALLNAT 'ATHS03P2'
  #TRAN-CODE-IN
  #ACCOUNT-NUMBER-IN
  #cat-1
  #SUN-AMT-SIGN
  #ACCOUNT-NUMBER
  #SUN-AMT-D-C
  ACC.ID-NUMBER
  #SUN-AMT
  #SUN-SOURCE
*
IF   (#tran-code = 'ADDL')
    AND (ACC.SEQUENCE-NUM = 2)
  MOVE '4315' TO #ACCOUNT-NUMBER
  MOVE 'INTV' TO #TRAN-CODE
END-IF
*
if acc.transaction-datn ge 20140101
  if #TRAN-CODE = 'PREP' or = 'PRER'  or = 'FPFP' or = 'FPFR' or = 'FPRP' or = 'RIDP' or = 'RIDR' or = 'DISC' or = 'DUEP' or = 'DUER'             /* vt5  
*    perform get-new-gl-act-num
    callnat 'athnaccn' acc.id-number
      acc.policy-number
      #cat-1
      #cat-2
      #account-number
      #account-description
  end-if
end-if
*
END-SUBROUTINE
*
*
*****************
DEFINE SUBROUTINE get-new-gl-act-num
*****************
*
RESET #POL-NUM #PLAN
FIND ST-V WITH ST-V.ID-NUMBER = ACC.ID-NUMBER
  FOR #K 1 9
    CALLNAT 'GPLNMSXX' #POL-NUM ACC.ID-NUMBER #K
    IF #POL-NUM = acc.POLICY-NUMBER
      MOVE ST-V.PLAN(#K) TO #PLAN
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-FIND
*
IF FUNCTION-TERM-POLICY(<#PLAN>)
  DECIDE ON FIRST VALUE OF #PLAN
    VALUE 'LT'
      IF  SG-CATEGORY-1(1) = '1Y'
        #ACCOUNT-NUMBER := 4021
*        #ACCOUNT-DESCRIPTION := 'First Year Premiums-LT1'
      ELSE
        IF  #cat-1 = 'RN'
          #ACCOUNT-NUMBER := 4031
*          #ACCOUNT-DESCRIPTION := 'RENEWALS-LT'
        END-IF
      END-IF
    VALUE 'RT'
      IF  #cat-1 = '1Y'
        #ACCOUNT-NUMBER := 4023
*        #ACCOUNT-DESCRIPTION := 'First Year Premiums-RT'
      else
        if  #cat-1 = 'RN'
          #ACCOUNT-NUMBER := 4033
*          #ACCOUNT-DESCRIPTION := 'Renewals-RT'
        END-IF
      END-IF
    VALUE 'EZ'
      IF  #cat-1 = '1Y'
        #ACCOUNT-NUMBER := 4024
*        #ACCOUNT-DESCRIPTION := 'First Year Premiums-EZT'
      ELSE
        IF  #cat-1 = 'RN'
          #ACCOUNT-NUMBER := 4034
*          #ACCOUNT-DESCRIPTION := 'Renewals-EZT'
        END-IF
      END-IF
    NONE VALUE
      IF  #cat-1 = '1Y'
        #ACCOUNT-NUMBER := 4022
*        #ACCOUNT-DESCRIPTION := 'First Year Premiums-LT2'
      ELSE
        IF  #cat-1 = 'RN'
          #ACCOUNT-NUMBER := 4032
*          #ACCOUNT-DESCRIPTION := 'Renewals-LT2'
        END-IF
      END-IF
  END-DECIDE
ELSE
  IF VAWL-TRUE(<#PLAN>)
      OR (#PLAN = MASK(NN'F')) OR ( #PLAN = MASK(N'P'))
    IF  #cat-1 = '1Y'
      #ACCOUNT-NUMBER := 4026
*      #ACCOUNT-DESCRIPTION := 'First Year Premiums-WL)'
    ELSE
      IF  #cat-1 = 'RN'
        #ACCOUNT-NUMBER := 4036
*        #ACCOUNT-DESCRIPTION := 'Renewals-WL'
      END-IF
    END-IF
  ELSE
    DECIDE ON FIRST VALUE OF #PLAN
      VALUE 'GPL' , 'GP2'
        IF  #cat-1 = '1Y'
          #ACCOUNT-NUMBER := 4025
*          #ACCOUNT-DESCRIPTION := 'First Year Premiums-GPL GP2'
        ELSE
          IF  #cat-1 = 'RN'
            #ACCOUNT-NUMBER := 4035
*            #ACCOUNT-DESCRIPTION := 'Renewals-GPL GP2'
          END-IF
        END-IF
      VALUE 'AL'
        IF  #cat-1 = '1Y'
          #ACCOUNT-NUMBER := 4028
*          #ACCOUNT-DESCRIPTION := 'First Year Premiums-AL'
        END-IF
      VALUE 'SO'
        IF  #cat-1 = 'SO'
          #ACCOUNT-NUMBER := 4112
*          #ACCOUNT-DESCRIPTION := 'Service Only'
        END-IF
      NONE VALUE
        IGNORE
    END-DECIDE
  END-IF
END-IF
*
IF  #cat-1 = 'SP'
  #ACCOUNT-NUMBER := 4027
*  #ACCOUNT-DESCRIPTION := 'First Year Premiums-WLSP'
END-IF
*
*
END-SUBROUTINE
end
