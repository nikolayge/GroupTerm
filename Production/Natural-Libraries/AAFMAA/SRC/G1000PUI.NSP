* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* User Interface Functions
* Main Driver program
* * * * * * * * * * * * * * * * * * * * * * * *
* MODIFICATION LOG
*
* USER   DATE      TAG  REASON
* YAK    02182008  YAK  Initial Creation
* * * * * * * * * * * * * * * * * * * * *
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL  USING GONERLXX
LOCAL  USING OBJAGENT
LOCAL
1 #FUNCTION            (A50/20)
1 #SEL                 (A1/20)
1 #CV-SEL              (C/20)
1 #I                   (N2)
1 #I1                  (N2)
1 #I2                  (N2)
1 #TEXT                (A78)
1 #FUNCTION-ATTRIBUTES (A68)
1 REDEFINE #FUNCTION-ATTRIBUTES
  2 #PROGRAM           (A8)
  2 #SEP1              (A1)
  2 #FUNCTION-PARM     (A7)
  2 #HEADER-1          (A50)
  2 #SECURITY-CODE     (N2)
*
1 #MAX-FUNCTIONS       (N2) INIT <20>
1 #ERROR-SEL           (N2) INIT <1>
1 #ERROR               (L)
*
END-DEFINE
*
INCLUDE GONERCXX
*
SET KEY PF12 NAMED 'Quit'
SET KEY PF3 NAMED 'Retrn'
SET KEY PF1 = Help
*
IF *DATA NE 0
  INPUT #FUNCTION-ATTRIBUTES #TEXT
  RELEASE STACK
END-IF
RESET #CGA-SCR-COMMAND #CGA-SCR-SUFFIX #CGA-ORIG-SUFFIX
REPEAT
IF NOT #ERROR
  PERFORM POPULATE-MAP
END-IF
INPUT TEXT #TEXT MARK *#SEL(#ERROR-SEL) USING MAP 'G1000MUI'
  RESET #TEXT #ERROR
  DECIDE ON FIRST VALUE *PF-KEY
    VALUE 'PF3'
      IF #PROGRAM NE ' ' AND
        FUNCTION-ACCESS(<*USER,#SECURITY-CODE>) = 'A'
        FETCH #PROGRAM
      ELSE
        ESCAPE BOTTOM
      END-IF
    VALUE 'PF12'
      ESCAPE BOTTOM
    VALUE 'ENTR'
      PERFORM SELECT-FUNCTION
    NONE
      IGNORE
  END-DECIDE
END-REPEAT
*
SET KEY OFF
FETCH 'G1000PXX'
* * * * *
DEFINE SUBROUTINE POPULATE-MAP
*
#NUMBER-OF-RECORDS := #MAX-FUNCTIONS
PARM-GEN-TABLE.#ACTION := 'HIST-KEY'
IF #FUNCTION-PARM = ' '
   PARM-GEN-TABLE.#KEY    := 'MENU'
   #HEADER-1 := 'AAFMAA User Interface'
   #HEADER-1 := FUNCTION-HEADER(<#HEADER-1>)
ELSE
   PARM-GEN-TABLE.#KEY  := #FUNCTION-PARM
   #FUNCTION-ATTRIBUTES := FUNCTION-MENU(<PARM-GEN-TABLE.#KEY>)
   #HEADER-1 := FUNCTION-HEADER(<#HEADER-1>)
END-IF
  CALLNAT 'OBJNGENT' USING PARM-GEN-TABLE
  IF PARM-GEN-TABLE.#RETURN-CODE NE ' '
    #TEXT := PARM-GEN-TABLE.#RETURN-MESSAGE
    ESCAPE ROUTINE
  END-IF
RESIZE ARRAY PARM-ARRAY TO (*:#NUMBER-OF-RECORDS)
PARM-GEN-TABLE.#ACTION := 'READ-KEY'
  CALLNAT 'OBJNGENT' USING PARM-GEN-TABLE
  IF PARM-GEN-TABLE.#RETURN-CODE NE ' '
    #TEXT := PARM-GEN-TABLE.#RETURN-MESSAGE
    ESCAPE ROUTINE
  END-IF
  FOR #I = 1 TO #NUMBER-OF-RECORDS    /* OR #MAX-ENTRY FOR FUTURE SCROLLING
    #FUNCTION (#I)   := PARM-GEN-TABLE.GEN-DESCRIPTION (#I)
  END-FOR
#I1 := #NUMBER-OF-RECORDS + 1
FOR #I2 = #I1 TO #MAX-FUNCTIONS
 #CV-SEL(#I2) := (AD=P)
END-FOR
END-SUBROUTINE
*
DEFINE SUBROUTINE SELECT-FUNCTION
*
EXAMINE #SEL(*) FOR 'X' INDEX #I
IF #I = 0
  #I := *CURS-LINE
  #I := #I - 5
END-IF
#FUNCTION-ATTRIBUTES := PARM-GEN-TABLE.GEN-ALPHA-VALUE (#I)
#HEADER-1 := PARM-GEN-TABLE.GEN-DESCRIPTION (#I)
#SECURITY-CODE := PARM-GEN-TABLE.GEN-SECURITY-CODE (#I)
IF NOT (FUNCTION-ACCESS(<*USER,#SECURITY-CODE>) = 'A') AND #FUNCTION-PARM = ' '
   #TEXT := 'User not authorized to perform this function'
   #ERROR-SEL := #I
   #ERROR := TRUE
   RESET #PROGRAM
   ESCAPE ROUTINE
END-IF
STACK TOP DATA #FUNCTION-ATTRIBUTES
FETCH RETURN #PROGRAM
END-SUBROUTINE
END
