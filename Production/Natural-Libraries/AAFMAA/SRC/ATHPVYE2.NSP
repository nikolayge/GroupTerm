* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: ATHPVYE2 - YEAR-END VALUE-ADDED PROCESSING
*                      - STEP 2 - EXTRACT V/A HISTORY INFO
*   <<<<< MUST HANDLE VAR TERM INS FOR 2000 YEAR-END <<<<<<<<<
************************************************************************
*                       MODIFICATION LOG                               *
* USER   DATE      TAG     REASON                                      *
* DRW    01102004  DW1     correct beg of year processing              *
* DRW  01/10/2008  DW2  Print just totals for Valuation to Report 3    * 
* YAK  10112012 YK1  Use function to identify Level Term II plans      *
************************************************************************
*
DEFINE DATA
LOCAL USING ATHLVYE2
LOCAL
1 #JCL-PARM       (A34)
1 REDEFINE #JCL-PARM
 2 #JCL-FIL-1        (A13)    /* 'PROCESS YEAR='
 2 #JCL-PROCESS-YYYY (N4)     /* '1988'
 2 #JCL-FIL-2           (A15)    /* ' PROCESS MONTH='
 2 #JCL-PROCESS-MM      (N02)    /* 03
*
1 #EXTR-RECORD
 2 #ID-NUMBER            (N6)
 2 #ISSUE-DATE           (N8)
 2 #PLAN                 (A3)
 2 REDEFINE #PLAN
  3 #PLAN-A1     (A1)
  3 #PLAN-A2     (A2)
 2 #ISSUE-AGE            (A2)
 2 #DB                   (N7.2)
 2 #ACV                  (N7.2)
 2 #CV                   (N7.2)
 2 #YTD-PREMIUMS-PAID    (N7.2)
 2 #YTD-INTEREST-PAID    (N5.2)
 2 #YTD-COI-PAID         (N5.2)
 2 #YTD-ACQ-PAID         (N4.2)
 2 #YTD-MNT-PAID         (N4.2)
 2 #TERM-CODE            (A3)
 2 #TERM-DATE            (N6)
 2 #PROR-LOAN-AMT        (N5.2)
 2 #SMOKER-FLAG          (A1)
 2 #USES-1996-PREMS      (A1)  /* Y if month-alloc-amt is 999.99
 2 #CAP-POLICY           (A1)  /* Y if conv-dur is 999
 2 #BEG-OF-YR-ACV        (N7.2)
 2 #BEG-OF-YR-DB         (N7.2)
*
1 #COUNTERS
  2 #RECS-READ        (P6)
  2 #RECS-WRITTEN     (P6)
  2 #CNT              (P5)
  2 #I1               (I2)
  2 #I2               (I2)
  2 #I3               (I2)
  2 #FOUND-ID         (L)
*
1 #last-pay-status   (a2)  /* DW2
1 #last-plan         (a3)
1 #last-term-code    (a4) 
*
1 #YEAR-MONTH-M    (N6)
1 REDEFINE #YEAR-MONTH-M
 2 #HIST-YYYY      (N4)
 2 #HIST-MM        (N2)
*
1 #PRIOR-YE        (N6)
1 REDEFINE #PRIOR-YE
 2 #PRIOR-YE-YYYY  (N4)
 2 #PRIOR-YE-MM    (N2)
*
1 #CURR-ME         (N6)
1 REDEFINE #CURR-ME
 2 #CURR-ME-YYYY  (N4)
 2 #CURR-ME-MM    (N2)
*
1 #YYYYMMDD        (N8)
1 REDEFINE #YYYYMMDD
  2 #CENT          (A2)
  2 #YY            (A2)
  2 #MM            (A2)
  2 #DD            (A2)
*
1 #ACV-ACCUM            (P9.2)
1 #ACV-DIFF             (P9.2)
1 #ACV-DIFF-GRAND       (P9.2)
1 #ACV-DIFF-SUB         (P9.2)
1 #ACV-DIFF-PLUS-GRAND  (P9.2)
1 #ACV-DIFF-PLUS-SUB    (P9.2)
1 #ACV-DIFF-NEG-GRAND   (P9.2)
1 #ACV-DIFF-NEG-SUB     (P9.2)
*
1 #ACCUM-ACV      (P7.2)
1 #NEW-ACV        (P7.2)
1 #PREV-ACV       (P7.2)
1 #ACV-DIFFF      (P7.2)
1 #REAL-PREM      (N6.2)
*
1 #YTD-TRM-PREMIUMS-PAID    (P9.2)
1 #YTD-TRM-INTEREST-PAID    (P9.2)
1 #YTD-TRM-COI-PAID         (P9.2)
1 #YTD-TRM-ACQ-PAID         (P9.2)
1 #YTD-TRM-MNT-PAID         (P9.2)
1 #YTD-TTRM-PREMIUMS-PAID    (P9.2)
1 #YTD-TTRM-INTEREST-PAID    (P9.2)
1 #YTD-TTRM-COI-PAID         (P9.2)
1 #YTD-TTRM-ACQ-PAID         (P9.2)
1 #YTD-TTRM-MNT-PAID         (P9.2)
*
1 #TOT-PRIOR-YR-PREM     (P9.2)
1 #TOT-PRIOR-YE-ACV     (P11.2)
1 #TOT-CURR-YE-ACV      (P11.2)
1 #PRIOR-YE-ACV         (P9.2)
1 #CURR-YE-ACV          (P9.2)
*
1 #ST-PAY-STATUS      (A2)
1 #ST-PLAN            (A3)
1 #SORT-CODE          (A2)
*
1 #CALC-X       (L)
1 #FOUND-CAP-LINE   (L)
1 #FOUND-MATCH      (L)
1 #TERM-POL         (L)
END-DEFINE
* * * * * * * REPORT HEADER * * * * * *
FORMAT  LS=133 PS=76
WRITE  TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
              'V/A HISTORY EXTRACT FOR YEAR-END VALUE-ADDED PROCESSING'
               5X 'DATE: '*DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (2) LS=133 PS=76
WRITE (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X 'V/A ACV CHECK'
               5X 'DATE: '*DAT4U 5X 'TIME: ' *TIMX
*
INPUT #JCL-PARM            /* FROM STACK TO ENTER PROCESS YEAR
*
MOVE #JCL-PROCESS-YYYY TO #PRIOR-YE-YYYY
SUBTRACT 1 FROM #PRIOR-YE-YYYY
MOVE 12      TO #PRIOR-YE-MM
*
MOVE #JCL-PROCESS-YYYY TO #CURR-ME-YYYY
MOVE #JCL-PROCESS-MM   TO #CURR-ME-MM
*
READ VA-HIST-V BY RECORD-KEY
* READ VA-HIST-V BY RECORD-KEY FROM 042507000000000
* IF #RECS-READ GT 10
*   ESCAPE BOTTOM
* END-IF
*
*
  IF YEAR-MONTH-M (13) LT #PRIOR-YE /* IF MOST CURRENT HISTORY MONTH IS
    ESCAPE TOP                      /* BEFORE PRIOR YEAR DECEMBER
  END-IF
*
  ADD 1 TO #RECS-READ
*
  MOVE ID-NUMBER              TO #ID-NUMBER
  MOVE ISS-DATE               TO #ISSUE-DATE
  MOVE ISSUE-PLAN             TO #PLAN
  MOVE ISSUE-AGE              TO #ISSUE-AGE
  MOVE TERMINATION-CODE       TO #TERM-CODE
  MOVE TERMINATION-DATE       TO #TERM-DATE
  MOVE SMOKER-FLAG-M     (13) TO #SMOKER-FLAG
  RESET #DB                      #YTD-PREMIUMS-PAID
  RESET #ACV                     #YTD-INTEREST-PAID
  RESET #CV                      #YTD-COI-PAID
  RESET #PROR-LOAN-AMT           #YTD-ACQ-PAID
  RESET                          #YTD-MNT-PAID
  RESET                          #USES-1996-PREMS
  RESET                          #CAP-POLICY
  RESET #YTD-TRM-PREMIUMS-PAID
        #YTD-TRM-INTEREST-PAID
        #YTD-TRM-COI-PAID
        #YTD-TRM-ACQ-PAID
        #YTD-TRM-MNT-PAID
*
  MOVE DEATH-BENEFIT-M   (13) TO #DB
  MOVE ACCUM-CASH-VALUE-M(13) TO #ACV
  MOVE CASH-VALUE-M      (13) TO #CV
*
  RESET #TERM-POL
* IF  (#PLAN = 'LT' OR = 'RT')                           /* YK1
*  OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))          /* YK1
  IF FUNCTION-TERM-POLICY(<#PLAN>)                       /* YK1 
    MOVE TRUE TO #TERM-POL
  END-IF
*
  RESET #CALC-X #FOUND-MATCH
  FIND (1) ST-V WITH MEMBER-KEY = ID-NUMBER-A
*
    IF ISS-DATE GE 19970101
      FOR #I1 1 TO 9
        IF ISS-DATE = ISSUE-DATE (#I1)
          MOVE TRUE TO #FOUND-MATCH
          IF  (MONTH-ALLOC-AMT (#I1) NE 999.99)
           OR (#TERM-POL)
            MOVE TRUE TO #CALC-X
          END-IF
        END-IF
      END-FOR
    END-IF
*
    IF (INTRO-FLAG = 'B' OR = 'C' OR = 'P' OR = 'Q') AND (#FOUND-MATCH)
      IF CUR-CONV-DURATION = 999
        MOVE 'Y' TO #CAP-POLICY
      ELSE
        RESET #FOUND-CAP-LINE
        FOR #I1 1 TO 9
          IF CUR-CONV-DURATION = 999
            MOVE TRUE TO #FOUND-CAP-LINE
            ESCAPE BOTTOM
          END-IF
        END-FOR
*
        IF NOT #FOUND-CAP-LINE
          FOR #I1 1 TO 9     /* var term not allowed for cap a/o 2000
*           IF  (PLAN (#I1) = 'LT' OR = 'RT')  /* find 1st term pol       /* YK1
*            OR ((PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z'))       /* YK1
            IF FUNCTION-TERM-POLICY(<PLAN(#I1)>)                          /* YK1
              IF ISS-DATE = ISSUE-DATE (#I1)
                MOVE 'Y' TO #CAP-POLICY
              END-IF
              ESCAPE BOTTOM
            END-IF
          END-FOR
        END-IF
      END-IF
    END-IF
  END-FIND
*
  IF (ISS-DATE GE 19970101)  /* TERMINATED POL ISSUED AFTER 1997
   AND NOT #FOUND-MATCH      /* ASSUME 1997 PREMIUMS
    MOVE TRUE TO #CALC-X
  END-IF
*
  IF (ISS-DATE GE 19970101) AND NOT #CALC-X
   AND #FOUND-MATCH
    MOVE 'Y' TO #USES-1996-PREMS
  END-IF
*
  IF NOT #CALC-X
    MOVE PRORAT-LOAN-BAL-M (13) TO #PROR-LOAN-AMT
  END-IF
*
  RESET #BEG-OF-YR-ACV
  RESET #BEG-OF-YR-DB
*
* Below 5 lines to remove loan & int in acq & mnt fields on 1st line
  FOR #I1 1 TO 13   /* it can be removed 1/1999 it will be fixed
    MOVE YEAR-MONTH-M (#I1) TO #YEAR-MONTH-M
*
    IF YEAR-MONTH-M (#I1) = #PRIOR-YE      /* PRIOR YEAR YEAR-END
      IF MONTH-IND-M (#I1) = 0 /* Must be new pol in JAN   /* DW1
       AND NOT #TERM-POL                                   /* DW1
        IGNORE     /* let BEG-OF-YR Fields be 0            /* DW1
      ELSE
        MOVE ACCUM-CASH-VALUE-M (#I1) TO #BEG-OF-YR-ACV
        MOVE DEATH-BENEFIT-M    (#I1) TO #BEG-OF-YR-DB
      END-IF
    END-IF
*
    IF #HIST-YYYY NE #JCL-PROCESS-YYYY
      IF   (YEAR-MONTH-M (#I1) = #PRIOR-YE)        /* DW1
       AND (MONTH-IND-M (#I1) = 0) /* Must be new pol in JAN
       AND NOT #TERM-POL                           /* DW1
        IGNORE                                     /* DW1
      ELSE
        ESCAPE TOP
      END-IF
    END-IF
*
*           TEST IF PREMIUM IS OFF BY ??000.00 DUE TO FIELD LIMIT
    RESET #ACCUM-ACV
    IF #I1 GT 1
      MOVE ACCUM-CASH-VALUE-M (#I1 - 1) TO #PREV-ACV
    ELSE
      RESET #PREV-ACV
    END-IF
*
    COMPUTE #NEW-ACV = #PREV-ACV + PREMIUM-M           (#I1)
                                 + INTEREST-M          (#I1)
                                 - COST-OF-INSURANCE-M (#I1)
*
    IF #CALC-X          /* next POL
      SUBTRACT PRORAT-LOAN-BAL-M   (#I1) FROM #NEW-ACV /* mon acq
      SUBTRACT PRORAT-LN-ACC-INT-M (#I1) FROM #NEW-ACV /* mon mnt exp
    END-IF
*
    IF #NEW-ACV GT ACCUM-CASH-VALUE-M (#I1)
      COMPUTE #ACV-DIFFF = #NEW-ACV - ACCUM-CASH-VALUE-M (#I1)
    ELSE
      COMPUTE #ACV-DIFFF = ACCUM-CASH-VALUE-M (#I1) - #NEW-ACV
    END-IF
*
    MOVE PREMIUM-M (#I1)  TO #REAL-PREM
    IF #ACV-DIFFF NE 0
      PERFORM CALC-REAL-PREM
    END-IF
*
    IF   (YEAR-MONTH-M (#I1) = #PRIOR-YE) /* PRIOR YEAR YEAR-END  DW1
     AND (MONTH-IND-M (#I1) = 0) /* Must be new pol in JAN   /* DW1
     AND (NOT #TERM-POL)                                     /* DW1
      ADD #REAL-PREM TO #TOT-PRIOR-YR-PREM                   /* DW1
      WRITE RECORD-KEY YEAR-MONTH-M (#I1)
        'prior yrs prem=' #REAL-PREM 'total=' #TOT-PRIOR-YR-PREM
    END-IF
*
    ADD #REAL-PREM                TO #YTD-PREMIUMS-PAID
    ADD INTEREST-M          (#I1) TO #YTD-INTEREST-PAID
    ADD COST-OF-INSURANCE-M (#I1) TO #YTD-COI-PAID
*
    IF #CALC-X
      ADD PRORAT-LOAN-BAL-M   (#I1) TO #YTD-ACQ-PAID
      ADD PRORAT-LN-ACC-INT-M (#I1) TO #YTD-MNT-PAID
    END-IF
  END-FOR
*
  WRITE WORK 2 #EXTR-RECORD
  ADD 1 TO #RECS-WRITTEN
*       compute ACV differences (mostly terminations of this year)
  RESET #PRIOR-YE-ACV
  RESET #CURR-YE-ACV
  RESET #ACV-ACCUM
  FOR #I1 1 TO 13
    IF YEAR-MONTH-M (#I1) = #PRIOR-YE      /* PRIOR YEAR YEAR-END
      IF MONTH-IND-M (#I1) = 0 /* Must be new pol in JAN   /* DW1
       AND NOT #TERM-POL                                   /* DW1
        IGNORE     /* let BEG-OF-YR Fields be 0            /* DW1
      ELSE
        MOVE ACCUM-CASH-VALUE-M (#I1) TO #ACV-ACCUM
        MOVE ACCUM-CASH-VALUE-M (#I1) TO #PRIOR-YE-ACV
        ADD  ACCUM-CASH-VALUE-M (#I1) TO #TOT-PRIOR-YE-ACV
        ESCAPE TOP
      END-IF
    END-IF
*
    MOVE YEAR-MONTH-M (#I1) TO #YEAR-MONTH-M
    IF #HIST-YYYY NE #JCL-PROCESS-YYYY    /* NOT THIS YEARS HISTORY
      IF   (YEAR-MONTH-M (#I1) = #PRIOR-YE)        /* DW1
       AND (MONTH-IND-M (#I1) = 0) /* Must be new pol in JAN
       AND NOT #TERM-POL                           /* DW1
        IGNORE                                     /* DW1
      ELSE
        ESCAPE TOP
      END-IF
    END-IF
*
    IF  YEAR-MONTH-M (#I1) = #CURR-ME     /* CURRENT PROCESS M/E
      MOVE ACCUM-CASH-VALUE-M (#I1) TO #CURR-YE-ACV
      ADD  ACCUM-CASH-VALUE-M (#I1) TO #TOT-CURR-YE-ACV
    END-IF
*               TEST IF PREMIUM IS OFF BY X000.00 DUE TO FIELD LIMIT
    RESET #ACCUM-ACV
    IF #I1 GT 1
      MOVE ACCUM-CASH-VALUE-M (#I1 - 1) TO #PREV-ACV
    ELSE
      RESET #PREV-ACV
    END-IF
*
    COMPUTE #NEW-ACV = #PREV-ACV + PREMIUM-M           (#I1)
                                 + INTEREST-M          (#I1)
                                 - COST-OF-INSURANCE-M (#I1)
*
    IF #CALC-X          /* 1997 POL
      SUBTRACT PRORAT-LOAN-BAL-M   (#I1) FROM #NEW-ACV /* mon acq
      SUBTRACT PRORAT-LN-ACC-INT-M (#I1) FROM #NEW-ACV /* mon mnt exp
    END-IF
*
    IF #NEW-ACV GT ACCUM-CASH-VALUE-M (#I1)
      COMPUTE #ACV-DIFFF = #NEW-ACV - ACCUM-CASH-VALUE-M (#I1)
    ELSE
      COMPUTE #ACV-DIFFF = ACCUM-CASH-VALUE-M (#I1) - #NEW-ACV
    END-IF
*
    MOVE PREMIUM-M (#I1)  TO #REAL-PREM
    IF #ACV-DIFFF NE 0
      PERFORM CALC-REAL-PREM
    END-IF
*
    ADD #REAL-PREM                     TO #ACV-ACCUM
    ADD #REAL-PREM                     TO #YTD-TRM-PREMIUMS-PAID
    ADD INTEREST-M               (#I1) TO #ACV-ACCUM
    ADD INTEREST-M               (#I1) TO #YTD-TRM-COI-PAID
    SUBTRACT COST-OF-INSURANCE-M (#I1) FROM #ACV-ACCUM
    ADD COST-OF-INSURANCE-M      (#I1) TO #YTD-TRM-INTEREST-PAID
*
    IF #CALC-X
      SUBTRACT PRORAT-LOAN-BAL-M   (#I1) FROM #ACV-ACCUM
      ADD      PRORAT-LOAN-BAL-M   (#I1) TO   #YTD-TRM-ACQ-PAID
      SUBTRACT PRORAT-LN-ACC-INT-M (#I1) FROM #ACV-ACCUM
      ADD      PRORAT-LN-ACC-INT-M (#I1) TO   #YTD-TRM-MNT-PAID
    END-IF
  END-FOR
*
  COMPUTE #ACV-DIFF = #CURR-YE-ACV - #ACV-ACCUM
*
  IF  (#ACV-DIFF GT +.12)     /* TO BYPASS ROUNDING PROBLEMS
   OR (#ACV-DIFF LT -.12)
    IGNORE
  ELSE
    ESCAPE TOP
  END-IF
*
  RESET #FOUND-ID
  RESET #ST-PAY-STATUS
  RESET #ST-PLAN
  FIND (1) ST-V WITH MEMBER-KEY = VA-HIST-V.ID-NUMBER-A
    FOR #I2 1 TO 9
      IF ST-V.ISSUE-DATE (#I2) = VA-HIST-V.ISS-DATE
        MOVE ST-V.PAY-STATUS (#I2) TO #ST-PAY-STATUS
        MOVE ST-V.PLAN       (#I2) TO #ST-PLAN
        MOVE TRUE TO #FOUND-ID
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
*
  MOVE #ST-PAY-STATUS TO #SORT-CODE
*
  IF TERMINATION-CODE = 'REI'
    MOVE 'RE' TO #SORT-CODE
  ELSE
    IF TERMINATION-CODE = 'EXP'
      MOVE 'EX' TO #SORT-CODE
    ELSE
      IF TERMINATION-CODE = 'DTH'
        MOVE 'DE' TO #SORT-CODE
      ELSE
        IF TERMINATION-CODE = 'CSV'
          MOVE 'CS' TO #SORT-CODE
        ELSE
          IF TERMINATION-CODE = 'LAP'
            MOVE 'LA' TO #SORT-CODE
          ELSE
            IF #ST-PAY-STATUS = '45' OR = '47' OR = '48'
              IGNORE
            ELSE
              MOVE 'XX' TO #SORT-CODE     /* ALL ELSE
            END-IF
          END-IF
        END-IF
      END-IF
    END-IF
  END-IF
*
END-ALL
*
SORT BY #SORT-CODE
        VA-HIST-V.ID-NUMBER-A
  USING VA-HIST-V.ISS-DATE
        #PRIOR-YE-ACV
        #ACV-ACCUM
        #CURR-YE-ACV
        #ACV-DIFF
        #PLAN
        #ST-PAY-STATUS
        TERMINATION-CODE
        TERMINATION-DATE
        #YTD-TRM-PREMIUMS-PAID
        #YTD-TRM-INTEREST-PAID
        #YTD-TRM-COI-PAID
        #YTD-TRM-ACQ-PAID
        #YTD-TRM-MNT-PAID
*
  ADD 1 TO #CNT
  ADD #YTD-TRM-PREMIUMS-PAID   TO #YTD-TTRM-PREMIUMS-PAID
  ADD #YTD-TRM-INTEREST-PAID   TO #YTD-TTRM-INTEREST-PAID
  ADD #YTD-TRM-COI-PAID        TO #YTD-TTRM-COI-PAID
  ADD #YTD-TRM-ACQ-PAID        TO #YTD-TTRM-ACQ-PAID
  ADD #YTD-TRM-MNT-PAID        TO #YTD-TTRM-MNT-PAID
*
  ADD #ACV-DIFF TO #ACV-DIFF-SUB
  ADD #ACV-DIFF TO #ACV-DIFF-GRAND
*
  IF #ACV-DIFF LT 0
    SUBTRACT #ACV-DIFF FROM #ACV-DIFF-NEG-GRAND
    SUBTRACT #ACV-DIFF FROM #ACV-DIFF-NEG-SUB
  ELSE
    ADD      #ACV-DIFF TO   #ACV-DIFF-PLUS-GRAND
    ADD      #ACV-DIFF TO   #ACV-DIFF-PLUS-SUB
  END-IF
*
  DISPLAY (2) #CNT
              VA-HIST-V.ID-NUMBER
              'ISSUE/DATE'           VA-HIST-V.ISS-DATE
              'ACTUAL/PRIOR/Y-E ACV' #PRIOR-YE-ACV
              'ACCUM/CURR/Y-E ACV'   #ACV-ACCUM
              'ACTUAL/CURR/Y-E ACV'  #CURR-YE-ACV
              'DIFFERENCE'           #ACV-DIFF
              'PLAN'                 #PLAN
              'PAY/STATUS'           #ST-PAY-STATUS
              'TERM/CODE'            TERMINATION-CODE
              'TERM/DATE'            TERMINATION-DATE
* WRITE (2) 'YTD-PREMS = '   #YTD-TRM-PREMIUMS-PAID
*           'YTD-INT = '     #YTD-TRM-INTEREST-PAID
*           'YTD COI = '     #YTD-TRM-COI-PAID
*           'YTD ACQ = '     #YTD-TRM-ACQ-PAID
*           'YTD MNT = '     #YTD-TRM-MNT-PAID
*
  move #plan            to #last-plan                            /* DW2
  move #st-pay-status   to #last-pay-status
  move termination-code to #last-term-code
*
  AT BREAK #SORT-CODE
    write (3) 'Plan =' #last-plan 'Pay-status=' #last-pay-status   /* DW2
         'Term Code=' #last-term-code
    WRITE (3) 'TOTAL PLANS - ' #CNT
    WRITE (3) 'SUBTOTAL NEG  DIFF ' #ACV-DIFF-NEG-SUB (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'SUBTOTAL PLUS DIFF ' #ACV-DIFF-PLUS-SUB(EM=ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'SUBTOTAL NET  DIFF ' #ACV-DIFF-SUB    (EM=-ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'YTD PREM PAID' #YTD-TTRM-PREMIUMS-PAID (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'YTD INT  PAID' #YTD-TTRM-INTEREST-PAID (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'YTD COI  PAID' #YTD-TTRM-COI-PAID      (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'YTD ACQ  PAID' #YTD-TTRM-ACQ-PAID      (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (3) 'YTD MNT  PAID' #YTD-TTRM-MNT-PAID      (EM=ZZ,ZZZ,ZZZ.99)  /* DW2
*
    WRITE (2) 'TOTAL PLANS - ' #CNT
    WRITE (2) 'SUBTOTAL NEG  DIFF ' #ACV-DIFF-NEG-SUB (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'SUBTOTAL PLUS DIFF ' #ACV-DIFF-PLUS-SUB(EM=ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'SUBTOTAL NET  DIFF ' #ACV-DIFF-SUB    (EM=-ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'YTD PREM PAID' #YTD-TTRM-PREMIUMS-PAID (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'YTD INT  PAID' #YTD-TTRM-INTEREST-PAID (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'YTD COI  PAID' #YTD-TTRM-COI-PAID      (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'YTD ACQ  PAID' #YTD-TTRM-ACQ-PAID      (EM=ZZ,ZZZ,ZZZ.99)
    WRITE (2) 'YTD MNT  PAID' #YTD-TTRM-MNT-PAID      (EM=ZZ,ZZZ,ZZZ.99)
    RESET #CNT
    RESET #ACV-DIFF-NEG-SUB
    RESET #ACV-DIFF-PLUS-SUB
    RESET #ACV-DIFF-SUB
    RESET #YTD-TTRM-PREMIUMS-PAID
    RESET #YTD-TTRM-INTEREST-PAID
    RESET #YTD-TTRM-COI-PAID
    RESET #YTD-TTRM-ACQ-PAID
    RESET #YTD-TTRM-MNT-PAID
    NEWPAGE (2)
  END-BREAK
*
END-SORT
*
WRITE (2) // 'NUM RECS READ =  ' #RECS-READ        (EM=Z,ZZZ,ZZ9)
WRITE (2)    'TOT-PRIOR-YE-ACV ' #TOT-PRIOR-YE-ACV(EM=ZZ,ZZZ,ZZZ,ZZZ.99)
WRITE (2)    'TOT-CURR-YE-ACV  ' #TOT-CURR-YE-ACV (EM=ZZ,ZZZ,ZZZ,ZZZ.99)
WRITE (2) 'TOTAL NEG  DIFF ' #ACV-DIFF-NEG-GRAND  (EM=ZZ,ZZZ,ZZZ.99)
WRITE (2) 'TOTAL PLUS DIFF ' #ACV-DIFF-PLUS-GRAND (EM=ZZ,ZZZ,ZZZ.99)
WRITE (2) 'TOTAL NET  DIFF ' #ACV-DIFF-GRAND     (EM=-ZZ,ZZZ,ZZZ.99)
WRITE  'TOT-RECS-READ     = ' #RECS-READ
WRITE  'TOT-RECS-WRITTEN  = ' #RECS-WRITTEN
*
**********************************
DEFINE SUBROUTINE CALC-REAL-PREM
**********************************
*
FOR #I3 1 TO 800
  IF   (#ACV-DIFFF GT ((#I3 * 1000) - 10))
   AND (#ACV-DIFFF LT ((#I3 * 1000) + 10))
    IF #NEW-ACV LT ACCUM-CASH-VALUE-M (#I1)
      ADD (#I3 * 1000) TO #REAL-PREM
    ELSE
      SUBTRACT (#I3 * 1000) FROM #REAL-PREM
    END-IF
*
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
*
END
