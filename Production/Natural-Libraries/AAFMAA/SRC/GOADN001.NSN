* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: GOADN001 - The address update/add routine
*
* The rules are:
* 1. If the address is not shared UPDATE
* 2. If the address is shared with no members UPDATE
* 3. If the address is shared with members - create new address and
*    share it with no members
************************************************************************
*                       MODIFICATION LOG                               *
* USER     DATE      TAG     REASON                                    *
*                                                                      *
* NGG    03/18/2011  None    Program written                           *
* NGG    07/18/2012  NG1     Add User request for Share                *
*
************************************************************************
DEFINE DATA
PARAMETER USING GOADA001
PARAMETER
1 #UPDATED  (L)
1 #Share    (A1) OPTIONAL    /* NG1
LOCAL
1 #CURRENT-IDS
  2 #ADDRESS-POOL-ID-OLD  (N8)
  2 #ADDR-ISN             (P8)
  2 #STATUS-ISN           (P8)
  2 #PREVENT-OVER-IND     (A1)
1 #D                      (D)
1 #UPDATE                 (A1)
1 #PREVENT                (A) DYNAMIC
1 #SHARED                 (A) DYNAMIC
1 #UPDATE-POOL-ISNS-N     (I4)
1 #CONTACT-ADDR-POOL      (I2/3)
1 #CONTACT-ADDR-POOL-ID   (N8/3)
1 #UPDATE-POOL-ISNS       (P8/15)    /* NON MEMBERS SHARING ADDRESS
1 #J                      (I4)
1 #UPDATE-REQUEST         (I4)
1 #TR-ISN                 (P8)
1 #DATN                   (N8)
1 #TIME                   (N7)
*
1 YES                  (A1)  CONST <'Y'>
1 NEW                  (A1)  CONST <'N'>
1 BLANK                (A1)  CONST <' '>
1 #NO-UPDATES          (A10) CONST <'No updates'>
1 #SECURED             (A6)  CONST <'Secure'>
1 #PROTECTED           (A9)  CONST <'Protected'>
1 #SHARED-TEXT         (A6)  CONST <'Shared'>
1 #DUPLICATE           (A40)  CONST <'Duplicate primary or secondary address'>
1 PRIMARY              (A1)  CONST <'P'>
1 SECONDARY            (A1)  CONST <'S'>
1 #PRIMARY-DELETE      (I4)  CONST <1>
1 #PRIMARY-UPDATE      (I4)  CONST <2>
1 #SECONDARY-UPDATE    (I4)  CONST <4>

*
1 CONTACT VIEW OF A-CONTACTS
  2 ID-NUMBER
  2 CONTACT-ID
1 ADDR-REL-V VIEW OF A-ADDRESS-RELATIONSHIP
  2 CONTACT-ID (N8)
  2 ADDRESS-POOL-ID (N8)
  2 ADDR-TYPE-CD (A1)
  2 ADDR-LOCATION (A1)
  2 ATTENTION-LINE (A50)
  2 RETURNED-MAIL-IND (A1)
  2 RETURNED-MAIL-DATE (N8)
  2 PREVENT-OVER-IND (A1)
  2 PREVENT-OVER-DATE (N8)
  2 ADDRESS-SOURCE (A1)
  2 STATUS (A1)
  2 STATUS-DATE (N8)
  2 LAST-DATE-UPD (N8)
  2 LAST-TIME-UPD (N7)
  2 LAST-USER-UPD (A8)
*
1 AD-V VIEW OF A-ADDRESS-POOL
  2 ADDRESS-POOL-ID
  2 STREET
  2 UNIT
  2 CITY
  2 STATE-CODE
  2 ZIP-CODE 2 REDEFINE ZIP-CODE
    3 ZIP-CODE-5  (A5)
    3 ZIP-CODE-4  (A4)
  2 COUNTRY-CODE
  2 URBANIZATION
  2 POSTAL-CODE
  2 INTL-REGION
  2 ADDR-FORMAT-TYPE-CD
  2 ADDR-VALID-IND
  2 ADDR-VALID-DATE
  2 LAST-DATE-UPD 2 REDEFINE LAST-DATE-UPD
    3 LAST-DATE-UPD-A (A8)
  2 LAST-TIME-UPD
  2 LAST-USER-UPD
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 WIDOW-FLAG
  2 MEMBER-CONTACT-ID
  2 SPOUSE-CONTACT-ID
  2 DATE-ACCT-UPDATE
*
END-DEFINE
*
#DATN := *DATN
#TIME := *TIMN
*
IF #ADDR-POOL.COUNTRY-CODE = 'US' OR= 'PR'
  RESET #ADDR-POOL.POSTAL-CODE #ADDR-POOL.INTL-REGION
ELSE
  RESET #ADDR-POOL.STATE-CODE #ADDR-POOL.ZIP-CODE
END-IF
RESET #UPDATED #MSG
PERFORM GET-ADDR-STATUS
IF #PREVENT = #SECURED OR= #PROTECTED
  #MSG := #NO-UPDATES
  ESCAPE ROUTINE
ELSE
  IF #MSG NE BLANK
    ESCAPE ROUTINE
  END-IF
END-IF
IF #UPDATE = YES
  PERFORM UPDATE-ADDR
ELSE
  PERFORM ADD-ADDR
END-IF
*
DEFINE GET-ADDR-STATUS
/*     ===============
RESET #CURRENT-IDS
*
PERFORM POOL-STATUS
*
FIND AD-V WITH ADDRESS-POOL-ID = #ADDR-POOL.ADDRESS-POOL-ID
  DECIDE ON FIRST VALUE OF #PREVENT-OVER-IND
    VALUE 'S'
      #PREVENT := #SECURED
    VALUE 'Y'
      #PREVENT := #PROTECTED
    NONE VALUE
      RESET #PREVENT
  END-DECIDE
  IF #UPDATE-POOL-ISNS-N > 1
    #SHARED := #SHARED-TEXT
  ELSE
    RESET #SHARED
  END-IF
END-FIND
*
END-SUBROUTINE
/*
DEFINE POOL-STATUS
/*     ===========
RESET #CONTACT-ADDR-POOL (*)
  #CONTACT-ADDR-POOL-ID  (*)
  #UPDATE-POOL-ISNS-N
  #UPDATE-POOL-ISNS      (*)
*
FIND ADDR-REL-V WITH CONTACT-ID = #ADDR-REL.CONTACT-ID
  DECIDE ON FIRST VALUE OF ADDR-REL-V.ADDR-TYPE-CD
    VALUE PRIMARY
      IF ADDR-REL-V.STATUS NE 'D'
        ADD 1 TO #CONTACT-ADDR-POOL (1)
        #CONTACT-ADDR-POOL-ID (1) := ADDR-REL-V.ADDRESS-POOL-ID
      END-IF
    VALUE SECONDARY
      IF ADDR-REL-V.STATUS NE 'D'
        ADD 1 TO #CONTACT-ADDR-POOL (2)
        #CONTACT-ADDR-POOL-ID (2) := ADDR-REL-V.ADDRESS-POOL-ID
      END-IF
    NONE VALUE
      ADD 1 TO #CONTACT-ADDR-POOL (3)
  END-DECIDE
END-FIND
*
* Matching by type - only P and S
*
DECIDE ON FIRST VALUE OF #ADDR-REL.ADDR-TYPE-CD
  VALUE SECONDARY
    #ADDRESS-POOL-ID-OLD := #CONTACT-ADDR-POOL-ID (2)
    #UPDATE-REQUEST  := #SECONDARY-UPDATE
  VALUE PRIMARY
    #ADDRESS-POOL-ID-OLD := #CONTACT-ADDR-POOL-ID (1)
    #UPDATE-REQUEST  := #PRIMARY-UPDATE
  NONE VALUE
    RESET #ADDRESS-POOL-ID-OLD
END-DECIDE
IF #ADDR-POOL.ADDRESS-POOL-ID = 0
  #ADDR-POOL.ADDRESS-POOL-ID := #ADDRESS-POOL-ID-OLD
END-IF
IF #ADDRESS-POOL-ID-OLD > 0
    AND #ADDR-POOL.ADDRESS-POOL-ID > 0
    AND #ADDR-POOL.ADDRESS-POOL-ID NE #ADDRESS-POOL-ID-OLD
  #MSG := #DUPLICATE
  ESCAPE ROUTINE
END-IF
*
* Map Address sharing
*
IF #ADDR-POOL.ADDRESS-POOL-ID > 0
  #UPDATE := YES
  FL-AR.
  FIND ADDR-REL-V WITH ADDRESS-POOL-ID = #ADDR-POOL.ADDRESS-POOL-ID
    IF ADDR-REL-V.PREVENT-OVER-IND = 'S'
      ESCAPE TOP
    END-IF
    IF #ADDR-REL.CONTACT-ID = ADDR-REL-V.CONTACT-ID  /* Requested CONTACT
      ADD 1 TO #UPDATE-POOL-ISNS-N
      #UPDATE-POOL-ISNS ( #UPDATE-POOL-ISNS-N ) := *ISN ( FL-AR.)
      ESCAPE TOP
    END-IF
    FIND (1) CONTACT WITH CONTACT-ID = ADDR-REL-V.CONTACT-ID
    END-FIND
    IF CONTACT.ID-NUMBER = 0 /* Dependent Contact Only  - will sheare updated address
        OR (#Share SPECIFIED AND #Share = 'Y')     /* User request to continue sharing  NG1
      ADD 1 TO #UPDATE-POOL-ISNS-N
      #UPDATE-POOL-ISNS ( #UPDATE-POOL-ISNS-N ) := *ISN ( FL-AR.)
    ELSE
      IF #UPDATE = YES
        #UPDATE := NEW  /* RULE 3. Create a new Address-Pool record
        #ADDRESS-POOL-ID-OLD := #ADDR-POOL.ADDRESS-POOL-ID
        CALLNAT 'ADRNT001' #ADDR-POOL.ADDRESS-POOL-ID   /* NEW ADDRESS POOL ID
      END-IF
    END-IF
  END-FIND
*
* At this point #UPDATE-POOL-ISNS contains all contacts that will share updated Address
*
ELSE
  #UPDATE := NEW
  CALLNAT 'ADRNT001' #ADDR-POOL.ADDRESS-POOL-ID   /* NEW ADDRESS POOL-ID
  RESET #ADDRESS-POOL-ID-OLD                      /* THERE IS NO OLD POOL-ID
END-IF
*
END-SUBROUTINE
/*
DEFINE UPDATE-ADDR
/*     ===========
LAD-V.
FIND (1) AD-V WITH ADDRESS-POOL-ID = #ADDRESS-POOL-ID-OLD
  IF #ADDR-POOL.STATE-CODE NE AD-V.STATE-CODE
      OR #ADDR-POOL.COUNTRY-CODE NE AD-V.COUNTRY-CODE
      OR #ADDR-POOL.STREET NE AD-V.STREET
      OR #ADDR-POOL.UNIT   NE AD-V.UNIT
      OR #ADDR-POOL.CITY   NE AD-V.CITY
      OR #ADDR-POOL.ZIP-CODE NE AD-V.ZIP-CODE
      OR #ADDR-POOL.URBANIZATION NE AD-V.URBANIZATION
      OR #ADDR-POOL.INTL-REGION NE AD-V.INTL-REGION
      OR #ADDR-POOL.COUNTRY-CODE = 'CA'
      AND #ADDR-POOL.POSTAL-CODE NE AD-V.POSTAL-CODE
    #UPDATED := TRUE
* CALLNAT 'ADRNTROF'    /* Transaction register BEFORE
    MOVE BY NAME #ADDR-POOL TO AD-V
    AD-V.ADDR-VALID-DATE := #DATN
    AD-V.LAST-DATE-UPD   := #DATN
    AD-V.LAST-TIME-UPD   := #TIME
    IF #CLERK-ID NE BLANK
      AD-V.LAST-USER-UPD := #CLERK-ID
    ELSE
      AD-V.LAST-USER-UPD   := *USER
    END-IF
    UPDATE (LAD-V.)
  END-IF
END-FIND
*
* Only current Address Relationship is changed
*
LADDR-REL-V.
FIND (1) ADDR-REL-V WITH CONTACT-ID = #ADDR-REL.CONTACT-ID
    AND ADDRESS-POOL-ID = #ADDRESS-POOL-ID-OLD
  IF #ADDR-REL.ADDR-TYPE-CD          NE ADDR-REL-V.ADDR-TYPE-CD
      OR #ADDR-REL.ADDR-LOCATION     NE ADDR-REL-V.ADDR-LOCATION
      OR #ADDR-REL.ATTENTION-LINE    NE ADDR-REL-V.ATTENTION-LINE
      OR #ADDR-REL.RETURNED-MAIL-IND NE ADDR-REL-V.RETURNED-MAIL-IND
      OR #ADDR-REL.PREVENT-OVER-IND  NE ADDR-REL-V.PREVENT-OVER-IND
      OR #ADDR-REL.ADDRESS-SOURCE    NE ADDR-REL-V.ADDRESS-SOURCE
      OR #ADDR-REL.STATUS            NE ADDR-REL-V.STATUS
    #UPDATED := TRUE
    MOVE BY NAME #ADDR-REL TO ADDR-REL-V
    ADDR-REL-V.LAST-DATE-UPD  := #DATN
    ADDR-REL-V.LAST-TIME-UPD  := #TIME
    IF #CLERK-ID NE BLANK
      ADDR-REL-V.LAST-USER-UPD := #CLERK-ID
    ELSE
      ADDR-REL-V.LAST-USER-UPD   := *USER
    END-IF
    UPDATE
  END-IF
END-FIND
*
* CALLNAT 'ADRNTRNF'      /* Transaction register AFTER
END-SUBROUTINE
/*
DEFINE ADD-ADDR
/*     ========
#UPDATED := TRUE
* IF #ADDRESS-POOL-ID-OLD > 0
*  CALLNAT 'ADRNTROF'      /* Transaction register BEFORE
*    #ADDR-REL.CONTACT-ID
*    #ADDRESS-POOL-ID-OLD
*    #UPDATE-REQUEST
*    #TR-ISN
*    #CLERK-ID
* END-IF
RESET AD-V
MOVE BY NAME #ADDR-POOL TO AD-V
AD-V.ADDR-VALID-DATE := #DATN
AD-V.LAST-DATE-UPD   := #DATN
AD-V.LAST-TIME-UPD   := #TIME
IF #CLERK-ID NE BLANK
  AD-V.LAST-USER-UPD := #CLERK-ID
ELSE
  AD-V.LAST-USER-UPD   := *USER
END-IF
SL-AD-V.
STORE AD-V
#ADDR-ISN := *ISN (SL-AD-V.)
IF #UPDATE-POOL-ISNS-N > 0
*
*                             Move dependants but don't move members
*
  FOR #J 1 TO #UPDATE-POOL-ISNS-N
    GL.
    GET ADDR-REL-V #UPDATE-POOL-ISNS ( #J )
    ADDR-REL-V.ADDRESS-POOL-ID := #ADDR-POOL.ADDRESS-POOL-ID
    RESET ADDR-REL-V.RETURNED-MAIL-IND
      RETURNED-MAIL-DATE
    ADDR-REL-V.ADDRESS-SOURCE := #ADDR-REL.ADDRESS-SOURCE
    ADDR-REL-V.LAST-DATE-UPD  := #DATN
    ADDR-REL-V.LAST-TIME-UPD  := #TIME
    IF #CLERK-ID NE BLANK
      ADDR-REL-V.LAST-USER-UPD := #CLERK-ID
    ELSE
      ADDR-REL-V.LAST-USER-UPD   := *USER
    END-IF
    UPDATE (GL.)
  END-FOR
ELSE
*
*                             Create new relationship
*
  #ADDR-REL.ADDRESS-POOL-ID := #ADDR-POOL.ADDRESS-POOL-ID
  MOVE BY NAME #ADDR-REL TO ADDR-REL-V
  ADDR-REL-V.LAST-DATE-UPD  := #DATN
  ADDR-REL-V.LAST-TIME-UPD  := #TIME
  IF #CLERK-ID NE BLANK
    ADDR-REL-V.LAST-USER-UPD := #CLERK-ID
  ELSE
    ADDR-REL-V.LAST-USER-UPD   := *USER
  END-IF
  STORE ADDR-REL-V
END-IF
*
* CALLNAT 'ADRNTRNF'          /* Transaction register AFTER
*  #ADDR-REL.CONTACT-ID
*  #ADDR-POOL.ADDRESS-POOL-ID
*  #UPDATE-REQUEST
*  #TR-ISN
*  #CLERK-ID
END-SUBROUTINE
/*
END
