* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* C100GIPO Create AT for GIPO
* GPL/GP2 Proj
* 
* !02-21-2016! 
* 1. Table for FA has only original FA.
* 2. What are Legacy fields for membership change
* 3. Where payer and owner are defined (NO - ashwini)
* 
*
*** To Do Feb,18 2016 ***
* 1. change Status PO for continue AT process
* 2.Add vld for Dates before DOB
* ------- apply to program GP_1 --------- start
* ------- apply to program GP_1 --------- end
* Flex not covered yet.
*
*         48 aafma1   aloke         27087 ALOKE1     50            68   X     M 
*         48 aafma1   aloke         27087 ALOKE1     46        80,420   X     M 
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
* PARAMETER #CGA-ID #CGA-CLERK #CGA-SCR-ID
*
LOCAL  USING GONERLXX
LOCAL USING ADDA0001
LOCAL
 1 ST-V VIEW OF A-STATUS
    2 INTRO-FLAG
    2 C*ACTIVE-SEGMENTS
    2 ACTIVE-SEGMENTS(9)
      3 POLICY-ID
      3 PLAN
      3 ISSUE-DATE
      3 REDEFINE ISSUE-DATE
        4 ISSUE-DATE_A  (A8)  
      3 MODE   
      3 STATUS
      3 FACE-AMOUNT
      3 PAY-STATUS
*     
 1 POL-V VIEW OF A-POLICY-CONTACTS
   2 POLICY-NUMBER           (A16)  /* D
   2 CONTACT-ID              (N8)   /* D
   2 RELATION                (N2)
   2 REFERENCE-NUMBER        (N6)
*
 1 CNT-V VIEW OF A-CONTACTS
  2 CONTACT-ID
  2 SSN
  2 FIRST-NAME
  2 LAST-NAME
  2 MIDDLE-NAME
  2 SUFFIX
  2 GENDER-CD
  2 DATE-OF-BIRTH
  2 REDEFINE DATE-OF-BIRTH
    3 DATE-OF-BIRTH_A     (A8)
  2 REDEFINE DATE-OF-BIRTH
    3 YYYY         (N4)
    3 MM           (N2)
    3 DD           (N2)
  2 DATE-OF-DEATH
  2 CONTACT-TYPE
  2 FIRM-ORGANIZATION-NAME
*  
1 AT-V VIEW of A-APPL-TRACKING
  2 ID-NUMBER              (N6)     /* OK 
  2 CONTACT-ID             (N8)     /* OK
  2 APPL-SOURCE            (A7)     /* OK   GIPO
  2 DATE-RECEIVED          (N8)     /* OK  
  2 ACTION-DATE            (N8)     /* OK
  2 ACTION-FLAG            (A1)     /* OK   P-?
  2 USER-SOURCE            (A3)     /* OK
  2 SSN                    (N9)     /* OK 
  2 AT-STATUS              (A2)     /* Ok   U6    
  2 INTRO-FLAG             (A1)     /* OK  
  2 SMOKER-FLAG            (A1)     /* OK   
  2 MEMBER-CN              (A6)     /* OK
  2 REDEFINE MEMBER-CN
     3 MEMBER-CN_N         (N6) 
  2 NOTES          (A75/40)
  2 PLAN
  2 FACE-AMT-UNITS         (N4)
  2 FIRST-PLACE-FEE        (N7.2)    /* ?
  2 MODE                   (A1)      /* OK
  2 RATE-DATE              (N8)      /* ? 
  2 POLICY-ID-PARENT       (A16)     /* GPL/GP2 Parent for GIPO Policy
  2 GIPO-EVENT             (A6)      /* GPL-21,GPL-25,GPL-28; GP2-21,GP2-25,GP2-30,GP2-35,GP2-40
  2 C*ST-NOTE-TBL
  2 ST-NOTE-TBL(10)
    3 ST-NOTE-USER           (A3)
    3 ST-NOTE-DATE           (N8)
    3 ST-NOTE-STATUS         (A2)
  2 FIRST-NAME
  2 LAST-NAME
  2 MIL-SERVICE              (A3)
  2 NAME
  2 DISCLOSURE-IND           
  2 E-DEPOSIT-IND   
*  
 1 #i               (I2)
 1 #j               (I2)
 1 #k               (I2)
 1 #p               (I2)
*
 1 v_AT         (N6)
 1 v_CN         (N6)
 1 v_CN_Own     (N6)
 1 v_CN_Own_Orig  (N6)
 1 cv_Own       (C)
 1 v_Pol        (A16)
 1 v_Plan       (A3)
 1 v_BD         (N8)
 1 v_BD_Own     (N8)
 1 v_Name       (A35)
 1 v_Name_Own   (A35)
 1 v_SSN        (N9)
 1 v_SSN_Own    (N9) 
 1 v_ADDR1      (A40)
 1 v_ADDR2      (A40)
 1 v_ADDR3      (A40) 
 1 v_ADDR1_Own  (A40)
 1 v_ADDR2_Own  (A40)
 1 v_ADDR3_Own  (A40)
 1 v_Age        (N2) 
 1 v_FA_Status  (N6)
 1 v_Email      (A)    DYNAMIC
 1 v_Phone      (A)    DYNAMIC
*
 1 v_GIPO_N     (N6)
 1 v_GIPO_N_FA  (N6)
*  Rules 
 1 FA_Max           (N3)(EM=Z99',000')
 1 lb_FA_Max        (A4)   INIT<'Max='>
 1 cFA_Max        (C) 

 1 FA_Min_Trm       (N3)   INIT <50> (EM=Z99',000')
 1 lb_FA_Min_Trm    (A11)  INIT<'Term:  Min='>
 1 cFA_min_T      (C) 
 1 FA_Min_WL        (N3)   INIT <10> (EM=Z99',000')
 1 lb_FA_Min_WL     (A11)  INIT<'WL  :  Min='>
 1 cFA_Min_W      (C) 
* 
 1 v_FA             (N3)
 1 Tot_FA           (N7.2) (EM=Z,ZZZ,ZZZ.99)   
 1 cFA              (C)
 1 v_POS            (I4)
 1 v_Gipo_Plan      (A3)
 1 v_All_GIPO_Plans (A20)  
 1 v_FPF            (N9.2)
 1 v_Prem           (N7.2)
 1 v_Prem_Mon       (N7.2)
 1 v_Prem_N_Mon     (N7.2)
 1 v_First_pmt      (N7.2)
 1 v_Mon            (N2)
 1 v_E-Deposit      (A1)
 1 v_Mode           (A1)
 1 v_All_Mode       (A19) INIT<'G,E,Q,S,A,M,0,4,2,1'>
 1 v_Nicotine       (A1)
 1 v_Discl          (A1)
 1 lb_Discl         (A10) INIT <'Disclosure'>
 1 cDiscl           (C)
 1 clb_Discl        (C)
 1 l_California     (L) 
 1 v_Msg            (A75)
 1 v_New            (A6)
 1 #d0              (D)   INIT <*DATX>
 1 #db              (D)
 1 d_Since_bd       (N5) 
 1 DB_N             (N8)  
 1 REDEFINE  DB_N  
   2 DB_A           (A8) 
 1 DB_21            (D) (EM=LLL,DD' 'YYYY)
 1 DB_25            (D) (EM=LLL,DD' 'YYYY)
 1 DB_28            (D) (EM=LLL,DD' 'YYYY)
 1 DB_30            (D) (EM=LLL,DD' 'YYYY)
 1 DB_35            (D) (EM=LLL,DD' 'YYYY)
 1 DB_40            (D) (EM=LLL,DD' 'YYYY)
 1 ev_90            (D/6) (EM=LLL,DD' 'YYYY)
*
 1 db_Event         (A6)
* 1 l_Event          (L)   INIT <FALSE>
 1 l_Admin          (L)   INIT <FALSE>
  
 1 sel(4)
   2 s_L            (N1) INIT <1,2,3,4>
   2 s_seg          (N1)
   2 s_Plan         (A3) 
   2 s_Pol          (A16) 
   2 s_Iss_dt       (D)   (EM=LLL,DD' 'YYYY)
   2 s_FA           (N7.2)       
 1 #cv3             (C)   INIT <(AD=D)>
 1 #cv4             (C)   INIT <(AD=D)>
*
* --------
1 #YYYYMMDD            (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY              (N4)
  2 #MM                (N2)
  2 #DD                (N2)
1 v_Smok               (A1)
1 v_FA_9               (N7.2)
1 v_Sex                (A1) 
1 N06                  (N06)
1 l_Is_GIPO            (L)
1 p_Pol_Ch             (A16/*)
1 p_Pol_Ch_Type        (A6/*)
1 v_RC                 (N4)
1 v_A                  (A) DYNAMIC 
END-DEFINE
* INCLUDE GONERCXX
*
 ON ERROR
   CALLNAT 'USR2001N' P_PARMS  /* Get the actual error line details
   WRITE 'Pgm:' *PROGRAM           /
        'Obj:'  P_ERROR_PROGRAM    /
        'Err:'  P_ERROR_NUM        /
        'Line:' P_ERROR_LINE       /
        'CN:'   #CGA-ID            /
        'Cmd:'  #CGA-SCR-COMMAND   /
        'Sfx:'  #CGA-SCR-SUFFIX    /
        'Srv:'  *ETID              //
   IF *ERROR-NR = 3045
     WRITE  2x '------------------------------------------'(I) /
            2x 'Record  #CGA-ID is held by another session'(I) /
            2x 'Please try later'                              /
            2x '------------------------------------------'(I)
   ELSE
     WRITE  2x '--------------------------'(I)  /
            2x 'Please report error to MSS'(I)  /
            2x '--------------------------'(I)
    END-IF
   
   #CGA-SCR-COMMAND := 'GM'
   FETCH 'G1000PXX' 
   BACKOUT TRANSACTION
 END-ERROR
/*
SET KEY PF1
SET KEY PF2 
SET KEY PF3 
SET KEY PF4
SET KEY PF11
*
 PERFORM sbr_Init
* ----------------------------------------------------------------------------------- --db-1 ... 
 IF *INIT-USER ='BZ'
   REPEAT
    INPUT (IP=OFF)
      2x 'Entry for debugging' 4x
      'Env:'GET_DBN(<>)(AD=I EM=ZZ9) 
      'Lib:' *LIBRARY-ID(AD=I) 4x
      'IAS User' #CGA-CLERK(AD=IO) 'Login:' *INIT-USER(AD=I AL=7) //
      2x 'AT or CN:' #CGA-ID(AD=MU EM=ZZZZZ9)                     ///
      2x 'Admin rights:' l_Admin(AD=MI EM=N/Y)  
      20/2 'PF1-Help    PF2-Run    PF3-Exit    PF4-Test'
      IF *PF-KEY = 'PF1' PERFORM sbr_Help ESCAPE TOP END-IF
      IF *PF-KEY = 'PF2' ESCAPE BOTTOM  END-IF
      IF *PF-KEY = 'PF3' ESCAPE ROUTINE END-IF
      IF *PF-KEY = 'PF4'
         COMPRESS #CGA-ID '-1' INTO v_POL LEAVING NO SPACE
         FETCH RETURN 'GP-TEST' #CGA-ID v_Pol ESCAPE TOP  END-IF
  END-REPEAT
 END-IF
* ----------------------------------------------------------------------------------- --db-1
 IF #CGA-ID < 500000
   PERFORM sbr_STATUS
 ELSE
   PERFORM sbr_AT
 END-IF
 PERFORM sbr_Exit_On_Error
 PERFORM sbr_Get_Data
* ----------------------------------------------------------------------------------- --db-2 ... 
 IF db_Event = '00' AND l_Admin
    INPUT (IP=OFF) // 
       2x v_Msg(AD=OI) //
       2x 'For testing press PF2 to alter date of birth' //
       2x '-'(78)                                         /
    IF *PF-KEY = 'PF2'                              /*  --db
       FETCH RETURN 'GP-TEST' v_CN v_Pol            /*  --db
       FETCH 'C100GIPO'                             /*  --db
    END-IF                                          /*  --db
 END-IF                                             /*  --db     
* ----------------------------------------------------------------------------------- --db-2
 IF db_Event = ' '  AND v_Msg = ' '
    IF d_Since_bd > 180
       v_Msg := 'Today is over 180 days since Insured date of birth'
    ELSE 
       v_Msg := 'Error in Insured Date of birth. Call MSS'
    END-IF   
 ELSE 
   IF d_Since_bd > 91 AND l_Admin AND v_Msg = ' '

       INPUT (IP=OFF) 2x 'Policy:' v_Pol(AD=IO) 'Plan:' v_Plan(AD=IO) 20x 'User' #CGA-CLERK(AD=IO) //
         2x 'Today               :' #d0(AD=IO EM=MM/DD/YYYY) /
         2x 'Birth day           :' #db(AD=IO EM=MM/DD/YYYY) 2x 'Age:' v_age(AD=O) /
         2x 'Days since birth-day:' d_Since_bd(AD=OI)  ///
         2x 'To continue press PF2' 
       IF *PF-KEY = 'PF2' 
          v_Msg := ' '
       ELSE 
          v_Msg := 'Today is over 90 days since Insured date of birth'
       END-IF
    END-IF   
 END-IF   
         
 PERFORM sbr_Exit_On_Error
 PERFORM sbr_FA_Rules
 PERFORM sbr_Exit_On_Error

FORMAT KD=OFF
REPEAT
 INPUT (IP=OFF AD=O) WITH TEXT v_Msg MARK v_POS
 1/1  v_New v_AT(EM=999999) 3x 'GIPO for' v_Pol(AD=I AL=10) v_Plan(AD=U) 2x v_FA_Status(AD=I EM=' $'ZZZ,ZZ9)  4x *DATX 'v.6.2' 3x *INIT-USER(AL=7)
 2/1  'Status:' AT-V.AT-STATUS(EM=' ('XX')')   3x 'Source:' AT-V.APPL-SOURCE  10x 'Insured:' ST-V.INTRO-FLAG   14x 'User' #CGA-CLERK
 4/1  'Insured'(V) v_CN v_BD(EM=9999-99-99) v_SSN  40T 'Owner'(V) v_CN_Own(CV=cv_Own) v_BD_Own(EM=9999-99-99 CV=cv_Own) v_SSN_Own(CV=cv_Own)   
 5/1  v_Name(AL=35)                            40T v_Name_Own(AL=35)                    
 6/1  v_ADDR1(AL=30)                           40T v_ADDR1_Own(AL=30)                   
 7/1  v_ADDR2(AL=30)                           40T v_ADDR2_Own(AL=30)                   
 8/1  v_ADDR3(AL=30)                           40T v_ADDR3_Own(AL=30)                   
 9/1  'Owner pref. Ph:' v_Phone(AL=20) 3x 'Eml:' v_Email(AL=34) 
 
 10/1  'GIPO Event:' db_event(AD=OI) 2x 'Age' v_Age(EM=Z9'y') d_Since_bd (EM=ZZ9'd')
                     7x 'Issued GIPO #:' v_GIPO_N(AD=OI EM=9)
                        'Amount:' v_GIPO_N_FA(AD=OI EM=Z,ZZZ,ZZ9)
 
 11/1  '_'(60) 'Policy options'(I) '_'(3)                                          
 13/1 3x 'Face Amount:' v_FA(AD=MU EM=ZZ9 CV=cFA) 13/20 ',000' 14x
                    lb_FA_Min_WL(CV=cFA_Min_W)   FA_Min_WL(CV=cFA_Min_W) 
                 3x lb_FA_Max(CV=cFA_Max)        FA_Max(CV=cFA_Max)                  
 14/1        37x     lb_FA_min_Trm(CV=cFA_min_T) FA_min_Trm(CV=cFA_Min_T)
                 3x lb_FA_Max(CV=cFA_min_T)       FA_Max(CV=cFA_min_T)           
 15/1 3x 'Plan:' v_GIPO_Plan(AD=MU)  v_All_GIPO_Plans                            
 17/1 3x 'E-Deposit' v_E-Deposit(AD=UM EM=X) 5x 'Mode:' v_Mode(AD=UM EM=X)
      5x 'Nicotine:' v_Nicotine(AD=UM EM=X)       
      5x lb_Discl(AD=O CV=clb_Discl) v_Discl(AD=UM EM=X CV=cDiscl)
 18/1  '_'(60) 'Calculated'(I) '_'(7)                                              
 20/2  v_Prem(AD=OI EM=' Ann:'ZZZZ.99) 4x  v_Prem_Mon(AD=OI EM=' 1-Mo:'ZZZ.99)
      4x  v_Mon(EM=Z9'-Mo.') v_Prem_N_Mon(AD=OI EM=ZZZZ.99)
      4x v_First_pmt(AD=OI EM=' FPF:'ZZZ.99) 
 22/3 'PF1'(I) 'Help' '  PF2'(I) 'Issue' '  PF3'(I) 'Cancel' '  PF4'(I) 'Test' 
      '  PF11'(I) 'View'
  v_Msg := ' '
  DECIDE ON FIRST VALUE OF *PF-KEY
    VALUE  'PF3'
       BACKOUT TRANSACTION
       #CGA-SCR-COMMAND := 'GM'
       FETCH 'G1000PXX' 
    VALUE  'PF2'
       PERFORM sbr_Validate
       IF v_Msg = ' '
         PERFORM sbr_Update_AT
         #CGA-SCR-COMMAND := 'AI'
         #CGA-SCR-SUFFIX  := ' '
         FETCH 'G1000PXX'
       END-IF
    VALUE 'PF4'                                            /*  --db
              FETCH RETURN 'GP-TEST' v_CN v_Pol            /*  --db
              FETCH 'C100GIPO'                             /*  --db
    VALUE 'PF11' 
       PERFORM sbr_View
    VALUE 'PF1'
       PERFORM sbr_Help       
    NONE
      PERFORM sbr_Validate
  END-DECIDE
       
END-REPEAT
* ====================================================================================================
 DEFINE sbr_STATUS
*       ---------- 
  v_CN := #CGA-ID
       PERFORM sbr_New_AT 
     FIND(1) ST-V WITH ID-NUMBER = v_CN END-FIND
       FOR #i = 1 TO C*ACTIVE-SEGMENTS
        IF STATUS(#i) <> 'D' OR (ST-V.PLAN(#i) <> 'GPL' AND ST-V.PLAN(#i) <> 'GP2')
           ESCAPE TOP
        END-IF   
          #j := #j + 1
          s_seg(#j)    := #i
          s_Plan(#j)   := ST-V.PLAN(#i)
          s_Pol(#j)    := ST-V.POLICY-ID(#i)
          IF ST-V.ISSUE-DATE(#i) = MASK(YYYYMMDD)
            MOVE EDITED ST-V.ISSUE-DATE_A(#i) TO s_Iss_dt(#j)(EM=YYYYMMDD)
          END-IF  
          s_FA(#j)     := ST-V.FACE-AMOUNT(#i)
*     PRINT NOTITLE *PROGRAM *LINE(EM=ZZZ9) #i #j(AD=I) 'seg:' s_seg(#j) 'Plan:' s_Plan(#j) 'Pol:' s_Pol(#j)  /* --db         
      END-FOR

     DECIDE ON EVERY VALUE OF #j
       VALUE 0
         COMPRESS 'No GPL or GP2 policies were found for CN' #CGA-ID  INTO v_Msg
         ESCAPE ROUTINE 
       VALUE 1 
          #i := s_seg(1)
       VALUE 2 
           MOVE (AD=NP) TO #cv3 #cv4
       VALUE 3 
           MOVE (AD=NP) TO #cv4
       VALUE 2,3,4
            #i := 0
           INPUT (AD=O IP=OFF)                  //
             4x 'Memeber has' #j 'GPL/GP2 policies' //
             4x 'Please choose line with policy you are working'  ///
             4x 'Line#    Plan   Policy     Issue date    Face amount'(I) /
             4x '-----    ----   --------   -----------   -----------'    / 
             7x s_L(1)(AD=I)         5x  s_Plan(1)          3x s_Pol(1)(AL=10)         s_Iss_dt(1)          s_FA(1) /
             7x s_L(2)(AD=I)         5x  s_Plan(2)          3x s_Pol(2)(AL=10)         s_Iss_dt(2)          s_FA(2) /
             7x s_L(3)(AD=I CV=#cv3) 5x  s_Plan(3)(CV=#cv3) 3x s_Pol(3)(AL=10 CV=#cv3) s_Iss_dt(3)(CV=#cv3) s_FA(3)(CV=#cv3) /
             7x s_L(4)(AD=I CV=#cv4) 5x  s_Plan(4)(CV=#cv4) 3x s_Pol(4)(AL=10 CV=#cv4) s_Iss_dt(4)(CV=#cv4) s_FA(4)(CV=#cv3) ///                  
             4x 'Policy line' #i(AD=MI EM=9) /////
             4x 'PF3'(I) 'Exit'
        
           IF *PF-KEY = 'PF3' 
              v_Msg := 'You did not choose one of GPL/GP2 policies'
              ESCAPE ROUTINE
           END-IF        

           IF #i < 1 OR #i > #j 
              COMPRESS 'Line number should be from 1 to' #j INTo v_Msg
              REINPUT v_Msg
           END-IF   
           v_Msg := ' '
           #i := s_seg(#i) 
       NONE IGNORE 
     END-DECIDE
 END-SUBROUTINE
* ====================================================================================================
 DEFINE sbr_AT
*       ---------- 
 v_AT := #CGA-ID 
     FIND(1) AT-V WITH ID-NUMBER = v_AT
        IF NO RECORD FOUND 
           COMPRESS 'AT' v_AT 'not found' INTO v_MSG
           #CGA-SCR-SUFFIX := ' '
           ESCAPE ROUTINE
        END-NOREC                           
 
         IF AT-V.MEMBER-CN_N = 0
           COMPRESS 'AT' v_AT 'is incomplete, please use Insured CN' INTO v_MSG
           #CGA-SCR-SUFFIX := ' '
           ESCAPE ROUTINE
        END-IF
        
        IF AT-V.APPL-SOURCE <> 'GIPO'
           COMPRESS 'AT' v_AT 'is not GIPO AT' INTO v_MSG
           #CGA-SCR-SUFFIX := ' '
           ESCAPE ROUTINE
        END-IF
        WRITE NOTITLE / 2x '---- AT Status notes ----'(I)  /
              2x 'User: Date       : Status'   (I)
        FOR #i = 1 TO C*ST-NOTE-TBL
           WRITE  2x ST-NOTE-USER(#i) ':' ST-NOTE-DATE(#i)(EM=9999-99-99)  ':'  ST-NOTE-STATUS(#i)
        END-FOR
        v_CN        := AT-V.MEMBER-CN_N
        MOVE RIGHT AT-V.PLAN TO v_GIPO_Plan
        v_FA        := AT-V.FACE-AMT-UNITS
        v_New       := 'AT'
        v_Mode      := AT-V.MODE
        v_Nicotine  := AT-V.SMOKER-FLAG
        v_Pol       := AT-V.POLICY-ID-PARENT
        v_Discl     := AT-V.DISCLOSURE-IND
        v_E-Deposit := AT-V.E-DEPOSIT-IND
        FIND(1) ST-V WITH ID-NUMBER = v_CN 
           EXAMINE FULL POLICY-ID(*) FOR FULL v_Pol GIVING INDEX #i
           IF #i = 0 
              COMPRESS 'Error: Policy' v_Pol 'was not found in CN:' v_CN INTO v_Msg
           END-IF   
        END-FIND
     END-FIND
     
 END-SUBROUTINE
* ====================================================================================================
DEFINE sbr_Get_Data
*      --------
    IF PAY-STATUS(#i) = '45'
      COMPRESS 'Policy' ST-V.POLICY-ID(#i) ST-V.PLAN(#i) 'has RPU' INTO v_Msg
      ESCAPE ROUTINE
    END-IF
          
    v_Pol        := ST-V.POLICY-ID(#i)
    v_Plan       := ST-V.PLAN(#i) 
    
    s_Pol(1) := ' '
    v_FA_Status := ST-V.FACE-AMOUNT(#i)  
   
*  Insured and owner contact data
*  Insured  
  FIND(1) CNT-V WITH ID-NUMBER = v_CN
       IF NO RECORD FOUND
          COMPRESS 'There is no contact record for CN' v_CN  INTO v_Msg
          ESCAPE ROUTINE
       END-NOREC
    IF DATE-OF-DEATH <> 0 
          COMPRESS 'Date of death is' DATE-OF-DEATH  'for' v_CN  INTO v_Msg
          ESCAPE ROUTINE
    END-IF     
    COMPRESS FIRST-NAME MIDDLE-NAME LAST-NAME INTO v_NAME
    v_SSN := CNT-V.SSN
    v_BD := DATE-OF-BIRTH
    v_Sex := GENDER-CD
  END-FIND
  
  PERFORM sbr_Dates
  IF v_Msg <> ' ' ESCAPE ROUTINE END-IF

  PERFORM sbr_Total_GIPO
  IF v_Msg <> ' ' ESCAPE ROUTINE END-IF
  
  RESET #PDA-ADDRESS
  #ADD-TYPE := 'P'
  #ADD-CONTACT-ID := CNT-V.CONTACT-ID
  CALLNAT 'ADDN0001'   #PDA-ADDRESS
             v_ADDR1 := #ADD-LINE-1
             v_ADDR2 := #ADD-LINE-2
             v_ADDR3 := #ADD-LINE-3
  IF #ADD-STATE = 'CA'
    l_California := TRUE
    MOVE (AD=D) TO clb_Discl
    MOVE (AD=DU) TO cDiscl
  ELSE
    MOVE (AD=NP) TO clb_Discl
    MOVE (AD=NP) TO cDiscl
    v_Discl := 'N'
  END-IF    
  IF v_E-Deposit = ' '
    v_E-Deposit := 'N'
  END-IF  
  FIND POL-V WITH POLICY-NUMBER =  v_Pol
       WHERE RELATION = 2 
       v_CN_Own := REFERENCE-NUMBER
  END-FIND
* Owner  
  IF v_CN <> v_CN_Own
    MOVE (AD=D) TO cv_Own
    FIND(1) CNT-V WITH ID-NUMBER = v_CN_Own
          IF NO RECORD FOUND
             COMPRESS 'There is no contact record for owner CN' v_CN_Own  INTO v_Msg
             ESCAPE ROUTINE
          END-NOREC
      IF CNT-V.CONTACT-TYPE = 'O'
         COMPRESS '(Org.)' FIRM-ORGANIZATION-NAME INTO v_NAME_Own
      ELSE
         COMPRESS CNT-V.FIRST-NAME CNT-V.MIDDLE-NAME CNT-V.LAST-NAME INTO v_NAME_Own
      END-IF   
      v_SSN_Own := CNT-V.SSN
      v_BD_Own := DATE-OF-BIRTH
    END-FIND
    RESET #PDA-ADDRESS
    #ADD-TYPE := 'P'
    #ADD-CONTACT-ID := CNT-V.CONTACT-ID
    CALLNAT 'ADDN0001'   #PDA-ADDRESS
             v_ADDR1_Own := #ADD-LINE-1
             v_ADDR2_Own := #ADD-LINE-2
             v_ADDR3_Own := #ADD-LINE-3
*    PRINT *PROGRAM *LINE 'Got addr' #ADD-LINE-1 / 'CN:' v_CN 'CI:' CNT-V.CONTACT-ID  /*  --db
  ELSE 
     v_NAME_Own := 'The Insured'
     RESET v_ADDR1_Own v_ADDR2_Own v_ADDR3_Own 
     MOVE (AD=N) TO cv_Own
  END-IF
* Contact Still Owner  
  v_Email := GET-EML(<CNT-V.CONTACT-ID>)
  v_Phone := GET-PHONE(<CNT-V.CONTACT-ID>)
END-SUBROUTINE
* ==================================================================================  
DEFINE sbr_Dates
*      --------
  IF DATE-OF-BIRTH <> MASK(YYYYMMDD)
     COMPRESS 'Date of birth' DATE-OF-BIRTH 'for CN' v_CN 'is incorrect'  INTO v_Msg
     ESCAPE ROUTINE
  END-IF
  MOVE EDITED DATE-OF-BIRTH_A TO #db(EM=YYYYMMDD)
  COMPUTE ROUNDED v_Age := ( #d0 - #db ) / 365.2425
    DB_N := DATE-OF-BIRTH + 210000   MOVE EDITED DB_A TO DB_21(EM=YYYYMMDD)
    DB_N := DATE-OF-BIRTH + 250000   MOVE EDITED DB_A TO DB_25(EM=YYYYMMDD)
    DB_N := DATE-OF-BIRTH + 280000   MOVE EDITED DB_A TO DB_28(EM=YYYYMMDD)
    DB_N := DATE-OF-BIRTH + 300000   MOVE EDITED DB_A TO DB_30(EM=YYYYMMDD)
    DB_N := DATE-OF-BIRTH + 350000   MOVE EDITED DB_A TO DB_35(EM=YYYYMMDD)
    DB_N := DATE-OF-BIRTH + 400000   MOVE EDITED DB_A TO DB_40(EM=YYYYMMDD)
    ev_90(1) := DB_21 + 90
    ev_90(2) := DB_25 + 90 
    ev_90(3) := DB_28 + 90 
    ev_90(4) := DB_30 + 90 
    ev_90(5) := DB_35 + 90
    ev_90(6) := DB_40 + 90

    IF DB_21 > #d0 
       v_Msg := 'Cannot issue GIPO before 21st Birth Day'
       db_Event := '00'
       ESCAPE ROUTINE
    END-IF
  DECIDE ON FIRST v_Plan
     VALUE 'GPL' 
        DECIDE FOR FIRST CONDITION
           WHEN DB_21 <= #d0 AND DB_25 > #d0
                d_Since_bd := #d0 - DB_21
                db_Event := 'GPL-21'
           WHEN DB_25 <= #d0 AND DB_28 > #d0
                d_Since_bd := #d0 - DB_25
                db_Event := 'GPL-25'
           WHEN DB_28 <= #d0 
                d_Since_bd := #d0 - DB_28
                IF d_Since_bd <= 180
                  db_Event := 'GPL-28'
                ELSE
                  db_Event := ' '
                END-IF  
           WHEN NONE IGNORE
        END-DECIDE                   
     VALUE 'GP2'
        DECIDE FOR FIRST CONDITION
           WHEN DB_21 <= #d0 AND DB_25 > #d0
                d_Since_bd := #d0 - DB_21
                db_Event := 'GP2-21'
           WHEN DB_25 <= #d0 AND DB_30 > #d0
                d_Since_bd := #d0 - DB_25
                db_Event := 'GP2-25'
           WHEN DB_30 <= #d0 AND DB_35 > #d0
                d_Since_bd := #d0 - DB_30           
                db_Event := 'GP2-30'
           WHEN DB_35 <= #d0 AND DB_40 > #d0
                d_Since_bd := #d0 - DB_35
                db_Event := 'GP2-35'
           WHEN DB_40 <= #d0
                d_Since_bd := #d0 - DB_40
                IF d_Since_bd <= 180                
                  db_Event := 'GP2-40'
                ELSE
                  db_Event := ' '
                END-IF  
           WHEN NONE IGNORE
       END-DECIDE                           
     NONE IGNORE /* GPL, GP2 verified above
  END-DECIDE

END-SUBROUTINE
* ====================================================================================================
DEFINE sbr_Total_GIPO   /* Calculate total GIPO policies and ensure only 1 per event
*      --------
  CALLNAT 'GP-P2P' 2 v_Pol v_RC v_GIPO_N p_Pol_Ch(*) p_Pol_Ch_Type(*)
  RESET v_GIPO_N_FA #p
  FOR #j = 1 TO v_GIPO_N
     EXAMINE ST-V.POLICY-ID(*) FOR p_Pol_Ch(#j) GIVING INDEX #k
     IF #k <> 0 
        IF ST-V.STATUS(#k) = 'D'
           #p := #p + 1
           v_GIPO_N_FA := v_GIPO_N_FA + ST-V.FACE-AMOUNT(#k)
        ELSE
           p_Pol_Ch(#j) := ' ' p_Pol_Ch_Type(#j) := ' '
        END-IF 
     END-IF   
  END-FOR
  v_GIPO_N := #p
  IF v_Plan = 'GPL' AND (v_GIPO_N > 2)
    COMPRESS '3 GIPO already exercised for' v_Pol v_Plan INTO v_Msg
    ESCAPE ROUTINE
  END-IF   

  IF v_Plan = 'GP2' AND (v_GIPO_N > 3)
    COMPRESS '4 GIPO already exercised for' v_Pol v_Plan INTO v_Msg
    ESCAPE ROUTINE
  END-IF   

  EXAMINE p_Pol_Ch_Type(*) FOR db_Event GIVING INDEX #k
  IF #k <> 0 
     EXAMINE ST-V.POLICY-ID(*) FOR p_Pol_Ch(#k) GIVING INDEX #p
     IF ST-V.STATUS(#p) = 'D' 
        COMPRESS 'Cannot issue the second GIPO policy for' db_Event 'birth day' INTO v_Msg
        ESCAPE ROUTINE
     END-IF  
  END-IF   


END-SUBROUTINE  


* ==================================================================================  
DEFINE sbr_FA_Rules
*      ---------
  DECIDE ON FIRST VALUE v_Plan
    VALUE 'GPL'
       FA_Max     := (v_FA_Status / 1000) * 4
       v_FA       := FA_Max 
       MOVE (AD=D) TO cFA_Max
       DECIDE ON FIRST VALUE v_FA_Status
          VALUE 10000 
               v_All_GIPO_PLANS := '{OL,20,30,7P}'
               MOVE (AD=NP) TO cFA_Min_T
               MOVE (AD=D)  TO cFA_Min_W
          NONE  
               v_All_GIPO_Plans := '{LT,S20,OL,20,30,7P}'
               MOVE (AD=D) TO cFA_min_T
               MOVE (AD=D) TO cFA_Min_W
       END-DECIDE
   VALUE 'GP2'   
       DECIDE ON FIRST VALUE v_FA_Status
          VALUE 10000 
               v_All_GIPO_PLANS := '{OL,20,30,7P}'
          VALUE 15000 
               v_All_GIPO_PLANS := '{OL,20,30,7P}'
          VALUE 20000 
               v_All_GIPO_PLANS := '{OL,20,30,7P}'
          VALUE 25000,30000,40000,50000
               v_All_GIPO_PLANS := '{LT,S20,OL,20,30,7P}' 
          ANY  
               MOVE (AD=NP) TO cFA_max
               v_FA   := (v_FA_Status / 1000) * 2
               FA_Max := v_FA
               MOVE (AD=P) TO cFA
               MOVE (AD=NP) TO cFA_min_T
               MOVE (AD=NP) TO cFA_Min_W
               MOVE (AD=NP) TO cFA_Max
          NONE IGNORE
       END-DECIDE
    NONE IGNORE      
  END-DECIDE
END-SUBROUTINE  
* ==================================================================================  
DEFINE sbr_Validate
*      ------------
*   PRINT NOTITLE 5x 'Calculating FPF and Premium...'
   MOVE LEFT v_GIPO_Plan TO v_GIPO_Plan
   RESET Tot_FA
   FOR #j = 1 TO C*ACTIVE-SEGMENTS
        IF STATUS(#i) <> 'D' ESCAPE TOP END-IF
        Tot_FA := Tot_FA + FACE-AMOUNT(#j)
   END-FOR

   DECIDE FOR FIRST CONDITION
      WHEN v_GIPO_Plan = ' '
         COMPRESS 'Plan is required' v_All_GIPO_Plans INTO v_Msg
         v_POS := POS(v_GIPO_Plan)
      WHEN v_ALL_GIPO_Plans <> SCAN  v_GIPO_Plan 
           COMPRESS 'Choose plan from the {' v_ALL_GIPO_Plans  '}' INTO v_Msg
           v_POS := POS(v_GIPO_Plan)           
      WHEN ( v_GIPO_Plan = 'LT' OR = 'S20' ) AND ( v_FA < FA_Min_Trm OR v_FA > FA_Max )
           COMPRESS 'LT/LTII face amount should be in the range' FA_Min_Trm '-' FA_Max INTO v_Msg
           v_POS := POS(v_FA)
      WHEN ( v_GIPO_Plan = 'OL' OR = '20' OR = '30' OR = '7P') AND ( v_FA < FA_Min_WL OR v_FA > FA_Max )
           COMPRESS 'WL Plan face amount should be in the range' FA_Min_WL '-' FA_Max INTO v_Msg
           v_POS := POS(v_FA)
      WHEN (( v_FA / 5) * 5) <> v_FA
           COMPRESS 'Face Amount should be in 5,000 increments' INTO v_Msg
           v_POS := POS(v_FA)
      WHEN Tot_FA + v_FA * 1000 > 1000000
           MOVE EDITED Tot_FA(EM=Z,ZZZ,ZZZ.99) TO v_Msg
           MOVE EDITED v_FA(EM=ZZ9',000') TO v_A
           COMPRESS NUMERIC 'Total Face Amount' v_Msg '+' v_A 'exceeds 1,000,000' INTO v_Msg
           v_POS := POS(v_FA)
      WHEN 'N,C,E' <> SCAN v_E-Deposit OR v_E-Deposit = ' '
           v_Msg := 'E-Deposit correct values are {N,C,E}   PF1 for Help'
           v_POS := POS(v_E-Deposit)
      WHEN v_All_Mode <> SCAN v_Mode OR v_Mode = ' '
           v_Msg := 'Mode correct values are {G,E,Q,S,A,M,0,4,2,1}   PF1 for Help'
           v_POS := POS(v_Mode)
      WHEN v_Nicotine <> 'Y' AND v_Nicotine <> 'N' 
           v_Msg := 'Nicotine entry is required (N/Y)'
           v_POS := POS(v_Nicotine)
      WHEN l_California AND v_Discl <> 'Y'
           v_Msg := 'Insured is in California. Disclosure is required'
           v_POS := POS(v_Discl)
      WHEN NONE
           IGNORE
   END-DECIDE
   IF v_Msg <> ' '
      ESCAPE ROUTINE
   END-IF
        
   PERFORM sbr_Prem    
END-SUBROUTINE
* ====================================================================================================
DEFINE sbr_Update_AT
*      -------------
 FIND(1) AT-V WITH ID-NUMBER =  v_AT
    AT-V.ST-NOTE-USER(1)    :=  #CGA-CLERK
    AT-V.ST-NOTE-DATE(1)    :=  *DATN 
    AT-V.ST-NOTE-STATUS(1)  :=  'U6'
    AT-V.CONTACT-ID         :=  CNT-V.CONTACT-ID
    AT-V.ACTION-DATE        :=  *DATN
    AT-V.ACTION-FLAG        :=  'P'
    AT-V.USER-SOURCE        :=  #CGA-CLERK
    AT-V.AT-STATUS          :=  'PG'
    AT-V.INTRO-FLAG         :=  ST-V.INTRO-FLAG
    AT-V.SSN                :=  v_SSN
    AT-V.MODE               :=  v_Mode
    AT-V.SMOKER-FLAG        :=  v_Nicotine
    AT-V.POLICY-ID-PARENT   :=  v_Pol
    AT-V.GIPO-EVENT         :=  db_Event
    AT-V.MEMBER-CN          :=  v_CN
    MIL-SERVICE             :=  'C'
    RATE-DATE               :=  *DATN
    MOVE EDITED *DATX (EM=MM/DD/YYYY) TO NOTES(1)
    COMPRESS '*' 'EDS' '-' NOTES(1)  'GIPO created for' v_Pol  INTO NOTES(1) LEAVING NO SPACE
    AT-V.FACE-AMT-UNITS     := v_FA
    AT-V.PLAN := v_GIPO_Plan
    AT-V.FIRST-NAME         := CNT-V.FIRST-NAME
    AT-V.LAST-NAME          := CNT-V.LAST-NAME
    AT-V.MIL-SERVICE        :=  'C'
    COMPRESS CNT-V.LAST-NAME ",@" CNT-V.FIRST-NAME "@" CNT-V.MIDDLE-NAME ",@" CNT-V.SUFFIX INTO AT-V.NAME LEAVING NO SPACE
    EXAMINE AT-V.NAME FOR "@@" REPLACE ' '
    EXAMINE AT-V.NAME FOR '@' REPLACE ' '
    EXAMINE AT-V.NAME FOR ' ,' REPLACE ',' 
    IF AT-V.NAME = MASK (*','/) EXAMINE DIRECTION  BACKWARD AT-V.NAME FOR "," DELETE FIRST END-IF
    AT-V.E-DEPOSIT-IND      := v_E-Deposit
    AT-V.DISCLOSURE-IND     := v_Discl
    UPDATE 
 END-FIND
 END TRANSACTION 
 #CGA-SCR-ID             := AT-V.ID-NUMBER
  
END-SUBROUTINE
* ==================================================================================  
DEFINE sbr_New_AT
*      ----------
       CALLNAT 'C1014SAT' v_AT
       AT-V.ID-NUMBER := v_AT
       AT-V.AT-STATUS := 'PG'
       AT-V.DATE-RECEIVED      :=  *DATN
       AT-V.APPL-SOURCE := 'GIPO'
       AT-V.INTRO-FLAG := ST-V.INTRO-FLAG
       STORE AT-V
       v_New := 'New AT'
END-SUBROUTINE  
* ==================================================================================
DEFINE sbr_Prem
  IF v_Nicotine = 'Y' 
    v_Smok := 'S' 
  ELSE
    v_Smok := 'N' 
  END-IF
  #YYYYMMDD := *DATN
  #DD := 0
  #MM := #MM + 1
  IF #MM > 12
    #MM := #MM - 12 
    #YYYY := #YYYY + 1
  END-IF
  v_FA_9 := v_FA * 1000
*  WRITE NOTITLE 'Test - Calculate premium ...'
*  WRITE '* ' #CGA-SCR-ID '   ' v_GIPO_Plan  v_Age v_Prem  #YYYYMMDD  v_Smok v_FA_9 v_Sex
  CALLNAT 'GPREMSXX' '* ' #CGA-SCR-ID '   '
                     v_GIPO_Plan v_Age v_Prem  #YYYYMMDD  v_Smok v_FA_9 v_Sex
*  WRITE '* ' #CGA-SCR-ID '   ' v_GIPO_Plan  v_Age v_Prem  #YYYYMMDD  v_Smok v_FA_9 v_Sex
   v_Prem_Mon := v_Prem / 12
   DECIDE ON FIRST VALUE v_Mode
    VALUE 'E'      v_Mon := 1
    VALUE 'Q', '4' v_Mon := 3
    VALUE 'S', '2' v_Mon := 6
    VALUE 'A', '1' v_Mon := 12
    NONE           v_Mon := 2
  END-DECIDE
  v_Prem_N_Mon := v_Prem_Mon * v_Mon
  v_First_pmt := v_Prem_Mon * v_Mon
END-SUBROUTINE
* ==================================================================================  
DEFINE sbr_View
*      --------
 PRINT /
   2x 'Anniversary Events for' v_Pol v_Plan(AD=I) 'Date of birth:' #db(AD=I EM=LLL,DD' 'YYYY) /
 WRITE 2x 'Event: Anniversary : End of 90 days: Applicable'(I)    /
       2x '21   :' DB_21 ':' ev_90(1) 3x  ': GPL,GP2'  /
       2x '25   :' DB_25 ':' ev_90(2) 3x  ': GPL,GP2'  /
       2x '28   :' DB_28 ':' ev_90(3) 3x  ': GPL'      /
       2x '30   :' DB_30 ':' ev_90(4) 3x  ': GP2'     /         
       2x '35   :' DB_35 ':' ev_90(5) 3x  ': GP2'     /        
       2x '40   :' DB_40 ':' ev_90(6) 3x  ': GP2'                           
 
 PRINT // 2x 'All Policies for CN' v_CN //
 2x '#  : Policy   :Plan :Issue date:St : Face Amt :Md :   Owner : GIPO'(I)  
 FOR #j = 1 TO C*ACTIVE-SEGMENTS
   FIND POL-V WITH POLICY-NUMBER =  ST-V.POLICY-ID(#j)
       WHERE RELATION = 2 
   END-FIND
   CALLNAT 'GP-P2P' 3  ST-V.POLICY-ID(#j) v_RC  N06
   IF N06 = 0 l_Is_GIPO := FALSE ELSE  l_Is_GIPO := TRUE END-IF
   WRITE 2x #j(EM=9')') ':'
            ST-V.POLICY-ID(#j)(AL=8) ':'
            ST-V.PLAN(#j) ':' 
            ST-V.ISSUE-DATE(#j) ':' 
            ST-V.STATUS(#j) ':' 
            ST-V.FACE-AMOUNT(#j)(EM=ZZZ,ZZ9) ':'
            ST-V.MODE(#j)  ':'  
            REFERENCE-NUMBER ':'
            l_Is_GIPO (EM=' '/Yes)
 END-FOR 
 
END-SUBROUTINE  
* ====================================================================================================
DEFINE sbr_Exit_On_Error
IF v_Msg <> ' '
   PRINT /// 2x '-'(60) / 2x v_Msg(AD=I) /  2x '-'(60) // 2x 'Now will exit' 'AT' #CGA-ID 'GIP'
   BACKOUT TRANSACTION      
   #CGA-SCR-COMMAND := 'ST'
   FETCH 'G1000PXX'        
END-IF                     
END-SUBROUTINE  
* ====================================================================================================
DEFINE sbr_Init
  IF #CGA-CLERK = 'AL' OR = 'BZ' OR = 'CEB' OR = 'SXS'
     l_Admin := TRUE 
  END-IF
END-SUBROUTINE  
* ====================================================================================================
DEFINE sbr_Help
*      --------
INPUT  WITH TEXT '  Hit ENTER to get next screen'
  2/5  'Mode'(I)               
  3/5  'G'(I) 'Allotment /mo  '
  4/5  'E'(I) 'EZ-Pay    /mo  '
  5/5  'Q'(I) 'Quarterly Check'
  6/5  'S'(I) 'Semi-Ann  Check'
  7/5  'A'(I) 'Ann       Check'
  8/5  'M'(I) 'Monthly   Check'
  9/5  '0'(I) 'Monthly      CC'
 10/5  '4'(I) 'Quarterly    CC'
 11/5  '2'(I) 'Semi-Ann     CC' 
 12/5  '1'(I) 'Ann          CC'
 14/5 'Disclosure:'(I) 'Default value set to N'
 15/17 'Entry Y is required for California applications.'
 17/5 'E-deposit:'(I) 'C Credit card; E E-Check;  N no E-deposit'
 
  
INPUT WITH TEXT '  Hit ENTER to exit'
  2/2 'New policy amount (x 1,000) for GIPO based on the' 'original'(I) 'policy amount'(I)
  4/2 'GPL FA    10    15    20    25    30'(I)
  5/2 'Term min  --    50    50    50    50'
  6/2 'Term max  --    60    80   100   120   -  GPL FA * 4'
  7/2 'WL   min  10    10    10    10    10'
  8/2 'WL   max  40    60    80   100   120   -  GPL FA * 4'    
 10/2 'GP2 FA:   10    15    20    25    30    40    50'(I)     
 11/2 'Term      --    --    --    50    60    80   100  -  GP2 FA * 2'
 12/2 'WL        20    30    40    50    60    80   100  -  GP2 FA * 2'     
END-SUBROUTINE  


END
  
 
