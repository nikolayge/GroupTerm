* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: NCOALOAD - Load formatted addresses from Envelope Manager
*
* The rules are:
* 1. If the address is not shared UPDATE
* 2. If the address is shared with no members UPDATE
* 3. If the address is shared with members - create new address and
*    share it with no members
************************************************************************
*                       MODIFICATION LOG                               *
* USER     DATE      TAG     REASON                                    *
*                                                                      *
* NGG    11/28/2010  None    Program written                           *
* NGG    20130809    NG1     Address Normalization                     *
************************************************************************
DEFINE DATA
LOCAL USING GONERLXX
LOCAL
1 #ENV-MAN-RECORD (A80)
1 #INPUT
  2 #ID-NUMBER     (A6) 2 REDEFINE #ID-NUMBER
    3 #ID-NUMBER-N (N6)
  2 #STATE-CODE    (A2)
  2 #ZIP-CODE      (A10) 2 REDEFINE #ZIP-CODE
    3 #ZIP-5-N     (N5)
    3 #ZIP-DASH    (A1)
    3 #ZIP-4-N     (N4)
  2 #ERRORS        (L)
  2 #CITY          (A) DYNAMIC
  2 #STREET-LINE   (A) DYNAMIC
  2 #UNIT-LINE     (A) DYNAMIC
  2 #ADDR-TYPE     (A1) /* S=Secondary
1 #CURRENT-IDS
  2 #CONTACT-ID       (N8)
  2 #ADDRESS-POOL-ID  (N8)
  2 #ADDR-ISN         (P8)
  2 #STATUS-ISN       (P8)
  2 #PREVENT-OVER-IND (A1)
*
1 #OLDCASS        (A250)
1 #NEWCASS        (A250)
1 #ZIP-CODE-N     (N9) 1 REDEFINE #ZIP-CODE-N
  2 #ZIP-5        (N5)
  2 #ZIP-4        (N4)
1 #DATN           (N8)
1 #TIME           (N7)
1 #UPDATE         (A1)
1 #UPDATE-REQUEST (I4)
1 #PRIMARY-DELETE (I4) CONST <1>
1 #PRIMARY-UPDATE (I4) CONST <2>
1 #SECONDARY-UPDATE (I4) CONST <4>
1 PRIMARY         (A1) CONST <'P'>
1 SECONDARY       (A1) CONST <'S'>
1 YES             (A1) CONST <'Y'>
1 #CONTACT-ADDR-POOL    (I2/3)
1 #CONTACT-ADDR-POOL-ID (N8/3)
1 #UPDATE-POOL-ISNS-N   (I4)
1 #UPDATE-POOL-ISNS     (P8/15)    /* NON MEMBERS SHARING ADDRESS
1 #J                    (I4)
*
1 CONTACT VIEW OF A-CONTACTS
  2 ID-NUMBER
  2 CONTACT-ID
1 ADDR-REL-V VIEW OF A-ADDRESS-RELATIONSHIP
  2 CONTACT-ID (N8)
  2 ADDRESS-POOL-ID (N8)
  2 ADDR-TYPE-CD (A1)
  2 ADDR-LOCATION (A1)
  2 ATTENTION-LINE (A50)
  2 RETURNED-MAIL-IND (A1)
  2 RETURNED-MAIL-DATE (N8)
  2 PREVENT-OVER-IND (A1)
  2 PREVENT-OVER-DATE (N8)
  2 ADDRESS-SOURCE (A1)
  2 STATUS (A1)
  2 STATUS-DATE (N8)
  2 LAST-DATE-UPD (N8)
  2 LAST-TIME-UPD (N7)
  2 LAST-USER-UPD (A8)
*
1 AD-V VIEW OF A-ADDRESS-POOL
  2 ADDRESS-POOL-ID
  2 STREET
  2 UNIT
  2 CITY
  2 STATE-CODE
  2 ZIP-CODE
  2 COUNTRY-CODE
  2 URBANIZATION
  2 ADDR-FORMAT-TYPE-CD
  2 ADDR-VALID-IND
  2 ADDR-VALID-DATE
  2 LAST-DATE-UPD 2 REDEFINE LAST-DATE-UPD
    3 LAST-DATE-UPD-A (A8)
  2 LAST-TIME-UPD
  2 LAST-USER-UPD
*
1 ST-V VIEW OF A-STATUS
  2 WIDOW-FLAG
  2 MEMBER-CONTACT-ID
  2 SPOUSE-CONTACT-ID
  2 DATE-ACCT-UPDATE
*
1 TERM VIEW OF A-TERMINALS
  2 CLERK-ID
  2 COMMENTS
  2 SECURITY-CODE   (N2)
  2 USER-COMPANY    (A1)
*
1 #PARM-RECORD    (A40)
1 REDEFINE #PARM-RECORD
  2 #PARM-DATE      (N8)     /* EXTRACT DATE
  2 #PARM-FILL-1    (A1)
  2 #PARM-ADDR-CODE (A1)     /* ADDRESS CHANGE CODE 'P' OR = 'G' OR = 'E' Future use
  2 #PARM-FILL-2    (A1)
  2 #PARM-PROC-TYPE (A3)     /* TYPE OF RUN (AUT=AUDIT TRAIL)
*                            /*             (NAT=NOT AUDIT TRAIL)
  2 #PARM-FILL-3    (A1)
  2 #PARM-UNDL-FIX  (A10)    /* (UNDLIV-FIX  OR NORMAL-FIX)
  2 #PARM-FILL-4    (A1)
  2 #REPORT-ONLY    (A1)
1 #DATE-EXTRACT     (N8)
1 #TR-ISN           (P8)
1 #D                (D)
1 #LAST-UPD-DATE    (A10)
1 #LAST-UPD-BY      (A) DYNAMIC
1 #PREVENT          (A) DYNAMIC
1 #SHARED           (A) DYNAMIC
1 #TITLES           (A/12) DYNAMIC INIT <
  'CN   ',
  'Street',
  'Unit',
  'City',
  'State',
  'ZIP code',
  'Last UPD date',
  'Last UPD by',
  'Contact ID',
  'Pool ID',
  'Protected/Secured',
  'Share status'
  >
1 #REP-TITLE       (A60) CONST <'     NCOA - Address Changed by US Postal Service Report'>
1 #REP-TITLE2      (A34) CONST <'Line1 = Old Line2+ = New per CI'>
1 #SHARED-TEXT     (A6)  CONST <'Shared'>
1 #DISCONNECTED    (A12) CONST <'Disconnected'>
1 #SECURED         (A6)  CONST <'Secure'>
1 #PROTECTED       (A9)  CONST <'Protected'>
1 #TAB             (A1) CONST <H'09'>
1 BLANK            (A1) CONST <' '>
1 #OLDSTAT         (A125)
1 #NEWSTAT         (A125)
1 #CLERK-ID        (A3) CONST <'CAS'>
*
END-DEFINE
*
**DEFINE WORK FILE 2 '/usr/SAG/tmp/TEST_PARSE.txt'
*  TYPE 'ASCII-COMPRESSED'
**DEFINE WORK FILE 3 '/usr/SAG/tmp/OLDCASS.TXT'
*  TYPE 'ASCII-COMPRESSED'
**DEFINE WORK FILE 4 '/usr/SAG/tmp/NEWCASS.TXT'
*  TYPE 'ASCII-COMPRESSED'
**DEFINE WORK FILE 5 '/usr/SAG/tmp/OLDSTAT.TXT'
*  TYPE 'ASCII-COMPRESSED'
**DEFINE WORK FILE 6 '/usr/SAG/tmp/NEWSTAT.TXT'
*  TYPE 'ASCII-COMPRESSED'
**
MOVE EDITED *DATX (EM=MM/DD/YYYY) TO #LAST-UPD-DATE
COMPRESS 'PROGRAM:' *PROGRAM #REP-TITLE '     RUN DATE:' #LAST-UPD-DATE
  INTO #NEWCASS
WRITE WORK 4 #NEWCASS
*
MOVE EDITED *TIMX (EM=HH:II:SS) TO #LAST-UPD-DATE
COMPRESS 'LIBRARY:' *APPLIC-ID #REP-TITLE2 '  RUN TIME:' #LAST-UPD-DATE
  INTO #NEWCASS
WRITE WORK 4 #NEWCASS
*
RESET #NEWCASS
WRITE WORK 4 #NEWCASS
*
COMPRESS #TITLES (*) INTO #OLDCASS WITH DELIMITERS #TAB
WRITE WORK 3 #OLDCASS
COMPRESS #TITLES (*) INTO #NEWCASS WITH DELIMITERS #TAB
WRITE WORK 4 #NEWCASS
*
#DATN := *DATN
#TIME := *TIMN
*
PERFORM GET-PARMS
*
READ WORK 2 #ENV-MAN-RECORD
  CALLNAT 'ADRNPRSE'
    #ENV-MAN-RECORD
    #INPUT
  IF #ERRORS
    IGNORE
  ELSE
    #ZIP-5 := #ZIP-5-N
    #ZIP-4 := #ZIP-4-N
    PERFORM GET-ADDR-STATUS
    IF #PREVENT-OVER-IND = 'S' OR= 'Y'
        OR (AD-V.LAST-DATE-UPD GE #DATE-EXTRACT)
      ESCAPE TOP
    END-IF
    IF #UPDATE = YES
      PERFORM UPDATE-ADDR
    ELSE
      PERFORM ADD-ADDR
    END-IF
*    PERFORM SYNC-PROCESS     Address normalization
    IF #REPORT-ONLY = YES
      BACKOUT TRANSACTION
    ELSE
      END TRANSACTION
    END-IF
  END-IF
END-WORK
/*
DEFINE GET-ADDR-STATUS
/*     ===============
RESET #CURRENT-IDS
FIND ST-V WITH ID-NUMBER = #ID-NUMBER-N
  IF WIDOW-FLAG =  'Y' AND DATE-ACCT-UPDATE GE #DATE-EXTRACT
    #CONTACT-ID := ST-V.SPOUSE-CONTACT-ID
  ELSE
    #CONTACT-ID := ST-V.MEMBER-CONTACT-ID
  END-IF
  PERFORM POOL-STATUS
END-FIND
FIND AD-V WITH ADDRESS-POOL-ID = #ADDRESS-POOL-ID
  MOVE EDITED AD-V.LAST-DATE-UPD-A TO #D (EM=YYYYMMDD)
  MOVE EDITED #D (EM=MM/DD/YYYY) TO #LAST-UPD-DATE
  DECIDE ON FIRST VALUE OF #PREVENT-OVER-IND
    VALUE 'S'
      #PREVENT := #SECURED
    VALUE 'Y'
      #PREVENT := #PROTECTED
    NONE VALUE RESET #PREVENT
  END-DECIDE
  IF #UPDATE-POOL-ISNS-N > 1
    #SHARED := #SHARED-TEXT
  ELSE
    RESET #SHARED
  END-IF
  FIND (1) TERM WITH TERMINAL-ID = AD-V.LAST-USER-UPD
    #LAST-UPD-BY := COMMENTS
  END-FIND
  IF #LAST-UPD-BY = BLANK      /* NG3
    CLERK-ID := AD-V.LAST-USER-UPD
    #LAST-UPD-BY := FUNCTION-CLERK-NAME (< CLERK-ID >)
  END-IF
  COMPRESS FULL
    #ID-NUMBER
    AD-V.STREET
    AD-V.UNIT
    AD-V.CITY
    AD-V.STATE-CODE
    AD-V.ZIP-CODE
    #LAST-UPD-DATE
    #LAST-UPD-BY
    #CONTACT-ID
    #ADDRESS-POOL-ID
    #PREVENT
    #SHARED
    INTO #OLDCASS WITH DELIMITERS #TAB
  WRITE WORK 4 #OLDCASS
END-FIND
*
END-SUBROUTINE
/*
DEFINE UPDATE-ADDR
/*     ===========
CALLNAT 'ADRNTROF'
  #CONTACT-ID
  #ADDRESS-POOL-ID
  #UPDATE-REQUEST
  #TR-ISN
  #CLERK-ID
FL-AD-V.
FIND AD-V WITH ADDRESS-POOL-ID = #ADDRESS-POOL-ID
  AD-V.STREET          := #STREET-LINE
  AD-V.UNIT            := #UNIT-LINE
  AD-V.CITY            := #CITY
  AD-V.STATE-CODE      := #STATE-CODE
  AD-V.ZIP-CODE        := #ZIP-CODE-N
  AD-V.ADDR-VALID-IND  := YES
  AD-V.ADDR-VALID-DATE := #DATN
  AD-V.LAST-DATE-UPD   := #DATN
  AD-V.LAST-TIME-UPD   := #TIME
  AD-V.COUNTRY-CODE    := 'US'
  AD-V.LAST-USER-UPD   := 'CAS'
  UPDATE (FL-AD-V.)
END-FIND
FIND ADDR-REL-V WITH CONTACT-ID = #CONTACT-ID
    AND ADDRESS-POOL-ID = #ADDRESS-POOL-ID
  RESET ADDR-REL-V.RETURNED-MAIL-IND
    RETURNED-MAIL-DATE
  ADDR-REL-V.ADDRESS-SOURCE := 'P'
  ADDR-REL-V.LAST-DATE-UPD  := #DATN
  ADDR-REL-V.LAST-TIME-UPD  := #TIME
  ADDR-REL-V.LAST-USER-UPD  := 'CAS'
  UPDATE
END-FIND
RESET #LAST-UPD-DATE #LAST-UPD-BY #PREVENT
IF #UPDATE-POOL-ISNS-N > 1
  #SHARED := #SHARED-TEXT
ELSE
  RESET #SHARED
END-IF
COMPRESS FULL
  #ID-NUMBER
  #STREET-LINE
  #UNIT-LINE
  #CITY
  #STATE-CODE
  #ZIP-CODE
  #LAST-UPD-DATE
  #LAST-UPD-BY
  #CONTACT-ID
  #ADDRESS-POOL-ID
  #PREVENT
  #SHARED
  INTO #NEWCASS WITH DELIMITERS #TAB
WRITE WORK 4 #NEWCASS
*
CALLNAT 'ADRNTRNF'
  #CONTACT-ID
  #ADDRESS-POOL-ID
  #UPDATE-REQUEST
  #TR-ISN
  #CLERK-ID
END-SUBROUTINE
/*
DEFINE ADD-ADDR
/*     ========
CALLNAT 'ADRNTROF'
  #CONTACT-ID
  #ADDRESS-POOL-ID
  #UPDATE-REQUEST
  #TR-ISN
  #CLERK-ID
CALLNAT 'ADRNT001' #ADDRESS-POOL-ID   /* NEW ADDRESS POOL ID
RESET AD-V
AD-V.ADDRESS-POOL-ID := #ADDRESS-POOL-ID
AD-V.STREET          := #STREET-LINE
AD-V.UNIT            := #UNIT-LINE
AD-V.CITY            := #CITY
AD-V.STATE-CODE      := #STATE-CODE
AD-V.ZIP-CODE        := #ZIP-CODE-N
AD-V.ADDR-VALID-IND  := YES
AD-V.ADDR-VALID-DATE := #DATN
AD-V.LAST-DATE-UPD   := #DATN
AD-V.LAST-TIME-UPD   := #TIME
AD-V.COUNTRY-CODE    := 'US'
AD-V.LAST-USER-UPD   := 'CAS'
SL-AD-V.
STORE AD-V
#ADDR-ISN := *ISN (SL-AD-V.)
*
FOR #J 1 TO #UPDATE-POOL-ISNS-N
  GL.
  GET ADDR-REL-V #UPDATE-POOL-ISNS ( #J )
  ADDR-REL-V.ADDRESS-POOL-ID := #ADDRESS-POOL-ID
  RESET ADDR-REL-V.RETURNED-MAIL-IND
    RETURNED-MAIL-DATE
  ADDR-REL-V.ADDRESS-SOURCE := 'P'
  ADDR-REL-V.LAST-DATE-UPD  := #DATN
  ADDR-REL-V.LAST-TIME-UPD  := #TIME
  ADDR-REL-V.LAST-USER-UPD  := 'CAS'
  UPDATE (GL.)
  RESET #LAST-UPD-DATE #LAST-UPD-BY #PREVENT
  #SHARED := #DISCONNECTED
*
  COMPRESS FULL
    #ID-NUMBER
    #STREET-LINE
    #UNIT-LINE
    #CITY
    #STATE-CODE
    #ZIP-CODE
    #LAST-UPD-DATE
    #LAST-UPD-BY
    #CONTACT-ID
    #ADDRESS-POOL-ID
    #PREVENT
    #SHARED
    INTO #NEWCASS WITH DELIMITERS #TAB
  WRITE WORK 4 #NEWCASS
END-FOR
*
CALLNAT 'ADRNTRNF'
  #CONTACT-ID
  #ADDRESS-POOL-ID
  #UPDATE-REQUEST
  #TR-ISN
  #CLERK-ID
END-SUBROUTINE
/*
* DEFINE SYNC-PROCESS    Address normalization NG1
* /*     ============
* *  CALLNAT 'MBRADR' #ADDRESS-POOL-ID   /* CRM Sales Synchronization
* FL-STATUS.
* FIND ST-V WITH ID-NUMBER = #ID-NUMBER-N
*   #STATUS-ISN := *ISN (FL-STATUS.)
*   CALLNAT 'ADRNSTU@'   /* Status Record Update
*     #STATUS-ISN
*     #UPDATE-REQUEST
*     #ADDRESS-POOL-ID
*     #OLDSTAT
*     #NEWSTAT
*   WRITE WORK 5 #OLDSTAT
*   WRITE WORK 6 #NEWSTAT
* END-FIND
* END-SUBROUTINE
/*
DEFINE POOL-STATUS
/*     ===========
RESET #CONTACT-ADDR-POOL (*)
  #CONTACT-ADDR-POOL-ID  (*)
  #UPDATE-POOL-ISNS-N
  #UPDATE-POOL-ISNS      (*)
*
FIND ADDR-REL-V WITH CONTACT-ID = #CONTACT-ID
  DECIDE ON FIRST VALUE OF ADDR-TYPE-CD
    VALUE PRIMARY
      IF ADDR-REL-V.STATUS NE 'D'
        ADD 1 TO #CONTACT-ADDR-POOL (1)
        #CONTACT-ADDR-POOL-ID (1) := ADDR-REL-V.ADDRESS-POOL-ID
      END-IF
    VALUE SECONDARY
*     print A-ADD-REL
      IF ADDR-REL-V.STATUS NE 'D'
        ADD 1 TO #CONTACT-ADDR-POOL (2)
        #CONTACT-ADDR-POOL-ID (2) := ADDR-REL-V.ADDRESS-POOL-ID
      END-IF
    NONE VALUE
      ADD 1 TO #CONTACT-ADDR-POOL (3)
  END-DECIDE
END-FIND
*
IF #ADDR-TYPE = SECONDARY
  #ADDRESS-POOL-ID := #CONTACT-ADDR-POOL-ID (2)
  #UPDATE-REQUEST  := #SECONDARY-UPDATE
ELSE
  #ADDRESS-POOL-ID := #CONTACT-ADDR-POOL-ID (1)
  #UPDATE-REQUEST  := #PRIMARY-UPDATE
END-IF
IF #ADDRESS-POOL-ID > 0
  #UPDATE := YES
  FL-AR.
  FIND ADDR-REL-V WITH ADDRESS-POOL-ID = #ADDRESS-POOL-ID
    IF ADDR-REL-V.PREVENT-OVER-IND = 'S'
      ESCAPE TOP
    END-IF
    IF ADDR-REL-V.CONTACT-ID = #CONTACT-ID  /* MEMBER CONTACT
      IF ADDR-REL-V.ADDR-TYPE-CD = PRIMARY OR= SECONDARY
        ADD 1 TO #UPDATE-POOL-ISNS-N
        #UPDATE-POOL-ISNS ( #UPDATE-POOL-ISNS-N ) := *ISN ( FL-AR.)
        #PREVENT-OVER-IND := ADDR-REL-V.PREVENT-OVER-IND
      END-IF
      ESCAPE TOP
    END-IF
    FIND (1) CONTACT WITH CONTACT-ID = ADDR-REL-V.CONTACT-ID
    END-FIND
    IF CONTACT.ID-NUMBER = 0 /* DEPENDENT CONTACT
      ADD 1 TO #UPDATE-POOL-ISNS-N
      #UPDATE-POOL-ISNS ( #UPDATE-POOL-ISNS-N ) := *ISN ( FL-AR.)
    ELSE
      #UPDATE := 'N'  /* RULE 3. Create a new Address-Pool record
    END-IF
  END-FIND
ELSE
  PRINT 'No address pool ID:'
END-IF
*
END-SUBROUTINE
*
DEFINE GET-PARMS
/*     =========
INPUT #PARM-RECORD
*
IF #PARM-DATE NE MASK(YYYYMMDD)
  #BATCH-LITERAL-1 := '#PARM-DATE'
  #BATCH-LITERAL-4 := 'PARM DATE NOT VALID FORMAT (YYYYMMDD)'
  WRITE
    // ' ERROR DATE AND TIME' *TIMX (EM=MM/DD/YYYY' at 'HH:II:SS)
    /  '   EXECUTING PROGRAM' *PROGRAM
    /  '         ERROR FIELD' #BATCH-LITERAL-1 /* ASSIGN VALUES OF THE CURRENT RECORD TO
    /  '       ERROR MESSAGE' #BATCH-LITERAL-4 /* THESE VARIABLES TO WRITE AS PART OF ERROR MESSAGE.
  NEWPAGE
  WRITE ' '           /* TO INSURE ABOVE GETS PRINTED
  TERMINATE
ELSE
  WRITE 'PARM DATE = ' #PARM-DATE
  MOVE #PARM-DATE TO #DATE-EXTRACT
END-IF
*
IF #PARM-ADDR-CODE = 'P' OR = 'G' OR = 'E'
  WRITE 'PARM ADDRESS CODE = ' #PARM-ADDR-CODE
ELSE
  #BATCH-LITERAL-1 := '#PARM-ADDR-CODE'
  #BATCH-LITERAL-4 := 'PARM ADDRESS CODE NOT VALID ( G OR P)'
  WRITE
    // ' ERROR DATE AND TIME' *TIMX (EM=MM/DD/YYYY' at 'HH:II:SS)
    /  '   EXECUTING PROGRAM' *PROGRAM
    /  '         ERROR FIELD' #BATCH-LITERAL-1 /* ASSIGN VALUES OF THE CURRENT RECORD TO
    /  '       ERROR MESSAGE' #BATCH-LITERAL-4 /* THESE VARIABLES TO WRITE AS PART OF ERROR MESSAGE.
  NEWPAGE
  WRITE ' '           /* TO INSURE ABOVE GETS PRINTED
  TERMINATE
END-IF
*
IF #PARM-PROC-TYPE = 'AUT' OR = 'NAT'
  WRITE 'PARM PROCESS TYPE = ' #PARM-PROC-TYPE
ELSE
  #BATCH-LITERAL-1 := '#PARM-PROC-TYPE'
  #BATCH-LITERAL-4 := 'PARM PROCESS TYPE NOT VALID(AUT OR NAT)'
  WRITE
    // ' ERROR DATE AND TIME' *TIMX (EM=MM/DD/YYYY' at 'HH:II:SS)
    /  '   EXECUTING PROGRAM' *PROGRAM
    /  '         ERROR FIELD' #BATCH-LITERAL-1 /* ASSIGN VALUES OF THE CURRENT RECORD TO
    /  '       ERROR MESSAGE' #BATCH-LITERAL-4 /* THESE VARIABLES TO WRITE AS PART OF ERROR MESSAGE.
  NEWPAGE
  WRITE ' '           /* TO INSURE ABOVE GETS PRINTED
  TERMINATE
END-IF
END-SUBROUTINE
*
END
