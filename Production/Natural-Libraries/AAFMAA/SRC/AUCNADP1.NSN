* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNADP1'
*
* DESCRIPTION
*   XML Address Parser implementationfor file:
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
1 #XML_OUTPUT            (A) DYNAMIC        /* Out
LOCAL USING AUCAAD01
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY (L)
*
LOCAL
1 #LEN              (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 #NATURAL-ERROR    (I4) CONST <-3>
1 #ERROR-LOG        (I4) CONST <3>
*
1 #GEN-KEY           (A4)
1 GEN-TABLE-V VIEW OF A-GEN-TABLE
  2 GEN-KEY (A4)
  2 GEN-SUB-KEY (A3)
  2 GEN-ALPHA-VALUE (A50)
1 #TRUE              (A4)  CONST <'TRUE'>
1 #ZIP-CODE          (A9) 1 REDEFINE #ZIP-CODE
  2 #ZIP5    (N5)
  2 #ZIP4    (N4)
1 REDEFINE #ZIP-CODE
  2 #ZIPN    (N9)
END-DEFINE
*
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  ErrorCode := #Parse-error
  ErrorDescription := 'Empty search data XML'
  CALLNAT 'AUCNADS1' #XML_OUTPUT Address
  ESCAPE ROUTINE
END-IF
RESET Address
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
ErrorCode := #PARSE-ERROR
ErrorDescription := XML_PARSER_ERROR_TEXT
CALLNAT 'AUCNADS1' #XML_OUTPUT Address
END-SUBROUTINE
*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE
*
CALLNAT 'AUCNADM1' Address               /* Manage address
CALLNAT 'AUCNADS1' #XML_OUTPUT Address   /* Send back manage address result
*
* ------------------------------------------------- CALL THE PARSER
DEFINE PARSE-DOCUMENT
/*     ==============
* PARSE XML #XML_INPUT INTO PATH #XML_PATH NAME #XML_NAME VALUE XML_PARSER_CONTENT
*
DECIDE ON FIRST #XML_PATH
  VALUE 'Address//'
    IGNORE
  VALUE 'Address'
    RESET INITIAL Address
  VALUE 'Address/ActionType//'
    IGNORE
  VALUE 'Address/ActionType'
    IGNORE
  VALUE 'Address/ActionType/$'
    Address.ActionType := VAL(#XML_VALUE)
  VALUE 'Address/ErrorCode//'
    IGNORE
  VALUE 'Address/ErrorCode'
    IGNORE
  VALUE 'Address/ErrorCode/$'
    Address.ErrorCode := VAL(#XML_VALUE)
  VALUE 'Address/ErrorDescription//'
    IGNORE
  VALUE 'Address/ErrorDescription'
    IGNORE
  VALUE 'Address/ErrorDescription/$'
    Address.ErrorDescription := #XML_VALUE
  VALUE 'Address/ContactID//'
    IGNORE
  VALUE 'Address/ContactID'
    IGNORE
  VALUE 'Address/ContactID/$'
    Address.ContactID := VAL(#XML_VALUE)
  VALUE 'Address/CN//'
    IGNORE
  VALUE 'Address/CN'
    IGNORE
  VALUE 'Address/CN/$'
    Address.CN := VAL(#XML_VALUE)
  VALUE 'Address/LastUpdatedDate//'
    IGNORE
  VALUE 'Address/LastUpdatedDate'
    IGNORE
  VALUE 'Address/LastUpdatedDate/$'
    Address.LastUpdatedDate := VAL(#XML_VALUE)
  VALUE 'Address/LastUpdatedTime//'
    IGNORE
  VALUE 'Address/LastUpdatedTime'
    IGNORE
  VALUE 'Address/LastUpdatedTime/$'
    Address.LastUpdatedTime := VAL(#XML_VALUE)
  VALUE 'Address/SystemSource//'
    IGNORE
  VALUE 'Address/SystemSource'
    IGNORE
  VALUE 'Address/SystemSource/$'
    Address.SystemSource := #XML_VALUE
  VALUE 'Address/User//'
    IGNORE
  VALUE 'Address/User'
    IGNORE
  VALUE 'Address/User/$'
    Address.User := FUNCTION-WEB-USER(<#XML_VALUE>)(2)
  VALUE 'Address/AddressPoolID//'
    IGNORE
  VALUE 'Address/AddressPoolID'
    IGNORE
  VALUE 'Address/AddressPoolID/$'
    Address.AddressPoolID := VAL(#XML_VALUE)
  VALUE 'Address/AddressTypeCode//'
    IGNORE
  VALUE 'Address/AddressTypeCode'
    IGNORE
  VALUE 'Address/PreventOverIndicator//'
    IGNORE
  VALUE 'Address/PreventOverIndicator'
    IGNORE
  VALUE 'Address/AttentionLine//'
    IGNORE
  VALUE 'Address/AttentionLine'
    IGNORE
  VALUE 'Address/Street//'
    IGNORE
  VALUE 'Address/Street'
    IGNORE
  VALUE 'Address/Street/$'
    Address.Street := #XML_VALUE
  VALUE 'Address/Unit//'
    IGNORE
  VALUE 'Address/Unit'
    IGNORE
  VALUE 'Address/Unit/$'
    Address.Unit := #XML_VALUE
  VALUE 'Address/City//'
    IGNORE
  VALUE 'Address/City'
    IGNORE
  VALUE 'Address/City/$'
    Address.City := #XML_VALUE
  VALUE 'Address/StateCode//'
    IGNORE
  VALUE 'Address/StateCode'
    IGNORE
  VALUE 'Address/StateCode/$'
    Address.StateCode := #XML_VALUE
  VALUE 'Address/ZipCode//'
    IGNORE
  VALUE 'Address/ZipCode'
    IGNORE
  VALUE 'Address/ZipCode/$'
    ASSIGN #LEN := *LENGTH (#XML_VALUE)
    IF #LEN > 0
      IF #LEN < 6
        #ZIP5 := VAL(#XML_VALUE)
        RESET #ZIP4
      ELSE
        #ZIPN := VAL(#XML_VALUE)
      END-IF
      Address.ZipCode := #ZIPN
    END-IF
  VALUE 'Address/CountryCode//'
    IGNORE
  VALUE 'Address/CountryCode'
    IGNORE
  VALUE 'Address/CountryCode/$'
    Address.CountryCode := #XML_VALUE
  VALUE 'Address/IntlRegion//'
    IGNORE
  VALUE 'Address/IntlRegion'
    IGNORE
  VALUE 'Address/IntlRegion/$'
    Address.IntlRegion := #XML_VALUE
  VALUE 'Address/PostalCode//'
    IGNORE
  VALUE 'Address/PostalCode'
    IGNORE
  VALUE 'Address/PostalCode/$'
    Address.PostalCode := #XML_VALUE
  VALUE 'Address/Urbanization//'
    IGNORE
  VALUE 'Address/Urbanization'
    IGNORE
  VALUE 'Address/Urbanization/$'
    Address.Urbanization := #XML_VALUE
  VALUE 'Address/AddressLocationCode//'
    IGNORE
  VALUE 'Address/AddressLocationCode'
    IGNORE
  VALUE 'Address/AddressFormatTypeCode//'
    IGNORE
  VALUE 'Address/AddressFormatTypeCode'
    IGNORE
  VALUE 'Address/AddressFormatTypeCode/$'
    Address.AddressFormatTypeCode := #XML_VALUE
  VALUE 'Address/AddressValidIndicator//'
    IGNORE
  VALUE 'Address/AddressValidIndicator'
    IGNORE
  VALUE 'Address/AddressValidIndicator/$'
    IF #XML_VALUE = #TRUE
      Address.AddressValidIndicator := 'Y'
    ELSE
      Address.AddressValidIndicator := 'N'
    END-IF
  VALUE 'Address/Share/$'
    IF #XML_VALUE = #TRUE
      Address.Share := 'Y'
    ELSE
      Address.Share := 'N'
    END-IF
  NONE VALUE
    IGNORE
END-DECIDE
END-SUBROUTINE
*
END
