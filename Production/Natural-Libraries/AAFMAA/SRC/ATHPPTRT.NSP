* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 5
* <Natural Source Header
* PROGRAM-ID: ATHPPTRT - Patriot Act Reporting
**************************************************************************
*                       MODIFICATION LOG                                 *
* USER   DATE      TAG  REASON                                           *
* PAM    04/26/2006  None Program Written                                *
* SAG-AB 06/05/2006       Replaced Hex '05' with Hex '09' for ASCII      *
* PAM    06/10/2006  PM1  Added New Report for terrorist checks - OFAC   *
* PAM    05/15/2007  PM2  Force insured information for sps/gen          *
* PAM    02/19/2008  PM3  Do not include ME adjustments in patriot act   *
*                         reporting                                      *
* PAM    03/11/2009  PM4  Added CAP bridger file                         *
* PAM    04/01/2009  PM5  Added END TRANSACTION                          *
* PAM    04/30/2009  PM6  Include PC and PY status now                   *
* PAM    05/29/2009  PM7  Include PP status too                          *
* RSE    10/03/2009  RE1  Change PROCESS-IND logic for Unification       *
* PAM    10/18/2010  PM8  Added PB status for CAP bridger                *
* PAM    03/08/2011  PM9  Removed 'PR' status from the daily CAP process *
* VXT    01/16/2012  vt1  Change the source of name and address.         *
* PAM    03/09/2012  PM10 Adjust VT1 changes after implementation        *
* vxt    06/09/2012  vt2  show the organization name of contact-type is "O".
* vxt    06/09/2012  vt3  fix teh missing leading zeros of zip code.     *
* vxt    09/06/2012  vt4  extend the address fields on work file 6 /OI-1377/ *
* YAK    10/09/2012  YK1  Use function to identify Level Term II plans   *
* vxt    01/20/2014  vt5  add on error processing and fix the redefined structure
* vxt    01/01 2014  vt6  allign the structure of old-data according to the latest changes in C2302pci pgm
* TMT    06/10/2014  TT1  CONTACT NORMALIZATION - DOB AND SEX
* vxt    12/24/2015  vt7  Ticket 4102/fix for CAP2 bridger verification /
**************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL USING G3500AAD
LOCAL USING GPBATRBI                                               /* PM4
local using adda0001                                    /* vt1
LOCAL
*
1 TR-V VIEW OF A-TRANSACTION-REGISTER
  2 ID-NUMBER                  (N6)
  2 PROCESS-IND                (A1)
  2 NAME                       (A25)
  2 DATE-LAST-UPDATE           (N8)
  2 TERMINAL-ID                (A8)
  2 CLERK-ID                   (A3)
  2 TRANSACTION-DATN           (P9)
  2 TRANSACTION-TIMN           (P7)
  2 OLD-DATA                   (A125/20)
  2 NEW-DATA                   (A125/20)
  2 USER-COMPANY               (A1)                 /* RE1
*
1 AR-V VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER                  (N6)
  2 TRANSACTION-DATN           (P9)
  2 TRANSACTION-TIMN           (P7)
  2 TXN-CODE                   (A4)
  2 SEQUENCE-NUM               (N1)
  2 NAME                       (A25)
  2 TXN-ACCT-NUMBER            (N3)
  2 ACCT-DATE                  (N8)
  2 DEBIT-AMOUNT               (P7.2)
  2 CREDIT-AMOUNT              (P7.2)
  2 DESCRIPTION                (A20)
  2 REDEFINE DESCRIPTION
    3 DESC-BEGINNING           (A10)
    3 DESC-ISSUE-DATE          (N8)
    3 REDEFINE DESC-ISSUE-DATE
      4 DESC-ISSUE-DATE-MM     (N2)
      4 DESC-ISSUE-DATE-DD     (N2)
      4 DESC-ISSUE-DATE-YYYY   (N4)
    3 DESC-REST                (A2)
  2 PROCESS-IND                (A1)
  2 MONTH-END                  (A1)                                /* PM3
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER                  (N6)
  2 member-contact-id          (n8)                         /* vt1
*  2 NAME                       (A25)                       /* vt1
  2 NUMBER-MEMBERSHIPS         (P1)                                /* PM1
  2 PROCESS-IND                (A1)                                /* PM1
*  2 RANK                       (A3)         /* vt1                /* PM1
*  2 SEX                        (A1)                                /* PM1
  2 MILITARY-SERVICE           (A3)                                /* PM1
*  2 SSN                        (N9)          /* vt1               /* PM1
*  2 DATE-OF-BIRTH              (N8)          /* vt1               /* PM1
*  2 ADDRESS-1                  (A25)            /* PM1    /* vt1
*  2 ADDRESS-2                  (A25)            /* PM1    /* vt1
*  2 ADDRESS-3                  (A25)            /* PM1    /* vt1
*  2 ZIP-CODE                   (N9)             /* PM1    /* vt1
*   2 REDEFINE ZIP-CODE                          /* PM1    /* vt1
*     3 ZIP-CODE-5A              (A5)            /* PM1    /* vt1
*     3 ZIP-CODE-4N              (N4)            /* PM1    /* vt1
*     3 REDEFINE ZIP-CODE-4N                     /* PM1    /* vt1
*       4 ZIP-CODE-4A            (A4)            /* PM1    /* vt1
  2 INTRO-FLAG                 (A1)                                /* PM2
  2 ISSUE-DATE                 (N8/9)
  2 PLAN                       (A3/9)
  2 REDEFINE PLAN
    3 PLAN-OCC                 (9)
      4 PLAN-A1                (A1)
      4 PLAN-A2                (A2)
  2 STATUS                     (A1/9)
  2 MEC-IND                    (A1/9)
  2 X-LOAN-AMOUNT              (P5.2/9)
  2 X-LOAN-AMOUNT-2            (P7.2/9)
  2 X-ALT-LP-IND               (9)                                 /* PM3
  2 X-ALT-LP-AMT               (9)                                 /* PM3
  2 X-LOAN-DATE                (9)                                 /* PM3
  2 x-alt-lp-date              (9)                                 /* vt7  
  2 DATE-ENTERED               (N8/9)
  2 CONV-DURATION              (N3/9)
  2 C*ACTIVE-SEGMENTS                                              /* PM3
  2 BRIDGER-IND                                                    /* PM4
*
1 OWN-V VIEW OF A-STATUS                                           /* PM1
  2 ID-NUMBER                  (N6)
  2 NAME                       (A25)
  2 RANK                       (A3)
*   2 SEX                        (A1)                   /* TT1
  2 MILITARY-SERVICE           (A3)
  2 SSN                        (N9)
*   2 DATE-OF-BIRTH              (N8)                   /* TT1
*
1 ct-v view of a-contacts                              /* vt1 \/
  2 contact-id
  2 ssn
  2 first-name
  2 middle-name
  2 last-name
  2 date-of-birth
  2 gender-cd
  2 suffix
  2 contact-type                                        /* vt2
  2 firm-organization-name                              /* vt2
*                                                       /* vt1 /\
1 #DATA-REVIEW-LINE-1          (A125)
1 REDEFINE #DATA-REVIEW-LINE-1
  2 #TR-REG-CSV-LBL-1          (A15)   /* <'CI-CASH-VALUE  '>
  2 #TR-REG-CSV-LBL-2          (A11)   /* <'ISSUE-DATE '>
  2 #TR-REG-CSV-ISSUE-DATE     (N08)
  2 #TR-REG-CSV-LBL-3          (A07)   /* <'  PLAN '>
  2 #TR-REG-CSV-PLAN           (A03)
  2 #TR-REG-CSV-LBL-4          (A11)   /* <'  FACE-AMT '>
  2 #TR-REG-CSV-FAC-AMT        (A10)                           /* vt5 was a09
  2 #TR-REG-CSV-LBL-5          (A05)   /* <' CSV '>
  2 #TR-REG-CSV-CASH-VALUE     (A10)
  2 REDEFINE #TR-REG-CSV-CASH-VALUE
    3 #CSV-DOLLAR              (N7)
    3 #DECIMAL-POINT           (A1)
    3 #CSV-CENTS               (N2)
  2 #TR-REG-CSV-LBL-6          (A12)   /* <'  DEATH-BENE  '>   /* vt5 was a14 /8 vt6 was a13
  2 #TR-REG-CSV-DB             (A10)                           /* vt6 was a8
  2 #TR-REG-CSV-LBL-7          (A13)   /* <'  FACE-CASHED '>   /* vt6 was a14
  2 #TR-REG-CSV-FACE-CASHED    (A10)                           /* vt6 was a9
*  2 #TR-REG-MODE-REMAINING     (A01)                          /* vt6
*
1 #DATA-REVIEW-LINE-2          (A125)
1 REDEFINE #DATA-REVIEW-LINE-2
  2 #TR-REG-CSV-SPL-LBL-1      (A42)   /* <'POLICY-REMAINING '>
  2 #TR-REG-CSV-SPL-LBL-2      (A09)   /* <'FACE-AMT '>
  2 #TR-REG-CSV-SPL-FAC-AMT    (A09)
  2 #TR-REG-CSV-SPL-LBL-3      (A05)   /* <' CSV '>
  2 #TR-REG-CSV-SPL-CASH-VALUE (A10)
  2 REDEFINE #TR-REG-CSV-SPL-CASH-VALUE
    3 #CSV-SPL-DOLLAR          (N7)
    3 #DECIMAL-POINT-SPL       (A1)
    3 #CSV-SPL-CENTS           (N2)
  2 #TR-REG-CSV-SPL-LBL-4      (A14)   /* <'  DEATH-BENE  '>
  2 #TR-REG-CSV-SPL-DB         (A08)
  2 #TR-REG-MODE-REST          (A28)
*
1 #WORK-FIELDS
  2 #I1                        (I2)
  2 #I2                        (I2)
  2 #I3                        (I2)
  2 #OWN-X                     (I2)                                /* PM1
  2 #SEG                       (I2)
  2 #ISN                       (P8)
  2 #CNT-1                     (P5)
  2 #CNT-6                     (P7)
  2 #CNT-7                     (P7)                                /* PM1
  2 #TOTAL-LOAN                (P9.2)
  2 #WORK-ISSUE-DATE           (N8)
  2 REDEFINE #WORK-ISSUE-DATE
    3 #WORK-ISSUE-DATE-YYYY    (N4)
    3 #WORK-ISSUE-DATE-MM      (N2)
    3 #WORK-ISSUE-DATE-DD      (N2)
  2 #WORK-CSV-AMOUNT           (N7.2)
  2 #WORK-CSV-SPLIT-AMOUNT     (N7.2)
  2 #WORK-PERCENT              (N4)
  2 #WORK-SSN                  (N9)                                /* PM1
  2 #DATE-OF-BIRTH             (N8)                                /* PM1
  2 REDEFINE #DATE-OF-BIRTH                                        /* PM1
    3 #DOB-YYYY                (A4)                                /* PM1
    3 #DOB-MM                  (A2)                                /* PM1
    3 #DOB-DD                  (A2)                                /* PM1
  2 #HOLD-MEMBER-NUMBER        (A6)                                /* PM1
  2 #ID-NUMBER                 (N6)
  2 REDEFINE #ID-NUMBER
    3 #ID-NUMBER-A             (A6)
*
1 #LOGICALS
  2 #RUN-WEEKLY                (L)
  2 #RUN-MONTHLY               (L)
  2 #RUN-CAP                   (L)                                 /* PM3
  2 #MEMBER-FOUND              (L)
  2 #ACTIVE-POLICY             (L)
  2 #SPLIT                     (L)
  2 #DATE-OK                   (L)
  2 #OWNER-NOT-FOUND           (L)                                 /* PM1
*
1 #DISPLAY-ITEMS
  2 #POL-NUM                   (A16)
  2 #DISP-AMOUNT               (A15)
  2 #DISP-AMOUNT-2             (A15)
  2 #DISP-AMOUNT-3             (A15)
  2 #DISP-ISSUE-DATE           (A10)
  2 #DISP-TRAN-DATE            (A10)
  2 #DISP-MEMBER-NAME          (A25)
  2 #DISP-OWNER-NAME           (A25)
  2 #DISP-PERCENT              (A7)
  2 #DISP-MEMBER-NUMBER        (A6)
  2 #DISP-PLAN                 (A3)
  2 #DISP-MEC                  (A3)
*
  2 #DISP-LAST                 (A25)                               /* PM1
  2 #DISP-SUFFIX               (A25)                               /* PM1
  2 #DISP-FIRST                (A20)                               /* PM1
  2 #DISP-ZIP                  (A10)                               /* PM1
  2 #DISP-SSN                  (A9)                                /* PM1
  2 #DISP-DOB                  (A10)                               /* PM1
  2 #DISP-TITLE                (A5)                                /* PM1
  2 #DISP-MI                   (A1)                                /* PM1
  2 #DISP-GENDER               (A1)                                /* PM1
  2 #disp-org-name             (a70)                               /* vt2
*
1 #OUTPUT-FILE-ITEMS
  2 #EXTRACT-RECORD            (A318)              /* vt4 was a200
**2 #TAB                       (A1) INIT <H'05'>      /* SAG-AB 20060605
  2 #TAB                       (A1) INIT <H'09'>      /* SAG-AB 20060605
*
1 #INPUT-FILE-ITEMS                                                /* PM1
  2 #INPUT-RECORD              (A200)                              /* PM1
  2 REDEFINE #INPUT-RECORD                                         /* PM1
    3 #INPUT-CN                (A6)                                /* PM1
    3 #INPUT-REST              (A194)                              /* PM1
*
1 #DATE-PROCESSING
  2 #DATN                      (N8)
  2 #TO-DATE                   (N8)
  2 #FROM-DATE                 (N8)
  2 #RETURN-CALC               (N8)
  2 #TODAY                     (N8)
  2 #WEEKLY-START-DATE         (N8)
  2 #WEEKLY-END-DATE           (N8)
  2 #MONTHLY-START-DATE        (N8)
  2 #MONTHLY-END-DATE          (N8)
  2 #YEARLY-START-DATE         (N8)
  2 #START-DATE                (N8)
  2 #END-DATE                  (N8)
  2 #WORK-DATE                 (N8)
  2 REDEFINE #WORK-DATE
    3 #WORK-DATE-YYYY          (N4)
    3 #WORK-DATE-MM            (N2)
    3 #WORK-DATE-DD            (N2)
  2 REDEFINE #WORK-DATE
    3 #WORK-DATE-YYYY-A        (A4)
    3 #WORK-DATE-MM-A          (A2)
    3 #WORK-DATE-DD-A          (A2)
  2 #CHECK-TRAN-DATE           (N8)
  2 #CHECK-EFF-DATE            (N8)
  2 #REQUEST                   (A1)
*
1 #CONSTANTS
  2 #MINIMUM-TRANSACTION-VALUE (N5)  INIT <2000>
  2 #MINIMUM-TRANSACTION-YEARS (N8)  INIT <00030000>
  2 #PATRIOT-ACT-BEGIN-DATE    (N8)  INIT <20060501>
  2 #SPOUSE                    (A1)  INIT <'S'>                    /* PM2
  2 #CHILD                     (A1)  INIT <'K'>                    /* PM2
  2 #GRANDCHILD                (A1)  INIT <'G'>                    /* PM2
  2 #CAP                       (A1)  INIT <'Y'>                    /* PM4
  2 #CIL                       (A1)  INIT <'C'>                    /* PM4
  2 #AIL                       (A1)  INIT <'A'>                    /* PM4
  2 #EIL                       (A1)  INIT <'E'>                    /* PM4
  2 #PENDING-PI                (A2)  INIT <'PI'>                   /* PM4
  2 #PENDING-PR                (A2)  INIT <'PR'>                   /* PM4
  2 #PENDING-PC                (A2)  INIT <'PC'>                   /* PM6
  2 #PENDING-PY                (A2)  INIT <'PY'>                   /* PM6
  2 #PENDING-PP                (A2)  INIT <'PP'>                   /* PM7
  2 #PENDING-PB                (A2)  INIT <'PB'>                   /* PM8
*
1 #BATCH-PARMS
  2 #BATCH-PARM                (A7)    /* MONTHLY or WEEKLY
  2 #PARM-DATE                 (A10)
  2 REDEFINE #PARM-DATE
    3 #PARM-DATE-MM            (N2)
    3 #FILL-1                  (A1)
    3 #PARM-DATE-DD            (N2)
    3 #FILL-2                  (A1)
    3 #PARM-DATE-YYYY          (N4)
*
1 #WHOLE-LIFE-TABLE-STUFF                                          /* PM1
  2 #WHOLE-LIFE-TABLE
    3 #WHOLE-LIFE-OCC          (9)
      4 #WL-SEG                (I2)
  2 #WL-INS                    (L)
*
1 #CVALUSXX-PARMS
  2 #CN                        (N6)
  2 #SUFFIX                    (A3)
  2 #AS-OF-YYYYMMDD            (N8)
  2 #LOAN-BAL                  (N7.2/9)
  2 #LOAN-BAL-2                (N7.2/9)
  2 #ACC-INT                   (N7.2/9)
  2 #ACC-INT-2                 (N7.2/9)
  2 #CSV                       (N7.2/9)
  2 #CVALUE                    (N7.2/9)
  2 #LVALUE                    (N7.2/9)
  2 #MCSV                      (N7.2/9)
  2 #DB                        (N7.2/9)
  2 #ANN-PREM                  (N7.2/9)
  2 #FACE-AMT                  (N7.2/9)
  2 #TPP                       (N7.2/9)
*
* 1 #GFMLNSXX-PARMS                                      /* vt1 \/            /* PM1
*   2 #SPLIT-NAME                (A25)
1 #FIRST-20                  (A20)
1 #MI                        (A1)
1 #LAST                      (A25)
*   2 #LAST-WORK                 (A25)
*   2 #ERR-MSG                   (A60)
1 #SPLIT-SUFFIX              (A25)
*                                                        /* vt1 /\
1 #GRANKSXX-PARMS                                                  /* PM1
  2 #PASS-COMMAND              (A2)
  2 #RANK-PASS                 (A3)
  2 #MIL-ID-PASS               (A3)
  2 #INVALID                   (L)
  2 #RANK-PAY-TBL-DISPL        (P2)
  2 #RANK-LITERAL-PASS         (A23)
  2 #RANK-DISPLAY              (A5)
  2 #RANK-SEX                  (A1)
*
1 #GOWNRSXX-PARMS                                                  /* PM1
  2 #NON-INS-OWNER             (L)
  2 #MULTIPLE-OWNER            (L)
  2 #OWNER-OCC-9               (9)
    3 #OWNER-FLAG              (A1)
    3 #OWNER-CN                (N6/10)
    3 REDEFINE #OWNER-CN
      4 #OWNER-CN-OCC          (10)
        5 #OWNER-CN-A          (A6)
*
    3 #OWNER-CN-BY-POL         (N6)
    3 #OWNER-CN-SEG            (I2/9)
    3 #ISSUE-DATE              (N8/9)
    3 #ISSUE-DATE-DISP         (A10/9)
    3 #BN-TYPE                 (A1/2)
    3 #BN-TEXT                 (A60/10)
*
1 #GCTSTSXX-PARMS                                                  /* PM1
  2 #SPLIT-2                   (A1)
  2 #STREET                    (A70)                   /* vt4 was a25
  2 #STREET-2                  (A70)                   /* vt4 was a25
  2 #CITY                      (A50)                   /* vt4 was a22
  2 #STATE                     (A2)
  2 #ERR-MSG-2                 (A60)
*
1 AT-V VIEW OF A-APPL-TRACKING                                     /* PM4
  2 CAP-IND                                                         /* PM4
  2 AT-STATUS                                                       /* PM4
  2 MEMBER-CN                                                       /* PM4
*
1 #zip-code-9n                    (n9)
1 redefine #zip-code-9n
  2 #zip-code-5n                  (a5)    /* vt3 was n5
  2 #zip-code-4n                  (a4)    /* vt3 was n4
1 #contact-id                     (n8)
1 #rank-d                          (a) Dynamic
*
1 #org-name                       (a75)                           /* vt2
1 #org                            (a1)                            /* vt2
END-DEFINE
************************************************************************
*
on error                                           /* vt5 \/
  write '=' *error-nr /
    '=' *error-line /
    '=' st-v.id-number /
end-error                                          /* vt5 /\
*
FORMAT (1) LS=133 PS=76
WRITE  (1) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Patriot Act Errors and Exceptions'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (2) LS=250 PS=76
WRITE  (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Patriot Act Reporting - Loans Issued'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (4) LS=200 PS=76
WRITE  (4) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Patriot Act Reporting - Cash Value Resignations'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (6) LS=200 PS=76                                           /* PM1
WRITE  (6) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X                     /* PM1
  'Patriot Act Reporting - OFAC Check - Members/Owners'           /* PM1
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX                            /* PM1
*
FORMAT (7) LS=200 PS=76                                           /* PM1
WRITE  (7) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X                     /* PM1
  'Patriot Act Reporting - OFAC Check - Trusts'                   /* PM1
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX                            /* PM1
*
MOVE *DATN TO #DATN
INPUT #BATCH-PARM
PERFORM DETERMINE-RUN
*
* MOVE TRUE TO #RUN-WEEKLY
IF #RUN-WEEKLY OR #RUN-MONTHLY OR #RUN-CAP                        /* PM4
  IGNORE
ELSE
  ESCAPE ROUTINE
END-IF
*
PERFORM FORMAT-DATES
*
PERFORM CREATE-HEADER-RECORDS
*
DECIDE FOR FIRST CONDITION
  WHEN #RUN-CAP                                                   /* PM4
    PERFORM CHECK-CAP                                             /* PM4
*
  WHEN #RUN-WEEKLY
    MOVE #WEEKLY-START-DATE TO #START-DATE
    MOVE #WEEKLY-END-DATE   TO #END-DATE
*
    PERFORM TRANSACTION-LOG-PROCESSING
    PERFORM ACCOUNTING-REGISTER-PROCESSING
*
  WHEN #RUN-MONTHLY
    MOVE #YEARLY-START-DATE TO #START-DATE
    MOVE #MONTHLY-END-DATE  TO #END-DATE
*
    PERFORM TRANSACTION-LOG-PROCESSING
    PERFORM ACCOUNTING-REGISTER-PROCESSING
    PERFORM OFAC-CHECK                                            /* PM1
*
  WHEN NONE
    WRITE 'Error - no start dates selected for ATHPPTRT'
    ESCAPE ROUTINE
END-DECIDE
*
************************************************************************
DEFINE SUBROUTINE DETERMINE-RUN
************************************************************************
*
MOVE FALSE TO #RUN-MONTHLY #RUN-WEEKLY #RUN-CAP                   /* PM4
DECIDE FOR FIRST CONDITION
  WHEN #BATCH-PARM = 'CAP'                                        /* PM4
    #RUN-CAP := TRUE                                              /* PM4
  WHEN #BATCH-PARM = 'MONTHLY'
    MOVE TRUE TO #RUN-MONTHLY
  WHEN #BATCH-PARM = 'WEEKLY '
    MOVE #DATN TO #TO-DATE
    IF *TIMN LT 1200000       /* midnite till 12 noon (normal job time)
      MOVE 'E' TO #REQUEST
      MOVE #DATN TO #TO-DATE
      MOVE 1 TO #FROM-DATE
      PERFORM CALL-GDATESXX
*
      MOVE #RETURN-CALC TO #TO-DATE
    END-IF
*
    MOVE 'F' TO #REQUEST
    RESET #FROM-DATE
    PERFORM CALL-GDATESXX
*
    IF #RETURN-CALC = 1   /* only run on Sunday night
      MOVE TRUE TO #RUN-WEEKLY
    END-IF
  WHEN NONE
    WRITE (1) 'Invalid Batch Parameter - Weekly or Monthly' #BATCH-PARM
END-DECIDE
*
WRITE (1) 'RUN WEEKLY  = '  #RUN-WEEKLY #RETURN-CALC
WRITE (1) 'RUN MONTHLY = '  #RUN-MONTHLY
WRITE (1) 'RUN CAP     = '  #RUN-CAP
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-DATES
************************************************************************
*
IF *TIMN LT 1200000       /* midnite till 12 noon (normal job time)
  MOVE 'E' TO #REQUEST
  MOVE #DATN TO #TO-DATE
  MOVE 1 TO #FROM-DATE
  PERFORM CALL-GDATESXX
*
  MOVE #RETURN-CALC TO #WEEKLY-END-DATE
ELSE                     /* noon till midnite (if job is run early)
  MOVE #DATN TO #WEEKLY-END-DATE
END-IF
*
MOVE 'E' TO #REQUEST
MOVE #WEEKLY-END-DATE TO #TO-DATE
MOVE 6 TO #FROM-DATE
PERFORM CALL-GDATESXX
MOVE #RETURN-CALC TO #WEEKLY-START-DATE
*
READ WORK 1 ONCE #PARM-DATE
MOVE #PARM-DATE-YYYY TO #WORK-DATE-YYYY
MOVE #PARM-DATE-DD   TO #WORK-DATE-DD
COMPUTE #WORK-DATE-MM = #PARM-DATE-MM - 1
IF #WORK-DATE-MM = 0
  MOVE 12 TO #WORK-DATE-MM
  SUBTRACT 1 FROM #WORK-DATE-YYYY
END-IF
MOVE #WORK-DATE TO #MONTHLY-START-DATE
*
MOVE 01 TO #WORK-DATE-DD
MOVE 01 TO #WORK-DATE-MM
MOVE #WORK-DATE TO #YEARLY-START-DATE
*
RESET #TO-DATE
MOVE #MONTHLY-START-DATE TO #FROM-DATE
MOVE 'B'                 TO #REQUEST
PERFORM CALL-GDATESXX
MOVE #TO-DATE TO #MONTHLY-END-DATE
*
WRITE (1) '#WEEKLY-START-DATE    = ' #WEEKLY-START-DATE
WRITE (1) '#WEEKLY-END-DATE      = ' #WEEKLY-END-DATE
WRITE (1) '#MONTHLY-START-DATE   = ' #MONTHLY-START-DATE
WRITE (1) '#MONTHLY-END-DATE     = ' #MONTHLY-END-DATE
WRITE (1) '#YEARLY-START-DATE    = ' #YEARLY-START-DATE
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CREATE-HEADER-RECORDS
************************************************************************
*
IF NOT #RUN-CAP                                                   /* PM4
  COMPRESS 'Member Number'      #TAB
    'Policy Issue Date'  #TAB
    'Plan'               #TAB
    'Policy Number'      #TAB
    'MEC'                #TAB
    'Loan Issue Date'    #TAB
    'Loan Amount'        #TAB
    'Total Loans'        #TAB
    'CSV of Policy'      #TAB
    '% of CSV'           #TAB
    'Insured"s Name'     #TAB
    'Owner"s Name' INTO #EXTRACT-RECORD LEAVING NO
  WRITE WORK 2 #EXTRACT-RECORD
*
  IF #RUN-MONTHLY
    WRITE WORK 3 #EXTRACT-RECORD
  END-IF
  RESET #EXTRACT-RECORD
*
  COMPRESS 'Member Number'      #TAB
    'Policy Issue Date'  #TAB
    'Plan'               #TAB
    'Policy Number'      #TAB
    'MEC'                #TAB
    'CSV Date'           #TAB
    'CSV Amount'         #TAB
    'Insured"s Name'     #TAB
    'Owner"s Name' INTO #EXTRACT-RECORD LEAVING NO
  WRITE WORK 4 #EXTRACT-RECORD
*
  IF #RUN-MONTHLY
    WRITE WORK 5 #EXTRACT-RECORD
  END-IF
  RESET #EXTRACT-RECORD
END-IF                                                            /* PM3
*
IF #RUN-MONTHLY OR #RUN-CAP                                       /* PM1 PM4
  COMPRESS 'Title'       #TAB                                     /* PM1
    'First'              #TAB                                     /* PM1
    'MI'                 #TAB                                     /* PM1
    'Last'               #TAB                                     /* PM1
    'Suffix'             #TAB                                     /* PM1
    'Gender'             #TAB                                     /* PM1
    'SSN'                #TAB                                     /* PM1
    'Account ID'         #TAB                                     /* PM1
    'Date of Birth'      #TAB                                     /* PM1
    'Street-1'           #TAB                                     /* PM1
    'Street-2'           #TAB                                     /* PM1
    'City'               #TAB                                     /* PM1
    'State'              #TAB                                     /* PM1
    'Postal Code' INTO #EXTRACT-RECORD LEAVING NO                 /* PM1
  WRITE WORK 6 #EXTRACT-RECORD                                    /* PM1
  RESET #EXTRACT-RECORD                                           /* PM1
*
  IF NOT #RUN-CAP                                                 /* PM4
    COMPRESS 'Trust ID'  #TAB                                     /* PM1
      'Tax ID Number'    #TAB                                     /* PM1
      'Account ID'       #TAB                                     /* PM1
      'Street-1'         #TAB                                     /* PM1
      'Street-2'         #TAB                                     /* PM1
      'City'             #TAB                                     /* PM1
      'State'            #TAB                                     /* PM1
      'Postal Code' INTO #EXTRACT-RECORD LEAVING NO               /* PM1
    WRITE WORK 7 #EXTRACT-RECORD                                  /* PM1
    RESET #EXTRACT-RECORD                                         /* PM1
  END-IF                                                          /* PM4
END-IF                                                            /* PM1
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CALL-GDATESXX
************************************************************************
*
CALLNAT 'GDATESXX'
  #TO-DATE
  #FROM-DATE
  #RETURN-CALC
  #REQUEST
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FIND-MEMBER-RECORD
************************************************************************
*
RESET #MEMBER-FOUND
FIND (1) ST-V WITH MEMBER-KEY = #ID-NUMBER-A
  IF NO RECORDS FOUND
    FIND (1) ST-V WITH WIDOW-KEY = #ID-NUMBER-A
      IF NO RECORDS FOUND
        WRITE (1) 'Member record not found for ' #ID-NUMBER-A
        ESCAPE BOTTOM
      END-NOREC
*
      MOVE TRUE TO #MEMBER-FOUND
      MOVE *ISN TO #ISN
    END-FIND
  END-NOREC
*
  MOVE TRUE TO #MEMBER-FOUND
  MOVE *ISN TO #ISN
END-FIND
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE GET-POLICY-NUMBER
************************************************************************
*
IF #SEG LT 1 OR #SEG GT 9
  MOVE 'Policy not found' TO #POL-NUM
ELSE
  CALLNAT 'GPLNMSXX' #POL-NUM ST-V.ID-NUMBER #SEG
END-IF
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-NAMES
************************************************************************
*
MOVE ST-V.ID-NUMBER TO #CGA-SCR-ID                                        /* PM2
IF ST-V.INTRO-FLAG = #SPOUSE OR = #CHILD OR = #GRANDCHILD                 /* PM2
  #USE-SPS-GEN-INFO := TRUE                                               /* PM2
END-IF                                                                    /* PM2
RESET #CONTACT-SEG                          /* get formatted member name
CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD
MOVE #NAME TO #DISP-MEMBER-NAME
*
IF #SEG LT 1 OR #SEG GT 9
  MOVE 'Policy not Found' TO #DISP-OWNER-NAME
ELSE
  RESET #USE-SPS-GEN-INFO                                                 /* PM2
  MOVE #SEG TO #CONTACT-SEG                 /* get formatted owner name
  CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD
  MOVE #NAME TO #DISP-OWNER-NAME
END-IF
*
END-SUBROUTINE
*
************************************************************************
* DEFINE SUBROUTINE SPLIT-NAME                                      /* PM1  vt1 \/
************************************************************************
*
* RESET #FIRST-20 #MI #LAST #LAST-WORK #ERR-MSG #SPLIT-SUFFIX
* *
* CALLNAT 'GFMLNSXX'
*   #SPLIT-NAME
*   #FIRST-20
*   #MI
*   #LAST
*   #ERR-MSG
* *
* SEPARATE #LAST LEFT INTO #LAST-WORK #SPLIT-SUFFIX WITH DELIMITER ','
* *
* RESET #LAST
* MOVE #LAST-WORK TO #LAST
*
* END-SUBROUTINE                                                      /* vt1 /\
*
************************************************************************
DEFINE SUBROUTINE SPLIT-ADDRESS                                   /* PM1
************************************************************************
*
RESET #STREET #STREET-2 #CITY #STATE #ERR-MSG-2 #DISP-ZIP
reset #pda-address                                           /* vt1 \/
move st-v.member-contact-id to #add-contact-id
move 'P' to #add-type
callnat'addn0001' #pda-address
#street      := #add-line-1
if #add-line-3 = ' '
  reset #street-2
else
  #street-2 := #add-line-2
end-if
#city        := #add-city
#state       := #add-state
#zip-code-9n := #add-zip-code
If #zip-code-5n ne ' '
  move #zip-code-5n to #disp-zip
end-if
if #zip-code-4n ne ' '
  COMPRESS #DISP-ZIP '-' #zip-code-4n INTO #DISP-ZIP LEAVING NO
end-if
* write (1) #disp-zip
*
* MOVE 'S' TO #SPLIT-2
* CALLNAT 'GCTSTSXX'
*   #SPLIT-2
*   ST-V.ADDRESS-1
*   ST-V.ADDRESS-2
*   ST-V.ADDRESS-3
*   #STREET
*   #STREET-2
*   #CITY
*   #STATE
*   #ERR-MSG-2
* *
* MOVE ST-V.ZIP-CODE-5A TO #DISP-ZIP
* IF ST-V.ZIP-CODE-4N NE 0
*   COMPRESS #DISP-ZIP '-' ST-V.ZIP-CODE-4A INTO #DISP-ZIP LEAVING NO
* END-IF                                                     /* vt1 /\
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE GET-RANK                                        /* PM1
************************************************************************
*
RESET #PASS-COMMAND #INVALID #RANK-PAY-TBL-DISPL #RANK-LITERAL-PASS
  #RANK-DISPLAY
*   #ERR-MSG                                          /* vt1    \/
*
move st-v.member-contact-id to #contact-id
* #rank-d      := 'D R'                     /* returns full rank          PM10
#rank-d       := 'I R'                      /* retuens abbreviated RANK   PM10
CALLNAT 'GPRS0CNT' #CONTACT-ID #RANK-d
* #rank  := EDIT_NAME_LOWCASE (< #rank-d   >)
move #rank-d to #rank-display
*
* CALLNAT 'GRANKSXX' #PASS-COMMAND #RANK-PASS #MIL-ID-PASS #INVALID
*   #RANK-PAY-TBL-DISPL #RANK-LITERAL-PASS #RANK-DISPLAY
* *
* IF #RANK-DISPLAY = ' '
*   MOVE #RANK-PASS TO #RANK-DISPLAY
* END-IF
* *
* IF #RANK-DISPLAY = ' '
*     AND #RANK-SEX NE ' '
*   IF #RANK-SEX = 'M'
*     MOVE 'Mr' TO #RANK-DISPLAY
*   ELSE
*     MOVE 'Ms' TO #RANK-DISPLAY
*   END-IF
* END-IF
*                                                     /* vt1 /\
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-ISSUE-DATE
************************************************************************
*
COMPRESS #WORK-DATE-MM-A #WORK-DATE-DD-A #WORK-DATE-YYYY-A
  INTO #DISP-ISSUE-DATE WITH '/'
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-TRANSACTION-DATE
************************************************************************
*
COMPRESS #WORK-DATE-MM-A #WORK-DATE-DD-A #WORK-DATE-YYYY-A
  INTO #DISP-TRAN-DATE WITH '/'
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-CSV-AMOUNT
************************************************************************
*
RESET #WORK-CSV-AMOUNT #WORK-CSV-SPLIT-AMOUNT
*

COMPUTE #WORK-CSV-AMOUNT = #CSV-CENTS / 100
ADD #CSV-DOLLAR TO #WORK-CSV-AMOUNT
*
IF #SPLIT
  COMPUTE #WORK-CSV-SPLIT-AMOUNT = #CSV-SPL-CENTS / 100
  ADD #CSV-SPL-DOLLAR TO #WORK-CSV-SPLIT-AMOUNT
*
  COMPUTE #WORK-CSV-AMOUNT = #WORK-CSV-AMOUNT - #WORK-CSV-SPLIT-AMOUNT
END-IF
*
MOVE EDITED #WORK-CSV-AMOUNT (EM=ZZZZZZ9.99) TO #DISP-AMOUNT
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-PERCENT
************************************************************************
*
RESET #WORK-PERCENT
*
COMPUTE ROUNDED #WORK-PERCENT =  AR-V.DEBIT-AMOUNT / #CSV (#SEG) * 100
MOVE EDITED #WORK-PERCENT (EM=ZZZ9) TO #DISP-PERCENT
COMPRESS #DISP-PERCENT '%' INTO #DISP-PERCENT LEAVING NO
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-PLAN
************************************************************************
*
IF #SEG = 0
  MOVE 'XXX' TO #DISP-PLAN
ELSE
  DECIDE FOR FIRST CONDITION
    WHEN ST-V.PLAN (#SEG) = '47'
      MOVE 'NSP' TO #DISP-PLAN
    WHEN NONE
      MOVE ST-V.PLAN (#SEG) TO #DISP-PLAN
  END-DECIDE
END-IF
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE FORMAT-MEC
************************************************************************
*
IF #SEG = 0
  IGNORE
ELSE
  IF ST-V.MEC-IND (#SEG) NE ' '
    MOVE 'Yes' TO #DISP-MEC
  ELSE
    MOVE 'No' TO #DISP-MEC
  END-IF
END-IF
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CALL-CVALUSXX
************************************************************************
*
CALLNAT 'CVALUSXX'
  #CVALUSXX-PARMS
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CHECK-TRANSACTION-DATE
************************************************************************
*
IF ST-V.DATE-ENTERED (#SEG) NE 0
  MOVE ST-V.DATE-ENTERED (#SEG) TO #CHECK-EFF-DATE
ELSE
  MOVE ST-V.ISSUE-DATE (#SEG) TO #CHECK-EFF-DATE
END-IF
*
RESET #DATE-OK
*
IF #CHECK-TRAN-DATE - #CHECK-EFF-DATE > #MINIMUM-TRANSACTION-YEARS
    AND #CHECK-EFF-DATE GT 0
  MOVE TRUE TO #DATE-OK
END-IF
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE GET-OWNER-DETAILS                               /* PM1
************************************************************************
*
CALLNAT 'GOWNRSXX'
  #ID-NUMBER
  #NON-INS-OWNER
  #MULTIPLE-OWNER
  #OWNER-OCC-9 (1:9)
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE TRANSACTION-LOG-PROCESSING
************************************************************************
*
READ TR-V BY TRANSACTION-DATN FROM #START-DATE THRU #END-DATE
*  IF TR-V.PROCESS-IND = 'S'                 RE1
  IF TR-V.USER-COMPANY = 'S'        /* Bypass AFFL TR log records   RE1
      OR TR-V.TRANSACTION-DATN LT #PATRIOT-ACT-BEGIN-DATE
    ESCAPE TOP
  END-IF
*
  FOR #I1 1 TO 20
    IF   TR-V.OLD-DATA (#I1) = ' '
        AND TR-V.NEW-DATA (#I1) = ' '
      ESCAPE BOTTOM
    END-IF
*
    COMPUTE #I2 = #I1 + 1
    RESET #DATA-REVIEW-LINE-1 #DATA-REVIEW-LINE-2 #ACTIVE-POLICY #SPLIT
      #POL-NUM #DISP-AMOUNT #DISP-ISSUE-DATE #DISP-TRAN-DATE
      #DISP-MEMBER-NAME #DISP-OWNER-NAME #DISP-MEMBER-NUMBER
      #DISP-PLAN #DISP-MEC #CHECK-TRAN-DATE #CHECK-EFF-DATE
*
    MOVE TR-V.OLD-DATA (#I1) TO #DATA-REVIEW-LINE-1
    IF #TR-REG-CSV-LBL-1 = 'CI-CASH-VALUE  '
      MOVE TR-V.NEW-DATA (#I1) TO #DATA-REVIEW-LINE-2
*
      IF #TR-REG-CSV-SPL-LBL-1 = 'POLICY-REMAINING '
        MOVE TRUE TO #SPLIT
      END-IF
*
      MOVE TR-V.ID-NUMBER TO #ID-NUMBER
      PERFORM FIND-MEMBER-RECORD
      IF #MEMBER-FOUND
        GET ST-V #ISN
      ELSE
        ESCAPE BOTTOM
      END-IF
*
      RESET #SEG
      FOR #I3 1 TO 9
        IF ST-V.ISSUE-DATE (#I3) = #TR-REG-CSV-ISSUE-DATE
            AND ST-V.PLAN (#I3)     = #TR-REG-CSV-PLAN
*
          IF ST-V.STATUS (#I3)   = 'D'
              AND NOT #SPLIT
            MOVE TRUE TO #ACTIVE-POLICY
          END-IF
*
          MOVE #I3 TO #SEG
          ESCAPE BOTTOM
        END-IF
      END-FOR
*
      IF #ACTIVE-POLICY               /* not split so must be reinstated
        WRITE (1) 'Reinstated Policy for ' TR-V.ID-NUMBER
        WRITE (1) '                      ' #TR-REG-CSV-ISSUE-DATE
        WRITE (1) '                      ' #TR-REG-CSV-PLAN
        ESCAPE BOTTOM
      END-IF
*
      IF #SEG GT 0
        MOVE TR-V.TRANSACTION-DATN    TO #CHECK-TRAN-DATE
        PERFORM CHECK-TRANSACTION-DATE
*
        IF #DATE-OK
*         WRITE (1) TR-V.ID-NUMBER ' TR date is OK'
*         WRITE (1) #CHECK-EFF-DATE
*         WRITE (1) #CHECK-TRAN-DATE
          ESCAPE BOTTOM
        END-IF
      END-IF
      PERFORM GET-POLICY-NUMBER
      PERFORM FORMAT-NAMES
      MOVE #TR-REG-CSV-ISSUE-DATE TO #WORK-DATE
      PERFORM FORMAT-ISSUE-DATE
      MOVE TR-V.TRANSACTION-DATN TO #WORK-DATE
      PERFORM FORMAT-TRANSACTION-DATE
      PERFORM FORMAT-CSV-AMOUNT
      MOVE EDITED TR-V.ID-NUMBER (EM=999999)TO #DISP-MEMBER-NUMBER
      PERFORM FORMAT-PLAN
      PERFORM FORMAT-MEC
*
      IF #WORK-CSV-AMOUNT LT #MINIMUM-TRANSACTION-VALUE
        ESCAPE BOTTOM
      END-IF
*
      DISPLAY (4) 'Member Number'     #DISP-MEMBER-NUMBER
        'Policy Issue Date' #DISP-ISSUE-DATE
        'Plan'              #DISP-PLAN
        'Policy Number'     #POL-NUM
        'MEC'               #DISP-MEC
        'CSV Date'          #DISP-TRAN-DATE
        'CSV Amount'        #DISP-AMOUNT
        'Insured Name'      #DISP-MEMBER-NAME
        'Owner Name'        #DISP-OWNER-NAME
*
      COMPRESS #DISP-MEMBER-NUMBER  #TAB
        #DISP-ISSUE-DATE     #TAB
        #DISP-PLAN           #TAB
        #POL-NUM             #TAB
        #DISP-MEC            #TAB
        #DISP-TRAN-DATE      #TAB
        #DISP-AMOUNT         #TAB
        #DISP-MEMBER-NAME    #TAB
        #DISP-OWNER-NAME INTO #EXTRACT-RECORD LEAVING NO
*
      WRITE WORK 4 #EXTRACT-RECORD
*
      IF #RUN-MONTHLY AND TR-V.TRANSACTION-DATN GE #MONTHLY-START-DATE
        WRITE WORK 5 #EXTRACT-RECORD
      END-IF
*
      RESET #EXTRACT-RECORD
    END-IF
  END-FOR
END-READ
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE ACCOUNTING-REGISTER-PROCESSING
************************************************************************
*
READ AR-V BY TRANSACTION-DATN FROM #START-DATE THRU #END-DATE
  IF NOT AR-V.TXN-CODE = 'NEWL' OR = 'ADDL'
      OR AR-V.DEBIT-AMOUNT LT #MINIMUM-TRANSACTION-VALUE
      OR AR-V.MONTH-END NE ' '                                    /* PM3
    ESCAPE TOP
  END-IF
*
  RESET #POL-NUM #DISP-AMOUNT #DISP-ISSUE-DATE #DISP-TRAN-DATE
    #DISP-MEMBER-NAME #DISP-OWNER-NAME #DISP-MEMBER-NUMBER #SEG
    #TOTAL-LOAN #DISP-AMOUNT-2 #DISP-AMOUNT-3 #DISP-PERCENT
    #DISP-PLAN #DISP-MEC #WORK-ISSUE-DATE
    #CHECK-EFF-DATE #CHECK-TRAN-DATE
*
  MOVE AR-V.ID-NUMBER TO #ID-NUMBER
  PERFORM FIND-MEMBER-RECORD
  IF #MEMBER-FOUND
    GET ST-V #ISN
  ELSE
    ESCAPE TOP
  END-IF
*
  MOVE AR-V.DESC-ISSUE-DATE-MM   TO #WORK-ISSUE-DATE-MM
  MOVE AR-V.DESC-ISSUE-DATE-DD   TO #WORK-ISSUE-DATE-DD
  MOVE AR-V.DESC-ISSUE-DATE-YYYY TO #WORK-ISSUE-DATE-YYYY
*
  FOR #I3 1 TO 9
    IF ST-V.ISSUE-DATE (#I3) = #WORK-ISSUE-DATE
        AND NOT (ST-V.CONV-DURATION (#I3) = 999)
        AND (NOT FUNCTION-TERM-POLICY(<ST-V.PLAN(#I3)>))       /* YK1
*       AND NOT (ST-V.PLAN (#I3) = 'LT' OR = 'RT')             /* YK1
*       AND NOT ((ST-V.PLAN-A1 (#I3) GE 'U')                   /* YK1
*       AND (ST-V.PLAN-A1 (#I3) LE 'Z'))                       /* YK1
      MOVE #I3 TO #SEG
    END-IF
*
    IF ST-V.STATUS (#I3) = 'D'
      IF ST-V.X-LOAN-AMOUNT (#I3) GT 0
        ADD ST-V.X-LOAN-AMOUNT (#I3) TO #TOTAL-LOAN
      END-IF
*
      IF ST-V.X-LOAN-AMOUNT-2 (#I3) GT 0
        ADD ST-V.X-LOAN-AMOUNT-2 (#I3) TO #TOTAL-LOAN
      END-IF
    END-IF
  END-FOR
*
  IF #SEG = 0                     /* loan on term policy
*   WRITE (1) 'Loan on term policy for' AR-V.ID-NUMBER
*   WRITE (1) '                       ' AR-V.DESC-ISSUE-DATE
    ESCAPE TOP
  ELSE
    MOVE AR-V.TRANSACTION-DATN    TO #CHECK-TRAN-DATE
    PERFORM CHECK-TRANSACTION-DATE
*
    IF #DATE-OK
*     WRITE (1) AR-V.ID-NUMBER 'AR date is OK'
*     WRITE (1) #CHECK-EFF-DATE
*     WRITE (1) #CHECK-TRAN-DATE
      ESCAPE TOP
    END-IF
  END-IF
*
  PERFORM GET-POLICY-NUMBER
  PERFORM FORMAT-NAMES
  MOVE #WORK-ISSUE-DATE TO #WORK-DATE
  PERFORM FORMAT-ISSUE-DATE
  MOVE AR-V.TRANSACTION-DATN TO #WORK-DATE
  PERFORM FORMAT-TRANSACTION-DATE
  MOVE AR-V.ID-NUMBER TO #CN
  PERFORM CALL-CVALUSXX
  PERFORM FORMAT-PERCENT
  PERFORM FORMAT-PLAN
  PERFORM FORMAT-MEC
*
  MOVE EDITED #CSV (#SEG) (EM=ZZZZZZ9.99) TO #DISP-AMOUNT-2
  MOVE EDITED AR-V.DEBIT-AMOUNT (EM=ZZZZZZ9.99) TO #DISP-AMOUNT
  MOVE EDITED #TOTAL-LOAN (EM=ZZZZZZZZ9.99)TO #DISP-AMOUNT-3
  MOVE EDITED AR-V.ID-NUMBER (EM=999999)TO #DISP-MEMBER-NUMBER
*
  DISPLAY (2) 'Member Number'     #DISP-MEMBER-NUMBER
    'Policy Issue Date' #DISP-ISSUE-DATE
    'Plan'              #DISP-PLAN
    'Policy Number'     #POL-NUM
    'MEC'               #DISP-MEC
    'Loan Issue Date'   #DISP-TRAN-DATE
    'Loan Amount'       #DISP-AMOUNT
    'Total Loans'       #DISP-AMOUNT-3
    'CSV of Policy'     #DISP-AMOUNT-2
    '% of CSV'          #DISP-PERCENT
    'Insured"s Name'    #DISP-MEMBER-NAME
    'Owner"s Name'      #DISP-OWNER-NAME
*
  COMPRESS #DISP-MEMBER-NUMBER  #TAB
    #DISP-ISSUE-DATE     #TAB
    #DISP-PLAN           #TAB
    #POL-NUM             #TAB
    #DISP-MEC            #TAB
    #DISP-TRAN-DATE      #TAB
    #DISP-AMOUNT         #TAB
    #DISP-AMOUNT-3       #TAB
    #DISP-AMOUNT-2       #TAB
    #DISP-PERCENT        #TAB
    #DISP-MEMBER-NAME    #TAB
    #DISP-OWNER-NAME  INTO #EXTRACT-RECORD LEAVING NO
*
  WRITE WORK 2 #EXTRACT-RECORD
*
  IF #RUN-MONTHLY AND AR-V.TRANSACTION-DATN GE #MONTHLY-START-DATE
    WRITE WORK 3 #EXTRACT-RECORD
  END-IF
*
  RESET #EXTRACT-RECORD
*
END-READ
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE OFAC-CHECK                                      /* PM1
************************************************************************
*
READ ST-V BY MEMBER-KEY FROM'001900'
  IF ST-V.NUMBER-MEMBERSHIPS = 0
    ESCAPE TOP
  END-IF
*
  RESET #WL-SEG (*) #WL-INS #I2
  FOR #I1 1 TO 9
*   IF  (ST-V.PLAN (#I1) = 'LT'  OR = 'RT')                           /* YK1
*       OR (ST-V.PLAN-A1 (#I1) GE 'U' AND ST-V.PLAN-A1 (#I1) LE 'Z')  /* YK1
    IF FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>)                         /* YK1
        OR (ST-V.STATUS (#I1) NE 'D')
      ESCAPE TOP
    ELSE
      MOVE TRUE TO #WL-INS
      ADD +1 TO #I2
      MOVE #I1 TO #WL-SEG (#I2)
    END-IF
  END-FOR
*
  IF NOT #WL-INS
    ESCAPE TOP
  END-IF
*
  MOVE EDITED ST-V.ID-NUMBER (EM=999999) TO #EXTRACT-RECORD
  WRITE WORK 10 #EXTRACT-RECORD
  RESET #EXTRACT-RECORD
*
  MOVE ST-V.ID-NUMBER TO #ID-NUMBER
  PERFORM GET-OWNER-DETAILS
  IF #NON-INS-OWNER
    FOR #I1 1 TO #I2
      MOVE #WL-SEG (#I2) TO #OWN-X
      FOR #I3 1 TO 10
        IF #OWNER-CN (#OWN-X,#I3) = 0
          ESCAPE BOTTOM
        ELSE
          RESET #OWNER-NOT-FOUND #ISN
          FIND (1) OWN-V WITH MEMBER-KEY = #OWNER-CN-A (#OWN-X,#I3)
            IF NO RECORDS FOUND
              FIND (1) OWN-V WITH WIDOW-KEY = #OWNER-CN-A (#OWN-X, #I3)
                IF NO RECORDS FOUND
                  MOVE TRUE TO #OWNER-NOT-FOUND
                  ESCAPE BOTTOM
                END-NOREC
*
                MOVE *ISN TO #ISN
              END-FIND
            END-NOREC
*
            IF #OWNER-NOT-FOUND
              ESCAPE BOTTOM
            ELSE
              MOVE *ISN TO #ISN
            END-IF
          END-FIND
*
          IF #OWNER-NOT-FOUND OR #ISN = 0
            WRITE (6) 'Owner not found for ' ST-V.ID-NUMBER
            WRITE (6) 'Owner number      = ' #OWNER-CN-A (#OWN-X,#I3)
            ESCAPE TOP
          ELSE
            GET OWN-V #ISN
            MOVE EDITED OWN-V.ID-NUMBER (EM=999999) TO #EXTRACT-RECORD
            WRITE WORK 10 #EXTRACT-RECORD
            RESET #EXTRACT-RECORD
          END-IF
        END-IF
      END-FOR
    END-FOR
  END-IF
END-READ
*
READ WORK 10 #INPUT-RECORD
  MOVE #INPUT-CN TO #ID-NUMBER-A
END-ALL
*
SORT BY #ID-NUMBER-A USING #INPUT-RECORD
  IF #ID-NUMBER-A = #HOLD-MEMBER-NUMBER
    ESCAPE TOP
  ELSE
    MOVE #ID-NUMBER-A TO #HOLD-MEMBER-NUMBER
    PERFORM CREATE-OFAC-REPORT
  END-IF
END-SORT
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CREATE-OFAC-REPORT
************************************************************************
*
FIND (1) ST-V WITH ST-V.MEMBER-KEY = #ID-NUMBER-A
  IF NO RECORDS FOUND
    WRITE (6) 'Member not found for ' #ID-NUMBER
    ESCAPE BOTTOM
  END-NOREC
*
*  RESET #SPLIT-NAME #RANK-PASS #MIL-ID-PASS #RANK-SEX #WORK-SSN   /* vt1
  RESET  #RANK-PASS #MIL-ID-PASS #RANK-SEX #WORK-SSN               /* vt1
    #ID-NUMBER #DATE-OF-BIRTH
    #DISP-TITLE #DISP-FIRST #DISP-MI #DISP-LAST #DISP-SUFFIX
    #DISP-GENDER #DISP-SSN #DISP-MEMBER-NUMBER #DISP-DOB
    #disp-org-name  #org                                             /* vt2
*
  find ct-v with ct-v.contact-id = st-v.member-contact-id         /* vt1 \/
    if no
      escape bottom
    end-norec
    if ct-v.contact-type = 'O'                            /* vt2 \/
      move ct-v.firm-organization-name to #org-name
      move 'Y' to #org
    else
      reset #org-name #org
    end-if                                                /* vt2 /\
    move ct-v.first-name       to #first-20
    move ct-v.middle-name      to #mi
    move ct-v.last-name        to #last
    move ct-v.suffix           to #split-suffix
    move ct-v.ssn              to #work-ssn
    move ct-v.date-of-birth    to #date-of-birth
    move ct-v.gender-cd       to  #rank-sex
  end-find                                                       /* vt1 /\
*  MOVE ST-V.RANK             TO #RANK-PASS               /* vt1 \/
*  MOVE ST-V.SEX              TO #RANK-SEX
  MOVE ST-V.MILITARY-SERVICE TO #MIL-ID-PASS
*  MOVE ST-V.NAME             TO #SPLIT-NAME
*  MOVE ST-V.SSN              TO #WORK-SSN                /* vt1 /\
  MOVE ST-V.ID-NUMBER        TO #ID-NUMBER
*  MOVE ST-V.DATE-OF-BIRTH    TO #DATE-OF-BIRTH            /* vt1
*
  PERFORM GET-RANK
*
*  PERFORM SPLIT-NAME                                       /* vt1
*  IF #ERR-MSG NE ' '                        /* vt1 \/
*    END TRANSACTION                                               /* PM5
*    ESCAPE TOP
*  END-IF                                    /* vt1 /\
*
  PERFORM SPLIT-ADDRESS                     /* PM10 - was commented out
*
  move #org-name                         to #disp-org-name           /* vt2
  MOVE #RANK-DISPLAY                     TO #DISP-TITLE
  MOVE #FIRST-20                         TO #DISP-FIRST
  MOVE #MI                               TO #DISP-MI
  MOVE #LAST                             TO #DISP-LAST
  MOVE #SPLIT-SUFFIX                     TO #DISP-SUFFIX
  MOVE #RANK-SEX                         TO #DISP-GENDER
  MOVE EDITED #WORK-SSN (EM=999999999)   TO #DISP-SSN
  MOVE EDITED #ID-NUMBER (EM=999999)     TO #DISP-MEMBER-NUMBER
  COMPRESS #DOB-MM #DOB-DD #DOB-YYYY INTO #DISP-DOB WITH '/'
*
  COMPRESS #DISP-TITLE          #TAB
    #DISP-FIRST          #TAB
    #DISP-MI             #TAB
    #DISP-LAST           #TAB
    #DISP-SUFFIX         #TAB
    #DISP-GENDER         #TAB
    #DISP-SSN            #TAB
    #DISP-MEMBER-NUMBER  #TAB
    #DISP-DOB            #TAB
    #STREET              #TAB
    #STREET-2            #TAB
    #CITY                #TAB
    #STATE               #TAB
    #DISP-ZIP INTO #EXTRACT-RECORD LEAVING NO
*
  PERFORM WRITE-OFAC-REPORT
*
  IF #RUN-CAP                                                     /* PM4
    #GPBATRBI-ID-NUMBER := ST-V.ID-NUMBER                         /* PM4
    #GPBATRBI-NEW-IND   := 'Y'                                    /* PM4
    #GPBATRBI-CLERK     := 'EDS'                                  /* PM4
    CALLNAT 'GPBSTRBI'                                            /* PM4
      #PDA-GPBATRBI                                               /* PM4
*
    ST-V.BRIDGER-IND := 'Y'                                       /* PM4
    UPDATE (1250)                                                 /* PM4
*   END TRANSACTION                                               /* PM4
  END-IF                                                          /* PM4
END-FIND
*
END TRANSACTION                                                   /* PM5
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE WRITE-OFAC-REPORT                               /* PM1
************************************************************************
*
* IF #DISP-FIRST NE ' ' OR #DISP-MI NE ' '                   /* vt2
if #org = ' '                                                /* vt2
  ADD +1 TO #CNT-6
  DISPLAY (6)  '#CNT-6'   #CNT-6
    'Title'    #DISP-TITLE
    'First'    #DISP-FIRST
    'MI'       #DISP-MI
    'Last'     #DISP-LAST
    'Suffix'   #DISP-SUFFIX
    'Gender'   #DISP-GENDER
    'Account ID' #DISP-MEMBER-NUMBER
    'DOB'        #DISP-DOB
*
  COMPRESS #DISP-TITLE          #TAB
    #DISP-FIRST          #TAB
    #DISP-MI             #TAB
    #DISP-LAST           #TAB
    #DISP-SUFFIX         #TAB
    #DISP-GENDER         #TAB
    #DISP-SSN            #TAB
    #DISP-MEMBER-NUMBER  #TAB
    #DISP-DOB            #TAB
    #STREET              #TAB
    #STREET-2            #TAB
    #CITY                #TAB
    #STATE               #TAB
    #DISP-ZIP INTO #EXTRACT-RECORD LEAVING NO
*
  WRITE WORK 6 #EXTRACT-RECORD
  RESET #EXTRACT-RECORD
ELSE
  ADD +1 TO #CNT-7
  DISPLAY (7)  '#CNT-7'        #CNT-7
    'Trust ID'      #disp-org-name             /* vt 2 was #DISP-LAST
    'Tax ID Number' #DISP-SSN
    'Account ID'    #DISP-MEMBER-NUMBER
*
  COMPRESS #disp-org-name #tab                 /* vt2  was #DISP-LAST  #TAB
    #DISP-SSN            #TAB
    #DISP-MEMBER-NUMBER  #TAB
    #STREET              #TAB
    #STREET-2            #TAB
    #CITY                #TAB
    #STATE               #TAB
    #DISP-ZIP INTO #EXTRACT-RECORD LEAVING NO
*
  write #disp-org-name
  WRITE WORK 7 #EXTRACT-RECORD
  RESET #EXTRACT-RECORD
END-IF
*
END-SUBROUTINE
*
************************************************************************
DEFINE SUBROUTINE CHECK-CAP                                       /* PM4
************************************************************************
*
READ AT-V BY ID-NUMBER
  IF AT-V.AT-STATUS = #PENDING-PI            /* OR = #PENDING-PR /* PM9
      OR = #PENDING-PC OR = #PENDING-PY               /* PM6
      OR = #PENDING-PP OR = #PENDING-PB               /* PM7 PM8
      AND AT-V.CAP-IND   = #CAP
    #ID-NUMBER-A := AT-V.MEMBER-CN
    PERFORM FIND-MEMBER-RECORD
    IF #MEMBER-FOUND
      GET ST-V #ISN
    ELSE
      ESCAPE TOP
    END-IF
*
    IF ST-V.BRIDGER-IND = ' '
      MOVE EDITED ST-V.ID-NUMBER (EM=999999) TO #EXTRACT-RECORD
      WRITE WORK 10 #EXTRACT-RECORD
      RESET #EXTRACT-RECORD
    END-IF
  END-IF
END-READ
*
READ ST-V BY MEMBER-KEY FROM '001900'
  IF ST-V.PROCESS-IND = 'C'
      OR ST-V.NUMBER-MEMBERSHIPS = 0
      OR ST-V.BRIDGER-IND NE ' '
    ESCAPE TOP
  END-IF
*
  FOR #I1 1 TO C*ACTIVE-SEGMENTS
    IF ST-V.STATUS (#I1) = 'D'
        AND ST-V.X-ALT-LP-IND (#I1) = 'C' OR = 'L' OR = 'E'
        AND ST-V.X-ALT-LP-AMT (#I1) GT 0
        AND( (ST-V.X-LOAN-DATE  (#I1)  = 0 ) or (st-v.x-alt-lp-date(#i1) ge #monthly-start-date and st-v.x-alt-lp-date(#i1) le #monthly-end-date))     /* vt7
        AND ST-V.X-LOAN-AMOUNT(#I1)  = 0
      MOVE EDITED ST-V.ID-NUMBER (EM=999999) TO #EXTRACT-RECORD
      WRITE WORK 10 #EXTRACT-RECORD
      RESET #EXTRACT-RECORD
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-READ
*
READ WORK 10 #INPUT-RECORD
  MOVE #INPUT-CN TO #ID-NUMBER-A
END-ALL
*
SORT BY #ID-NUMBER-A USING #INPUT-RECORD
  IF #ID-NUMBER-A = #HOLD-MEMBER-NUMBER
    ESCAPE TOP
  ELSE
    MOVE #ID-NUMBER-A TO #HOLD-MEMBER-NUMBER
    PERFORM CREATE-OFAC-REPORT
  END-IF
END-SORT
*
END-SUBROUTINE
*
END
