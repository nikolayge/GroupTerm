* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* PGM-ID: C2500PAM
********************************************************************************
*                       MODIFICATION LOG
* USER DATE      TAG  REASON
* PAM  06022004  PM1  Added timestamp to AM screens.
* PAM  07192004  PM2  Use #SCR-CASH-CODE to ind combo type so registers
*                   can include it in the description. (later replaced)
* PAM  09032004  PM3  Added new transaction - FPFC to correct FPF
* DRW  09292004  DW4  Add Credit Card Processing
* DRW  11292004  DW5  Allow Addl pols after SO pols
* PAM  01052005  PM6  Do not allow accounting trans to pending mbrs
* DRW  01142005  DW7  Add SALP * (CIP) Cred Card Pmt
* DRW  03062005  DW8  Allow trans to AT Pending but not owners
* PAM  04142005  PM9  Added call to new FPF accounting maintenance
* DRW  04152005  DW10 Add face Amt & TPP linkage to CVALUSXX
* DRW  05122005  DW11 Add #CMBX to pass Combo code
* DRW  05122005  DW12 Add Suffix CSH/CC/ADJ to determine Cash-Code
* DRW  07152005  DW13 Make BADJ do ACCT TR not MAINT TR
* DRW  03022006  DW14 Show Undl addr CN's for selected trans
* DRW  03272006  DW15 allow salp '8' on mode 0 on multiple pols
* DRW  03272006  DW16 add W/T logic to RIDP tran
* DRW  05072006  DW17 Remove ALOT-SW logic
* DRW  09252006  DW18 Add CAP mbrs AIA? Sundard Info
* PAM  12272006  PM19 Added new Loan Write-off Transaction
* DRW  03302006  DW20 Fix Rec Lock Condition on NT 8000XX record
* DRW  04252007  DW21 Allow SAL? Code of "9" to Ind AIP Waiting (AIW)
* DRW  08092007  DW22 Separate Fixed and Variable loans in Batch TOTS
* DRW  08132007  DW23 Fix display of CAP SUB-Totals on Screen 2 thru 15 (MAP)
* DRW  10182007  DW24 Allow MIP(SALP 6) even tho Mode is not M/ CAP-BILL-DATE logic
* YAK  12052007  YK1  Remove hardcording for interest rates
*                     (use function to read GEN-TABLE instead)
* DRW 01/17/2008 DW25 Allow SALP Code of "L" with no existing loan
* DRW 01/30/2008 DW26 Add DUEA TRAN-CODE
* YAK 02/05/2008 YK2  Change code to use FUNCTION-INT-RATE
*                         to get rate from GEN-TABLE
* DRW 02/18/2008 DW27 Reject DUEP where Tran Amt exceeds DUES-BAL
* DRW 03/06/2008 DW28 Reject SALP L if not active & do RANK test & disallow delq pol
* DRW 04/03/2008 DW29 Force Entry of a Suffix (CSH/BRI etc)
* DRW 04/09/2008 DW30 Make APPD an Accounting Tran as well as a Maint tran
* DRW 04/10/2008 DW31 Remove ADCR/RDCR ALP CODE 'Y/N/I' processing
* DRW 04/11/2008 DW32 Make AAPD also do ACV Adjustment
* DRW 04/16/2008 DW33 Add Cash-Code "N" for NSF
* PAM 04/23/2008 PM34 Create LWOF transaction - added PAY/XFR types
* DRW 05/01/2008 DW35 Balanced transaction 1 screen ADJ Batches
* DRW 05/06/2008 DW36 CMB5 For Loan Write Offs replacing LWOF/LWOV
* DRW 05/09/2008 DW37 Create SUSP to simply create TR record for balancing
* DRW 05/15/2008 DW38 Do not include SAL?/STRT/FPFC/DUEA in DB/CR Batch Balnc
* DRW 05/20/2008 DW39 Fix ACV ADJ for APPD (999999.99)
* DRW 06/02/2008 DW40 Bypass 'AM ADJ' OOB test if CMB1 (already balanced)
* DRW 06/05/2008 DW41 ADD #did-rein to C2316PCI linkage
* DRW 06/06/2008 DW42 Chg ALOT AUTH to "A" if ALP amt changes
* DRW 06/24/2008 DW43 Make CMB1 CAP trans (CP **)
* PAM 07/28/2008 PM44 Allow SALP Code of 'E'
* DRW 08/19/2008 DW45 Allow SALF 'E' even if currently a CAP member
* PAM 10/24/2008 PM46 Removed DW45 - do not allow 'E' for CAP
* PAM 02/26/2009 PM47 Allow SALP Code of 'C'
* PAM 03/01/2009 PM48 Store suffix command for rebuild
* YAK 05/20/2009 YK3  Check Credit card info on the CC-INFO file
* PAM 06/18/2009 PM49 Added ACH processing - moved IADF/V AIAF/V from
*                     C2500PAM to C2505SAM
* PAM 07/18/2009 PM50 Added ACH phase II - CMB3/CMB4
* PAM 08/24/2009 PM51 Added LAPC letter for CMB5
* PAM 09/10/2009 PM52 Check for ACTIVE policies for MIP's
* YAK 04/04/2010 YK4  Restrict CMB4 for policies with Riders
*                     Restrict CMB4 for policies paying Dues with no due balance
*                     Display error message when CMB3 is used with no loan attached
* PAM 02/16/2011 PM53 Moved BADJ to C2505SAM for ACH processing
* PAM 04/12/2011 PM54 Added new transactions RTRC and ATRC (term refund debit/credit processing)
* PAM 04/28/2011 PM55 Fix CAP edit issue
* PAM 05/27/2011 PM56 Allow EIL to AIL and vice-versa
* vxt 05/28/2011 vt1  Add a new ALT-LP-DATE field for a CAP loans.
* vxt 09/30/2011 vt2  Add logic to prevent entering of CM3 for policies without loan.
* NGG 02/13/2012 NG1  Premier Services
* vxt 02/29/2012 vt3  add #did-call to the call of C2316PCI program.
* PAM 04/03/2012 PM57 When switching automatic loan payment types, update the entry date
*                     It triggers a new 120 days and also kicks off a new email
* YAK 06/28/2012 YK5  Change FIND(1) to read by ID-NUMBER (not MEMBER-KEY) to include
*                     inactive members
* bz1 07/25/2012      open process for STATUS = 'F'
* vxt 09/24/2012 vt4  Add LWOR transaction / ticket #1259/
* YAK 10/15/2012 YK6  Use function to identify Level Term II plans
* vxt 12/17/2012 vt5  Add E5 to #CAP-PGRADE area /ticket 1672/
* YAK 05/14/2013 YK7  Add #DID-DEAD when calling to C2316PCI
* NGG 10/15/2013 NG2  Address normalization
* vxt 11/12/2013 vt6  Mark the member as CAP if it was not marked and the CAP loan is issued.
* YAK 04/30/2014 YK8  Add EChecks processing
* TMT 06/11/2014 TT1  Contact Noramlization - Date of Birth
* vxt 12/12/2014 vt7  Change the logic for calculating of tot term ref amount
* vxt 04/14/2015 vt8  /Ticket 2973/
* vxt 06/24/2015 vt9  /Ticket 3627/
* YAK 06/25/2015 YK9  Add Rejection reason for NSF
* YAK 07/14/2015 YK10 Fix #LX problem for Dues reversal
*                     replace 9 occurrencies with C*Active-Segments
* vxt 09/03/2015 vt10 /Ticket 3788/
* TMT 01/23/2017 TT2  Multiple Cap project
* vxt 09/26/2017 vt11 /Ticket 5811/
* vxt 01/08/2018 vt12 /Ticket 6490/
********************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL  USING GONERLXX
LOCAL  USING C2500AAM /* SCREEN FIELDS
LOCAL  USING C2500LAM
LOCAL  USING CAPA0001  /* TT2
LOCAL  USING SVCA0003                        /* NG1
local  using CAPL0001                                                     /* vt 09/26/2017
LOCAL
1 #MSG                (A) DYNAMIC            /* NG1
* 1 #CURR-VAR-INT-RATE  (P2.3) INIT <8.10>   /* YK1
1 #CURR-VAR-INT-RATE  (P2.3)                 /* YK1
1 #UND-TBL   (N6/40)
*
1 #TRF-I     (I4)          /* PM54
1 #TOTAL-TRF (P7.2)        /* PM54
1 #DEBIT     (N7.2)        /* DW35
1 #CREDIT    (N7.2)
1 #LAST-CN   (N6)
1 #DIFF      (N7.2)
1 #DIFF-DISP (A12)
1 #ADJ-X     (I2)
*
1 #CAP-X     (I2)                  /* DW24
1 #RANK-DISPL   (P2)              /* DW28
1 #RANK-LIT     (A23)
1 #RANK-DISPLAY (A5)
1 #INVALID-L       (L)
1 #DUES           (N3.2)  /* DW26
*
1 #CSH   (L)   /* DW12
1 #CC    (L)   /* DW12
1 #ADJ   (L)   /* DW12
1 #NSF   (L)   /* DW33
1 #XFR   (L)   /* PM34
1 #PAY   (L)   /* PM34
1 #ECK   (L)   /* YK8
1 #TYPE  (A6)  /* DW12
1 #HAS-124    (L)  /* DW7
1 #APPROVED (L/15)                           /* PM44
1 #MINIMUM-CAP-AMOUNT (N6)                   /* PM44
1 #SUBTYPE    (A1)
1 #HOLD-DB-CR    (N7.2)
1 #LWOF-AMOUNT (P7.2/15)                     /* PM34
*
1 #AS-OF-DT   (N8)
1 #LOAN-BAL   (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT    (N7.2/9)
1 #ACC-INT-2  (N7.2/9)
1 #CSV        (N7.2/9)
1 #CVALUE     (N7.2/9)
1 #LVALUE     (N7.2/9)
1 #MCSV       (N7.2/9)
1 #DB         (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #FACE-AMT    (N7.2/9)                      /* DW10
1 #TPP         (N7.2/9)                      /* DW10
*
1 #LOAN-PRIN   (P7.2)                        /* PM51
1 #ACCUM-INT   (P5.2)                        /* PM51
1 #RPU-TEXT    (A78/16)                      /* PM51
1 #TOD-DISP    (A15)                         /* PM51
1 ST-MODE-V VIEW OF A-STATUS                 /* PM51
  2 MODE        (9)                           /* PM51
1 #CLERK-ABB-PASS      (A3)                  /* PM51
1 #CLERK-ABB-NAME-PASS (A20)                 /* PM51
*
1 #SVC-FEE-2P (N2.2) INIT <18.50>
1 #SVC-FEE-3P (N2.2) INIT <12.50>
1 #SVC-FEE-4P (N1.2) INIT <9.50>
1 #SVC-FEE-5P (N1.2) INIT <7.50>
1 #SVC-FEE-6P (N1.2) INIT <6.50>
1 #SVC-FEE-7P (N1.2) INIT <6.00>
1 #SVC-FEE-10 (N1.2) INIT <4.50>
1 #SVC-FEE-20 (N1.2) INIT <3.00>
1 #SVC-FEE-30 (N1.2) INIT <2.50>
1 #SVC-FEE-OL (N1.2) INIT <2.00>
1 #SVC-FEE-TM (N1.2) INIT <2.00>
*
* #LINKAGE TO C2505SAM BELOW
1 #DATE-OF-UPDATE    (N8)
1 #TIME-OF-UPDATE    (N7)
1 #ILN1  (I2)
1 #ILN2  (I2)
1 #UPDATE-MODE  (L)
1 #2ND-TIM-EDIT (L) /* TO INDICATE SUBSEQUENT TIME FOR EDIT
1 #DISP-MSG     (A75)
1 #TRANS-TABLE       (300)
  2 #TT-TRAN-APPLIED  (L)
  2 #TT-ID-NO         (P6)
  2 #TT-EFF-DT        (P8)
  2 #TT-ISS-DT        (P8)
  2 #TT-TRAN-CODE     (A4)
  2 #TT-TRAN-AMT      (P7.2)
  2 #TT-NAME          (A25)
  2 #TT-ADJ           (A1)
  2 #TT-ALP-CODE      (A1)
  2 #TT-AMT-FLAG      (A1)
  2 #TT-CASH-CODE     (A1)
*
1 #SG-TBL (15)
  2 #SG-CAT1 (A2)
  2 #SG-CAT2 (A2)
  2 #SG-AMT  (N6.2)
1 #CMBX    (A4)     /* DW11
*
1 #TOT-CMB3-PRN   (P5.2)
1 #TOT-CMB3-INT   (P5.2)
1 #TOT-CMB3-ADCR  (P5.2)
1 #TOT-CMB4-PREM  (P5.2)
1 #TOT-CMB4-DUES  (P5.2)
1 #TOT-CMB3-PRN-CAP   (P5.2)     /* DW22
1 #TOT-CMB3-INT-CAP   (P5.2)     /* DW22

* #LINKAGE TO C2505SAM ABOVE
*
1 #CMB4-ACTIVE-POLICY (L)
1 #SECURITY-ERROR     (L)
1 #LN-TRAN  (L)
1 #PR-TRAN  (L)
1 #LN     (P3)
1 #NAME             (A25)
1 #FOUND-SG         (L)
1 #REC-FND          (L)
1 #TOT-SG           (P6.2)
1 #SCR-BAR-COD-DT    (A8)
1 #SCR-TERMID        (A8)
1 #SCR-PAGE-NUM          (P2)
1 #SCR-BTCH-TOT      (N8.2/21)  /* TO STORE 20 + 1 SCREENS OF TOTALS
1 #SCR-BATCH-TOTAL   (N8.2)
1 #SCR-BATCH-TOTAL-CV (C)
1 #SCR-BTCH-PREM     (N8.2/21)
1 #SCR-BTCH-DUES     (N8.2/21)
1 #SCR-BTCH-INT      (N8.2/21)
1 #SCR-BTCH-INT-CAP  (N8.2/21)
1 #SCR-BTCH-PRIN     (N8.2/21)
1 #SCR-BTCH-PRIN-CAP (N8.2/21)
1 #SCR-BATCH-PREM    (N8.2)
1 #SCR-BATCH-DUES    (N8.2)
1 #SCR-BATCH-INT     (N8.2)
1 #SCR-BATCH-INT-CAP (N8.2)
1 #SCR-BATCH-PRIN    (N8.2)
1 #SCR-BATCH-PRIN-CAP (N8.2)
1 #BATCH-PREM    (N8.2)
1 #BATCH-DUES    (N8.2)
1 #BATCH-INT     (N8.2)
1 #BATCH-INT-CAP (N8.2)
1 #BATCH-PRIN    (N8.2)
1 #BATCH-PRIN-CAP (N8.2)
1 #SUB-BATCH-PREM    (N8.2)
1 #SUB-BATCH-DUES    (N8.2)
1 #SUB-BATCH-INT     (N8.2)
1 #SUB-BATCH-INT-CAP (N8.2)
1 #SUB-BATCH-PRIN    (N8.2)
1 #SUB-BATCH-PRIN-CAP (N8.2)
*
1 #MAX-ENTRIES       (P3) INIT <300>   /* MUST MATCH INDEX BELOW
*
1 #REBUILD-FUNCTION  (A1) /* I-INIT S-SAVE D-DELETE R-REBUILD
1 #RETURN-CD         (A1) /* E IF ERROR ON RETURN
1 #REB-NUM           (N1) /* SEQ NUM OF "AM" REBUILD NUM
*
1 #YYYYMMDD     (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM     (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY      (N4)
    3 #MM        (N2)
  2 #DD         (N2)
*
1 #WYYYYMMDD
  2 #WYYYY    (N4)
  2 #WMM      (N2)
  2 #WDD      (N2)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-N (N8)
*
1 #WMMDDYYYY
  2 #WMM    (N2)
  2 #WDD    (N2)
  2 #WYYYY  (N4)
1 REDEFINE #WMMDDYYYY
  2 #WMMDDYYYY-A (A8)
*
1 #TODAY-YYYYMMDD
  2 #TODAY-YYYY    (N4)
  2 #TODAY-MM      (N2)
  2 #TODAY-DD      (N2)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYYMMDD-N (N8)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYYMM      (N6)
*
1 #TODAY-MMDDYYYY
  2 #TODAY-MDY-MM   (N2)
  2 #TODAY-MDY-DD   (N2)
  2 #TODAY-MDY-YYYY (N4)
1 REDEFINE #TODAY-MMDDYYYY
  2 #TODAY-MMDDYYYY-A (A8)
*
1 #TR-LOG-FIL-MNT-DESC  (A125)
1 REDEFINE #TR-LOG-FIL-MNT-DESC
  2 #TR-L-BADJ-LB1 (A12)
  2 #TR-L-BADJ-AMT (A10)
  2 #TR-L-APPD-DT  (A16)
  2 #TR-L-BADJ     (A87)
1 REDEFINE #TR-LOG-FIL-MNT-DESC
  2 #TR-L-SALP-LB1 (A12)
  2 #TR-L-SALP-FLG (A2)
  2 #TR-L-SALP-LB2 (A8)
  2 #TR-L-SALP-AMT (A9)
  2 #TR-L-SALP-F1  (A94)
*
1 #I1    (I2)
1 #I2    (I2)
1 #I3    (I2)
1 #LX    (I2)
1 #ILNT  (I2)  /* INDEX OF TOP LINE
1 #POLI  (I2)
*
1 #EDIT-MODE   (L)
1 #FINISHED    (L)
1 #BAD-BATCH-MODE (L)
1 #BAD-BATCH-PHASE (L)
1 #FORCE-END-OF-BATCH (L) /* TO INDICATE ZERO BATCH FORCE END OF BATCH
1 #TRAN-ENTERED (L)
1 #REBUILD      (L)
1 #STORED-AM-SCREEN (L)
1 #POLICY-FOUND  (L)
1 #EXTRA-STOP   (L)
1 #FOUND-UNUPDATED-RECS (L)
1 #UPDATE-THE-REST      (L) /* ON AT END OF SCRN WHERE 1ST UNUPDAT FND
1 #BAR-CODE             (L)
1 #BAR-CODE-4           (L)
1 #BAR-CODE-5           (L)
1 #TRLOG-ID-NUMBER     (N6)
1 #TRLOG-TRAN-CODE     (A4)
1 #TRLOG-TRAN-AMT      (P7.2)
1 #ID-N6               (N6)
1 REDEFINE #ID-N6
  2 #ID-A6              (A6)
1 #TOTAL-AMT           (P8.2)
1 #TOTAL-AMT-DISP      (A11)
1 #SUB-TOTAL-AMT       (P8.2)
1 #TMP-TOTAL-AMT       (P8.2)
1 #TOTAL-MODAL-PREMIUM (P5.2)
1 #LAST-MON-MM         (P4)
1 #LAST-MON-YYYY       (P4)
1 #START-PROT-LINE     (P2)
1 #LAST-ID-READ        (P6)
1 #ISN                 (P8)
1 #OLD-BILL-ADJ        (P5.2)
1 #OLD-APPD            (P6.2)
1 #OLD-ALP-FLG         (A1)
1 #OLD-ALP-AMT         (P5.2)
1 #OLD-ALP-DATE        (N8)             /* vt1
1 #WORK-FREQ           (P2)
1 #TOT-MODE-G          (P5.2)
*
1 #INIT-ID    (A8)
1 REDEFINE #INIT-ID
  2 #TERM-ID  (A4)
  2 #TERM-FIL (A4)
1 #TERMID-LIT (A5)
1 #INVALID    (A1)
1 #SHOW-LPO        (L)
1 #HOLD-CUR-ACCT-UPDT (N8)
1 #CMB2-LOAN-AMT (P5.2)
1 #CMB3-4-PRIN    (P5.2)
1 #CMB3-4-INT     (P5.2)
1 #CMB3-4-ADCR    (P5.2)
1 #CMB3-4-FLNX    (L)
1 #LAST-ISS-DT    (P8)
1 #TIME           (A8)                                       /* PM1
1 #DID-LAPO      (L)  /* needed for link to C2316PCI         /* DW36
1 #DID-REIN      (L)  /* needed for link to C2316PCI         /* DW41
1 #FORCE-A       (L)                                         /* DW42
1 #LOAN-EXISTS   (L)                                         /* YK4
1 #RIDER-EXISTS  (L)                                         /* YK4
1 #DID-COLL      (L)                                         /* vt3
1 #DID-DEAD      (L)                                         /* YK7
*
1 #CAP-PGRADE (A3/13) CONST <'E5','E6','E7','E8','E9','O1','O1E','O2','O2E','O3','O3E','W1','W2'> /* PM55   /* vt5 add E5 .was a3/12
1 #CAP-RANK   (N6/6)  CONST < 215,235,255,495,515,535 >                                      /* PM55
1 #PAY-GRADE  (A3)               /* PM55
*
1 CT-V VIEW OF A-CONTACTS        /* PM55
  2 ID-NUMBER                     /* PM55
  2 RANK-ID                       /* PM55
*
1 RR-V VIEW OF A-RANK-REFERENCE  /* PM55
  2 RANK-ID                       /* PM55
  2 PAY-GRADE                     /* PM55
*
1 #WORK-DATE    (N8)                        /* vt2 \/
1 REDEFINE #WORK-DATE
  2 #WORK-DATE-YYYY (A4)
  2 #WORK-DATE-MM   (A2)
  2 #WORK-DATE-DD   (A2)
*
1 #ISSUE-DATE-A   (A8)
1 #J                (I2)
1 #SAVE-J           (I2)
*                                           /* vt2 /\
1 #WORK-DATE-c    (N8)                                 /* vt6 \/
1 REDEFINE #WORK-DATE-c
  2 #WORK-DATE-c-YYYYMM (n6)
  2 redefine #work-date-c-yyyymm
    3 #work-date-c-yyyy (n4)
    3 #work-date-c-mm   (n2)                             /* vt6 /\
*
1 DATE-OF-BIRTH     (N8.0)                  /* TT1
1 #ACTIVITY-TYPE         (A3)     /* vt8
1 #STATUS-TYPE           (A2)     /* vt8
* YK9 >
1 #LOOK-UP-KEY      (A7)
1 REDEFINE #LOOK-UP-KEY
  2 #KEY     (A4)
  2 #SUB-KEY (A3)
* < YK9
* Used for CAPN0001
1 #ADD (I4)    CONSTANT <1>           /* TT2
1 #UPDATE (I4) CONSTANT <2>
1 #HOLD-ALOT-LP-IND (A1/1:9)
1 #loan-status        (a1)                                     /* vt11
*
1 #replay             (a1)                                  /* vt12 01/19/2018
1 #cap-reinst         (L)                                   /* vt12 01/19/2018
1 #REINSTATE         (I4) CONST <4>                         /* vt12 01/19/2018
*
END-DEFINE
********************************************************************************
* INCLUDE GONERCXX
ON ERROR
  CALLNAT 'USR2001N' P_PARMS  /* Get the actual error line details
  #NAT-ERR-NBR     := P_ERROR_NUM
  #NAT-ERR-PGM     := *PROGRAM
  #NAT-ERR-OBJ     := P_ERROR_PROGRAM
  #NAT-ERR-LINE    := P_ERROR_LINE
  #BATCH-LITERAL-1 := #CGA-ID

**
  IF *DEVICE = 'BATCH'

    WRITE
      // ' ERROR DATE AND TIME' *TIMX (EM=MM/DD/YYYY' at 'HH:II:SS)
      /  '   EXECUTING PROGRAM' *PROGRAM
      /  '     ERROR IN OBJECT' #NAT-ERR-OBJ
      /  'NATURAL ERROR NUMBER' #NAT-ERR-NBR
      /  '          ERROR LINE' #NAT-ERR-LINE
      /  '      CURRENT RECORD' #BATCH-LITERAL-1 /* ASSIGN VALUES OF THE CURRENT RECORD TO
      /  '                    ' #BATCH-LITERAL-2 /* THESE VARIABLES TO WRITE AS PART OF ERROR MESSAGE.
      /  '                    ' #BATCH-LITERAL-3
    NEWPAGE
    WRITE ' '           /* TO INSURE ABOVE GETS PRINTED
  ELSE
    COMPRESS 'RECORD ' #LAST-ID-READ ' IN USE, TRY AGAIN LATER'
      #NAT-ERR-NBR #NAT-ERR-OBJ #NAT-ERR-PGM #NAT-ERR-LINE TO #NAT-ERR-MSG
    INPUT TEXT #NAT-ERR-MSG USING MAP 'G1000MXX'
    FETCH 'G1000PXX'
  END-IF
END-ERROR
*
MOVE *DATN TO #TODAY-YYYYMMDD-N
MOVE #TODAY-MM TO #TODAY-MDY-MM
MOVE #TODAY-DD TO #TODAY-MDY-DD
MOVE #TODAY-YYYY TO #TODAY-MDY-YYYY
MOVE *DATN TO #DATE-OF-UPDATE
MOVE *TIMN TO #TIME-OF-UPDATE
MOVE *TIME TO #TIME                                               /* PM1
MOVE *INIT-ID TO #INIT-ID
RESET #SCR-BATCH-TOTAL #SCR-PAGE-NUM #TOTAL-AMT #LAST-ID-READ
MOVE TRUE  TO #EDIT-MODE
MOVE FALSE TO #UPDATE-MODE
*
DEFINE WINDOW REJECT_CODE_WINDOW
  SIZE 6 * 50
  BASE 8 / 15
  TITLE 'Reject Code'
  FRAMED ON
*
define window is-it-cap                             /* vt12 \/  01/19/2018
  size 6*60
  base 10 / 20
  Title 'CAP LOAN REINSTATEMENT'
  framed on                                          /* vt12 /\ 01/19/2018
*
MOVE #CGA-CLERK TO #SCR-TERMID
IF #CGA-SCR-SUFFIX = 'FPF' /* PM9
  FETCH 'C2530PAM'
END-IF
*
IF #CGA-SCR-SUFFIX = 'REB'
  MOVE TRUE TO #REBUILD
  MOVE 'R' TO #REBUILD-FUNCTION
  PERFORM REBUILD-AM-PROCESSING
  #CGA-SCR-SUFFIX := #CGA-ORIG-SUFFIX                              /* PM48
END-IF
*
DECIDE ON FIRST VALUE #CGA-SCR-SUFFIX                              /* DW12
  VALUE 'BAR' MOVE TRUE TO #CSH MOVE '*Cash*' TO #TYPE
  VALUE 'BRI' MOVE TRUE TO #CSH MOVE '*Cash*' TO #TYPE
  VALUE 'CSH' MOVE TRUE TO #CSH MOVE '*Cash*' TO #TYPE
  VALUE 'ECK' MOVE TRUE TO #ECK MOVE '*EChk*' TO #TYPE             /* YK8
  VALUE 'CC'  MOVE TRUE TO #CC  MOVE '*CRCD*' TO #TYPE
  VALUE 'ADJ' MOVE TRUE TO #ADJ MOVE '*ADJ*'  TO #TYPE
  VALUE 'NSF' MOVE TRUE TO #NSF MOVE '*NSF*'  TO #TYPE             /* DW33
  VALUE 'XFR' MOVE TRUE TO #XFR MOVE '*XFR*'  TO #TYPE             /* PM34
  VALUE 'PAY' MOVE TRUE TO #PAY MOVE '*PAY*'  TO #TYPE             /* PM34
  VALUE 'REB' IGNORE
*  NONE IGNORE
  NONE
    MOVE 'On AM You must use extension ADJ, BRI, CC, CSH, ECK, FPF, NSF, XFR, PAY or REB'  /* PM34     YK8
      TO #DISP-MSG   /* DW29
    INPUT TEXT #DISP-MSG MARK *#CGA-SCR-SUFFIX USING MAP 'G1000MXX'
    FETCH 'G1000PXX'
END-DECIDE
*
#CURR-VAR-INT-RATE := FUNCTION-INT-RATE(<'RATE5AB'>)  /* YK2
*
*    BAR = old 3 field input  BRI = new 4 field input for issue-date
IF #CGA-SCR-SUFFIX = 'BAR' OR = 'BRI' /* ENTERING ONLY BAR-CODED INPUT
  MOVE '*' TO #CGA-SCR-COMMAND
  INPUT MARK *#SCR-BAR-COD-DT USING MAP 'C2501MAM'
*
  IF #CGA-SCR-COMMAND NE '*'
    FETCH 'G1000PXX'
  END-IF
*
  IF #SCR-BAR-COD-DT NE MASK (MMDDYYYY)
    REINPUT 'Date must be format "MMDDYYYY"'
      MARK *#SCR-BAR-COD-DT
  END-IF
*
  MOVE #SCR-BAR-COD-DT TO #SCR-EFF-DT (1)
*
  IF   (#SCR-EFF-DT-YYYY (1) = #TODAY-YYYY)
      AND (#SCR-EFF-DT-MM (1) = #TODAY-MM)
    IGNORE
  ELSE
    REINPUT 'Trans date must be current month and year'
      MARK *#SCR-BAR-COD-DT
  END-IF
*
  MOVE TRUE TO #BAR-CODE
  IF #CGA-SCR-SUFFIX = 'BAR'
    MOVE TRUE TO #BAR-CODE-4
  ELSE
    MOVE TRUE TO #BAR-CODE-5  /* must be for am w Issue-dt (5 fields)
  END-IF
END-IF
*

REPEAT UNTIL #SCR-BATCH-TOTAL NE 0
*
  PERFORM EDIT-APPLY
*
END-REPEAT /*(0559)
*
* * * * * * APPLY SCREENS  * * * * * * *
* YK9 >
IF #NSF
  #STATUS-TYPE := 'AM'
  IF #ACTIVITY-TYPE = ' '
    PERFORM GET-REJECTION-CODE
  END-IF
END-IF
* < YK9
RESET #SCR-BATCH-TOTAL
RESET #BATCH-PREM
  #BATCH-INT #BATCH-INT-CAP
  #BATCH-PRIN #BATCH-PRIN-CAP
  #BATCH-DUES
RESET #SCR-PAGE-NUM
RESET #TOTAL-AMT
RESET #LAST-ID-READ
MOVE FALSE TO #EDIT-MODE
MOVE TRUE  TO #UPDATE-MODE
*
REPEAT UNTIL #SCR-BATCH-TOTAL NE 0
*
  PERFORM EDIT-APPLY
*
END-REPEAT /*(0585)
*
FETCH 'G1000PXX'
*
********************************************************************************
DEFINE SUBROUTINE EDIT-APPLY
********************************************************************************
*
ADD 1 TO #SCR-PAGE-NUM
COMPUTE #ILNT = ((#SCR-PAGE-NUM - 1) * 15) + 1 /* COMPUTE TOP INDEX
RESET #SCR-LINES #SCR-BATCH-TOTAL #DISP-MSG #SCR-BATCH-TOTAL-CV
RESET            #TRAN-ENTERED
*
IF #ADJ                                 /* DW35
  MOVE (AD=P) TO #SCR-BATCH-TOTAL-CV
END-IF
*
IF #UPDATE-MODE OR #BAD-BATCH-MODE OR #REBUILD  /* FILL IN THE SCREEN
  MOVE #ILNT TO #ILN2         /* INITIALIZE TOP INDEX
  FOR #ILN1 1 TO 15
    MOVE #TT-TRAN-APPLIED (#ILN2) TO #SCR-TRAN-APPLIED (#ILN1)
    MOVE #TT-ID-NO        (#ILN2) TO #SCR-ID-SSN       (#ILN1)
    MOVE #TT-EFF-DT       (#ILN2) TO #WYYYYMMDD-N
    PERFORM FLIP-DATE
    MOVE #WMMDDYYYY-A             TO #SCR-EFF-DT       (#ILN1)
    MOVE #TT-ISS-DT       (#ILN2) TO #WYYYYMMDD-N
    PERFORM FLIP-DATE
    MOVE #WMMDDYYYY-A             TO #SCR-ISS-DT       (#ILN1)
    MOVE #TT-TRAN-CODE    (#ILN2) TO #SCR-TRAN-CODE    (#ILN1)
    MOVE #TT-TRAN-AMT     (#ILN2) TO #SCR-TRAN-AMT     (#ILN1)
    MOVE #TT-NAME         (#ILN2) TO #SCR-NAME         (#ILN1)
    MOVE #TT-ADJ          (#ILN2) TO #SCR-ADJ          (#ILN1)
    MOVE #TT-ALP-CODE     (#ILN2) TO #SCR-ALP-CODE     (#ILN1)
    MOVE #TT-AMT-FLAG     (#ILN2) TO #SCR-AMT-FLAG     (#ILN1)
    MOVE #TT-CASH-CODE    (#ILN2) TO #SCR-CASH-CODE    (#ILN1)
    ADD 1 TO #ILN2
  END-FOR /*(0608)
*
  IF #FORCE-END-OF-BATCH      /* DO NOT SHOW 99999999.99 SINCE
    RESET #SCR-BATCH-TOTAL    /* THIS WAS A FORCE END-OF-BATCH
  ELSE
    MOVE #SCR-BTCH-TOT  (#SCR-PAGE-NUM) TO #SCR-BATCH-TOTAL
  END-IF
END-IF /*(0606)
*
IF #EDIT-MODE
  IF #SCR-ID-SSN (1) = 0
    RESET #REBUILD
  END-IF
*
  IF (#ILNT + 14) GT #MAX-ENTRIES       /* DO NOT ALLOW ENTRY AFTER
    COMPUTE #START-PROT-LINE = (#MAX-ENTRIES - #ILNT) + 2  /* MAX
    PERFORM PROTECT-LINES                                  /* ENTRIES
  END-IF
*
  RESET #SCR-BATCH-PREM
  RESET #SCR-BATCH-INT #SCR-BATCH-INT-CAP
  RESET #SCR-BATCH-PRIN #SCR-BATCH-PRIN-CAP
  RESET #SCR-BATCH-DUES #APPROVED (*)                      /* PM44
*
  IF #BAD-BATCH-MODE
    MOVE 'CORRECT BATCH IMBALANCE' TO #DISP-MSG
  ELSE
    IF #BAR-CODE-4
      COMPRESS 'ENTER' #TYPE 'BAR-CODED ACCT TRANS w/o ISS-DT'
        INTO #DISP-MSG
    ELSE
      IF #BAR-CODE-5
        COMPRESS 'ENTER' #TYPE 'BAR-CODED ACCT TRANS with Iss-dt'
          INTO #DISP-MSG
      ELSE
        COMPRESS 'ENTER' #TYPE 'ACCOUNTING TRANSACTIONS' INTO #DISP-MSG
*
        IF #ADJ                            /* DW35
          COMPRESS #DISP-MSG '-1 Screen Only- No Batch Total' INTO #DISP-MSG
        END-IF
      END-IF
    END-IF
  END-IF
ELSE
  MOVE 1 TO #START-PROT-LINE /* PROTECT FIELDS
  PERFORM PROTECT-LINES      /* FROM REENTRY
*
  FOR #I1 #START-PROT-LINE TO 15
    RESET #SCR-TRAN-CODE-CV (#I1)
    RESET #SCR-ISS-DT-CV    (#I1)
    RESET #SCR-NAME-CV      (#I1)
    RESET #SCR-ALP-CODE-CV  (#I1)
  END-FOR
*
  MOVE #SCR-BTCH-PREM (#SCR-PAGE-NUM) TO #SCR-BATCH-PREM
  MOVE #SCR-BTCH-INT  (#SCR-PAGE-NUM) TO #SCR-BATCH-INT
  MOVE #SCR-BTCH-INT-CAP (#SCR-PAGE-NUM) TO #SCR-BATCH-INT-CAP
  MOVE #SCR-BTCH-PRIN (#SCR-PAGE-NUM) TO #SCR-BATCH-PRIN
  MOVE #SCR-BTCH-PRIN-CAP (#SCR-PAGE-NUM) TO #SCR-BATCH-PRIN-CAP
  MOVE #SCR-BTCH-DUES (#SCR-PAGE-NUM) TO #SCR-BATCH-DUES
*
  MOVE (AD=P) TO #SCR-BATCH-TOTAL-CV
*
  IF #SCR-BATCH-TOTAL NE 0
    MOVE
      'PRINT SCREEN, PRESS ENTER TO APPLY, AND TRANS WILL BE  COMPLETED'
      TO #DISP-MSG
  ELSE
    MOVE 'PRINT SCREEN AND PRESS ENTER TO APPLY THIS SCREEN' TO #DISP-MSG
  END-IF
END-IF /*(0634)
*
IF #BAR-CODE-4
  MOVE (AD=P) TO #SCR-ISS-DT-CV (*)
END-IF
*
IF #BAR-CODE
  MOVE (AD=P) TO #SCR-EFF-DT-CV (*)
  MOVE (AD=P) TO #SCR-NAME-CV   (*)
  MOVE (AD=P) TO #SCR-ADJ-CV    (*)
  MOVE (AD=P) TO #SCR-ALP-CODE-CV (*)
  MOVE (AD=P) TO #SCR-AMT-FLAG-CV (*)
  MOVE (AD=P) TO #SCR-CASH-CODE-CV (*)
END-IF
*
MOVE '*' TO #CGA-SCR-COMMAND
RESET       #CGA-SCR-ID
RESET       #CGA-SCR-SUFFIX
*
IF #BAR-CODE
  INPUT TEXT #DISP-MSG MARK *#SCR-ID-SSN (1) USING MAP 'C2502MAM'
ELSE
  INPUT TEXT #DISP-MSG MARK *#SCR-ID-SSN (1) USING MAP 'C2500MAM'
END-IF
*
IF #CGA-SCR-COMMAND = '##' OR = '..' OR =  '%%' /* ONLY WAY OUT OF AM
  BACKOUT TRANSACTION     /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*
  IF #STORED-AM-SCREEN AND (#CGA-SCR-COMMAND NE '%%')
    MOVE 'D' TO #REBUILD-FUNCTION
    PERFORM REBUILD-AM-PROCESSING
  END-IF
*
  FETCH 'G1000PXX'
END-IF
*
* * EDIT SCREEN * * * * * *
*
RESET #SUB-TOTAL-AMT
  #SUB-BATCH-PREM
  #SUB-BATCH-INT #SUB-BATCH-INT-CAP
  #SUB-BATCH-PRIN #SUB-BATCH-PRIN-CAP
  #SUB-BATCH-DUES
  #LAST-ID-READ
  #DEBIT #CREDIT   /* DW35

*
* IF NOT #UPDATE-MODE        /* PM34/DW36
*   RESET #LWOF-AMOUNT (*)   /* PM34
* END-IF                     /* PM34
* CALLNAT 'CLWOFSAM'         /* PM19
*    #SCR-LINES
*    #LWOF-AMOUNT (*)        /* PM34/DW36
*
MOVE #ILNT TO #ILN2 /* INITIALIZE TOP INDEX
FOR #ILN1 1 TO 15
  IF #SCR-EFF-DT (#ILN1) = '@'
    MOVE #TODAY-MMDDYYYY-A TO #SCR-EFF-DT (#ILN1)
  END-IF
*
  IF #BAR-CODE
    IF #SCR-TRAN-AMT (#ILN1) NE 0
      MOVE #SCR-BAR-COD-DT TO #SCR-EFF-DT (#ILN1)
    END-IF
*
    IF   (#SCR-ID-SSN    (#ILN1) = 0)  /* if info was removed by user
        AND (#SCR-TRAN-AMT  (#ILN1) = 0)
        AND (#SCR-TRAN-CODE (#ILN1) = ' ')
      RESET #SCR-EFF-DT (#ILN1)
      RESET #SCR-ISS-DT (#ILN1)
      RESET #SCR-NAME   (#ILN1)
    END-IF
  END-IF
*
  IF (#ILN1 NE 1)
      AND ((#SCR-TRAN-AMT (#ILN1) NE 0)
      OR  (#SCR-TRAN-CODE (#ILN1) = 'FLNF' OR = 'FLNV' OR = 'FLNP')
      OR ((#SCR-TR-CD-3 (#ILN1 - 1) = 'CMB')  /* COMBO Trans
      AND (#SCR-ID-SSN (#ILN1) NE 0)))
*
    IF #SCR-ID-SSN (#ILN1) = 0
      MOVE #SCR-ID-SSN (#ILN1 - 1) TO #SCR-ID-SSN (#ILN1)
    END-IF
*
    IF #SCR-EFF-DT (#ILN1) = ' '
      MOVE #SCR-EFF-DT (#ILN1 - 1) TO #SCR-EFF-DT (#ILN1)
    END-IF
*
    IF #SCR-TRAN-CODE (#ILN1) = ' '
      MOVE #SCR-TRAN-CODE (#ILN1 - 1) TO #SCR-TRAN-CODE (#ILN1)
    END-IF
*
    IF #SCR-NAME (#ILN1) = ' ' AND NOT #BAR-CODE
      MOVE #SCR-NAME (#ILN1 - 1) TO #SCR-NAME (#ILN1)
    END-IF
  END-IF /*(0769)
*
  IF #EDIT-MODE
    MOVE #SCR-EFF-DT (#ILN1) TO #WMMDDYYYY-A
    PERFORM FLIP-DATE-TO-YYYYMMDD
    MOVE #WYYYYMMDD-N TO #TT-EFF-DT (#ILN2)   /* SAVE CONVERTED DATE
*
    MOVE #SCR-ISS-DT (#ILN1) TO #WMMDDYYYY-A
    PERFORM FLIP-DATE-TO-YYYYMMDD
    MOVE #WYYYYMMDD-N TO #TT-ISS-DT (#ILN2)   /* SAVE CONVERTED DATE
  END-IF
*
  IF   (#SCR-ID-SSN    (#ILN1) = 0)     /* BYPASS BLANK LINES
      AND (#SCR-EFF-DT    (#ILN1) = ' ')
      AND (#SCR-ISS-DT    (#ILN1) = ' ')
      AND (#SCR-TRAN-CODE (#ILN1) = ' ')
      AND (#SCR-TRAN-AMT  (#ILN1) = 0)
      AND (#SCR-NAME      (#ILN1) = ' ')
      AND (#SCR-ADJ       (#ILN1) = ' ')
      AND (#SCR-ALP-CODE  (#ILN1) = ' ')
      AND (#SCR-CASH-CODE (#ILN1) = ' ')
    ADD 1 TO #ILN2
    ESCAPE TOP /*(0750)
  END-IF
*
  MOVE TRUE TO #TRAN-ENTERED
*
  IF   (#EDIT-MODE)                            /* DO NOT REREAD RECORD
      AND (#SCR-ID-SSN (#ILN1) = #LAST-ID-READ)   /* IF SAME AS LAST
    IGNORE
  ELSE
    IF #SCR-ID-SSN (#ILN1) GT 999999
      MOVE FALSE TO #REC-FND
      FIND ST-V WITH SSN = #SCR-ID-SSN (#ILN1)
        IF  (ST-V.PROCESS-IND = 'S')
            OR ((ST-V.PROCESS-IND = 'C')  /* PM6
            AND (INTRO-FLAG NE 'A'))     /* DM8
          ESCAPE TOP
        END-IF
*
        MOVE ST-V.ID-NUMBER TO #SCR-ID-SSN (#ILN1)
          #LAST-ID-READ     /* FOR LOAN PAYOFF CASE
        MOVE *ISN TO #ISN                   /* SAVE ISN
        MOVE TRUE TO #REC-FND
        ESCAPE BOTTOM
      END-FIND /*(0823)
*
      IF NOT #REC-FND
        IF #UPDATE-MODE
          BACKOUT TRANSACTION
        END-IF
        REINPUT 'SSN not found'
          MARK *#SCR-ID-SSN (#ILN1)
      END-IF
    ELSE
      MOVE #SCR-ID-SSN (#ILN1) TO #ID-N6
*      FIND (1) ST-V WITH MEMBER-KEY = #ID-A6         /* YK5
      FIND (1) ST-V WITH ID-NUMBER = #ID-N6           /* YK5
        IF NO RECORDS FOUND
          IF #UPDATE-MODE
            BACKOUT TRANSACTION
          END-IF
          REINPUT 'ID not found'
            MARK *#SCR-ID-SSN (#ILN1)
        END-NOREC
*
        IF  (ST-V.PROCESS-IND = 'S')
            OR ((ST-V.PROCESS-IND = 'C')  /* PM6
            AND (INTRO-FLAG NE 'A'))     /* DM8
          IF #UPDATE-MODE
            BACKOUT TRANSACTION
          END-IF
          REINPUT 'ID not found'
            MARK *#SCR-ID-SSN (#ILN1)
        END-IF
*
        MOVE ST-V.ID-NUMBER TO #LAST-ID-READ     /* FOR LOAN PAYOFF CASE
        MOVE *ISN TO #ISN                   /* SAVE ISN
      END-FIND /*(0771)
    END-IF
*
    GET ST-V #ISN
    MOVE DEBIT-CREDIT-AMT TO #HOLD-DB-CR
  END-IF /*(0817)
*
**** do new security check
*
  CALLNAT 'GSECURXX'
    ST-V.ID-NUMBER
    #CGA-CLERK
    #SECURITY-ERROR
*
  IF #SECURITY-ERROR
    IF #UPDATE-MODE
      BACKOUT TRANSACTION
    END-IF
    REINPUT 'Security Violation - Member is linked to user'
      MARK *#SCR-ID-SSN (#ILN1)
  END-IF
**** end of new security check
*
  PERFORM GET-SVC-DUES                   /* NG1
  RESET #LN-TRAN #PR-TRAN
  MOVE 1 TO #LX
  IF (#SCR-TR-CD-3 (#ILN1) = 'SAL' OR = 'INT' OR = 'INP' OR = 'IAD'
      OR = 'AIA' OR = 'PRN' OR = 'CAP' OR = 'PAD' OR = 'CAD'
      OR = 'FLN')
      OR (#SCR-TRAN-CODE (#ILN1) = 'CMB1' OR = 'CMB2')
      OR ((#SCR-TRAN-CODE(#ILN1) = 'CMB3') AND (#SCR-ISS-DT(#ILN1) NE ' '))
      OR ((#SCR-TRAN-CODE(#ILN1) = 'CMB5')                 /* DW36
      AND (#SCR-ISS-DT(#ILN1) NE ' '))
      OR (#SCR-TR-CD-2 (#ILN1) = '33' OR = '44' OR = '93') /* PM50
    MOVE TRUE TO #LN-TRAN
  END-IF
*
  IF  (#SCR-TR-CD-3 (#ILN1) = 'PRE' OR = 'RID' OR = 'FPF' OR = 'FPD'
      OR = 'FPR' OR = 'BAD')
      OR (#SCR-TR-CD-2 (#ILN1) = '11' OR = '22' OR = '55' OR = '66'
      OR = '88' OR = '99')
    MOVE TRUE TO #PR-TRAN
  END-IF
*
  IF #LN-TRAN OR #PR-TRAN
    IF #SCR-ISS-DT (#ILN1) = ' '
      RESET #LN
      FOR #I1 1 TO 9
*     FOR #I1 1 TO C*ACTIVE-SEGMENTS                         /* YK10
        IF STATUS (#I1) NE 'D'   /* added 5/14/2002
          ESCAPE TOP
        END-IF
*
        MOVE ISSUE-DATE (#I1) TO #WYYYYMMDD-N
        PERFORM FLIP-DATE /* output is #wmmddyyyy-a
        IF (#LN-TRAN
            AND (((#SCR-TR-CD-LAST-1 (#ILN1)
            = 'F' OR = '1' OR = '2')
            AND (X-LOAN-DATE (#I1) NE 0))  /* CMB1/CMB2 is assumed fix
            OR  ((#SCR-TR-CD-LAST-1 (#ILN1) = 'V')
            AND (X-LOAN-DATE-2 (#I1) NE 0))))
            OR  #PR-TRAN
          ADD 1 TO #LN
          MOVE #WMMDDYYYY-A     TO #SCR-ISS-DT (#ILN1)
          MOVE ISSUE-DATE (#I1) TO #TT-ISS-DT (#ILN2)
        END-IF
      END-FOR
*
      IF #LN NE 1
        RESET #SCR-ISS-DT (#ILN1) #TT-ISS-DT (#ILN2)
      END-IF
    END-IF
*
    IF #SCR-ISS-DT (#ILN1) = ' '
      IF #BAR-CODE-4
        REINPUT 'Issue Date must be entered on this Tran Code'
          MARK *#SCR-ID-SSN (#ILN1)
      ELSE
        REINPUT 'Issue Date must be entered on this Tran Code'
          MARK *#SCR-ISS-DT (#ILN1)
      END-IF
    END-IF
*
    IF #SCR-ISS-DT (#ILN1) NE MASK (MMDDYYYY)
      REINPUT 'Date must be format "MMDDYYYY"'
        MARK *#SCR-ISS-DT (#ILN1)
    END-IF
*
    FOR #LX 1 TO 9
*   FOR #LX 1 TO C*ACTIVE-SEGMENTS                     /* YK10
      IF (NOT STATUS(#LX) = 'D' OR = 'E' OR = 'F')
          OR ((#SCR-TR-CD-3 (#ILN1) = 'SAL') AND (STATUS (#LX) = 'E'))
          OR ((ST-V.CONV-DURATION (#LX) NE 999) AND #LN-TRAN
          AND (NOT #SCR-ALP-CODE (#ILN1) = 'L' OR = '0' OR = 'E' OR = 'C') /* DW25 PM44 PM47
*         AND ((PLAN (#LX) = 'RT' OR = 'LT')                               /* YK6
*         OR  (PLAN-A1 (#LX) GE 'U') AND (PLAN-A1 (#LX) LE 'Z')))          /* YK6
          AND FUNCTION-TERM-POLICY(<ST-V.PLAN(#LX)>))                      /* YK6
        ESCAPE TOP
      END-IF
*
      IF ST-V.ISSUE-DATE (#LX) = #TT-ISS-DT (#ILN2)
        MOVE #LX TO #SCR-ISS-DT-X (#ILN1)
        ESCAPE BOTTOM
      END-IF
    END-FOR
*
    IF #LX GT 9
      IF #SCR-ISS-DT (#ILN1) NE ' '
        REINPUT 'Issue Date not found'
          MARK *#SCR-ISS-DT (#ILN1)
      END-IF
*
      MOVE 1 TO #LX    /* DW5
    END-IF
  END-IF
*
  IF   (#SCR-TRAN-CODE (#ILN1) = 'CMB5')           /* DW36
      AND (#SCR-TRAN-AMT (#ILN1) NE 0)
      AND #EDIT-MODE      /* Amt will be filled in after edit mode
    REINPUT 'Tran Amt Must be Zero for CMB5'
      MARK *#SCR-TRAN-AMT (#ILN1)
  END-IF
*
  IF   (#SCR-TRAN-CODE (#ILN1) = 'CMB1' OR = 'CMB2')
      AND (ST-V.CONV-DURATION (#LX) NE 999)
    REINPUT 'Must be CAP policy'
      MARK *#SCR-ISS-DT (#ILN1)
  END-IF
*
  IF   (#SCR-TRAN-CODE (#ILN1) = MASK ('CMB'))     /* DW5
      AND (PLAN (1) = 'SO')
    REINPUT 'CMBx tran invalid with SO Mbr'
      MARK *#SCR-TRAN-CODE (#ILN1)
  END-IF
*
  IF PLAN (1) = '2SW' OR = '3SW' OR = '2DW' OR = '3DW'
    MOVE NAME-SP TO #NAME
  ELSE
    MOVE NAME TO #NAME
  END-IF
*
  IF #SCR-TRAN-CODE (#ILN1) = 'RTRC'                                  /* PM54
    RESET #TOTAL-TRF                                                  /* PM54
    FOR #TRF-I 1 TO 99                                                /* PM54
*       IF ST-V.OUT-TERM-REF-AMOUNT (#TRF-I) = 0                        /* PM54       /* vt7 \/
*           AND ST-V.OUT-TERM-REF-YEAR (#TRF-I) = 0                        /* PM54
*           AND ST-V.OUT-TERM-REF-ENTRY-DATE (#TRF-I) = 0                  /* PM54
*         ESCAPE BOTTOM                                                /* PM54
*       END-IF                                                          /* PM54       /* vt7 /\
*
      if ST-V.OUT-TERM-REF-AMOUNT (#TRF-I) ne 0                                       /* vt7
        ADD ST-V.OUT-TERM-REF-AMOUNT (#TRF-I) TO #TOTAL-TRF             /* PM54
      end-if                                                                          /* vt7
    END-FOR                                                           /* PM54
*
    IF #SCR-TRAN-AMT (#ILN1) NE #TOTAL-TRF                            /* PM54
      REINPUT 'Term refund reduction does not match amount available' /* PM54
        MARK *#SCR-TRAN-CODE (#ILN1)                                    /* PM54
    END-IF                                                            /* PM54
  END-IF                                                              /* PM54
*
  IF   (#SCR-TRAN-CODE (#ILN1) = 'CMB1')
      AND (#SCR-TRAN-AMT (#ILN1) = 0)
      AND (ST-V.X-LOAN-AMOUNT (#LX) NE 0)
      AND (ST-V.INTRO-FLAG = 'B' OR = 'C' OR = 'P' OR = 'Q')
    RESET #TOT-MODE-G
    FOR #I1 1 TO 9
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                 /* YK10
      IF (ST-V.MODE (#I1) = 'G')
          AND (ST-V.PAY-STATUS (#I1) LE '40')
        COMPUTE #TOT-MODE-G = #TOT-MODE-G + (ST-V.ANNUAL-PREM(#I1) / 12)
      END-IF
    END-FOR
*
    COMPUTE #SCR-TRAN-AMT (#ILN1) = ST-V.ALOT-AMT - #TOT-MODE-G
*
    FOR #I1 1 TO 9   /* find 1st active pol
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                 /* YK10
      IF STATUS (#I1) = 'D'
        ESCAPE BOTTOM
      END-IF
    END-FOR
*
    IF #I1 GT 9
      MOVE 1 TO #I1
    END-IF
*
    IF (ISSUE-DATE (#I1) GE 19970101)
        AND (MONTH-ALLOC-AMT (#I1) NE 999.99)
        AND (ST-V.INTRO-FLAG = 'B' OR = 'C') /* INS-ONLY (P/Q) HAS NO DUES
      DECIDE ON FIRST VALUE PLAN (#I1)
        VALUE '2PF' SUBTRACT #SVC-FEE-2P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '3PF' SUBTRACT #SVC-FEE-3P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '4PF' SUBTRACT #SVC-FEE-4P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '5PF' SUBTRACT #SVC-FEE-5P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '6PF' SUBTRACT #SVC-FEE-6P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '7PF' SUBTRACT #SVC-FEE-7P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '8PF' SUBTRACT #SVC-FEE-7P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '9PF' SUBTRACT #SVC-FEE-7P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '7P'  SUBTRACT #SVC-FEE-7P FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '20P' SUBTRACT #SVC-FEE-20 FROM #SCR-TRAN-AMT (#ILN1)
        VALUE '30P' SUBTRACT #SVC-FEE-30 FROM #SCR-TRAN-AMT (#ILN1)
        VALUE 'OL'  SUBTRACT #SVC-FEE-OL FROM #SCR-TRAN-AMT (#ILN1)
*       VALUE 'RT'  SUBTRACT #SVC-FEE-TM FROM #SCR-TRAN-AMT (#ILN1)   /* YK6
*       VALUE 'LT'  SUBTRACT #SVC-FEE-TM FROM #SCR-TRAN-AMT (#ILN1)   /* YK6
        NONE        IGNORE
      END-DECIDE
*
*     IF (PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z')        /* YK6
      IF FUNCTION-TERM-POLICY(<PLAN(#I1)>)                        /* YK6
        SUBTRACT #SVC-FEE-TM FROM #SCR-TRAN-AMT  (#ILN1)
      END-IF
*
      IF PLAN (#I1) = MASK (NN'F')
        IF PLAN (#I1) LE '19F'
          SUBTRACT #SVC-FEE-10 FROM #SCR-TRAN-AMT (#ILN1) ELSE
          IF PLAN (#I1) LE '29F'
            SUBTRACT #SVC-FEE-20 FROM #SCR-TRAN-AMT (#ILN1) ELSE
            IF PLAN (#I1) LE '34F'
              SUBTRACT #SVC-FEE-30 FROM #SCR-TRAN-AMT (#ILN1) ELSE
              SUBTRACT #SVC-FEE-OL FROM #SCR-TRAN-AMT (#ILN1)
            END-IF END-IF END-IF
      END-IF
*
    END-IF
  END-IF
*
  IF #SCR-TRAN-CODE (#ILN1) = 'CMB2'
    IF  (X-LOAN-AMOUNT (#LX) GT 5.00)
        OR (NOT INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
      REINPUT 'Cap loan amt must be less than $5.00'
        MARK *#SCR-TRAN-CODE (#ILN1)
    END-IF
  END-IF
*
  IF #SCR-ISS-DT(#ILN1) NE ' '
    IF #SCR-TRAN-CODE (#ILN1) = 'CMB3'                               /* vt2 \/
      F1. FOR #J 1 TO 9
*     FOR #J 1 TO C*ACTIVE-SEGMENTS                                /* YK10
        MOVE ISSUE-DATE(#J) TO #WORK-DATE
        COMPRESS #WORK-DATE-MM #WORK-DATE-DD #WORK-DATE-YYYY INTO #ISSUE-DATE-A
          LEAVING NO
        IF (#ISSUE-DATE-A  EQ #SCR-ISS-DT(#ILN1))
            AND( X-LOAN-AMOUNT(#J) NE 0 OR X-LOAN-AMOUNT-2(#J) NE 0 )
          MOVE #J  TO #SAVE-J
          ESCAPE BOTTOM (F1.)
        END-IF
      END-FOR
      IF #SAVE-J EQ 0
        REINPUT 'Cannot do CMB3 for a policy that doesn''t have a loan'
          MARK *#SCR-ISS-DT(#ILN1)
      END-IF
    END-IF
  END-IF                                                         /* vt2 /\
*
* Restrict CMB3 for accounts with no loan
*
  IF #SCR-TRAN-CODE (#ILN1) = 'CMB3'                              /* YK4
    RESET #LOAN-EXISTS                                            /* YK4
    F2. FOR #I1 1 TO 9                                            /* YK4
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                                /* YK10
      IF( X-LOAN-AMOUNT(#I1) NE 0 OR X-LOAN-AMOUNT-2(#I1) NE 0 )  /* YK4
        #LOAN-EXISTS := TRUE                                      /* YK4
        ESCAPE BOTTOM  (F2.)                                      /* YK4
      END-IF                                                      /* YK4
    END-FOR                                                       /* YK4
    IF (NOT #LOAN-EXISTS )                                        /* YK4
      REINPUT 'Member does not have Loan balance - do not use CMB3'
        MARK *#SCR-ID-SSN (#ILN1)                                 /* YK4
    END-IF                                                        /* YK4

  END-IF
*
  IF #SCR-TRAN-CODE (#ILN1) = 'CMB4'
    IF #SCR-ISS-DT (#ILN1) NE ' '
      REINPUT 'Please remove issue date for this transaction code'
        MARK *#SCR-ISS-DT (#ILN1)
    END-IF
*
    IF   (#SCR-EFF-DT-YYYY (#ILN1) = #TODAY-YYYY)
        AND (#SCR-EFF-DT-MM (#ILN1) = #TODAY-MM)
      IGNORE
    ELSE
      REINPUT 'Trans Date must be current month and year'
        MARK *#SCR-EFF-DT (#ILN1)
    END-IF
*
* Restrict CMB4 for policies with Rider                           /* YK4
    RESET #RIDER-EXISTS                                           /* YK4
    FOR #I1 1 TO 9                                                /* YK4
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                                /* YK10
      IF RID-PLAN (#I1) NE ' '                                    /* YK4
        #RIDER-EXISTS := TRUE                                     /* YK4
        ESCAPE BOTTOM                                             /* YK4
      END-IF                                                      /* YK4
    END-FOR                                                       /* YK4
    IF #RIDER-EXISTS                                              /* YK4
      REINPUT 'Member has a policy with a Rider - do not use CMB4'
        MARK *#SCR-ID-SSN (#ILN1)                                 /* YK4
    END-IF                                                        /* YK4
*
* Restrict CMB4 for policies paying Dues with no Dues-balance     /* YK4
*   Find 1st active policy
    EXAMINE STATUS(*) FOR 'D' INDEX #I1                           /* YK4
    IF #I1 = 0 THEN #I1 := 1 END-IF                               /* YK4
    CALLNAT 'GDUESSXX' ST-V.ID-NUMBER #I1 #DUES                   /* YK4
    IF #DUES NE 0 AND ST-V.DUES-BALANCE = 0                       /* YK4
      REINPUT 'Member does not have Dues balance - do not use CMB4'
        MARK *#SCR-ID-SSN (#ILN1)                               /* YK4
    END-IF                                                        /* YK4
*                                                        NG1 Start
    PERFORM GET-SVC-DUES
    IF PARM-SVC.SVC-AMOUNT-DUE > 0
      REINPUT 'Member has Premier Services - do not perform CMB4'
    END-IF
*                                                        NG1 End
    RESET #CMB4-ACTIVE-POLICY
    FOR #I1 1 TO 9
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                       /* YK10
      IF ISSUE-DATE (#I1) = 0
          OR STATUS (#I1) NE 'D'
        ESCAPE TOP
      END-IF
      IF ((MODE (#I1) = 'A' OR = 'S' OR = 'Q' OR = 'M'
          OR = '0' OR = '1' OR = '2' OR = '4')   /* DW4
          AND (PAY-STATUS (#I1) LE '40'))
          OR ((MODE (#I1) = 'G')
          AND (PAY-STATUS (#I1) LE '21'))
*
        IF ((MODE (#I1) = 'G') AND (PAY-STATUS (#I1) = '20' OR = '12'))
            OR ((MODE (#I1) = 'A' OR = 'S' OR = 'Q' OR = 'M'
            OR = '0' OR = '1' OR = '2' OR = '4')   /* DW4
            AND (PAY-STATUS (#I1) = '12'))
          REINPUT 'Member has a policy with a FPF - do not use CMB4'
            MARK *#SCR-ID-SSN (#ILN1)
        END-IF
*
        IF PAID-TO-DATE-YYYY (#I1) LT PAID-UP-DATE-YYYY (#I1)
            OR (PAID-TO-DATE-YYYY (#I1) = PAID-UP-DATE-YYYY (#I1)
            AND PAID-TO-DATE-MM (#I1) LT PAID-UP-DATE-MM (#I1))
          MOVE TRUE TO #CMB4-ACTIVE-POLICY
        END-IF
      END-IF
    END-FOR
*
    IF NOT #CMB4-ACTIVE-POLICY
      REINPUT 'No direct bill non-paid up policies exist for payment'
        MARK *#SCR-ID-SSN (#ILN1)
    END-IF
  END-IF
*
  DECIDE ON FIRST #SCR-TR-CD-2 (#ILN1)
    VALUE '11' MOVE 'PREP' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '22' MOVE 'FPFP' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '33' MOVE 'INTF' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '44' MOVE 'INTV' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '55' MOVE 'DUEP' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '66' MOVE 'FPDP' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '77' MOVE 'ADCR' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '88' MOVE 'RIDP' TO #SCR-TRAN-CODE (#ILN1)
    VALUE '93' MOVE 'CMB3' TO #SCR-TRAN-CODE (#ILN1)   /* PM50
    VALUE '94' MOVE 'CMB4' TO #SCR-TRAN-CODE (#ILN1)   /* PM50
    VALUE '99' MOVE 'FPRP' TO #SCR-TRAN-CODE (#ILN1)
    NONE  IGNORE
  END-DECIDE
*
  IF   #BAR-CODE
      AND (#SCR-TRAN-CODE (#ILN1) = 'ADCR' OR = 'RDCR')
    MOVE 'N' TO #SCR-ALP-CODE (#ILN1)
  END-IF
*
  IF (X-LOAN-DATE (#LX) = 0) AND (X-LOAN-DATE-2 (#LX) NE 0) /*1 var loan
    IF #SCR-TRAN-CODE (#ILN1) = 'SALP' OR = 'INTP' OR = 'INPP'
        OR = 'IADJ' OR = 'AIAJ' OR = 'PRNP' OR = 'CAPI'
        OR = 'PADJ' OR = 'CADJ' OR = 'FLNP'
      MOVE 'V' TO #SCR-TR-CD-LAST-1 (#ILN1)
    END-IF
  END-IF
*
  IF (X-LOAN-DATE(#LX) NE 0) AND (X-LOAN-DATE-2(#LX) = 0) /* 1 fixd loan
    IF #SCR-TRAN-CODE (#ILN1) = 'SALP' OR = 'INTP' OR = 'INPP'
        OR = 'IADJ' OR = 'AIAJ' OR = 'PRNP' OR = 'CAPI'
        OR = 'PADJ' OR = 'CADJ' OR = 'FLNP'
      MOVE 'F' TO #SCR-TR-CD-LAST-1 (#ILN1)
    END-IF
  END-IF
*
* * EDIT SCREEN FIELDS * * * * *
*
  IF #REBUILD AND #UPDATE-MODE AND (NOT #UPDATE-THE-REST)
    IF   (ST-V.DTS-DATN = #DATE-OF-UPDATE) /* HAS ALREADY BEEN UPDATED
        AND (ST-V.DTS-TIMN = #TIME-OF-UPDATE) /* BY THIS TRANS
        AND (NOT #FOUND-UNUPDATED-RECS) /*ALL HAVE BEEN UPDATED SO FAR
      PERFORM ACCUM-TOTALS
      ESCAPE TOP
    END-IF
*
    MOVE 'T' TO #REBUILD-FUNCTION     /* CHECK TRLOGS
    MOVE #SCR-ID-SSN    (#ILN1) TO #TRLOG-ID-NUMBER
    MOVE #SCR-TRAN-CODE (#ILN1) TO #TRLOG-TRAN-CODE
    MOVE #SCR-TRAN-AMT  (#ILN1) TO #TRLOG-TRAN-AMT
    PERFORM REBUILD-AM-PROCESSING
*
    IF #RETURN-CD = 'M'             /* INDICATES A MATCH
      PERFORM ACCUM-TOTALS
      ESCAPE TOP
    END-IF
*
    MOVE TRUE TO #FOUND-UNUPDATED-RECS
  END-IF
*
  IF #SCR-EFF-DT (#ILN1) NE MASK (MMDDYYYY)
    REINPUT 'Date must be format "MMDDYYYY"'
      MARK *#SCR-EFF-DT (#ILN1)
  END-IF
*
  IF #NAME = MASK (XXX) #SCR-NAME (#ILN1)
      OR #BAR-CODE
    MOVE #NAME TO #SCR-NAME (#ILN1)
  ELSE
    IF #UPDATE-MODE
      BACKOUT TRANSACTION
    END-IF
    COMPRESS 'Name verification error - NAME =' #NAME TO #DISP-MSG
    REINPUT #DISP-MSG
      MARK *#SCR-NAME (#ILN1)
  END-IF
*
  if #scr-tran-code (#iln1) = 'LWOR'                                    /* vt4\/
    #SCR-ADJ (#ILN1) := '-'
  end-if                                                                /* vt4 /\
*
  if #scr-tran-code (#iln1) = 'SUSP'             /* vt12   01/19/2018 \/
      and #update-mode
    perform get-cap-replay
  end-if                                         /* vt12   01/19/2018 /\
*
  IF #SCR-TRAN-CODE (#ILN1) = 'AIAF' OR = 'IADF' OR = 'PADF' OR = 'CADF'
      OR = 'AIAV' OR = 'IADV' OR = 'PADV' OR = 'CADV'
      OR = 'BADJ' OR = 'FPFR' OR = 'FPDR' OR = 'FPRR' OR = 'APPD'
      OR = 'DUER' OR = 'RIDR' OR = 'DUEA'                       /* DW26
      OR = 'SUSP'                                                 /* DW37
      or = 'LWOR'                                                                    /* vt4
*
    IF #SCR-ISS-DT (#ILN1) = ' '                            /* vt9 06/23/2015 \/
      REINPUT 'Issue date has to be entered'
        MARK *#SCR-ISS-DT(#ILN1)
    END-IF                                                  /* vt9 06/23/2015 /\
*
    IF #SCR-ADJ (#ILN1) = '+' OR = '-'
      IGNORE
    ELSE
      REINPUT '+/- ADJ must be ''+'', or ''-'''
        MARK *#SCR-ADJ (#ILN1)
    END-IF
  ELSE
    IF #SCR-ADJ (#ILN1) NE ' '
      REINPUT '+/- ADJ must be BLANK'
        MARK *#SCR-ADJ (#ILN1)
    END-IF
  END-IF /*(1305)
*
  IF #SCR-TRAN-CODE (#ILN1) = 'SALF' OR = 'SALV'
    IF #SCR-ALP-CODE (#ILN1) = '1' OR = '2' OR = '3' OR = '4'
        OR = '6' OR = '0' OR = '8' OR = '9' OR = 'L' OR = 'E' /* DW7/DW21/DW25/PM44
        OR = 'C'                                              /* PM47

      IGNORE
    ELSE
      REINPUT 'ALP CODE MUST BE 1/2/3/4/6/8/9/0/L/E OR C'     /* DW7/DW21/DW25/PM44/PM47
        MARK *#SCR-ALP-CODE (#ILN1)
    END-IF
*
*    IF #SCR-TRAN-CODE (#ILN1) = 'SALF'  /* Removed 10/18/2007  DW24
*      IF ST-V.CONV-DURATION (#LX) = 999
*       AND #SCR-ALP-CODE (#ILN1) = '6'
*       AND ST-V.MODE (#LX) NE 'M'
*        REINPUT 'Mode must be "M" for Code 6'
*        MARK *#SCR-ALP-CODE (#ILN1)
*      END-IF
*    END-IF
*
    IF   (#SCR-TRAN-CODE (#ILN1) = 'SALF')                          /* DW28
        AND (#SCR-ALP-CODE (#ILN1) = 'L' OR = 'E' OR = 'C')            /* PM44 PM47
*       IF   (INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')                                   /* tt2 \/
*           AND (#SCR-ALP-CODE (#ILN1) = 'L' OR = 'E')                   /* DW45 PM46
*           AND NOT (X-ALT-LP-IND (#LX) = 'L' OR = 'E')                  /* PM56
*         REINPUT 'Cannot add AIL/EIL/CIL to an existing Cap'         /* PM44 PM46 PM47
*           MARK *#SCR-ALP-CODE (#ILN1)
*       END-IF                                                                               /* tt2 /\
*
      IF  MILITARY-STATUS NE 'A'
        REINPUT 'Must be Active Duty for AIL/EIL/CIL'               /* PM44 PM47
          MARK *#SCR-ALP-CODE (#ILN1)
      END-IF

      /* TT1 Begin
      perform check-cap-loan-status                                                        /* vt11 \/
****      if #loan-status eq 'C'  or = 'D'
      if #loan-status = 'C'                                                              /* vt11 /\
********      IF NOT IS-CAP-ELLIGIBLE(<ST-V.ID-NUMBER>)
        REINPUT 'Not Elligible for cap loan.  Already has one .'     /* PM44 PM47         /* vt11
          MARK *#SCR-ALP-CODE (#ILN1)
      end-if
      if #loan-status = 'D'                                                             /* vt11 \/
        reinput 'WARNING!!! The previous loan was sent to collections'
          mark *#scr-alp-code (#iln1)
      end-if
      if #loan-status = 'R'                                                             /* vt12 \/
        reinput 'WARNING!!! The previous loan has been reinstated'
          mark *#scr-alp-code (#iln1)
      end-if                                                                           /* vt12 /\
****        end-if                                                                              /* vt11 /\
***      END-IF
      /* TT1 end
*
*     IF  ((PLAN (#LX) = 'RT' OR = 'LT')                            /* PM44   /* YK6
*         OR ((PLAN-A1 (#LX) GE 'U') AND (PLAN-A1 (#LX) LE 'Z')))   /* PM44   /* YK6
      IF FUNCTION-TERM-POLICY(<PLAN(#LX)>)                                    /* YK6
        #MINIMUM-CAP-AMOUNT := 250000                               /* PM44
      ELSE                                                          /* PM44
        #MINIMUM-CAP-AMOUNT := 50000                                /* PM44
      END-IF                                                        /* PM44
*
      IF ST-V.X-ALT-LP-DATE(#LX) = 0                                    /* vt1
          OR ST-V.X-ALT-LP-IND (#LX) NE #SCR-ALP-CODE (#ILN1)              /* PM57
        MOVE *DATN TO ST-V.X-ALT-LP-DATE(#LX)                           /* vt1
        MOVE 999 TO ST-V.CONV-DURATION(#LX)                             /* vt1
        if not (st-v.intro-flag   = 'P' or = 'B' or = 'C' or = 'Q')               /* vt6 \/
          move 'P' to st-v.intro-flag
          move *datn to #work-date-c
          subtract 1 from #work-date-C-mm
          if #work-date-c-mm lt 1
            move 12 to #work-date-c-mm
            subtract 1 from #work-date-c-yyyy
          end-if
          move #work-date-c-yyyymm to st-v.cap-entry-date
          MOVE #SCR-TRAN-AMT (#LX) TO ST-V.X-ALT-LP-AMT(#LX)   /* vt1 06022011
        end-if                                                                    /* vt6 /\
      END-IF                                                            /* vt1

*
      IF  FACE-AMOUNT (#LX) LT #MINIMUM-CAP-AMOUNT                  /* PM44
        REINPUT 'Face Amount is less than required for CAP policy'  /* PM44
          MARK *#SCR-TRAN-CODE (#ILN1)                                /* PM44
      END-IF                                                        /* PM44
*

      IF  #LX NE 0
        MOVE PAID-TO-DATE (#LX) TO #YYYYMMDD
**        IF #YYYYMM LT #TODAY-YYYYMM                              /* vt1 \/
**          REINPUT 'Policy must be current for AIL/EIL/CIL'          /* PM44 PM47
**            MARK *#SCR-ALP-CODE (#ILN1)
**        END-IF                                                  /*  vt1 /\
*
        FOR #I3 1 TO 9                                              /* PM44
*       FOR #I3 1 TO C*ACTIVE-SEGMENTS                              /* YK10
          IF #I3 = #LX                                              /* PM44
              OR STATUS (#I3) NE 'D'                                   /* PM44
            ESCAPE TOP                                              /* PM44
          END-IF                                                    /* PM44
*                                                                   /* PM44
          IF X-ALT-LP-IND (#I3) = 'L' OR = 'E'                      /* PM44
            REINPUT 'AIL/EIL/CIL already exists on an active policy'/* PM44 PM47
              MARK *#SCR-ALP-CODE (#ILN1)                             /* PM44
          END-IF                                                    /* PM44
        END-FOR                                                     /* PM44
      END-IF
*
      RESET #PAY-GRADE                                    /* PM55
      FIND (1) CT-V WITH CT-V.ID-NUMBER = ST-V.ID-NUMBER  /* PM55
        FIND (1) RR-V WITH RR-V.RANK-ID = CT-V.RANK-ID    /* PM9
          #PAY-GRADE := RR-V.PAY-GRADE                    /* PM55
        END-FIND                                          /* PM55
      END-FIND                                            /* PM55
*
      IF #PAY-GRADE = #CAP-PGRADE (*)                     /* PM55
          OR CT-V.RANK-ID = #CAP-RANK (*)                    /* PM55
        IGNORE
      ELSE                                                /* PM55
*      RESET #RANK-DISPL #RANK-LIT #RANK-DISPLAY                                           /* PM55
*      CALLNAT 'GRANKSXX' #CGA-ORIG-COMMAND RANK MILITARY-SERVICE #INVALID-L #RANK-DISPL   /* PM55
*            #RANK-LIT #RANK-DISPLAY                                                       /* PM55
*                                                                                          /* PM55
*      IF  ((#RANK-DISPL GE 18) AND (#RANK-DISPL LE 23))   /* E6 thru CW2                  /* PM55
*       OR ((#RANK-DISPL GE 9)  AND (#RANK-DISPL LE 11))   /* O1 thru O3                   /* PM55
*        IGNORE                                                                            /* PM55
*      ELSE                                                                                /* PM55
        REINPUT 'Rank must be E5 thru E9 or WO1 or CW2 or O1 thru O3 for CAP'
          MARK *RANK
      END-IF
    END-IF
*
    IF #SCR-TRAN-CODE (#ILN1) = 'SALV'
      IF #SCR-ALP-CODE (#ILN1) = '6'
        REINPUT '"6" only valid for CAP loans'
          MARK *#SCR-ALP-CODE (#ILN1)
      END-IF
    END-IF
*
    RESET #CAP-X                                                  /* DW24
    FOR #I1 1 TO 9
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                                /* YK10
      IF   (MODE (#I1) = '1' OR = '2' OR = '4')                   /* DW7
        MOVE TRUE TO #HAS-124
      END-IF
*
      IF ST-V.CONV-DURATION (#I1) = 999  /* CAP policy            /* DW24
          AND ST-V.STATUS (#I1) = 'D'                                /* PM52
        MOVE #I1 TO #CAP-X
      END-IF
    END-FOR
*
    IF #SCR-ALP-CODE (#ILN1) = '6'                                /* DW24
      IF  (#CAP-X = 0)
          OR (X-LOAN-AMOUNT (#CAP-X) = 0)
        REINPUT 'CAP loan must exist for a SALP 6 (MIP)'
          MARK *#SCR-ALP-CODE (#ILN1)
      END-IF
    END-IF
*
    IF #SCR-ALP-CODE (#ILN1) = '8' OR = 'C'                       /* DW7 PM47
*     IF CC-NUM = ' '                                             /* YK3
      IF FUNCTION-CC-NUMBER(<ST-V.ID-NUMBER>) = ' '               /* YK3
        REINPUT 'Credit Card Info must be entered for Code "8/C"' /* PM47
          MARK *#SCR-ALP-CODE (#ILN1)
      END-IF
*
*     IF #HAS-124                                                 /* DW15
      IF MODE (#LX) = '1' OR = '2' OR = '4'                       /* DW15
        REINPUT 'Mode 1/2/4 Invalid with Code "8"'
          MARK *#SCR-ALP-CODE (#ILN1)
      END-IF
    END-IF
*
*   IF (#SCR-ALP-CODE(#ILN1) = '1' OR = '2' or = '9') /* START ALLT LN PMT DW21
    IF (#SCR-ALP-CODE(#ILN1) = '1' OR = '2') /* Above removed 4/30/2007
        AND ALOT-AMT = 0
      REINPUT 'ALLOTMENT MUST BE ACTIVE TO STRT ALOT LOAN PMT '
        MARK *#SCR-ALP-CODE (#ILN1)
    END-IF
*  ELSE
*    IF #SCR-TRAN-CODE (#ILN1) = 'ADCR' OR = 'RDCR'     /* DW31
*      IF NOT #SCR-ALP-CODE (#ILN1) = 'Y' OR = 'N' OR = 'I'
*        REINPUT 'ALP CODE must be I, Y, or N'
*        MARK *#SCR-ALP-CODE (#ILN1)
*      END-IF
  ELSE
    IF #SCR-TRAN-CODE (#ILN1) = 'FPFP' OR = 'FPFR' OR = 'FPFC'  /* PM3
      IF NOT #SCR-ALP-CODE (#ILN1) = ' ' OR = 'W' OR = 'T' OR = 'N'
        REINPUT 'ALP CODE must be BLANK, W, T, or N'
          MARK *#SCR-ALP-CODE (#ILN1)
      END-IF
    ELSE
      IF #SCR-TRAN-CODE (#ILN1) = 'PREP' OR = 'PRER' OR = 'BADJ'
          OR = 'RIDP'              /* DW16
        IF NOT #SCR-ALP-CODE (#ILN1) = ' ' OR = 'W' OR = 'T'
          REINPUT 'ALP CODE must be BLANK, W, or T'
            MARK *#SCR-ALP-CODE (#ILN1)
        END-IF
      ELSE
        IF #SCR-ALP-CODE (#ILN1) NE ' '
          REINPUT 'ALP CODE must be BLANK'
            MARK *#SCR-ALP-CODE (#ILN1)
        END-IF
      END-IF
*      END-IF
    END-IF
  END-IF /*(1330)
*
  IF   (#SCR-TRAN-CODE (#ILN1) = 'DUEP' OR = 'PREP'
      OR = 'RIDP' OR = 'DUEA')    /* DW26
      AND (NUMBER-MEMBERSHIPS = 0)
      AND (NOT #CGA-CLERK = 'ELB' OR = 'VXT' or = 'KHB' or = 'SKS')        /* per kathie's request
*      AND (NOT #CGA-CLERK = 'DRW')
    REINPUT 'MBR must have active Pols for this tran'
      MARK *#SCR-TRAN-CODE (#ILN1)
  END-IF
*
  FOR #I1 1 TO 9   /* find 1st active pol
* FOR #I1 1 TO C*ACTIVE-SEGMENTS              /* YK10
    IF STATUS (#I1) = 'D'
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  IF #I1 GT 9
    MOVE 1 TO #I1
  END-IF
*
  IF  #SCR-TRAN-CODE (#ILN1) = 'DUEP'  /* Only DUEP     DW26
    CALLNAT 'GDUESSXX' ST-V.ID-NUMBER #I1 #DUES
    IF #DUES = 0
        AND PARM-SVC.SVC-AMOUNT-DUE <= 0   /* NG1
      REINPUT 'DUEP Tran invalid on non Dues paying Member'
        MARK *#SCR-TRAN-CODE (#ILN1)
    END-IF
  END-IF
*
  IF   (#SCR-TRAN-CODE (#ILN1) = 'DUEP' OR = 'DUER' OR = 'FPDP'
      OR = 'FPDR' OR = 'DUEA')                                   /* DW26
      AND ((PLAN (#I1) = 'SO')
      OR (ISSUE-DATE (#I1) LT 19970101)
      OR (MONTH-ALLOC-AMT (#I1) = 999.99))
    IF PARM-SVC.SVC-AMOUNT-DUE <= 0  /* NG1
      REINPUT 'DUES Trans invalid on Member with "SO" or pre-1997 as 1st policy'
        MARK *#SCR-TRAN-CODE (#ILN1)
    END-IF
  END-IF
* YK10 >
  IF   (#SCR-TRAN-CODE (#ILN1) = 'DUEP' OR = 'DUER' OR = 'FPDP' OR = 'FPDR' OR = 'DUEA')
    #LX := #I1               /* Remember first active policy
  END-IF
* < YK10
*
  RESET #SG-TBL (*)   /* RESET SUNGARD-TABLE
*
  IF #UPDATE-MODE
      AND ((ST-V.DATE-ACCT-UPDATE NE #DATE-OF-UPDATE)
      OR  (ST-V.DTS-TIMN         NE #TIME-OF-UPDATE))
    IF (#SCR-TRAN-CODE (#ILN1) = 'PRNF' OR = 'INTF' OR = 'INPF'
        OR = 'CMB5'                         /* DW36
        OR = 'CMB3' OR = 'FLNF')
      RESET ST-V.X-LPO-PMT-RCVD (*)
        ST-V.X-LPO-PRIOR-LOAN-BAL (*)
        ST-V.X-LPO-PRIOR-ACC-INT  (*)
    END-IF
*
    IF (#SCR-TRAN-CODE (#ILN1) = 'PRNV' OR = 'INTV' OR = 'INPV'
        OR = 'CMB3' OR = 'FLNV')
      RESET ST-V.X-LPO-PMT-RCVD-2 (*)
        ST-V.X-LPO-PRIOR-LOAN-BAL-2 (*)
        ST-V.X-LPO-PRIOR-ACC-INT-2  (*)
    END-IF
  END-IF
*
  IF #SCR-TRAN-CODE (#ILN1) = 'PREP' OR = 'PRER' OR = 'BADJ' OR = 'RIDP'
    RESET #LAST-ISS-DT #POLICY-FOUND                             /* DW16
    FOR #I1 1 TO 9
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                               /* YK10
      IF  ST-V.STATUS (#I1) = 'D'
        IF  (ST-V.ISSUE-DATE (#I1) = #LAST-ISS-DT)
            AND (NOT #SCR-ALP-CODE (#ILN1) = 'W' OR = 'T')
            AND (#LAST-ISS-DT = #TT-ISS-DT (#ILN2))
          IF #UPDATE-MODE                  /* BACKOUT TRANSACTION *
            BACKOUT TRANSACTION            /* IF IN UPDATE MODE   *
          END-IF                           /* *********************
*
          REINPUT 'W/T in ALP-CODE must be used to ind Whole-life or Term'
            MARK *#SCR-ALP-CODE (#ILN1)
        END-IF
*
        MOVE ST-V.ISSUE-DATE (#I1) TO #LAST-ISS-DT
      END-IF
    END-FOR
*
    FOR #I1 1 TO 9
*   FOR #I1 1 TO C*ACTIVE-SEGMENTS                     /* YK10
*     IF  ((ST-V.STATUS (#I1) = 'D') /* To give access to termed pols
*      OR (ST-V.STATUS (#I1) = 'E' OR = 'F') AND (#CGA-CLERK = 'KHB'))
      IF  (ST-V.STATUS (#I1) = 'D' OR = 'F' )                      /* PM   bz1 (Add 'F')
          AND (ST-V.ISSUE-DATE (#I1) = #TT-ISS-DT (#ILN2))
        IF   (#SCR-ALP-CODE (#ILN1) = ' ')
*
            OR ((#SCR-ALP-CODE (#ILN1) = 'W')
*           AND (NOT ST-V.PLAN (#I1) = 'RT' OR = 'LT')   /* WHOLE LIFE   /* YK6
*           AND ((ST-V.PLAN-A1(#I1) LT 'U')                              /* YK6
*           OR (ST-V.PLAN-A1(#I1) GT 'Z')))                              /* YK6
            AND (NOT FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>)))            /* YK6
*
            OR ((#SCR-ALP-CODE (#ILN1) = 'T')
*           AND ((ST-V.PLAN (#I1) = 'RT' OR = 'LT')       /* TERM INS    /* YK6
*           OR ((ST-V.PLAN-A1(#I1) GE 'U')                               /* YK6
*           AND (ST-V.PLAN-A1(#I1) LE 'Z'))))                            /* YK6
            AND (FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>)))                /* YK6
          MOVE #I1 TO #LX
          MOVE TRUE TO #POLICY-FOUND
          ESCAPE BOTTOM
        END-IF
      END-IF
    END-FOR
*
    IF NOT #POLICY-FOUND
      IF #UPDATE-MODE                  /* BACKOUT TRANSACTION *
        BACKOUT TRANSACTION            /* IF IN UPDATE MODE   *
      END-IF                           /* *********************
      COMPRESS 'Iss-Date not found' INTO #DISP-MSG
      REINPUT #DISP-MSG
        MARK *#SCR-ISS-DT (#ILN1)
    END-IF
  END-IF
*
  IF #CSH MOVE '$' TO #SCR-CASH-CODE (#ILN1) END-IF    /* DW12
  IF #CC  MOVE 'C' TO #SCR-CASH-CODE (#ILN1) END-IF    /* DW12
  IF #ADJ MOVE 'A' TO #SCR-CASH-CODE (#ILN1) END-IF    /* DW12
  IF #NSF MOVE 'N' TO #SCR-CASH-CODE (#ILN1) END-IF    /* DW33
  IF #XFR MOVE 'X' TO #SCR-CASH-CODE (#ILN1) END-IF    /* PM34
  IF #PAY MOVE 'P' TO #SCR-CASH-CODE (#ILN1) END-IF    /* PM34
  IF #ECK MOVE 'H' TO #SCR-CASH-CODE (#ILN1) END-IF    /* YK8
*
  if not(#cga-clerk = 'KHB' or = 'SKS' or = 'CEB' or = 'VXT' )     /* vt10 \/
      and (#scr-tran-code (#iln1) = 'STOP' or = 'STRT' )
    reinput 'The user is not authorized for the STOP/STRT transaction'
  end-if                                                           /* vt10 /\
*
  RESET DATE-OF-BIRTH                                             /* TT1
  DATE-OF-BIRTH := GET-DATE-OF-BIRTH(<ST-V.MEMBER-CONTACT-ID>)    /* TT1
  #HOLD-ALOT-LP-IND(*) := ST-V.X-ALT-LP-IND(*)                    /* TT1
*
  CALLNAT 'C2505SAM' #SCR-LINES
    #CURR-VAR-INT-RATE
    ST-V.X-INTEREST-RATE (1:9)
    ST-V.INTRO-FLAG
    ST-V.MEMBERSHIP-DRIVE
    DATE-OF-BIRTH                           /* TT1
    ST-V.X-LOAN-DATE (1:9)
    ST-V.X-LOAN-AMOUNT (1:9)
    ST-V.DUES-ALL-PAID-IND
    ST-V.DUES-BALANCE
    ST-V.DUES-FPF
    ST-V.DUES-TOT-PAID
    ST-V.X-FIRST-PLACE-FEE (1:9)
    ST-V.PAD-CODE
    ST-V.DEBIT-CREDIT-AMT
    ST-V.AUX-DEBIT-CREDIT-AMT
    ST-V.X-ACCUM-INTEREST (1:9)
    ST-V.X-NXT-YR-ACCUM-INT (1:9)
    ST-V.X-OLD-LOAN-AMT (1:9)
    ST-V.X-CAP-AMT (1:9)
    ST-V.X-BILL-SW (1:9)
    ST-V.X-BILL-SW-2 (1:9)
    ST-V.X-BILL-ADJUST (1:9)
    ST-V.X-BILL-DOLLAR (1:9)
    ST-V.X-BILL-INTEREST-AMT (1:9)
    ST-V.X-INTEREST-RECEIVED (1:9)
    ST-V.X-PRINCIPAL-CHG-CODE (1:9)
    ST-V.APL-CNT
    ST-V.X-LOAN-DATE-2 (1:9)
    ST-V.X-LOAN-AMOUNT-2 (1:9)
    ST-V.X-ACCUM-INTEREST-2 (1:9)
    ST-V.X-NXT-YR-ACCUM-INT-2 (1:9)
    ST-V.X-OLD-LOAN-AMT-2 (1:9)
    ST-V.X-CAP-AMT-2 (1:9)
    ST-V.X-BILL-INTEREST-AMT-2 (1:9)
    ST-V.X-INTEREST-RECEIVED-2 (1:9)
    ST-V.X-LPO-PMT-RCVD        (1:9)
    ST-V.X-LPO-PMT-RCVD-2      (1:9)
    ST-V.X-LPO-PRIOR-LOAN-BAL  (1:9)
    ST-V.X-LPO-PRIOR-LOAN-BAL-2(1:9)
    ST-V.X-LPO-PRIOR-ACC-INT   (1:9)
    ST-V.X-LPO-PRIOR-ACC-INT-2 (1:9)
    ST-V.DATE-ACCT-UPDATE
    ST-V.DTS-TIMN
    ST-V.ALOT-SW
    ST-V.ALOT-AMT
    ST-V.STOP-DATE
    ST-V.X-ALT-LP-IND (1:9)
    ST-V.X-ALT-LP-AMT (1:9)
    ST-V.X-ALT-LP-DATE (1:9)                  /* vt1
    ST-V.X-ALT-LP-IND-2 (1:9)
    ST-V.X-ALT-LP-AMT-2 (1:9)
    ST-V.NUMBER-MEMBERSHIPS
    ST-V.STATUS              (1:9)
    ST-V.POLICY-ID           (1:9)    /* TT2
    ST-V.PAY-STATUS          (1:9)
    ST-V.MODE                (1:9)
    ST-V.PLAN                (1:9)
    ST-V.ISSUE-DATE          (1:9)
    ST-V.PAID-TO-DATE        (1:9)
    ST-V.PAID-UP-DATE        (1:9)
    ST-V.ANNUAL-PREM         (1:9)
    ST-V.MTD-ACV-PREM-ADJ    (1:9)
    ST-V.CONV-DURATION       (1:9)
    ST-V.MONTH-ALLOC-AMT     (1:9)
    ST-V.OWNERSHIP-FLAG      (1:9)
    ST-V.RID-PLAN            (1:9)
    ST-V.RID-EFF-DT          (1:9)
    ST-V.RID-PD-TO           (1:9)
    ST-V.X-RID-FPF           (1:9)
    ST-V.X-RID-BALANCE       (1:9)
    ST-V.RID-TOT-PAID
    ST-V.LAST-DB-CR-CHECK
    ST-V.PAY-NOW-SWITCH
    ST-V.MEMBER-CONTACT-ID   /* NG2
*     ST-V.ADDRESS-1
*     ST-V.ADDRESS-CHG-CODE
    ST-V.EZPAY-CAP-LOAN-AMOUNT                         /* PM49
    #DATE-OF-UPDATE
    #TIME-OF-UPDATE
    #ILN1
    #ILN2
    #UPDATE-MODE
    #2ND-TIM-EDIT
    #DISP-MSG
    #OLD-ALP-FLG
    #OLD-ALP-AMT
    #OLD-ALP-DATE                           /* vt1
    #CMB2-LOAN-AMT
*
    #TRANS-TABLE  (1:300)
    #SG-TBL       (1:15)
    #LX
*     CMB3
    ST-V.ID-NUMBER
    ST-V.PROCESS-IND
    ST-V.NAME
    #CGA-CLERK
    #EXTRA-STOP
    #TOT-CMB3-PRN
    #TOT-CMB3-INT
    #TOT-CMB3-ADCR
    #TOT-CMB4-PREM   /*  used for BATCH totals
    #TOT-CMB4-DUES   /*  used for BAtch totals
    #CMBX                             /* DW11
    #TOT-CMB3-PRN-CAP                 /* DW22
    #TOT-CMB3-INT-CAP                 /* DW22
    ST-V.CAP-BILL-DATE                /* DW24
    #APPROVED (*)                     /* PM44
    ST-V.OUT-TERM-REF-AMOUNT     (*)  /* PM54
    ST-V.OUT-TERM-REF-YEAR       (*)  /* PM54
    ST-V.OUT-TERM-REF-ENTRY-DATE (*)  /* PM54
    #ACTIVITY-TYPE                    /* YK9
    #STATUS-TYPE                      /* YK9

*
  DECIDE ON FIRST VALUE OF #SCR-TRAN-CODE (#ILN1)
*   VALUE 'BADJ' PERFORM BILL-ADJUSTMENT /* PM53
    VALUE 'BADJ' IGNORE                  /* PM53
    VALUE 'APPD' PERFORM APPD-ADJUSTMENT
    VALUE 'SALF' PERFORM ALP-START-STOP-TR
    VALUE 'SALV' PERFORM ALP-START-STOP-TR
*   VALUE 'STOP' PERFORM STOP-ALLOTMENT /* rremove 6/6/2001 as per khb
    VALUE 'STOP' IGNORE
*   VALUE 'IADF' PERFORM INT-ADJ       /* PM49
*   VALUE 'IADV' PERFORM INT-ADJ       /* PM49
*   VALUE 'AIAF' PERFORM ACCR-INT-ADJ  /* PM49
*   VALUE 'AIAV' PERFORM ACCR-INT-ADJ  /* PM49
    VALUE 'IADF' IGNORE                /* PM49
    VALUE 'IADV' IGNORE                /* PM49
    VALUE 'AIAF' IGNORE                /* PM49
    VALUE 'AIAV' IGNORE                /* PM49
    VALUE 'CMB1' MOVE 'SALF' TO #SCR-TRAN-CODE (#ILN1)
      PERFORM ALP-START-STOP-TR
      MOVE 'CMB1' TO #SCR-TRAN-CODE (#ILN1)
    VALUE 'CMB2' MOVE 'SALF' TO #SCR-TRAN-CODE (#ILN1)
      PERFORM ALP-START-STOP-TR
      MOVE 'CMB2' TO #SCR-TRAN-CODE (#ILN1)
    VALUE 'CMB3' IGNORE      /* CMB3
    VALUE 'CMB4' IGNORE
    VALUE 'CMB5' PERFORM CMB5-PAYOFF-LOAN     /* DW36
    VALUE 'SUSP' IGNORE  /* Only ACCT record is written           /* DW37
    VALUE 'PRER' IGNORE
    VALUE 'PREP' IGNORE
    VALUE 'DUEP' IGNORE
    VALUE 'DUEA' IGNORE    /* DW26
    VALUE 'DUER' IGNORE
    VALUE 'FPFR' IGNORE
    VALUE 'FPFP' IGNORE
    VALUE 'FPDP' IGNORE
    VALUE 'FPDR' IGNORE
    VALUE 'STRT' IGNORE
    VALUE 'RDCR' IGNORE
    VALUE 'ADCR' IGNORE
    VALUE 'INTF' IGNORE
    VALUE 'INTV' IGNORE
    VALUE 'INPF' IGNORE
    VALUE 'INPV' IGNORE
    VALUE 'PRNF' IGNORE
    VALUE 'PRNV' IGNORE
    VALUE 'CAPF' IGNORE
    VALUE 'CAPV' IGNORE
    VALUE 'PADF' IGNORE
    VALUE 'PADV' IGNORE
    VALUE 'CADF' IGNORE
    VALUE 'CADV' IGNORE
    VALUE 'FLNF' IGNORE
    VALUE 'FLNV' IGNORE
    VALUE 'RIDP' IGNORE
    VALUE 'RIDR' IGNORE
    VALUE 'FPRP' IGNORE
    VALUE 'FPRR' IGNORE
    VALUE 'FPFC' IGNORE                                        /* PM3
    VALUE 'RTRC' IGNORE                                        /* PM54
    VALUE 'ATRC' IGNORE                                        /* PM54
    VALUE 'LWOR' IGNORE                                        /* PM19/DW36 /vt4
*   VALUE 'LWOV' IGNORE                                        /* PM19/DW36
    NONE REINPUT
        'INVALID TRAN CODE - ENTER GOOD TRAN CODE OR ''?'' FOR HELP'
        MARK *#SCR-TRAN-CODE (#ILN1)
  END-DECIDE
*
  IF #ADJ                                          /* DW35
    IF   (#SCR-ID-SSN (#ILN1) NE #LAST-CN)
        AND (#SCR-ID-SSN (#ILN1) NE 0)
      PERFORM ADJ-BALANCE-TEST
    END-IF
*
* Accum Debit and Credit for balance test                     /* DW35
* if below is changed C2520SAM must also change
    MOVE #SCR-ID-SSN (#ILN1) TO #LAST-CN
    MOVE #ILN1 TO #ADJ-X
    IF #SCR-TRAN-CODE (#ILN1) = 'AIAF' OR = 'PADF' OR = 'IADF'
        OR = 'AIAV' OR = 'PADV' OR = 'IADV'
        OR = 'CADF' OR = 'CADV' OR = 'BADJ' OR = 'FPFR'
        OR = 'FPDR' OR = 'FPRR'
        OR = 'DUER' OR = 'DUEA' OR = 'FPDR' OR = 'RIDR'    /* PM99
        OR = 'SUSP' /* SUSPENSE TRANS        /* DW37
        OR = 'APPD' /* ADDL PREM PAID
        or = 'LWOR'                            /* vt4
      IF #SCR-TRAN-CODE (#ILN1) = 'APPD'
        IF #SCR-ADJ (#ILN1) = '-'  /* APPD is backwards fron all else
          ADD #SCR-TRAN-AMT (#ILN1) TO #DEBIT
        ELSE
          ADD #SCR-TRAN-AMT (#ILN1) TO #CREDIT
        END-IF
      ELSE
        IF #SCR-ADJ (#ILN1) = '-'
          ADD #SCR-TRAN-AMT (#ILN1) TO #CREDIT
        ELSE
          ADD #SCR-TRAN-AMT (#ILN1) TO #DEBIT
        END-IF
      END-IF
    ELSE
      IF #SCR-TRAN-CODE (#ILN1) = 'STOP' OR = 'CMB5'                  /* DW35
          OR = 'CMB1'                             /* DW40
          OR = 'SALF' OR = 'SALV' OR = 'STRT' OR = 'FPFC' OR = 'DUEA'  /* DW38
        IGNORE         /* These do not need to balance if ADJ Batch
      ELSE
        IF #SCR-TRAN-CODE (#ILN1) = 'RDCR' OR = 'PRER' OR = 'RTRC'    /* PM54
*                OR = 'STOP' OR = 'LWOF' OR = 'LWOV'                  /* DW36
          ADD #SCR-TRAN-AMT (#ILN1) TO #DEBIT
        ELSE
          ADD #SCR-TRAN-AMT (#ILN1) TO #CREDIT
        END-IF
      END-IF
    END-IF
  END-IF                                         /* END DW35
*
  RESET #FOUND-SG #TOT-SG
*
  IF #SCR-TRAN-CODE (#ILN1) = 'PREP' OR = 'PRER' OR = 'FPFP' OR = 'FPFR'
      OR = 'FPDP' OR = 'FPDR' OR = 'DUEP' OR = 'DUER' OR = 'DUEA'  /* DW26
      OR = 'FPRP' OR = 'FPRR' OR = 'RIDP' OR = 'RIDR'
    FOR #I1 1 TO 15
      IF #SG-CAT1 (#I1) = ' '
        ESCAPE BOTTOM
      END-IF
      MOVE TRUE TO #FOUND-SG
      ADD #SG-AMT (#I1) TO #TOT-SG
    END-FOR
  END-IF
*
  IF #UPDATE-MODE                   /* UPDATE RECORD IF IN UPDATE MODE
    MOVE TRUE TO #SCR-TRAN-APPLIED (#ILN1)   /* INDICATE UPDATED
    MOVE ST-V.DATE-ACCT-UPDATE TO #HOLD-CUR-ACCT-UPDT
    MOVE #DATE-OF-UPDATE TO ST-V.DATE-ACCT-UPDATE
    MOVE #DATE-OF-UPDATE TO ST-V.DTS-DATN
    MOVE #TIME-OF-UPDATE TO ST-V.DTS-TIMN
*
    RESET #SUBTYPE
    IF  (#SCR-TRAN-CODE(#ILN1) = 'STRT' OR = 'STOP')
        OR (DEBIT-CREDIT-AMT NE #HOLD-DB-CR)
      MOVE 'P' TO #SUBTYPE
    END-IF
*
    IF NOT #SCR-TRAN-CODE (#ILN1) = 'CMB5'         /* already done DW36
      UPDATE RECORD (0871)    /* END TRANSACTION IS DONE AT END OF SCREEN
    END-IF
*
    IF NOT #SCR-TRAN-CODE (#ILN1) = 'CMB3' OR = 'CMB4' OR = 'FPFC'
        OR = 'CMB5'                              /* DW36
*     IF #SCR-TRAN-CODE (#ILN1) = 'BADJ' OR = 'SALF'  /* MAINT TR LOG
      IF #SCR-TRAN-CODE (#ILN1) = 'SALF' /* MAINT TR LOG   /* DW13
*              OR = 'SALV' OR = 'APPD'
          OR = 'SALV'                    /* DW30
        PERFORM STORE-TR-REG-V
        IF #SCR-ALP-CODE (#ILN1) <> '0'        /* TT2
          PERFORM POPULATE-LOAN-DATA           /* TT2
        END-IF                                 /* TT2
      ELSE                   /* ACCOUNTING REGISTER
        IF #SCR-TRAN-CODE (#ILN1) = 'APPD' /* Gets both MAINT TR & ACCT /* DW13 DW30
          PERFORM STORE-TR-REG-V
        END-IF
*
        IF #SCR-TRAN-CODE (#ILN1) = 'CMB1'
          MOVE 'CMB1' TO #CMBX                                  /* DW11
          PERFORM STORE-TR-REG-V
          MOVE 'RDCR' TO #SCR-TRAN-CODE (#ILN1)
          PERFORM STORE-ACCT-REG-V
          MOVE '-' TO #SCR-ADJ (#ILN1)
          MOVE 'CP' TO #SG-CAT1 (1)                             /* DW43
          MOVE '**' TO #SG-CAT2 (1)
          MOVE #SCR-TRAN-AMT (#ILN1) TO #SG-AMT (1)             /* DW43
          MOVE 'PADF' TO #SCR-TRAN-CODE (#ILN1)
          PERFORM STORE-ACCT-REG-V
          MOVE 'CMB1' TO #SCR-TRAN-CODE (#ILN1)
          RESET #CMBX #SG-CAT1 (1) #SG-CAT2 (1) #SG-AMT (1)     /* DW43                                           /* DW11
        ELSE                   /* ACCOUNTING REGISTER
          IF #SCR-TRAN-CODE (#ILN1) = 'CMB2'
            MOVE 'CMB2' TO #CMBX                                /* DW11
            PERFORM STORE-TR-REG-V
            MOVE #CMB2-LOAN-AMT TO #SCR-TRAN-AMT (#ILN1)
            MOVE '-' TO #SCR-ADJ (#ILN1)
            MOVE 'PADF' TO #SCR-TRAN-CODE (#ILN1)
            PERFORM STORE-ACCT-REG-V
            MOVE 'FLNF' TO #SCR-TRAN-CODE (#ILN1)
            RESET #SCR-TRAN-AMT (#ILN1)
            RESET #SCR-ADJ (#ILN1)
            PERFORM STORE-ACCT-REG-V
            MOVE 'CMB2' TO #SCR-TRAN-CODE (#ILN1)
            RESET #CMBX                                           /* DW11
          ELSE
            IF #SCR-TRAN-CODE (#ILN1) = 'DUEP' OR= 'DUER'         /* NG1
                AND PARM-SVC.SVC-AMOUNT-DUE > 0
              IGNORE
            ELSE
              PERFORM STORE-ACCT-REG-V
            END-IF
*            IF #ADJ                                      /* PM34  /DW36
*              IF #SCR-TRAN-CODE (#ILN1) = 'FLNF'                    /* PM34
*               AND #LWOF-AMOUNT (#ILN1) NE 0                        /* PM34
*                #SCR-TRAN-CODE (#ILN1) := 'LWOF'                    /* PM34
*                #SCR-TRAN-AMT  (#ILN1) := #LWOF-AMOUNT (#ILN1)      /* PM34
*                IF ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q' /* PM34
*                  MOVE 'CP'          TO #SG-CAT1 (1)                /* PM34
*                  MOVE '**'          TO #SG-CAT2 (1)                /* PM34
*                  MOVE #SCR-TRAN-AMT (#ILN1) TO #SG-AMT  (1)        /* PM34
*                END-IF                                              /* PM34
*                PERFORM STORE-ACCT-REG-V                            /* PM34
*                #SCR-TRAN-CODE (#ILN1) := 'FLNF'                    /* PM34
*                RESET #SCR-TRAN-AMT (#ILN1)                         /* PM34
*              END-IF                                                /* PM34
*
*              IF #SCR-TRAN-CODE (#ILN1) = 'FLNV'                    /* PM34
*               AND #LWOF-AMOUNT (#ILN1) NE 0                        /* PM34
*                #SCR-TRAN-CODE (#ILN1) := 'LWOF'                    /* PM34
*                #SCR-TRAN-AMT  (#ILN1) := #LWOF-AMOUNT (#ILN1)      /* PM34
*                PERFORM STORE-ACCT-REG-V                            /* PM34
*                #SCR-TRAN-CODE (#ILN1) := 'FLNV'                    /* PM34
*                RESET #SCR-TRAN-AMT (#ILN1)                         /* PM34
*              END-IF                                                /* PM34
*            END-IF                                                  /* PM34
          END-IF
        END-IF
      END-IF /*(1927)
    END-IF /*(1939)
  ELSE
    END TRANSACTION  /* RELEASE RECORD IN EDIT MODE
  END-IF /*(1920)
*
  PERFORM ACCUM-TOTALS
END-FOR /*(0750)
*
IF #ADJ                               /* DW35
  PERFORM ADJ-BALANCE-TEST
END-IF
*
IF #FOUND-UNUPDATED-RECS        /* ALL REMAINING TRANS SHOULD BE UPDATED
  MOVE TRUE TO #UPDATE-THE-REST
END-IF
*
COMPUTE #TMP-TOTAL-AMT = #TOTAL-AMT + #SUB-TOTAL-AMT /* FOR BATCH EDIT
ADD #SUB-BATCH-PREM  TO #BATCH-PREM
ADD #SUB-BATCH-INT   TO #BATCH-INT
ADD #SUB-BATCH-INT-CAP TO #BATCH-INT-CAP
ADD #SUB-BATCH-PRIN  TO #BATCH-PRIN
ADD #SUB-BATCH-PRIN-CAP TO #BATCH-PRIN-CAP
ADD #SUB-BATCH-DUES  TO #BATCH-DUES
*
IF  #SCR-BATCH-TOTAL NE 0           /* EDIT ENTERED BATCH TOTAL
  RESET #REBUILD
  IF  (#SCR-BATCH-TOTAL = #TMP-TOTAL-AMT)    /* BATCH BALANCES
      OR #UPDATE-MODE   /* BATCH TOTAL WAS ALREADY EDITED IN EDIT MODE
    /* AND ALLOW CHGS TO TRAN CODE IF UPDATE MODE ERR
    MOVE FALSE TO #BAD-BATCH-MODE        /* INDICATE A GOOD BATCH
  ELSE
    RESET #BATCH-PREM
      #BATCH-INT #BATCH-INT-CAP
      #BATCH-PRIN #BATCH-PRIN-CAP
      #BATCH-DUES
    IF #SCR-PAGE-NUM = 1
      MOVE EDITED #TMP-TOTAL-AMT (EM=ZZZZZZZZ.99) TO #TOTAL-AMT-DISP
      COMPRESS 'UNBALANCED BATCH TOTAL - ACCUM TRANS AMT ='
        #TOTAL-AMT-DISP      INTO #DISP-MSG
      REINPUT #DISP-MSG
        MARK *#SCR-BATCH-TOTAL
    ELSE
      MOVE TRUE TO #BAD-BATCH-MODE
      MOVE TRUE TO #BAD-BATCH-PHASE
    END-IF
  END-IF
ELSE
  IF (#TRAN-ENTERED AND (#TMP-TOTAL-AMT = 0))    /* ZERO BATCH
      OR #ADJ    /* ADJ batches only have 1 screen             /* DW35
    MOVE 99999999.99 TO #SCR-BATCH-TOTAL
    MOVE FALSE TO #BAD-BATCH-MODE
    MOVE TRUE  TO #FORCE-END-OF-BATCH
  END-IF
END-IF
*
IF #UPDATE-MODE      /*************
  END TRANSACTION    /*>>>>  END TRANSACTION <<
END-IF               /*************
*
FOR #I1 1 TO 15                             /* DW42
  IF  (#SCR-TRAN-CODE (#I1) = MASK ('SAL'))
      OR (#SCR-TRAN-CODE (#I1) = 'CMB1' OR = 'CMB2' OR = 'CMB5')
    MOVE #SCR-ID-SSN (#I1) TO #ID-N6
    CALLNAT 'GAUTHSXX' #ID-N6             /*Set ALOT-CHG-AUTH if FA chged
      #CGA-CLERK #FORCE-A
  END-IF
END-FOR
*
ADD #SUB-TOTAL-AMT TO #TOTAL-AMT              /* ACCUM BATCH TOTAL
*
* * * STORE SCREEN * * * * * *
*
MOVE #ILNT TO #ILN2         /* INITIALIZE TOP INDEX
FOR #ILN1 1 TO 15
  MOVE #SCR-TRAN-APPLIED (#ILN1) TO #TT-TRAN-APPLIED (#ILN2)
  MOVE #SCR-ID-SSN       (#ILN1) TO #TT-ID-NO        (#ILN2)
  MOVE #SCR-EFF-DT       (#ILN1) TO #WMMDDYYYY-A
  PERFORM FLIP-DATE-TO-YYYYMMDD
  MOVE #WYYYYMMDD-N           TO #TT-EFF-DT       (#ILN2)
  MOVE #SCR-TRAN-CODE (#ILN1) TO #TT-TRAN-CODE    (#ILN2)
  MOVE #SCR-TRAN-AMT  (#ILN1) TO #TT-TRAN-AMT     (#ILN2)
  MOVE #SCR-NAME      (#ILN1) TO #TT-NAME         (#ILN2)
  MOVE #SCR-ADJ       (#ILN1) TO #TT-ADJ          (#ILN2)
  MOVE #SCR-ALP-CODE  (#ILN1) TO #TT-ALP-CODE     (#ILN2)
  MOVE #SCR-AMT-FLAG  (#ILN1) TO #TT-AMT-FLAG     (#ILN2)
  MOVE #SCR-CASH-CODE (#ILN1) TO #TT-CASH-CODE    (#ILN2)
  ADD 1 TO #ILN2
END-FOR /*(0733)
*
MOVE #SCR-BATCH-TOTAL TO #SCR-BTCH-TOT  (#SCR-PAGE-NUM)
MOVE #BATCH-PREM  TO #SCR-BTCH-PREM (#SCR-PAGE-NUM)
MOVE #BATCH-INT   TO #SCR-BTCH-INT  (#SCR-PAGE-NUM)
MOVE #BATCH-INT-CAP TO #SCR-BTCH-INT-CAP  (#SCR-PAGE-NUM)
MOVE #BATCH-PRIN  TO #SCR-BTCH-PRIN (#SCR-PAGE-NUM)
MOVE #BATCH-PRIN-CAP TO #SCR-BTCH-PRIN-CAP (#SCR-PAGE-NUM)
MOVE #BATCH-DUES  TO #SCR-BTCH-DUES (#SCR-PAGE-NUM)
*
IF   (#EDIT-MODE)                  /* GO IMMEDIATELY TO UPDATE MODE
    AND (#SCR-BATCH-TOTAL NE 0)       /* W/O 'PRESS ENTER TO APPLY' SCREEN
  IF #SCR-PAGE-NUM = 1             /* IF ONLY 1 PAGE
    ESCAPE ROUTINE
  END-IF
END-IF
*
IF #BAD-BATCH-MODE
  RESET #SCR-BTCH-TOT (#SCR-PAGE-NUM) /* FOR REBUILDING A BAD-BATCH
END-IF
*
IF #EDIT-MODE AND (NOT #REBUILD)
  IF #SCR-PAGE-NUM = 1
    MOVE 'I' TO #REBUILD-FUNCTION
  ELSE
    MOVE 'S' TO #REBUILD-FUNCTION
  END-IF
*
  PERFORM REBUILD-AM-PROCESSING
  MOVE TRUE TO #STORED-AM-SCREEN
END-IF
*
MOVE #SCR-BATCH-TOTAL TO #SCR-BTCH-TOT (#SCR-PAGE-NUM)
*
MOVE 1 TO #START-PROT-LINE         /* PROTECT FIELDS
PERFORM PROTECT-LINES              /* FROM REENTRY
MOVE (AD=P) TO #SCR-BATCH-TOTAL-CV
*
MOVE #SCR-BTCH-PREM (#SCR-PAGE-NUM) TO #SCR-BATCH-PREM
MOVE #SCR-BTCH-INT  (#SCR-PAGE-NUM) TO #SCR-BATCH-INT
MOVE #SCR-BTCH-INT-CAP  (#SCR-PAGE-NUM) TO #SCR-BATCH-INT-CAP
MOVE #SCR-BTCH-PRIN (#SCR-PAGE-NUM) TO #SCR-BATCH-PRIN
MOVE #SCR-BTCH-PRIN-CAP (#SCR-PAGE-NUM) TO #SCR-BATCH-PRIN-CAP
MOVE #SCR-BTCH-DUES (#SCR-PAGE-NUM) TO #SCR-BATCH-DUES
*
MOVE FALSE TO #FINISHED    /* INIT TO NOT FINISHED
IF #BAD-BATCH-MODE
    AND (#SCR-BATCH-TOTAL NE 0)
  MOVE EDITED #TMP-TOTAL-AMT (EM=ZZZZZZZZ.99) TO #TOTAL-AMT-DISP
  COMPRESS 'UNBALANCED BATCH TOTAL - PRESS ENTER - ACCUM TRANS AMT ='
    #TOTAL-AMT-DISP      INTO #DISP-MSG
ELSE
  IF #UPDATE-MODE
    IF #SCR-BATCH-TOTAL NE 0     /* DW14
      MOVE 'Txn Complete, Print Scn & Press ENTER to see Undls or TA'
        TO #DISP-MSG
*
      MOVE TRUE TO #FINISHED
      MOVE 1 TO #START-PROT-LINE         /* PROTECT FIELDS
      PERFORM PROTECT-LINES              /* FROM REENTRY
*
      IF #REB-NUM NE 0
        MOVE 'D' TO #REBUILD-FUNCTION    /* WE ARE COMPLETELY DONE
        PERFORM REBUILD-AM-PROCESSING
      END-IF
    ELSE
      ESCAPE ROUTINE
    END-IF
  ELSE
    IF #SCR-BATCH-TOTAL = 0
      MOVE 'EDIT MODE - PRESS ENTER TO CONTINUE' TO #DISP-MSG
    ELSE
      RESET #BAD-BATCH-PHASE
      MOVE 'EDIT MODE - PRESS ENTER TO APPLY BATCH' TO #DISP-MSG
    END-IF
  END-IF /*(2152)
END-IF /*(2146)
*
IF #UPDATE-MODE
    AND #SCR-BATCH-TOTAL NE 0
  IF #FINISHED                   /* DW36
    MOVE 'TA'  TO #CGA-SCR-COMMAND #CGA-ORIG-COMMAND
    MOVE 'BT*' TO #CGA-SCR-SUFFIX  #CGA-ORIG-SUFFIX
    MOVE #TIME-OF-UPDATE TO #CGA-MF-SCR-PARM-1-N
  ELSE
    MOVE #CGA-ORIG-COMMAND TO #CGA-SCR-COMMAND
  END-IF
*
  RESET #CGA-SCR-ID
*  RESET #CGA-SCR-SUFFIX
ELSE
  MOVE '*' TO #CGA-SCR-COMMAND
  RESET       #CGA-SCR-ID
  RESET       #CGA-SCR-SUFFIX
END-IF
*
IF #BAR-CODE
  INPUT TEXT #DISP-MSG MARK *#SCR-ID-SSN (1) USING MAP 'C2502MAM'
ELSE
  INPUT TEXT #DISP-MSG MARK *#SCR-ID-SSN (1) USING MAP 'C2500MAM'
END-IF
*
IF (#CGA-SCR-COMMAND = '##' OR = '..')  /* THE ONLY WAY OUT OF AN AM
    OR (#FINISHED)                         /*  IF FINAL SCREEN WAS DONE
  BACKOUT TRANSACTION     /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*
*  Show Undeliverable LIST                    /* DW14
*  MOVE '##' TO #CGA-SCR-COMMAND       /* <<<<<<<<<<<<
  CALLNAT 'C2599SAM' #CGA-SCR-COMMAND #CGA-SCR-ID #CGA-SCR-SUFFIX
    #TRANS-TABLE (1:300)   /* Must preceed "D" REBUILD-PROCESS below
*
  IF #STORED-AM-SCREEN
      AND NOT #FINISHED                        /* DW20
    MOVE 'D' TO #REBUILD-FUNCTION
    PERFORM REBUILD-AM-PROCESSING
  END-IF
*
  FETCH 'G1000PXX'
END-IF
*
IF #BAD-BATCH-MODE
    AND (#SCR-BATCH-TOTAL NE 0)
  RESET #SCR-PAGE-NUM
  RESET #SCR-BATCH-TOTAL
  RESET #TOTAL-AMT
  RESET #LAST-ID-READ
END-IF
*
END-SUBROUTINE /*(0594)
*
********************************************************************************
DEFINE SUBROUTINE CMB5-PAYOFF-LOAN                        /* DW36
********************************************************************************
*
IF NOT #UPDATE-MODE
  ESCAPE ROUTINE
END-IF
*
IF ST-V.MODE (#LX) = 'M'                                  /* PM51
  MD01. GET ST-MODE-V #ISN                                /* PM51
  RESET TR-REG-V                                          /* PM51
  COMPRESS 'AM-CMB5 MODE: ' ST-MODE-V.MODE (#LX)          /* PM51
    INTO TR-REG-V.OLD-DATA (1)                     /* PM51
  ST-MODE-V.MODE (#LX) := 'Q'                             /* PM51
  COMPRESS 'AM-CMB5 MODE: ' ST-MODE-V.MODE (#LX)          /* PM51
    INTO TR-REG-V.NEW-DATA (1)                     /* PM51
  UPDATE (MD01.)                                          /* PM51
  PERFORM STORE-TR-REG-V                                  /* PM51
END-IF                                                    /* PM51
*
MOVE #ISN TO #CGA-ISN
*
#TOD-DISP := *DATG                                        /* PM51
CALLNAT 'CVALUSXX'                                        /* PM51
  ST-V.ID-NUMBER                                          /* PM51
  #CGA-SCR-SUFFIX                                         /* PM51
  #DATE-OF-UPDATE                                         /* PM51
  #LOAN-BAL     (1:9)                                     /* PM51
  #LOAN-BAL-2   (1:9)                                     /* PM51
  #ACC-INT      (1:9)                                     /* PM51
  #ACC-INT-2    (1:9)                                     /* PM51
  #CSV          (1:9)                                     /* PM51
  #CVALUE       (1:9)                                     /* PM51
  #LVALUE       (1:9)                                     /* PM51
  #MCSV         (1:9)                                     /* PM51
  #DB           (1:9)                                     /* PM51
  #ANN-PREMIUM  (1:9)                                     /* PM51
  #FACE-AMT     (1:9)                                     /* PM51
  #TPP          (1:9)                                     /* PM51
*
COMPUTE #LOAN-PRIN = #LOAN-BAL (#LX) + #LOAN-BAL-2 (#LX)  /* PM51
COMPUTE #ACCUM-INT = #ACC-INT (#LX)  + #ACC-INT-2  (#LX)  /* PM51
*
* Payoff the loan
FETCH RETURN 'C2316PCI' #CURR-VAR-INT-RATE #DID-LAPO      /*payoff loans
  #SCR-TRAN-CODE (#ILN1) #LX #TIME-OF-UPDATE #SCR-CASH-CODE (#ILN1)
  #DID-REIN                                               /* DW41
  #DID-COLL                                               /* vt3
  #DID-DEAD                                               /* YK7
*
*** RESET #CGA-SCR-COMMAND #CGA-SCR-ID #CGA-SCR-SUFFIX    /* PM51
*** INPUT TEXT #TEXT USING MAP 'C2341MCI'                 /* PM51
*** MOVE #CGA-ORIG-ID TO #CGA-SCR-ID                      /* PM51
*** MOVE '*' TO #CGA-SCR-COMMAND                          /* PM51
*** PERFORM CHECK-AST                                     /* PM51
*
#RPU-TEXT (*) := FUNCTION-LAPSE-LETTER-TEXT(<#LOAN-PRIN,#ACCUM-INT>)(*) /* PM51
*
MOVE 'ELB' TO #CLERK-ABB-PASS                             /* PM51
MOVE ' ' TO #CLERK-ABB-NAME-PASS                          /* PM51
CALLNAT 'GCKNMSXX' #CLERK-ABB-PASS                        /* PM51
  #INVALID-L                                              /* PM51
  #CLERK-ABB-NAME-PASS                                    /* PM51
COMPRESS 'This correspondence has been prepared for you by:'
  #CLERK-ABB-NAME-PASS INTO #RPU-TEXT (16)                /* PM51
*
INPUT USING MAP 'C2326MCI'                                /* PM51
*
#CGA-ORIG-COMMAND   := 'AD'                               /* PM51
#CGA-SCR-SUFFIX     := 'NUL'                              /* PM51
#CGA-SCR-ID         := #CGA-ID := ST-V.ID-NUMBER          /* PM51
#CGA-MF-SCR-COMMAND := 'GB'                               /* PM51
FETCH RETURN 'G3500PAD'                                   /* PM51
MOVE #CGA-ORIG-ID TO #CGA-SCR-ID                          /* PM51
*
END-SUBROUTINE
*
********************************************************************************
DEFINE SUBROUTINE ADJ-BALANCE-TEST                        /* DW35
********************************************************************************
*
IF   (#DEBIT NE #CREDIT)
  COMPUTE #DIFF = #DEBIT - #CREDIT
  MOVE EDITED #DIFF (EM=Z,ZZZ,ZZZ.99) TO #DIFF-DISP
  RESET #DEBIT #CREDIT
  COMPRESS #LAST-CN 'Debit/Credit Out Of Balance by' #DIFF-DISP INTO #DISP-MSG
  REINPUT #DISP-MSG
    MARK *#SCR-TRAN-AMT (#ADJ-X)
END-IF
*
RESET #DEBIT #CREDIT
*
END-SUBROUTINE
*
********************************************************************************
* * * ADDITIONAL PREMS PAID - APPD
*
DEFINE SUBROUTINE APPD-ADJUSTMENT
********************************************************************************
RESET #POLICY-FOUND
*
FOR #I1 1 TO 9
* FOR #I1 1 TO C*ACTIVE-SEGMENTS            /* YK10
  IF ST-V.STATUS (#I1) = 'D'
    MOVE ST-V.ISSUE-DATE (#I1) TO #WYYYYMMDD-N
    IF   (#WYYYYMMDD.#WYYYY = #SCR-ISS-DT-YYYY (#ILN1))
        AND (#WYYYYMMDD.#WMM = #SCR-ISS-DT-MM (#ILN1))
        AND (#WYYYYMMDD.#WDD = #SCR-ISS-DT-DD (#ILN1))
*       AND (NOT ST-V.PLAN (#I1) = 'RT' OR = 'LT') /* Must be W/L    /* DW32    /* YK6
*       AND ((ST-V.PLAN-A1 (#I1) LT 'U') OR (ST-V.PLAN-A1 (#I1) GT ('Z')))      /* YK6
        AND (NOT FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>))                        /* YK6
      MOVE #I1 TO #POLI
        #LX                                        /* vt9 fixing the issue with correct policy number population
      MOVE TRUE TO #POLICY-FOUND
      ESCAPE BOTTOM
    END-IF
  END-IF
END-FOR
*
IF NOT #POLICY-FOUND
  REINPUT 'Issue-Date must be entered'
    MARK *#SCR-ISS-DT (#ILN1)
END-IF
*
MOVE ST-V.TOT-PREMIUMS-PAID (#POLI) TO #OLD-APPD   /* SAVE PRIOR AMT
*
IF #SCR-ADJ (#ILN1) = '-'
  SUBTRACT #SCR-TRAN-AMT (#ILN1) FROM ST-V.TOT-PREMIUMS-PAID (#POLI)
ELSE
  ADD #SCR-TRAN-AMT (#ILN1) TO ST-V.TOT-PREMIUMS-PAID (#POLI)
END-IF
*
IF #UPDATE-MODE
  RESET TR-REG-V
  RESET #TR-LOG-FIL-MNT-DESC
  MOVE 'AM-TOT-PR-PD' TO #TR-L-BADJ-LB1
  MOVE EDITED #OLD-APPD (EM=ZZZZZZ.99-) TO #TR-L-BADJ-AMT
  MOVE #TR-LOG-FIL-MNT-DESC   TO TR-REG-V.OLD-DATA (1)
  MOVE EDITED ST-V.TOT-PREMIUMS-PAID (#POLI) (EM=ZZZZZZ.99-)
    TO #TR-L-BADJ-AMT
  COMPRESS 'POL ISS' #SCR-EFF-DT (#ILN1) INTO #TR-L-APPD-DT
  MOVE #TR-LOG-FIL-MNT-DESC   TO TR-REG-V.NEW-DATA (1)
*
* Below adjusts ACV ADJUST PREM with APPD Amount                  /* DW32
  IF #POLI NE 1            /* FILLUP PRECEEDING MULTIPLE FIELDS
    COMPUTE #I3 = #POLI - 1
    FOR #I2 1 TO #I3
      IF ST-V.MTD-ACV-PREM-ADJ (#I2) = 0
        MOVE 9999999.99 TO ST-V.MTD-ACV-PREM-ADJ (#I2)
      END-IF
    END-FOR
  END-IF
*
  IF ST-V.MTD-ACV-PREM-ADJ (#POLI) = 9999999.99     /* DW39
    RESET ST-V.MTD-ACV-PREM-ADJ (#POLI)
  END-IF
*
  IF #SCR-ADJ (#ILN1) = '+'
    ADD #SCR-TRAN-AMT (#ILN1) TO ST-V.MTD-ACV-PREM-ADJ (#POLI)
  ELSE
    SUBTRACT #SCR-TRAN-AMT (#ILN1) FROM ST-V.MTD-ACV-PREM-ADJ (#POLI)
  END-IF
*
  IF ST-V.MTD-ACV-PREM-ADJ (#POLI) = 0
    MOVE 9999999.99 TO ST-V.MTD-ACV-PREM-ADJ (#POLI)
  END-IF                                                         /* END DW32
*
END-IF
*
END-SUBROUTINE /*(2327)
*
********************************************************************************
* *  ALP START STOP  * *  SALP - 365
*
DEFINE SUBROUTINE ALP-START-STOP-TR
********************************************************************************
IF #UPDATE-MODE                       /* WRITE MAINT REGISTER TRLOG
  RESET TR-REG-V
  RESET #TR-LOG-FIL-MNT-DESC
  MOVE 'ALP AMT'             TO #TR-L-SALP-LB2
  MOVE #OLD-ALP-FLG          TO #TR-L-SALP-FLG
  MOVE EDITED #OLD-ALP-AMT (EM=Z,ZZZ.99-) TO #TR-L-SALP-AMT
*
  IF #SCR-TRAN-CODE (#ILN1) = 'SALV'
    MOVE 'AM-SALV FLG'    TO #TR-L-SALP-LB1
    MOVE #TR-LOG-FIL-MNT-DESC  TO TR-REG-V.OLD-DATA (1)
    MOVE ST-V.X-ALT-LP-IND-2 (#LX)     TO #TR-L-SALP-FLG
    MOVE EDITED ST-V.X-ALT-LP-AMT-2(#LX)(EM=Z,ZZZ.99-) TO #TR-L-SALP-AMT
  ELSE
    MOVE 'AM-SALF ALP FLG'    TO #TR-L-SALP-LB1
    MOVE #TR-LOG-FIL-MNT-DESC  TO TR-REG-V.OLD-DATA (1)
    MOVE ST-V.X-ALT-LP-IND (#LX)   TO #TR-L-SALP-FLG
    MOVE EDITED ST-V.X-ALT-LP-AMT (#LX) (EM=Z,ZZZ.99-) TO #TR-L-SALP-AMT
  END-IF
*
  MOVE #TR-LOG-FIL-MNT-DESC   TO TR-REG-V.NEW-DATA (1)
END-IF
*
END-SUBROUTINE /*(2404)
*
********************************************************************************
* * * * * * * * PROTECT LINES * * * * * * * * * * * * * * * * * * *
*
DEFINE SUBROUTINE PROTECT-LINES
********************************************************************************
FOR #I1 #START-PROT-LINE TO 15
  MOVE (AD=P) TO #SCR-ID-SSN-CV    (#I1)
    #SCR-EFF-DT-CV    (#I1)
    #SCR-TRAN-CODE-CV (#I1)
    #SCR-TRAN-AMT-CV  (#I1)
    #SCR-NAME-CV      (#I1)
    #SCR-ADJ-CV       (#I1)
    #SCR-ALP-CODE-CV  (#I1)
END-FOR /*(2437)
*
END-SUBROUTINE /*(2433)
*
********************************************************************************
DEFINE SUBROUTINE FLIP-DATE
********************************************************************************
*
RESET INITIAL #WMMDDYYYY
MOVE BY NAME #WYYYYMMDD TO #WMMDDYYYY
*
IF #WYYYYMMDD-N = 0
  RESET #WMMDDYYYY-A
END-IF
*
END-SUBROUTINE /*(2448)
*
********************************************************************************
DEFINE SUBROUTINE FLIP-DATE-TO-YYYYMMDD
********************************************************************************
*
IF #WMMDDYYYY-A = ' '
  RESET #WYYYYMMDD-N
ELSE
  MOVE BY NAME #WMMDDYYYY TO #WYYYYMMDD
END-IF
*
END-SUBROUTINE /*(2448)
*
********************************************************************************
DEFINE SUBROUTINE ACCUM-TOTALS
********************************************************************************
*
IF #SCR-TRAN-CODE (#ILN1) = 'PREP' OR = 'FPFP' OR = 'ADCR'
    OR = 'FPRP' OR = 'RIDP'
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-TOTAL-AMT /*ACCUM SCREEN TOTAL
  IF PLAN (#LX) = 'SO'      /* DW5
    ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-DUES /*ACCUM dues TOTAL
  ELSE
    ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-PREM /*ACCUM prem TOTAL
  END-IF
END-IF
*
IF #SCR-TRAN-CODE (#ILN1) = 'FPDP' OR = 'DUEP'  /* NOT DUEA     DW26
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-TOTAL-AMT /*ACCUM SCREEN TOTAL
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-DUES /*ACCUM dues TOTAL
END-IF
*
IF #SCR-TRAN-CODE (#ILN1) = 'INTF' OR = 'INPF' OR = 'FLNF'
    OR = 'INTV' OR = 'INPV' OR = 'FLNV'
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-TOTAL-AMT /*ACCUM SCREEN TOTAL
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-INT  /*ACCUM PREM TOTAL
  IF   (ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
      AND (#SCR-TRAN-CODE (#ILN1) = 'INTF' OR = 'INPF' OR = 'FLNF')   /* DW22
    ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-INT-CAP
  END-IF
END-IF
*
IF #SCR-TRAN-CODE (#ILN1) = 'CMB3'
    OR = 'CMB5'                             /* DW36
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-TOTAL-AMT /*ACCUM SCREEN TOTAL
  ADD #TOT-CMB3-INT   TO #SUB-BATCH-INT
  ADD #TOT-CMB3-PRN   TO #SUB-BATCH-PRIN
  ADD #TOT-CMB3-ADCR  TO #SUB-BATCH-PREM
  IF ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
*   ADD #TOT-CMB3-INT TO #SUB-BATCH-INT-CAP      /* DW22
*   ADD #TOT-CMB3-PRN TO #SUB-BATCH-PRIN-CAP     /* DW22
    ADD #TOT-CMB3-INT-CAP TO #SUB-BATCH-INT-CAP  /* DW22
    ADD #TOT-CMB3-PRN-CAP TO #SUB-BATCH-PRIN-CAP /* DW22
  END-IF
END-IF
*
IF #SCR-TRAN-CODE (#ILN1) = 'CMB4'
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-TOTAL-AMT /*ACCUM SCREEN TOTAL
  ADD #TOT-CMB4-PREM  TO #SUB-BATCH-PREM
  ADD #TOT-CMB4-DUES  TO #SUB-BATCH-DUES
END-IF
*
IF #SCR-TRAN-CODE (#ILN1) = 'PRNF' OR = 'CAPF'
    OR = 'PRNV' OR = 'CAPV'
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-TOTAL-AMT /*ACCUM SCREEN TOTAL
  ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-PRIN /*ACCUM PREM TOTAL
  IF   (ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
      AND (#SCR-TRAN-CODE (#ILN1) = 'PRNF' OR = 'CAPF')   /* DW22
    ADD #SCR-TRAN-AMT (#ILN1) TO #SUB-BATCH-PRIN-CAP
  END-IF
END-IF
*
ADD 1 TO #ILN2
*
END-SUBROUTINE /*(2533)
*
********************************************************************************
* * * * * * * * * *  CALL REBUILD AM PROCESSOR - C2510SAM * * * * * *
*
DEFINE SUBROUTINE REBUILD-AM-PROCESSING
********************************************************************************
CALLNAT 'C2510SAM' #REBUILD-FUNCTION
  #RETURN-CD
  #REB-NUM
  #DATE-OF-UPDATE
  #TIME-OF-UPDATE
  #CGA-CLERK
  #SCR-PAGE-NUM
  #TRANS-TABLE (1:300)
  #SCR-BTCH-TOT (1:21)
  #SCR-BATCH-TOTAL
  #TRLOG-ID-NUMBER
  #TRLOG-TRAN-CODE
  #TRLOG-TRAN-AMT
  #BAD-BATCH-PHASE
  #CGA-ORIG-SUFFIX                             /* PM48
*
IF #RETURN-CD = 'E'
  IF #REBUILD-FUNCTION = 'R'
    MOVE 'REBUILD "AM" RECORD NOT FOUND' TO #DISP-MSG
  END-IF
*
  INPUT TEXT #DISP-MSG USING MAP 'G1000MXX'
  FETCH 'G1000PXX'
END-IF
*
END-SUBROUTINE /*(2125)
*
********************************************************************************
DEFINE SUBROUTINE  STORE-TR-REG-V
********************************************************************************
*
IF #CMBX = 'CMB1'                                                /* DW11
  COMPRESS TR-REG-V.NEW-DATA (1) '-- C1'                          /* PM2
    INTO TR-REG-V.NEW-DATA (1)                                    /* PM2
END-IF                                                            /* PM2
*
IF #CMBX = 'CMB2'                                                /* DW11
  COMPRESS TR-REG-V.NEW-DATA (1) '-- C2'                          /* PM2
    INTO TR-REG-V.NEW-DATA (1)                                    /* PM2
END-IF                                                            /* PM2
*
MOVE ST-V.ID-NUMBER        TO TR-REG-V.ID-NUMBER
MOVE ST-V.PROCESS-IND      TO TR-REG-V.PROCESS-IND /* PM -06/2000-SPLIT
MOVE #NAME                 TO TR-REG-V.NAME
MOVE #HOLD-CUR-ACCT-UPDT   TO TR-REG-V.DATE-LAST-UPDATE
MOVE *INIT-ID              TO TR-REG-V.TERMINAL-ID
MOVE #CGA-CLERK            TO TR-REG-V.CLERK-ID
MOVE #DATE-OF-UPDATE       TO TR-REG-V.TRANSACTION-DATN
MOVE #TIME-OF-UPDATE       TO TR-REG-V.TRANSACTION-TIMN
STORE TR-REG-V
*
END-SUBROUTINE
*
********************************************************************************
DEFINE SUBROUTINE STORE-ACCT-REG-V
********************************************************************************
*
CALLNAT 'C2520SAM' #SCR-LINES
  ST-V.ID-NUMBER
  ST-V.PROCESS-IND
  ST-V.INTRO-FLAG
  ST-V.NAME
  ST-V.PLAN   (1:9)
  ST-V.DEBIT-CREDIT-AMT
  ST-V.DATE-ACCT-UPDATE
  #DATE-OF-UPDATE
  #TIME-OF-UPDATE
  #ILN1
  #HOLD-CUR-ACCT-UPDT
  #CGA-CLERK
  #EXTRA-STOP
  #SG-TBL (1:15)
  #CMBX          /* DW11
  #ACTIVITY-TYPE                          /* vt8
  #STATUS-TYPE                            /* vt8
  #LX               /* YK9
*
RESET #EXTRA-STOP
*
END-SUBROUTINE
*
DEFINE GET-SVC-DUES                  /* NG1
/*     ============
RESET PARM-SVC
PARM-SVC.ACTION        := 'GET'
PARM-SVC.SVC-MEMBER-ID := ST-V.ID-NUMBER
PARM-SVC.SVC-PLAN      := 'PSM'
CALLNAT 'SVCN0003' PARM-SVC #MSG
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE GET-REJECTION-CODE  /* YK9
************************************
*
#KEY := 'RJCD'
REPEAT
  SET KEY PF3
  INPUT WINDOW = 'REJECT_CODE_WINDOW' (IP=OFF)
    / '  Please, enter rejection code'  #ACTIVITY-TYPE (AD=MUT EM=XXX)
  IF *PF-KEY = 'PF3'
    SET WINDOW OFF
    SET KEY OFF
    #CGA-SCR-COMMAND := 'AM'
    #CGA-SCR-SUFFIX  := 'NSF'
    FETCH 'C2500PAM'
  END-IF
  #SUB-KEY := #ACTIVITY-TYPE
  IF F-GET-GEN(<#LOOK-UP-KEY>) <> ' '
    ESCAPE ROUTINE
  ELSE
    REINPUT 'Invalid Rejection Code'
  END-IF
END-REPEAT
*
END-SUBROUTINE

************************************
DEFINE SUBROUTINE POPULATE-LOAN-DATA        /* TT2
************************************
IF (#HOLD-ALOT-LP-IND(#LX) = '0' OR = ' ') AND
    (ST-V.X-ALT-LP-IND(#LX) <> '0' AND ST-V.X-ALT-LP-IND(#LX) <> ' ')
*
* write *program '1'  '=' #loan-status '=' #loan.loan-status
  IF ST-V.X-LOAN-AMOUNT(*) > 0
    #LOAN.LOAN-STATUS      := 'C'
    #LOAN.LOAN-ISSUE-DATE  := *DATN
  ELSE
    #LOAN.LOAN-STATUS := 'P'
  END-IF
*
* write *program '2'  '=' #loan-status '=' #loan.loan-status
  if #loan-status = ' '                            /* vt12 \/
    #ACTION-TYPE := #update
  else                                             /* vt12 /\
    #ACTION-TYPE := #ADD
  end-if                                           /* vt12
  #LOAN.LOAN-POLICY-NUMBER  := ST-V.POLICY-ID(#LX)
  #LOAN.LOAN-INITIAL-AMOUNT := 4000
  #LOAN.LOAN-INTEREST-RATE  := 1.5
* #LOAN.LOAN-NUMBER         := #LX
  #LOAN.LOAN-TYPE           := 'C'
  #LOAN.CONTACT-ID          := ST-V.MEMBER-CONTACT-ID
  #LOAN.ID-NUMBER           := ST-V.ID-NUMBER

  CALLNAT 'CAPN0001'
    #ACTION-TYPE
    #LOAN
    #RETURN-MSG
END-IF
**************
END-SUBROUTINE
**************
*
*****************
define subroutine check-cap-loan-status                         /* vt11 \/
*****************
*
reset #loan-status
find LNS-V  with lns-v.loan-policy-number = st-v.policy-id (#lx)
  if no
    escape bottom
  end-norec
  #loan-status := lns-v.loan-status
*
end-find
end-subroutine                                                  /* vt11 /\
*
*****************
define subroutine get-cap-replay                                /* vt12  01/19/2018 \/
*****************
*
REPEAT
  MOVE '?' TO #replay
  INPUT WINDOW = 'is-it-cap' (IP=OFF)
    / '  Is this a CAP loan reinstatement (Y/N)?'  #replay (AD=MUT EM=X)
*
  IF #replay = ' '
    REINPUT 'Must Enter (Y)es or (N)o'
      MARK *#replay
  END-IF
*
  IF  (#replay = 'Y')
    #LOAN.ID-NUMBER := ST-V.ID-NUMBER
    CALLNAT 'CAPN0001'
      #REINSTATE
      #LOAN
      #RETURN-MSG
    SET WINDOW OFF
    ESCAPE routine
  end-if
*
  if #replay = 'N'              /* vt 02/14/2018 \/
    escape routine
  end-if                        /* vt 02/14/2018 /\
*
end-repeat
*
end-subroutine                                                /* vt12 01/19/2018 /\
END
