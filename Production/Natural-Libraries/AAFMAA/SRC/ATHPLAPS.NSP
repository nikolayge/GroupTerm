* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
***********************************************************************
* PROGRAM-ID: ATHPLAPS - Automated Lapse Processing
*
*  Scan for '#1' (Whole Words Only) to see bypass lapse reasons
***********************************************************************
*                       MODIFICATION LOG
* USER   DATE      TAG  REASON
* DRW    09282004  DW1  add CREDIT CARD processing
* DRW    11122004  DW2  Auto CAP policy termination if note exists
* DRW    01132005  DW3  do not postpone 60-day laps until day 15
* DRW    01272005  DW4  Chk for overloan daily and auto LAPO
* DRW    02102005  DW5  Update st-v during each updateable 9 loop
* DRW    02142005  DW6  Do LAPC for delq CAP policies  (Put on Hold)
* DRW    03212005  DW7  Add Peachtree output
* DRW    04132005  DW8  Always write Peachtree Output even if no recs
* DRW    04152005  DW9  Add face Amt & TPP linkage to CVALUSXX
* DRW    05102005  DW10 Add Pol # Batch to Screns * Only show termed pol
* DRW    05102005  DW11 If APL'ble as mode Q but not A chg mode to Q
* DRW    05192005  DW12 Do Auto Lapsing any day after 60 days delq
* DRW    07182005  DW13 Use Correct CSV when today is less than iss-dd
* PAM    07282005  PM14 & DW14(later) Moved TR store to UPDATE decision
* DRW    07282005  DW15 Do not use TPP for lapse overloan calc (NTP)
* DRW    08092005  DW16 Bypass LAPS if FPF/BADJ/DB exists
* DRW    08112005  DW17 Show ELB Bypass APL's if it is a MPL
* DRW    08262005  DW18 Stop bypassing SPS/GEN AUTO LAP'S
* DRW    09092005  DW19 Give Katrina Members 4 extra months to pay bills
* DRW    09122005  DW20 Delinquent FPF Termination processing
* DRW    03272006  DW21 Bypass LAPSING Katrina members
* DRW    03302006  DW22 Use correct process dt/Time (2300) & leap yr
* DRW 04192006 DW23 Set Alot-sw for AFSC interface processing
* DRW 04222006 DW24 Build Nx's on sync'd fields of TRLOG
* DRW 09262006 DW25 USE MPL IF AVL IS BETWEEN TPP & CSV
* DRW 10182006 DW26 Add MB to receivers on Auto Laps OVERLOAN stats
* DRW 11152006 DW27 Remove #P-I test for zero in the APL TEST
* TDM 01022007 TM1  REPLACED JMJ WITH MAS FOR NX'S
* PAM 01262007 PM28 Added NEWPAGE headings for forms
* DRW 02192007 DW29 Added Sync NS 504 note
* DRW 02202007 DW30 Remove NX's to AFSC
* DRW 03282007 DW31 Add Laps Ovrln RPU logic
* DRW 04292007 DW32 Check if in Past Month for LAPS Ovln
* PAM 06122007 PM33 Adjust lapse of spouse/gen
* DRW 10222007 DW34 Check for Delq CAP MIP Loan Pmts
* DRW 12062007 DW35 Bypass 'COLL' if already paying loan automatically
* YAK 12052007 YK1  Remove hardcording for interest rates
*                   (Read GEN-TABLE through OBJNGENT)
* DRW 01/25/2008 DW36 Only 1 call per member to C2320PCI on LAPO processing
* DRW 02/01/2008 DW37 Clear CAP-BILL-DATE if CAP policy loan is Auto pay
* YAK 02/05/2008 YK2  Change code to use FUNCTION-INT-RATE
*                        to get rate from GEN-TABLE
* DRW 05/21/2008 DW38 Set ALOT-CHG-AUTH 'N' to "A" if alot amt chged on laps
* DRW 06/05/2008 DW39 Add #DID-REIN to C2320pco linkage
* DRW 08/21/2008 DW40 GEN PLUS Processing
* DRW 11/10/2008 DW41 Reset CAP-BILL-DATE if no loan exists
*                     and change testing for Bankruptcy
* PAM 11/13/2008 PM42 Exclude EZPAY-START from NX bypass message
* DRW 04/23/2009 DW43 Fix Index problem on GPL termination
* PAM 05/15/2009 PM44 Change peachtree account from -04 to -07
* PAM 09/15/2009 PM45 Fix peachtree accounting for correct codes and single entries
* PAM 11/20/2009 PM46 Remove Cliff from NX
* YAK 11/24/2009 YK3  Add logic to create a list of people that are lapsing in 15
*                     days and send to autodialer (to prevent policy to lapse).
* BZ1 12/03/2009 BZ1  RECONCILE. Unification changes : Proc-ind and 600000 logic
* YAK 03/17/2010 YK4  Do not include credit card and EZPay waiting policies
*                     on the list for autodialer
* PAM 05/17/2010 PM47 Add BHL to NX list - removed UNIFICATION entry BZ1
* PAM 06/04/2010 PM48 Added LAA to NX list
* vxt 11/05/2010 vt1  Take the name from the new Contact file.
* PAM 02/15/2011 PM49 Adjust last bill date logic for LAPO
* VXT 11/02/2011 vt2  replace EJM(Elizabeth McGrail) with SH(Suzanne Hutter)
*                     in subroutine sending NX message.
* vxt 05/02/2012 vt3  Add new line for LWOV transaction for CAP member on Peachtree file.
* vxt 05/18/2012 vt4  Fix GL accounts for fixed and CAP loans (ticket#1226)
* YAK 10/09/2012 YK5  Use function to identify Level Term II plans
* vxt 01/08/2013 vt5  Replace SH(Suzanne hutter) with KMC(Kirsten Commors)
* RSE 01/14/2013 RE1  Use DECIDE ON instead of IF to check Plan
* YAK 02/19/2013 YK6  Add parameters to call C2320PCI (Changes for ACDB)
* vxt 08/02/2013 vt6  Fix the abend in Production on 08/02/2013
* YAK 08/14/2013 YK7  Add #TIME parameter to call C2320PCI (Changes for CI process)
* YAK 11/25/2013 YK8  Bypass LAPS it Term Refund available (in addition to BADJ/DBCR)
* YAK 12/13/2013 YK9  Use SSRS (Letters file) to send letters
* YAK 01/28/2014 YK10 Stop creating old letters
* YAK 02/04/2014 YK11 Add LAPS report for Marketing
* vxt 03/17/2014 vt7  Remove some of the NX messages sent to ELB
* Vxt 04/04/2014 vt8  COmbine BADJ, DB/CR and Term ref amt and apply money toward premium.
* TMT 06/10/2014 TT1  CONTACT NORMALIZATION - GENDER AND DOB
* vxt 06/23/2014 vt9  Fix the issue with duplication of the phone numbers on Autodialer file.
* TMT 10/16/2014 TT2  ANNUITY LIFE HARMONIZATION
* vxt 04/10/2015 vt10 /Ticket 3460/
* vxt 05/08/2015 vt11 /Ticket 3514/
* vxt 05/06/2015 vt12 /Ticket 3511/
* vxt 05/14/2015 vt13 /Ticket 3375/
* bz  09/09/2015 OI-3078
* vxt 05/02/2016 vt14 /Tickets 4481 , 4482 , 4709/
* vxt 11/18/2016 vt15 /Ticket 1924/
* YF1 01/22/2018 YF1 Unique identifier for plan Ticket 5936
************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK.CI-BLOCK
LOCAL USING G3500AAD
LOCAL USING ATHA03P2                              /* PM45  This is #PDA-ATHA03P2 structure
LOCAL USING GPRA0003                              /* YK3 Error log
LOCAL USING GPBACOMM                              /* YK9 To call generic Letters subprogram
LOCAL
1 #PHONE      (N20) 1 REDEFINE #PHONE   /* NG1
  2 #FIRST-9        (N9)
  2 #TELE-NUMBER    (N11)
1 #PHONE-TYPE       (A1)
1 #INTL             (A1)
*
1 #CURR-VAR-INT-RATE (P2.3)                       /* YK1
1 #CAP-X             (I2)                         /* DW35
1 #CAP-AUTO-PAY      (L)                          /* DW35
1 #NO-CAP-LOAN       (L)                          /* DW41
1 #DID-A-LAPS        (L)                          /* DW38
1 #FORCE-A           (L)                          /* DW38
1 #CALL-C2320PCI     (L)                          /* DW36
1 #TOT-BILLED-INT    (N7.2)
1 #NX-401     (L)                                 /* DW24
1 #NX-402     (L)
1 #NX-403     (L)
1 #SFX        (I2)
1 #WORK   (N5.2)                                  /* DW22
1 REDEFINE #WORK
  2 #WORK-1 (N5)
  2 #REM    (N2)
1 #DATE-ENTERED       (N8)   /* DW20
1 #FPF-DELQ           (L)    /* DW20
* 1 #KATRINA-ZIP        (L)    /* DW19       /* vt12
1 #FORCE-QUARTERLY    (L)    /* DW11
1 #CHG-MOD-TO-Q       (L)
1 #DUE-QUARTERLY      (P7.2)
1 #CURR-MOD-PRM       (P7.2)
1 #QUAR-PRM           (P7.2) /* DW11
1 #DISP-ACCOUNT-NUM   (A10)  /* PM45
1 #FOR-INSURED-AREA   (A40)
1 #SUBTYPE         (A1)
1 #AUTO-CAP-TERM    (L)
1 #N1    (N1)
*
1 #LAST       (A25)
* 1 #MI         (A1)
* 1 #FIRST-20   (A20)
* 1 #EXTRA1   (A25)                                   /* vt1 \/
* 1 #EXTRA2   (A25)
* 1 #EXTRA3   (A25)                                   /* vt1 /\
1 #ERR-MSG  (A60)
1 #POL-NUM         (A16)
1 #NUM-PEACH   (P5)    /* DW7
1 #PEACH-CNT   (P5)    /* DW7
1 #PEACH-CNT-X (A5)    /* DW7
1 #PEACHTREE   (A80)   /* DW7
1 #AMT-10      (A10)   /* DW7
1 #AMT         (P7.2)  /* DW7
1 #TOT-PRIN    (P9.2)  /* DW4
1 #TOT-INT     (P9.2)  /* DW4
1 #TOT-CSV     (P9.2)  /* DW4
1 #TOT-OVLN    (P9.2)  /* DW4
1 #TOT-TPP     (P9.2)  /* DW4
1 #TOT-TAXABLE-INC (P9.2) /* DW4
1 #CSV-X        (P9.2)  /* DW4
1 #LOAN-X       (P7.2)  /* DW4
1 #ACC-INT-X    (P7.2)  /* DW4
1 #LOAN-2-X     (P7.2)  /* DW4
1 #ACC-INT-2-X  (P7.2)  /* DW4
1 #LOAN-DATE    (N8)    /* DW4
1 #AMT-OVERLOANED (P7.2)  /* DW4
1 #TAXABLE-INC  (P7.2)  /* DW4
1 #TAXABLE-INC-DISP   (A11) /* DW4
1 #CASH-VALUE (P7.2) /* DW4
1 #P     (N7.2)     /* DW4
1 #I     (N7.2)     /* DW4
1 #P-DISP    (A11)  /* DW4
1 #I-DISP    (A9)   /* DW4
1 #OVLN-AMT      (P7.2) /* DW4
1 #OVLN-AMT-DISP (A9)
1 #TOT-INT-PD    (N7.2)
*
1 #SUFFIX     (A3)      /*DW4
1 #AS-OF-DT   (N8)
1 #LOAN-BAL   (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT    (N7.2/9)
1 #ACC-INT-2  (N7.2/9)
1 #CSV        (N7.2/9)
1 #CVALUE     (N7.2/9)
1 #LVALUE     (N7.2/9)
1 #MCSV       (N7.2/9)
1 #DB         (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #FACE-AMT    (N7.2/9)  /* DW9
1 #TPP         (N7.2/9)  /* DW9
1 #BANKRUPTCY   (L)     /*DW2
1 #OVERLOANED   (L)     /*DW4
1 #LOAN-INT-NOTICE-DT  (A10)  /*DW4
1 #FOUND-V-H-MONTH    (L)  /* DW32
1 #BYPASS-OVERLOAN-TEST  (L)    /* DW32
1 #CURR-V-H-YYYYMM    (N6)
*
* BELOW for CALC-PREMS-PAID
1 #PP-DATE-OF-BIRTH (N8)
1 #PP-ANNUAL-PREM   (N5.2)
1 #PP-PAY-STATUS    (A2)
1 #PP-TOT-PREMIUMS-PAID (N7.2)
1 #PP-PAID-TO-DATE  (N8)
1 #PP-ISSUE-DATE    (N8)
1 #PP-MODE          (A1)
1 #PP-PLAN          (A3)
1 #PP-COST-BASIS    (N7.2)
1 #PP-MONTH-ALLOC-AMT (N7.2)          /* vt 01/30/2014
1 #PP-INTRO-FLAG    (A1)
1 #PP-FIRST-PLACE-FEE (N7.2)
1 #PREMS-PAID       (P7.2)
1 #SUB-PREMS-PAID   (P7.2)
1 #PP-BADJ          (P5.2)
* ABOVE for CALC-PREMS-PAID
*
1 #DID-DEAD (L)     /* DW1
1 #DID-CSV  (L)
1 #DID-RSGN (L)
1 #DID-RPU  (L)
1 #DID-LAPO (L)
1 #DID-LAPS (L)
1 #DID-LAPN (L)
1 #DID-LAPC (L)
1 #DID-REIN (L)       /* DW39
1 #DID-ACDB (L)       /* YK6
1 #SAVE-I1   (I2)
*
1 #PASSED-INFO-G1   /* DW4
  2 #LOAN-INT-TBL   (9)
    3 #LOAN-PRIN  (P7.2)
1 REDEFINE #PASSED-INFO-G1
  2 #PASSED-INFO-1  (A45)  /* Keep UPDATED
*
1 #PASSED-INFO-G2   /* DW4
  2 #LOAN-INT-TBL   (9)
    3 #LOAN-INT   (P5.2)
  2 #TOT-RPU-LOAN-AMT    (P7.2)
  2 #TOT-RPU-INT-AMT     (P5.2)
1 REDEFINE #PASSED-INFO-G2
  2 #PASSED-INFO-2  (A45) /* KEET UPDATED
*
* YK6 Start
1 #PASSED-INFO-G3
  2 #ACC-DEATH-BENEFIT  (N6.2)
  2 #PREM-REFUND-PASSED (N6.2)
  2 #PREM-DUE-PASSED    (N6.2)
  2 #DB-ADJ             (N6.2)
1 REDEFINE #PASSED-INFO-G3
  2 #PASSED-INFO-3 (A32)
* YK6 End
1 VA-V VIEW OF A-VA-HISTORY   /* DW32
  2 RECORD-KEY      (N15)
  2 REDEFINE RECORD-KEY
    3 ID-NO      (N6)
    3 ISS-DT     (N8)
    3 SPL-IND    (N1)
  2 YEAR-MONTH-M          (13)
*
1 #VA-KEY   (N15)      /* DW32
1 REDEFINE #VA-KEY
  2 #VA-KEY-CN  (N6)
  2 #VA-KEY-ISS-DT (N8)
  2 #VA-KEY-SPLIT  (N1)
*

1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A   (A6)
  2 MEMBER-CONTACT-ID                                 /* vt1
  2 WIDOW-FLAG     (A1)
  2 LINKED-CN      (40)
  2 REDEFINE LINKED-CN
    3 LINKED-CN-A   (A6/40)
  2 DTS-DATN
  2 DTS-TIMN
  2 PAD-CODE
  2 PROCESS-IND
*  2 NAME                                              /* vt1
*  2 TELE-NUMBER                       /* YK3
  2 SSN
*  2 DATE-OF-BIRTH                     /* TT1
  2 X-FIRST-PLACE-FEE  (9)
  2 INTRO-FLAG
  2 HANDLE-FLAG
  2 S-ADDRESS-CODE
  2 MILITARY-SERVICE
  2 MILITARY-STATUS
  2 ALOT-AMT
  2 ALOT-SW
  2 DUES-ALL-PAID-IND
  2 DUES-BALANCE
  2 CAP-BILL-DATE                       /* DW34
  2 DATE-ENTERED    (9)                 /* DW20
  2 BILL-TO-DATE    (9)                 /* PM49
  2 X-RID-BALANCE   (9)
  2 CAP-CONV-ACV
  2 X-BILL-INTEREST-AMT   (9)
  2 X-BILL-INTEREST-AMT-2 (9)
  2 X-ALT-LP-IND    (9)
  2 X-ALT-LP-IND-2  (9)
  2 X-ALT-LP-AMT    (9)
  2 X-ALT-LP-AMT-2  (9)
  2 X-INTEREST-RATE (9)
  2 X-LOAN-DATE     (9)
  2 REDEFINE X-LOAN-DATE
    3 LOAN-DATE-OCC   (9)
      4 X-LOAN-YYYY   (N4)
      4 X-LOAN-MM     (N2)
      4 X-LOAN-DD     (N2)
  2 X-LOAN-DATE-2   (9)
  2 REDEFINE X-LOAN-DATE-2
    3 X-LOAN-DATE-2-OCC  (9)
      4 X-LOAN-YYYY-2 (N4)
      4 X-LOAN-MM-2   (N2)
      4 X-LOAN-DD-2   (N2)
  2 X-LOAN-AMOUNT        (9)
  2 X-LOAN-AMOUNT-2      (9)
  2 DEBIT-CREDIT-AMT
  2 X-BILL-DOLLAR    (9)
  2 X-BILL-ADJUST    (9)
  2 DATE-ACCT-UPDATE
  2 ONLINE-ACTION-GN
  2 NUMBER-MEMBERSHIPS
  2 ONLINE-DATE         (9)
  2 SPLIT-IND           (9)
  2 ISSUE-DATE          (9)
  2 REDEFINE ISSUE-DATE
    3 ISSUE-DATE-OCC (9)
      4 ISS-DT-YYYY  (N4)
      4 ISS-DT-MM    (N2)
      4 ISS-DT-DD    (N2)
  2 ONLINE-ACTION   (9)
  2 FACE-AMOUNT     (9)
  2 STATUS          (9)
  2 PAY-STATUS      (9)
  2 OWNERSHIP-FLAG  (9)
  2 RID-PLAN        (9)
  2 PLAN            (9)
  2 REDEFINE PLAN
    3 PLAN-OCC   (9)
      4 PLAN-A1    (A1)
      4 PLAN-A2    (A2)
  2 MONTH-ALLOC-AMT     (9)
  2 MODE                (9)
  2 DEATH-BENEFIT       (9)
  2 COST-BASIS          (9)
  2 CONV-DURATION       (9)
  2 ANNUAL-PREM         (9)
  2 CASH-VALUE         (9)
  2 NXT-MON-CASH-VALUE (9)
  2 PAID-TO-DATE        (9)
  2 redefine paid-to-date                   /* vt8 \/
    3 paid-to-date-yyyymm   (n6/9)
    3 paid-to-date-dd1      (n2/9)          /* vt8 /\
  2 REDEFINE PAID-TO-DATE
    3 PAID-TO-DATE-OCC (9)
      4 PAID-TO-DATE-YYYY (N4)
      4 PAID-TO-DATE-MM   (N2)
      4 PAID-TO-DATE-DD   (N2)
  2 TOT-PREMIUMS-PAID (9)
  2 EZPAY-START         (9)            /* PM42
  2 C*OUT-TERM-REF-GROUP               /* YK8
  2 OUT-TERM-REF-GROUP (1:10) /* PE    /* YK8
    3 OUT-TERM-REF-AMOUNT (P7.2)
    3 OUT-TERM-REF-YEAR (N4)
    3 OUT-TERM-REF-ENTRY-DATE (N8)
    3 new-term-pol-nbr                  /* vt8
    3 NEW-POL-ISS-DATE                  /* vt8

*
1 MD-V VIEW OF A-MBRSHIP-MTD-DETAIL
  2 ID-NUMBER
  2 ENTRY-DATE
  2 REC-ISN
  2 CODE
  2 ISSUE-DATE
  2 NUM-MBRSHIPS
*
1 TR-A-V VIEW OF A-ACCOUNTING-REGISTER   /* DW31
  2 ID-NUMBER
  2 TRANSACTION-DATN (P9)
  2 TRANSACTION-TIMN   (P7)
  2 TXN-CODE           (A4)
  2 DEBIT-AMOUNT       (P7.2)
  2 CREDIT-AMOUNT     (P7.2)
*
1 TR-V VIEW OF A-TRANSACTION-REGISTER
  2 ID-NUMBER         (N6)
  2 PROCESS-IND       (A1)
  2 NAME              (A25)
  2 DATE-LAST-UPDATE  (N8)
  2 TERMINAL-ID       (A8)
  2 CLERK-ID          (A3)
  2 TRANSACTION-DATN  (P9)
  2 TRANSACTION-TIMN  (P7)
  2 OLD-DATA          (A125/20)
  2 NEW-DATA          (A125/20)
  2 SYNC-FLD-NUM     (60)
  2 SYNC-FLD-OLD-DATA    (60)
  2 SYNC-FLD-NEW-DATA    (60)
*
1 #TR-REG-LAP-GR
  2 #TR-REG-LAP-LBL-1         (A15) INIT <'CI-LAPSE       '>
  2 #TR-REG-LAP-LBL-2         (A11) INIT <'ISSUE-DATE '>
  2 #TR-REG-LAP-ISSUE-DATE    (N08)
  2 #TR-REG-LAP-LBL-3         (A07) INIT <'  PLAN '>
  2 #TR-REG-LAP-PLAN          (A03)
  2 #TR-REG-LAP-LBL-4         (A11) INIT <'  FACE-AMT '>
  2 #TR-REG-LAP-FAC-AMT       (A09)
  2 #TR-REG-LAP-LBL-5         (A06) INIT <'  CSV '>
  2 #TR-REG-LAP-CASH-VALUE    (A08)
  2 #TR-REG-LAP-LBL-6         (A14) INIT <'  DEATH-BENE  '>
  2 #TR-REG-LAP-DB            (A09)
  2 #TR-REG-LAP-LBL-7         (A14) INIT <'  FACE-CASHED '>
  2 #TR-REG-LAP-FACE-CASHED   (A09)
1 REDEFINE #TR-REG-LAP-GR
  2 #TR-REG-LAP               (A124)
*
1 #TR-REG-MODE-GR                                      /* DW11
  2 #TR-REG-MODE-LBL-1A        (A3)  INIT <'CI-'>
  2 #TR-REG-MODE-LBL-1B        (A4)  INIT <'MODE'>
  2 #TR-REG-MODE-LBL-13        (A14) INIT <'-CHG ISSUE-DT '>
  2 #TR-REG-MODE-ISSUE-DATE    (N08)
  2 #TR-REG-MODE-LBL-2         (A07) INIT <'  MODE '>
  2 #TR-REG-MODE-MODE          (A01)
  2 #TR-REG-MODE-LBL-3         (A13) INIT <'  MODAL-PREM '>
  2 #TR-REG-MODE-MOD-PRM       (A08)
  2 #TR-REG-MODE-LBL-4         (A10) INIT <'  PAID-TO '>
  2 #TR-REG-MODE-PAID-TO       (N08)
  2 #TR-REG-MODE-LBL-5         (A08) INIT <'  DB/CR '>
  2 #TR-REG-MODE-DB-CR-ADJ     (A08)
  2 #TR-REG-MODE-LBL-7         (A10) INIT <'  BIL-ADJ '>
  2 #TR-REG-MODE-BILL-ADJ      (A08)
  2 #TR-REG-MODE-LBL-8         (A10) INIT <'  ACV-ADJ '>
  2 #TR-REG-MODE-ACV-ADJ       (A08)
1 REDEFINE #TR-REG-MODE-GR
  2 #TR-REG-MODE               (A110)
*
1 MS-V VIEW OF A-MBRSHIP-STATS
  2 MONTH-KEY
  2 LOSSES-LIVES-BY-CAT        (4)
  2 INS-ONLY-LOSS-PLANS        (3)
  2 LOSSES-BY-PLAN             (9)     /* added GPL    DW40  vt6 was 7
  2 LOSSES-BY-PLAN-DB          (9)     /* added GPL    DW40  vt6 was 7
  2 SPS-GEN-LOSS-MBRS          (3)
  2 SPS-GEN-LOSS-PLANS         (3)
  2 LOSS-PLANS                 (4)
  2 LOSS-MBRS                  (4)
  2 LOSS-SHIPS                 (4)
*
1 NT-V VIEW OF A-NOTES
  2 NOTE-TEXT   (60)
*
1 #MS-MONTH-KEY  (N6)
*
1 #COUNTERS
  2 #RECS-READ        (P5)
  2 #RECS-SELECTED    (P5)
  2 #CNT              (P5)
  2 #CNT-2            (P5)
  2 #CNT-3            (P5)
  2 #CNT-4            (P5)
  2 #CNT-5            (P5)
  2 #CNT-6            (P5)
  2 #CNT-7            (P5)
  2 #CNT-8            (P5)
  2 #I2               (I2)
  2 #I3               (I2)
  2 #I4               (I2)
  2 #I9               (I2)
*
1 #YYYYMMDD        (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM    (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY     (N4)
    3 #MM       (N2)
  2 #DD        (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A    (A4)
  2 #MM-A      (A2)
  2 #DD-A      (A2)
*
1 #MODAL-SVC-FEE  (N3.2)
1 #SVC-FEE    (N3.2)
*
1 #BYP-OCC-1    (4)   /*  4 lines of nx
  2 #BYP-TEXT   (A60)
  2 REDEFINE #BYP-TEXT
    3 #BYP-OCC-2   (5)   /*  5 occ per line
      4 #BYP-CN     (N6)
      4 #BYP-DASH   (A1)
      4 #BYP-TYPE   (A4)
      4 #BYP-SLASH  (A1)
*
1 #LAP-OCC-1    (4)   /*  4 lines of nx
  2 #LAP-TEXT   (A60)
  2 REDEFINE #LAP-TEXT
    3 #LAP-OCC-2   (5)   /*  5 occ per line
      4 #LAP-CN     (N6)
      4 #LAP-DASH   (A1)
      4 #LAP-TYPE   (A4)
      4 #LAP-SLASH  (A1)
*
1 #HOLD-SUFFIX     (A3)
1 #G-F              (L)
1 #POL-AFT-7-1-2000 (L)
1 #OVER-60-APL      (N5)
1 #BYPASS-APL-CNT   (N3)
1 #BYPASS-LON-CNT   (N3)
1 #BYPASS-ALT-CNT   (N3)
1 #BYPASS-ADJ-CNT   (N3)
1 #BYPASS-EZP-CNT   (N3)
1 #BYPASS-SPG-CNT   (N3)
1 #BYPASS-CCRD-CNT  (N3)
1 #BYPASS-BANK-CNT  (N3)  /* DW4
1 #BYPASS-FPF-CNT  (N3)  /* DW20
1 #BYPASS-KAT      (N3)  /* DW21
1 #BYPASS-COLL     (N3)  /* DW34
1 #LAPC-LOAN-DISP    (A9)
1 #LAPC-INT-DISP     (A9)
1 #LAPC-TOT-P-I-DISP (A9)
1 #LAPC-P-I          (N5.2)
1 #30-DAY-WES-CNT  (P5)
1 #30-DAY-CERT-CNT (P5)
1 #LAPS-LAPN-CNT   (P5)
1 #LAPO-CNT   (P5)    /* DW4
1 #LAPC-CNT   (P5)
1 #BYP-X1      (I2)
1 #BYP-X2      (I2)
1 #LAP-X1      (I2)
1 #LAP-X2      (I2)
1 #GL-X        (I2)
1 #CAT-X       (I2)
1 #TO-INIT     (A3)
1 #PLAN-3           (A3)
1 REDEFINE #PLAN-3
  2 #PLAN-3-A1       (A1)
  2 #PLAN-3-N2       (N2)
1 #STATS-FOUND      (L)
1 #PUR-MBRS    (N2)
*
1 #ST-ISN      (P8)
1 #APL-LBL     (A3)
1 #LAPS-TYPE    (A11)
1 REDEFINE #LAPS-TYPE
  2 #LAPS-BYPASS   (A7)
  2 #BYPASS-REASON (A4)
1 #ADJ-AMT    (N7.2)
1 #NOTE-TEXT (A60/10)
1 #INT     (I2)
1 #CLERK   (A3)
*
1 #TODA-X        (A8)
1 #TODA          (N8)
1 REDEFINE #TODA
  2 #TODA-CENT-A  (A2)
  2 #TODA-YY-A    (A2)
  2 #TODA-MM-A    (A2)
  2 #TODA-DD-A    (A2)
1 REDEFINE #TODA
  2 #TODA-YYYYMM  (N6)
1 REDEFINE #TODA
  2 #TODA-YYYY  (N4)
  2 #TODA-MMDD  (N4)
  2 REDEFINE #TODA-MMDD
    3 #TODA-MM    (N2)
    3 #TODA-DD    (N2)
1 #1-MON-AGO      (N8)
1 #6-MONS-AGO     (N8)
1 #2-MONS-AGO     (N8)
1 REDEFINE #2-MONS-AGO
  2 #2-MONS-AGO-YYYYMM  (N6)
  2 #2-MONS-AGO-DD      (N2)
1 #3-MONS-AGO     (N8)
1 REDEFINE #3-MONS-AGO
  2 #3-MONS-AGO-YYYYMM  (N6)
  2 REDEFINE #3-MONS-AGO-YYYYMM
    3 #3-MONS-AGO-YYYY   (N4)
    3 #3-MONS-AGO-MM     (N2)
  2 #4-MONS-AGO-DD      (N2)
1 #4-MONS-AGO     (N8)
*
1 #1-YR-AGO       (N8)
*
1 #1ST-POL-X      (I2)
1 #HAS-FBR        (L)
1 #DATX           (A10)
1 #DATX-PER       (A11)
1 #HAS-PP-G       (L)
1 #PD-TO-M-E      (L)
1 #PMNT-DUE        (N5.2)
1 #PMNT-DUE-DISP   (A9)
1 #P-I         (P6.2)
1 #P-I-4-OVRLOAN (P6.2)  /* DW4
1 #NUM-PROCESSED      (P5)
1 #POLS-REMAIN  (L)
1 #UPDATE       (L)
1 #WL           (L)
1 #APL          (L)
1 #MPL          (L)  /* DW25
1 #ISSUED       (A10)
1 #PD-TO-DT     (N8)
1 REDEFINE #PD-TO-DT
  2 #PD-TO-DT-YYYYMM (N6)
  2 REDEFINE #PD-TO-DT-YYYYMM
    3 #PD-TO-DT-YYYY (N4)
    3 #PD-TO-DT-MM   (N2)
  2 #PD-TO-DT-DD     (N2)
1 #MOD-FREQ     (N2)
1 #MOD-PREM     (N5.2)
1 #FORM-IND     (A3)
1 #CERT         (A4)
* 1 #DEAR-FORMATED-NAME   (A45)                        /* vt1
1 #30-DAY-LAPS-MSG-1    (A20)
1 #30-DAY-LAPS-MSG-2    (A75)
1 #MBRSHP-TERM-MSG      (A60)
1 #REINSTATE-MSG        (A70)
*
* below is linkage to GRIDCSXX
1 #ID         (N6)
1 REDEFINE #ID
  2 #ID-A      (A6)
* THE FOLLOWING INPUT IS PASSED ONLY ON AN "AT" FOR A NEW RIDER
1 #AT-RID-ATTACH-FAC-AMT (N6.2) /* Only if attached to the new "AT"
1 #AT-RID-ATTACH-PLAN    (A3)   /*    policy not yet created
1 #AT-RID-PLAN           (A2/5) /* New rider plan
1 #AT-RID-ATTACH-ISS-DT  (N8/5) /* Only if attached to an existing pol
* output below  (ex = existing)
1 #AT-TOT-FBR-PREM        (N3.2)
1 #EX-FBR-PREM-BY-LINE    (N3.2/9)
1 #EX-SPS-DB-BY-LINE      (N6/9)
1 #EX-DEP-DB-BY-LINE      (N6/9)
1 #EX-EACH-DEP-DB-BY-LINE (N6/9)
1 #NUM-ELIG-CHILDREN      (N2)
1 #NUM-ELIG-CHILDREN-UNDER-6-MON (N2)
1 #TOT-CHILD-DB      (N6)
1 #RID-TEXT          (A78)
* above is linkage to GRIDCSXX
1 #LAPS-DAY-10       (N8)                           /* YK3
1 #DATE-DYN          (A) DYNAMIC                    /* YK3
1 #HOME-PHONE        (A11)                          /* YK3
1 #AUTO-DIALER-CONST (A8) INIT <'0001.wav'>         /* YK3
1 #TAB               (A1) INIT <H'09'>              /* YK3
*
1 #CONTACT-ID          (N8)                         /* vt1 \/
1 #LAST-NAME-F         (A25)
1 #FIRST-NAME-F        (A25)
1 #MIDDLE-NAME-F       (A25)
1 #SUFFIX-F            (A10)
1 #NAME-F              (A70)                       /* vt1  /\
1 #amt-overloaned-cap   (p7.2)                     /* vt3 \/
1 #amt-overloaned-var   (p7.2)                     /* vt3 /\
1 #TIME                (N7)                        /* YK7
1 #REPORT-OUTPUT       (A100)                      /* YK11
1 proc-req view of A-PROCESS-REQUEST                              /* vt7 \/
  2 id-number
  2 request-final-status
1 #senttocoll      (l)                                            /* vt7 /\
1 #nbr-of-pol      (n2)                            /* vt8 \/
1 #k               (i2)
1 #billing-adjustment (n7.2)
1 #seg             (i2)
1 #plan            (a3)
1 #BADJ-left       (a1)
1 #x-bill-adjust                 (n7.2)
1 #debit-credit-amt              (n7.2)
1 #OUT-TERM-REF-AMOUNT           (n7.2/10)
1 #OUT-TERM-REF-YEAR             (n4/10)
1 #NEW-POL-ISS-DATE              (n8/10)
1 #OUT-TERM-REF-ENTRY-DATE       (n8/10)
1 #NEW-TERM-POL-NBR              (a16/10)
1 #tot-premiums-paid             (n7.2)
1 #pol-nbr                       (a16)
1 #PAID-TO-DATE                  (N8)              /* vt8 /\
1 #DATE-OF-BIRTH                 (N8.0)        /* TT1
END-DEFINE
* * * * * * * * * * * * * * * * *
*
DEFINE WORK FILE 1 TYPE 'ASCII-COMPRESSED'          /* YK3   Auto-dialer file
DEFINE WORK FILE 3 TYPE 'ASCII-COMPRESSED'          /* YK3   backup file with CN numbers
DEFINE WORK FILE 4 TYPE 'ASCII-COMPRESSED'          /* YK11  laps report for marketing
*
COMPRESS 'Insured CN' #TAB 'Policy Number' #TAB 'Laps Date' #TAB 'Insured Name' #TAB 'Laps Type' #TAB
  INTO #REPORT-OUTPUT                                                                 /* YK11
WRITE WORK FILE 4 #REPORT-OUTPUT                                                      /* YK11
*
FORMAT  LS=133 PS=76
WRITE   TITLE LEFT 'PROGRAM: ' *PROGRAM 5X    /* not now used
  'Automated Lapse System'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (2) LS=133 PS=76
WRITE  (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Owner is not the Insured'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (3) LS=133 PS=76
WRITE  (3) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Exactly 60 days or more delq or Overloaned Today'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (4) LS=133 PS=76
WRITE  (4) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Lapse bypassed'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (5) LS=133 PS=76
WRITE  (5) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Unused'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
*      (6)    WES notices to mail
*
*  to print below @ aafm use landscape/.5 margins l/r/top/bot/font 8
FORMAT (7) LS=133 PS=50 /* 50 needed to make rpt print properly EJM
WRITE  (7) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'LAPO Information for Financial Management'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*      (8)    AAFMAA copies of all notices to DAL
*
DEFINE WORK FILE 2 TYPE 'ASCII-COMPRESSED'            /* PM45
*
IF *TIMN LT 1200000       /* midnite till 12 noon (normal job time)
  MOVE *DATN TO #YYYYMMDD     /* *DATN - 1 is considered today
  SUBTRACT 1 FROM #DD
*
  IF #DD LT 1
    SUBTRACT 1 FROM #MM
    IF #MM LT 1
      ADD 12 TO #MM
      SUBTRACT 1 FROM #YYYY
    END-IF
*
    IF #MM = 02
      COMPUTE #WORK = #YYYY / 4  /* check leap year   /* DW22
      IF #REM = 0
        MOVE 29 TO #DD
      ELSE
        MOVE 28 TO #DD
      END-IF
    ELSE
      IF #MM = 04 OR = 06 OR = 09 OR = 11
        MOVE 30 TO #DD
      ELSE
        MOVE 31 TO #DD
      END-IF
    END-IF
  END-IF
*
  MOVE #YYYYMMDD TO #TODA
ELSE                  /* noon till midnite (if job is run early)
  MOVE *DATN TO #TODA
END-IF
*
COMPRESS #TODA-MM-A #TODA-DD-A #TODA-YY-A INTO #TODA-X WITH '/'
*
* MOVE 20161004 TO #TODA   #YYYYMMDD    /* <<<<<<<<<<<<<<<<<<  test
* move #toda to #yyyymmdd  /* <<<<<<<<<<<<<<<<<<<<<<<<<< test

MOVE *DATN TO #YYYYMMDD

COMPRESS #MM-A #DD-A #YYYY-A INTO #DATX WITH '/'  /* actual today
COMPRESS #DATX '.' INTO #DATX-PER LEAVING NO
*
* Calculate date for autodialer reminder                    /* YK3
#DATE-DYN := FUNCTION-CALENDAR(<#YYYYMMDD,'Z'>)             /* YK3
#LAPS-DAY-10 := VAL(#DATE-DYN)                              /* YK3
WRITE '#LAPS-DAY-10 = ' #LAPS-DAY-10                        /* YK3
*
MOVE #TODA TO #YYYYMMDD
SUBTRACT 1 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #1-MON-AGO
*
MOVE #TODA TO #YYYYMMDD
SUBTRACT 6 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #6-MONS-AGO    /* DW19
*
MOVE #TODA TO #YYYYMMDD
SUBTRACT 2 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #2-MONS-AGO
*
MOVE #TODA TO #YYYYMMDD
SUBTRACT 3 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #3-MONS-AGO
*
MOVE #TODA TO #YYYYMMDD
SUBTRACT 4 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #4-MONS-AGO
*
MOVE #TODA TO #YYYYMMDD
SUBTRACT 1 FROM #YYYY
MOVE #YYYYMMDD TO #1-YR-AGO

*
WRITE 'Process date =' #TODA
WRITE '30-day date  =' #1-MON-AGO
WRITE '60-day date  =' #2-MONS-AGO
WRITE '90-day date  =' #3-MONS-AGO
WRITE '120-day date  =' #4-MONS-AGO
*
MOVE #TODA TO #YYYYMMDD
ADD 1 TO #MM
IF #MM GT 12
  SUBTRACT 12 FROM #MM
  ADD 1 TO #YYYY
END-IF
*
MOVE #YYYYMM TO #MS-MONTH-KEY
FIND (1) MS-V WITH MONTH-KEY = #YYYYMM /* used if m/e has already run
  IF NO RECORDS
    MOVE #TODA TO #YYYYMMDD
    MOVE #YYYYMM TO #MS-MONTH-KEY
  END-NOREC
END-FIND
WRITE 'MS-KEY used for updating =' #MS-MONTH-KEY
*
MOVE '1,2,3,4,5,6' TO #PEACHTREE    /* DW8 PM45
WRITE WORK 2 #PEACHTREE
ADD 1 TO #NUM-PEACH                 /* DW7
*
MOVE 1 TO #BYP-X1 RESET #BYP-X2
MOVE 1 TO #LAP-X1 RESET #LAP-X2
*
#CURR-VAR-INT-RATE := FUNCTION-INT-RATE(<'RATE5AB'>)  /* YK2
*
READ ST-V WITH MEMBER-KEY FROM '043549' /* search for an active pol  /* DW32
  IF (STATUS (1) = 'D') AND (ST-V.PLAN (1) = 'OL')    /* YF1
    MOVE ST-V.ID-NUMBER TO #VA-KEY-CN
    MOVE ISSUE-DATE (1) TO #VA-KEY-ISS-DT
    MOVE SPLIT-IND (1) TO #VA-KEY-SPLIT
    FIND (1) VA-V WITH RECORD-KEY = #VA-KEY
      IF NO RECORDS FOUND
        ESCAPE BOTTOM
      END-NOREC
*
      FOR #I1 13 TO 1 STEP -1     /* SEARCH FOR AN ACTIVE POL DW1
        IF YEAR-MONTH-M (#I1) NE 0
          MOVE YEAR-MONTH-M (#I1) TO #YYYYMM
          MOVE TRUE TO #FOUND-V-H-MONTH
          ESCAPE BOTTOM
        END-IF
      END-FOR
    END-FIND
*
    IF #FOUND-V-H-MONTH
      ESCAPE BOTTOM
    END-IF
  END-IF
END-READ
*
MOVE #YYYYMM TO #CURR-V-H-YYYYMM
WRITE 'Most curr V-H YYYYMMM =' #CURR-V-H-YYYYMM 'FROM' ST-V.ID-NUMBER
*
IF #CURR-V-H-YYYYMM = #TODA-YYYYMM      /* DW32
  WRITE 'Bypass Overloan test due to Early M/E'
  MOVE TRUE TO #BYPASS-OVERLOAN-TEST
ELSE
  IF #CURR-V-H-YYYYMM GT #TODA-YYYYMM
    WRITE 'SOMETHING IS WRONG WITH V/A processing'
  ELSE
    WRITE 'Normal V/A processing'
  END-IF
END-IF
*
READ ST-V BY MEMBER-KEY FROM '001900'
  MOVE *DATN TO #AS-OF-DT           /* DW4
  MOVE 'NTP' TO #SUFFIX   /*DW15
  MOVE ST-V.FACE-AMOUNT (*) TO #FACE-AMT (*)   /* DW9
  CALLNAT 'CVALUSXX'                /* DW4
    ST-V.ID-NUMBER
    #SUFFIX
    #AS-OF-DT
    #LOAN-BAL   (1:9)
    #LOAN-BAL-2 (1:9)
    #ACC-INT    (1:9)
    #ACC-INT-2  (1:9)
    #CSV        (1:9)
    #CVALUE     (1:9)
    #LVALUE     (1:9)
    #MCSV       (1:9)
    #DB         (1:9)
    #ANN-PREMIUM  (1:9)
    #FACE-AMT   (1:9)   /* DW9
    #TPP        (1:9)   /* DW9
*
  RESET #CALL-C2320PCI     /* DW36
  MOVE *ISN TO #ST-ISN
  RESET #P-I #PMNT-DUE
  RESET #UPDATE
  RESET #NX-401 #NX-402 #NX-403   /* DW24
  RESET #BANKRUPTCY                             /* DW4
  FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER /* DW4
    FOR #I1 1 TO 60
      IF NOTE-TEXT (#I1) = MASK ('*Mbr in bnkrptcy')
        MOVE TRUE TO #BANKRUPTCY
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
*
  RESET #CAP-X #CAP-AUTO-PAY                     /*Find CAP Segment   /* DW35
  RESET #NO-CAP-LOAN                    /* DW41
  RESET #DID-A-LAPS                     /* DW38
  FOR #I1 1 TO 9
    IF   (STATUS (#I1) = 'D')
        AND (CONV-DURATION (#I1) = 999)
      MOVE #I1 TO #CAP-X
      IF X-ALT-LP-IND (#I1) = '1' OR = '2' OR = '3' OR = '4' OR ='8'
        MOVE TRUE TO #CAP-AUTO-PAY
      END-IF
*
      IF X-LOAN-AMOUNT (#I1) = 0                            /* DW41
        MOVE TRUE TO #NO-CAP-LOAN
        FOR #I2 1 TO 9
          IF   (STATUS (#I2) = 'D')    /* Does any seg have a CAP loan?
              AND (CONV-DURATION (#I2) = 999)
              AND (X-LOAN-AMOUNT (#I2) NE 0)
            RESET #NO-CAP-LOAN
            ESCAPE BOTTOM
          END-IF
        END-FOR
      END-IF                                             /* END DW41
    END-IF
  END-FOR
*
  IF NOT #BANKRUPTCY                       /* DW34
      AND (CAP-BILL-DATE NE 0)
      AND (CAP-BILL-DATE LE #1-MON-AGO)
      AND NOT #CAP-AUTO-PAY                                  /* DW35
      AND NOT #NO-CAP-LOAN                                /* DW41
    MOVE 'BYPASS-COLL' TO #LAPS-TYPE
    if #laps-type = 'BYPASS-COLL'
      fnd. find proc-req with id-number = st-v.id-number                      /* vt7   \/
        if no
          reset #senttocoll
          escape bottom (fnd.)
        end-norec
        if request-final-status= 'I' /*  or = 'C'               /* vt 07282014 vt 08052014
          move true to #senttocoll
          reset #LAPS-TYPE
          escape bottom (fnd.)
        end-if
      end-find
    end-if
    if not #senttocoll                                                         /* vt7   /\

      ADD 1 TO #BYPASS-COLL
      PERFORM BUILD-BYPASS
      RESET #LAPS-TYPE
    end-if                                                                     /* vt7
  END-IF
*
  FOR #I1 1 TO 9
    IF STATUS (#I1) NE 'D'
      ESCAPE TOP
    END-IF
    RESET #LAPS-TYPE #OVERLOANED
*
    COMPUTE #P-I = X-LOAN-AMOUNT   (#I1) + #ACC-INT   (#I1)
      + X-LOAN-AMOUNT-2 (#I1) + #ACC-INT-2 (#I1)
*
    MOVE #P-I TO #P-I-4-OVRLOAN                         /* DW4
    IF CONV-DURATION (#I1) = 999 /* back out CAP loan   /* DW4
      SUBTRACT X-LOAN-AMOUNT (#I1) FROM #P-I-4-OVRLOAN  /* DW4
      SUBTRACT #ACC-INT      (#I1) FROM #P-I-4-OVRLOAN  /* DW4
    END-IF
*
*      WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1) 'CHK Overloaned'
*        'P-I/CSV=' #P-I-4-OVRLOAN #CSV (#I1) 'PLAN=' PLAN (#I1)

    IF   (#CSV (#I1) GT 0)                                /* DW4
        AND (#P-I-4-OVRLOAN GT #CSV (#I1))                   /* DW4
        AND (NOT #BYPASS-OVERLOAN-TEST)                      /* DW32
*      WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1) 'Overloaned'
*        'P-I/CSV=' #P-I-4-OVRLOAN #CSV (#I1) 'PLAN=' PLAN (#I1)
      MOVE TRUE TO #OVERLOANED
      PERFORM CHECK-OVERLOANED-RPU                 /* DW31
    END-IF
*
    RESET #FPF-DELQ                 /* DW20
    MOVE DATE-ENTERED (#I1) TO #DATE-ENTERED
    IF DATE-ENTERED (#I1) = 0
      MOVE ISSUE-DATE (#I1) TO #DATE-ENTERED
    END-IF
*
    IF   (X-FIRST-PLACE-FEE (#I1) GT 0)
        AND (#DATE-ENTERED LT #2-MONS-AGO)
        AND (NOT PAD-CODE = 'P' OR = 'D' OR = 'V' OR = 'X')
        AND (NOT EZPAY-START (#I1) = 'Y')                          /* PM42
      IF  ((ST-V.ID-NUMBER = 136163) AND (#TODA LT 20051030))
* below added 10/19/2005
          OR ((ST-V.ID-NUMBER =  72114) AND (#TODA LT 20051223))
          OR ((ST-V.ID-NUMBER =  88335) AND (#TODA LT 20051224))
        WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1) MODE (#I1) ST-V.PLAN (#I1)  /* YF1
          'FPF DELQ but waiting till later'
      ELSE
        IF #CSV (#I1) NE 0
          WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1)
            'FPF DELQ bypassed with existing CSV'
        END-IF
*
        WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1) 'FPF DELQ' ST-V.PLAN (#I1)  /* YF1
          'FPF=' X-FIRST-PLACE-FEE (#I1) 'CSV=' #CSV (#I1)
          'dt-ent=' DATE-ENTERED(#I1)
          'BADJ=' X-BILL-ADJUST (#I1) 'DB/CR=' DEBIT-CREDIT-AMT
        MOVE TRUE TO #FPF-DELQ
        MOVE 'BYPASS-FPF' TO #LAPS-TYPE
        ADD 1 TO #BYPASS-FPF-CNT
        PERFORM BUILD-BYPASS
      END-IF
    END-IF
*
    RESET #AUTO-CAP-TERM                    /* DW2 and below
    IF   (CONV-DURATION (#I1) = 999)
        AND (X-LOAN-AMOUNT (#I1) = 0)
        AND (ISSUE-DATE (#I1) GT *DATN - 50000)  /* less than 5 years old
      FIND NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
        FOR #I2 1 TO 60
          IF NOTE-TEXT (#I2) = MASK
              ('*CANCEL INSURANCE WHEN CAP LOAN IS PAID OFF')
            MOVE TRUE TO #AUTO-CAP-TERM
            WRITE ST-V.ID-NUMBER 'CAP auto policy termination'
              ISSUE-DATE (#I1)
            ESCAPE BOTTOM
          END-IF
        END-FOR
      END-FIND
    END-IF
*
    RESET #YYYYMMDD
    CALLNAT 'GPDTOSXX'
      ST-V.ISSUE-DATE (#I1)
      ST-V.MONTH-ALLOC-AMT (#I1)
      ST-V.PAID-TO-DATE (#I1)
      #YYYYMMDD
    MOVE #YYYYMMDD TO #PD-TO-DT
*
    RESET #PD-TO-M-E
    IF  (ST-V.ISSUE-DATE (#I1) LT 19970101)    /* old or new
        OR (ST-V.MONTH-ALLOC-AMT (#I1) = 999.99)  /*   processing
        OR (ST-V.ISS-DT-DD (#I1) = 1) /* NXT  or ISS DAY = 1
      MOVE TRUE TO #PD-TO-M-E
    END-IF
*
*  Create file for Autodialer 10 days before policy is lapsing               /* YK3
    IF ST-V.PAY-STATUS (#I1) LT '40' AND                                     /* YK3
        (#PD-TO-DT = #LAPS-DAY-10  OR #OVERLOANED)                           /* YK3
      IF ST-V.MODE(#I1) = '0' OR ='1' OR ='2' OR ='4' OR
          (ST-V.PAD-CODE = 'P' OR ST-V.PAD-CODE = 'D')                     /* YK4
        IGNORE                                                             /* YK4
      ELSE
        reset #contact-id                       /* vt9 06/23/2014 \/
          #phone-type
          #phone
          #intl
        #contact-id := st-v.member-contact-id   /* vt9 06/23/2014 /\                                                                 /* YK4
        #PHONE-TYPE := 'H'         /* NG1 \/\/
        CALLNAT 'OBJNPH00'
          #CONTACT-ID
          #PHONE-TYPE
          #PHONE
          #INTL
        IF #INTL NE 'Y'
          MOVE EDITED #TELE-NUMBER (EM=Z9999999999) TO #HOME-PHONE
          WRITE WORK FILE 1 VARIABLE #HOME-PHONE ',' #AUTO-DIALER-CONST
*                             NG1 /\/\
*         MOVE EDITED ST-V.TELE-NUMBER (EM=Z9999999999) TO #HOME-PHONE           /* YK3
*         IF ST-V.TELE-NUMBER > 2000000000                                       /* YK3
*           WRITE WORK FILE 1 VARIABLE #HOME-PHONE ',' #AUTO-DIALER-CONST        /* YK3
        ELSE                                                                   /* YK3
          COMPRESS 'Invalid telephone number on file for ' ST-V.ID-NUMBER
            INTO ERROR-MESSAGE                                                 /* YK3
          ERROR-PROGRAM := *PROGRAM                                            /* YK3
          CALLNAT 'GPRN0003' ERROR-LOG                                         /* YK3
        END-IF                                                                 /* YK3
        WRITE WORK FILE 3 VARIABLE #HOME-PHONE #TAB ST-V.ID-NUMBER #TAB #PD-TO-DT /* YK3
      END-IF                                                                 /* YK4
    END-IF                                                                   /* YK3
*
    IF ((ST-V.PAY-STATUS (#I1) LT '40') /*   1. PP DELQ
        AND ((#PD-TO-DT = #1-MON-AGO)
        OR (#PD-TO-DT = #2-MONS-AGO)
        OR (#PD-TO-DT LT #2-MONS-AGO)))
        OR #OVERLOANED                     /*   2. OVERLOANED       DW4
*    or #FPF-DELQ                       /*   3. FPF DELINQUENR  DW20
      IGNORE
    ELSE
      ESCAPE TOP
    END-IF
*
    GET ST-V #ST-ISN   /* DW5
*
    reset #nbr-of-pol #seg                   /* vt8 \/
    for #k 1 9
      if st-v.status(#k) = 'D'
        add 1 to #nbr-of-pol
        move #k to #seg
      end-if
    end-for                                  /* vt8 /\
*
    GET CI-V #ST-ISN   /* DW5
*
*    DISPLAY ST-V.ID-NUMBER
*      'ISS-DATE'    ST-V.ISSUE-DATE (#I1)
*      'P-I'         #P-I
*      'CSV'         #CSV
*      'PREM/Needed' #PMNT-DUE
*
    ADD 1 TO #NUM-PROCESSED
*
    MOVE ST-V.ID-NUMBER TO #CGA-SCR-ID
    MOVE #I1 TO #CONTACT-SEG  /* get owner of this policy
    CALLNAT 'G3500SAD' #CGA-MASTER #PDA-AREA-G3500AAD
*    COMPRESS 'Dear' #FULL-RANK #LAST-NAME INTO #DEAR-FORMATED-NAME                /* vt1
    COMPRESS #EXT-DEAR-FORMATED-NAME ':' INTO #EXT-DEAR-FORMATED-NAME LEAVING NO
*
    RESET #FOR-INSURED-AREA
    IF #EXT-SPS-GEN-NAME NE ' ' /* also used for insured if non-mbr owner             /* vt1
      COMPRESS 'For:' #EXT-SPS-GEN-NAME 'CN' #SPS-GEN-ID                              /* vt1
        INTO #FOR-INSURED-AREA
      ADD 1 TO #CNT-2
      DISPLAY (2) #CNT-2 ST-V.ID-NUMBER #ID-NUM 'Seg' #CONTACT-SEG
        #EXT-SPS-GEN-NAME (EM=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)               /* vt1 was 20x
        #SPS-GEN-ID 'Issued' ST-V.ISSUE-DATE (#I1)
        'PD-To'  ST-V.PAID-TO-DATE (#I1)
    END-IF
*
*    CALLNAT 'GKATRSXX' #ZIP-CODE #KATRINA-ZIP  /* is Owner Katrina DW19   vt12
*
*    IF  (PLAN (#I1) = 'RT' OR = 'LT' OR = 'SO' OR = 'FSO')          /* YK5
*       OR ((PLAN-A1 (#I1) GE 'U') AND  (PLAN-A1 (#I1) LE 'Z'))      /* YK5
    IF  (ST-V.PLAN (#I1) = 'SO' OR = 'FSO')                              /* YK5
        OR FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>)      /* YF1                   /* YK5
      RESET #WL
    ELSE
      MOVE TRUE TO #WL
    END-IF
*
* below process only completes before m/e in time for the APL if the
* lapse test is done prior to m/e job so if m/e is run on the 29th
* (FRIDAY) if the pd-to-date is xx/xx/30 the mode chg will occur on the
* nite of the 30th after M/E is run too late to get a Q APL.
    RESET #CHG-MOD-TO-Q    /* DW14
    IF MODE (#I1) = 'A' OR = 'S'    /* DW11
      MOVE TRUE TO #FORCE-QUARTERLY
      PERFORM CALC-PREM-DUE
      MOVE #MOD-PREM TO #QUAR-PRM
      MOVE #PMNT-DUE TO #DUE-QUARTERLY
      RESET #FORCE-QUARTERLY
      PERFORM CALC-PREM-DUE
      MOVE #MOD-PREM TO #CURR-MOD-PRM
      IF   #WL
          AND (ST-V.PAY-STATUS (#I1) LT '40')
          AND ((#CSV (#I1) - #P-I) LE #PMNT-DUE)
          AND ((#CSV (#I1) - #P-I) GT #DUE-QUARTERLY)
        MOVE TRUE TO #UPDATE
        MOVE TRUE TO #CHG-MOD-TO-Q
        WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1) 'mode chged to "Q"'
*
        MOVE ST-V.MEMBER-CONTACT-ID  TO #CONTACT-ID                                              /* vt1   \/
        #NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME-F,#MIDDLE-NAME-F,#LAST-NAME-F,#SUFFIX-F>)
        COMPRESS #FIRST-NAME-F #MIDDLE-NAME-F #LAST-NAME-F INTO #NAME                            /* vt1   /\
*
        RESET TR-V
        MOVE ST-V.PROCESS-IND TO TR-V.PROCESS-IND
        MOVE ST-V.ID-NUMBER   TO TR-V.ID-NUMBER
*        MOVE ST-V.NAME        TO TR-V.NAME                                             /* vt1
        MOVE #NAME             TO TR-V.NAME                                             /* vt1
        MOVE ST-V.DATE-ACCT-UPDATE  TO TR-V.DATE-LAST-UPDATE
        MOVE *INIT-ID         TO TR-V.TERMINAL-ID
        MOVE 'EDS'            TO TR-V.CLERK-ID
*       MOVE *DATN            TO TR-V.TRANSACTION-DATN
*       MOVE *TIMN            TO TR-V.TRANSACTION-TIMN
        MOVE #TODA            TO TR-V.TRANSACTION-DATN   /* DW22
        MOVE 2300000          TO TR-V.TRANSACTION-TIMN  /* 11:00 PM
*           to preceed time on M/E tr's (ATHPIALA/ATHPRTCK/ATHPTMCV)
        MOVE 'MODE'                TO #TR-REG-MODE-LBL-1B
        MOVE CI-V.ISSUE-DATE(#I1)  TO #TR-REG-MODE-ISSUE-DATE
        MOVE ST-V.MODE      (#I1)  TO #TR-REG-MODE-MODE
        MOVE EDITED #CURR-MOD-PRM (EM=Z,ZZZ.99) TO #TR-REG-MODE-MOD-PRM
        MOVE CI-V.PAID-TO-DATE (#I1) TO #TR-REG-MODE-PAID-TO
        MOVE EDITED CI-V.DEBIT-CREDIT-AMT(EM=-ZZZZ.99)
          TO #TR-REG-MODE-DB-CR-ADJ
        MOVE EDITED ST-V.X-BILL-ADJUST(#I1) (EM=-ZZZZ.99)
          TO #TR-REG-MODE-BILL-ADJ
*
        MOVE 1 TO #ITR1
        MOVE #TR-REG-MODE       TO TR-V.OLD-DATA (#ITR1)
        MOVE 'Q'                TO #TR-REG-MODE-MODE
        MOVE EDITED #QUAR-PRM (EM=ZZZ.99) TO #TR-REG-MODE-MOD-PRM
        MOVE CI-V.PAID-TO-DATE (#I1) TO #TR-REG-MODE-PAID-TO
        MOVE EDITED CI-V.DEBIT-CREDIT-AMT(EM=-ZZZZ.99)
          TO #TR-REG-MODE-DB-CR-ADJ
        MOVE EDITED ST-V.X-BILL-ADJUST (#I1) (EM=-ZZZZ.99)
          TO #TR-REG-MODE-BILL-ADJ
*
        MOVE #TR-REG-MODE TO TR-V.NEW-DATA (#ITR1)
*       STORE TR-V  /* PM14
*
        MOVE 'Q' TO ST-V.MODE (#I1)    /* DW11
      END-IF
    END-IF
*
    PERFORM CALC-PREM-DUE
    MOVE EDITED #PMNT-DUE (EM=Z,ZZZ.99) TO #PMNT-DUE-DISP
    COMPRESS '$' #PMNT-DUE-DISP INTO #PMNT-DUE-DISP LEAVING NO
*
    MOVE ISSUE-DATE (#I1) TO #YYYYMMDD
    COMPRESS #MM-A #DD-A #YYYY-A INTO #ISSUED WITH '/'
*
    RESET #APL #APL-LBL #MPL
*    IF ST-V.ID-NUMBER = 157236 or = 158372 or = 173174  /* 101966
*      DISPLAY #WL #OVERLOANED #P-I #FPF-DELQ #CSV(#I1) #PMNT-DUE
*    END-IF
    IF   #WL
        AND (NOT #OVERLOANED)                  /* DW4
*    AND (#P-I GT 0)                        /* DW25   DW27
*    AND (NOT #FPF-DELQ)                    /* DW20
        AND ((#CSV (#I1) - #P-I) GE #PMNT-DUE)
        AND (ST-V.PAY-STATUS (#I1) LT '40')
      MOVE TRUE TO #APL
*  WRITE ST-V.ID-NUMBER 'MOVE TRUE TO #APL'
      MOVE 'APL' TO #APL-LBL
    END-IF
*
    IF   #WL                    /* DW25
        AND (NOT #OVERLOANED)
        AND (NOT #APL)                              /* DW27
*    AND (#P-I GT 0)                             /* DW27
        AND ((#CSV (#I1) - #P-I) LT #PMNT-DUE)
        AND ((#TPP (#I1) - #P-I) GE #PMNT-DUE)
        AND (ST-V.PAY-STATUS (#I1) LT '40')
      MOVE TRUE TO #MPL       /*  DW25
* IF ST-V.ID-NUMBER = 101966
*   WRITE 'move true to #mpl'
* END-IF
    END-IF
*
    IF (((#PD-TO-DT = #2-MONS-AGO)  /* 60 day LAPSE PROCESSING <<<<<
        OR (#PD-TO-DT LT #2-MONS-AGO)) /* 60 day or greater   DW12
        AND (NOT #PD-TO-M-E))                     /* not a m/e case
*
        OR  ((#PD-TO-DT LT #3-MONS-AGO)  /* 90 day or greater   DW12
        AND (#PD-TO-M-E))               /* IS a m/e case       DW12
*
        OR ((#PD-TO-DT-YYYYMM = #2-MONS-AGO-YYYYMM)  /* 60 days for day
        AND (#TODA-MMDD = 0228)                   /* special feb 28
        AND (#PD-TO-DT-DD = 29 OR = 30 OR = 31)
        AND (NOT #PD-TO-M-E))                     /* not a m/e case
*
        OR ((#PD-TO-DT-YYYYMM = #2-MONS-AGO-YYYYMM)  /* 60 days for day
        AND (#TODA-MMDD = 0930)                   /* special sep 30
        AND (#PD-TO-DT-DD = 31)
        AND (NOT #PD-TO-M-E))                     /* not a m/e case
*
        OR (((#PD-TO-DT-MM = #3-MONS-AGO-MM) /* do all m/e's at end of day 1
        AND (#TODA-DD = 1)
        OR (#PD-TO-DT LT #2-MONS-AGO)) /* 60 day or greater   DW12
        AND (#PD-TO-M-E))                     /* IS A m/e case
*
        OR #OVERLOANED                  /* DW4
*   OR #FPF-DELQ                    /* DW20
*
*      IF ST-V.ID-NUMBER = 163293 /* 157236 or = 158372 or = 173714 /*  101966
*        WRITE 'LAPSE TEST cn' ST-V.ID-NUMBER 'apl=' #APL '=' PAD-CODE
*      END-IF
*
*       IF #KATRINA-ZIP              /* DW19                                  /* vt12 \/
*           AND (#PD-TO-DT GE #6-MONS-AGO)
*           AND (#TODA LE 20060331)
*         WRITE ST-V.ID-NUMBER ISSUE-DATE (#I1)
*           'Pd-to=' #PD-TO-DT 'Katrina Delinquent Lapse Bypassed'
*         MOVE 'BYPASS-KATR' TO #LAPS-TYPE            /* DW21
*         ADD 1 TO #BYPASS-KAT                        /* DW21
*       END-IF                                                                /* vt12 /\
*                                                      Reasons to bypass
      IF  ST-V.PAD-CODE = 'P' OR = 'N' OR = 'D' OR = 'L'
          OR = 'V' OR = 'W' OR = 'X' OR = 'Z'
          AND NOT #OVERLOANED             /* DW4   do not add FPF-DELQ
          AND NOT #BANKRUPTCY /* Bankrupt should show first   /* DW41
        MOVE 'BYPASS-EZP' TO #LAPS-TYPE                     /*   #1
        ADD 1 TO #BYPASS-EZP-CNT
      ELSE
        IF  #APL
            AND NOT #OVERLOANED                  /* DW4
            AND NOT #BANKRUPTCY /* Bankrupt should show first   /* DW41
*        AND NOT #fpf-delq                    /* DW20
          MOVE 'BYPASS-APL' TO #LAPS-TYPE                   /*   #2
          ADD 1 TO #BYPASS-APL-CNT
        ELSE
*         IF  ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
*           MOVE 'BYPASS-SPG' TO #LAPS-TYPE   /* DW18            #3
*           ADD 1 TO #BYPASS-SPG-CNT
*         ELSE
*           COMPUTE #ADJ-AMT = DEBIT-CREDIT-AMT + X-BILL-ADJUST (#I1)
*            IF #ADJ-AMT LT 0
          IF  ((DEBIT-CREDIT-AMT        NE 0)     /* DW16
              OR  (X-BILL-ADJUST (#I1)     NE 0)
              OR  (X-FIRST-PLACE-FEE (#I1) NE 0)
              OR  (C*OUT-TERM-REF-GROUP <> 0))     /* YK8
*              AND NOT #OVERLOANED                  /* DW4                               /* vt13
              AND NOT #BANKRUPTCY /* Bankrupt should show first   /* DW41
*            AND NOT #fpf-delq                    /* DW20
*
            if #nbr-of-pol=1                                                                 /* vt8 \/
                and (x-loan-amount(#seg) eq 0 and x-loan-amount-2(#seg) eq 0)                /* vt8 add
              CALLNAT 'GPLNMSXX' #pol-nbr st-v.id-number #i1
              reset #billing-adjustment #debit-credit-amt #tot-premiums-paid
                #paid-to-date
              move st-v.x-bill-adjust(#i1) to #billing-adjustment
              perform combine-and-pay
              st-v.debit-credit-amt           := #debit-credit-amt
              st-v.TOT-PREMIUMS-PAID(#i1)     := #TOT-PREMIUMS-PAID
              st-v.x-bill-adjust    (#i1)     := #x-bill-adjust
              ST-V.PAID-TO-DATE     (#I1)     := #PAID-TO-DATE
              st-v.OUT-TERM-REF-AMOUNT(*)     := #OUT-TERM-REF-AMOUNT     (*)
              st-v.out-term-ref-year  (*)     := #OUT-TERM-REF-YEAR       (*)
              st-v.new-pol-iss-date   (*)     := #NEW-POL-ISS-DATE        (*)
              st-v.out-term-ref-entry-date(*) := #OUT-TERM-REF-ENTRY-DATE (*)
              st-v.new-term-pol-nbr (*)       :=  #NEW-TERM-POL-NBR       (*)
              update (1120)
*
              RESET #YYYYMMDD                            /* vt11 \/
              CALLNAT 'GPDTOSXX'
                ST-V.ISSUE-DATE (#I1)
                ST-V.MONTH-ALLOC-AMT (#I1)
                ST-V.PAID-TO-DATE (#I1)
                #YYYYMMDD
              MOVE #YYYYMMDD TO #PD-TO-DT               /*  vt11 /\
*
*               if (#badj-left = 'N') and (st-v.paid-to-date-yyyymm(#i1) le #2-MONS-AGO-yyyymm)    /* vt10
*              if (#badj-left = 'N') and (st-v.paid-to-date (#i1) le #2-MONS-AGO )                  /* vt10    vt11

              if (#badj-left = 'N') and (#pd-to-dt le #2-mons-ago )                         /* vt11
                move 'LAPS' to #laps-type
              else
                MOVE 'BYPASS-WRK' TO #LAPS-TYPE              /*    #4                /* vt14 10/10/2016
                ADD 1 TO #BYPASS-ADJ-CNT
              end-if
            else                   /* vt8 /\
              MOVE 'BYPASS-ADJ' TO #LAPS-TYPE              /*    #4
              ADD 1 TO #BYPASS-ADJ-CNT
            end-if                                                                          /* vt8
          ELSE
            IF (#P-I GT 0)    /* DW4
                AND NOT #OVERLOANED                  /* DW4
*              AND NOT #fpf-delq                    /* DW20
                AND NOT #BANKRUPTCY /* Bankrupt should show first   /* DW41
              MOVE 'BYPASS-LOAN' TO #LAPS-TYPE           /*    #5
              ADD 1 TO #BYPASS-LON-CNT
            ELSE
              IF   (MODE (#I1) = 'G')
                  AND (ALOT-AMT NE 0)
                  AND NOT #OVERLOANED                  /* DW4
                  AND NOT #BANKRUPTCY /* Bankrupt should show first   /* DW41
*                AND NOT #fpf-delq                    /* DW20
                MOVE 'BYPASS-ALT' TO #LAPS-TYPE          /*    #6
                ADD 1 TO #BYPASS-ALT-CNT
              ELSE
                IF (MODE (#I1) = '0' OR = '1' OR = '2' OR = '4')
                    AND NOT #OVERLOANED                  /* DW4
                    AND NOT #BANKRUPTCY /* Bankrupt should show first   /* DW41
*                  AND NOT #fpf-delq                    /* DW20
                  MOVE 'BYPASS-CCRD' TO #LAPS-TYPE       /*    #7
                  ADD 1 TO #BYPASS-CCRD-CNT
                ELSE
                  IF #BANKRUPTCY                     /* DW4    #8
                    ADD 1 TO #BYPASS-BANK-CNT
                    MOVE 'BYPASS-BANK' TO #LAPS-TYPE /* DW4
                  ELSE
                    IF #LAPS-TYPE = ' '                    /* DW21
                      IF #OVERLOANED    /* DW4
                        MOVE 'LAPO' TO #LAPS-TYPE          /*   #LAPO
                      ELSE
                        IF X-FIRST-PLACE-FEE (#I1) NE 0
                          MOVE 'LAPN' TO #LAPS-TYPE         /*   #LAPN
                        ELSE
                          MOVE 'LAPS' TO #LAPS-TYPE         /*   #LAPS
                        END-IF
                      END-IF
                    END-IF
                  END-IF
                END-IF
              END-IF
            END-IF
          END-IF
*         END-IF            /* DW18
        END-IF
      END-IF
*
      IF #APL
        ADD 1 TO #OVER-60-APL
      END-IF
*
      IF   (#APL-LBL = 'APL')
          AND (#PD-TO-DT-YYYYMM NE #2-MONS-AGO-YYYYMM)
        MOVE 'MPL' TO #APL-LBL
      END-IF
*
      ADD 1 TO #CNT-3
      DISPLAY (3) #CNT-3 (EM=ZZZZ)
        'CN/NUMBER'  ST-V.ID-NUMBER
        'Issue/Date' #ISSUED
        'INTR/FLAG'  ST-V.INTRO-FLAG
        'LAPS/Type'  #LAPS-TYPE
        'CSV'        #CSV (#I1)
        'PRIN/INT'   #P-I
        'PD-TO/Date' #PD-TO-DT
        'Prem/Due'   #PMNT-DUE-DISP
        'APL'        #APL-LBL
        'MD'         MODE (#I1)
        'PLN'        ST-V.PLAN (#I1)  /* YF1
        'Pay/Stat'   PAY-STATUS (#I1)
        'DB/CR'      DEBIT-CREDIT-AMT    (EM=-ZZZZ.99)
        'Bill/Adj'   X-BILL-ADJUST (#I1) (EM=-ZZZZ.99)
        'Linked/Mbr' ST-V.LINKED-CN (1)
*
      IF #LAPS-TYPE = MASK ('BYPASS')
        IF #CHG-MOD-TO-Q                   /* DW11
          STORE TR-V      /* transaction register PM14
          UPDATE (1120)   /* status file      /* DW5
          END TRANSACTION                     /* DW5
        END-IF
*
        IF ((#LAPS-TYPE = 'BYPASS-APL')  /* LEE NEED NOT SEE these
            AND (#PD-TO-DT-YYYYMM = #2-MONS-AGO-YYYYMM) /* not MPL  DW17
            AND (MODE (#I1) = 'A' OR = 'S' OR = 'Q'))
            OR (#LAPS-TYPE = 'BYPASS-EZP')
            or (#laps-type = 'BYPASS-WRK')            /* vt14 10/10/2016
          IGNORE
        ELSE       /* Show these to ELB
          IF (#LAPS-TYPE = 'BYPASS-APL')
              OR ((#LAPS-TYPE = 'BYPASS-LOAN') AND #MPL)   /* DW25
            MOVE 'MPL' TO #BYPASS-REASON  /* DW17
          END-IF
*
          PERFORM BUILD-BYPASS
        END-IF
      ELSE
        ADD 1 TO #LAP-X2
        IF #LAP-X2 GT 5
          ADD 1 TO #LAP-X1
          MOVE 1 TO #LAP-X2
          IF #LAP-X1 GT 4
            PERFORM NX-LAPSE
          END-IF
        END-IF
*
        MOVE ST-V.ID-NUMBER TO #LAP-CN    (#LAP-X1, #LAP-X2)
        MOVE '-'            TO #LAP-DASH  (#LAP-X1, #LAP-X2)
        MOVE #LAPS-TYPE     TO #LAP-TYPE  (#LAP-X1, #LAP-X2)
        MOVE '/'            TO #LAP-SLASH (#LAP-X1, #LAP-X2)
*
        CALLNAT 'GPLNMSXX' #POL-NUM ST-V.ID-NUMBER #I1 /* build POL-#
*
        PERFORM PROCESS-LAPSE
        MOVE TRUE TO #DID-A-LAPS                        /* DW38
*
*       IF ST-V.ALOT-SW NE 'A'                               /* DW23
        MOVE 'A' TO ST-V.ALOT-SW  /* To get process & intro-flag
*       END-IF
*
        UPDATE (1120)   /* status file      /* DW5
        END TRANSACTION                     /* DW5
*
        GET CI-V #ST-ISN /* To include above updates  /* DW5
*
        IF #LAPS-TYPE = 'LAPO'      /* DW4
          WRITE ST-V.ID-NUMBER 'Do LAPO on' ST-V.ISSUE-DATE (#I1)
          MOVE TRUE TO #CALL-C2320PCI /* Only 1 call per member    DW36
          MOVE 'LAPO'           TO #SCR-TRAN (#I1)   /* SETUP for C2320pci
          MOVE CI-V.ISSUE-DATE (#I1) TO #SCR-EFF-DTE-YYYYMMDD (#I1)
          MOVE CI-V.PLAN       (#I1) TO #SCR-PLN    (#I1)
*
          PERFORM DO-PEACHTREE-PROCESSING                       /* DW36
*         PERFORM DO-LAPO-C2320PCO    /* Moved to end of member
        END-IF
        END TRANSACTION                     /* DW5
*
        IF #EXT-SPS-GEN-NAME NE ' ' /* sent to non insured                       vt1
          WRITE ST-V.ID-NUMBER 'above had 60 day lapse letter sent'
        END-IF
      END-IF
    ELSE                                 /* DW14
      IF #CHG-MOD-TO-Q                   /* DW14
        STORE TR-V      /* transaction register
        UPDATE (1120)   /* status file
        END TRANSACTION
      END-IF
    END-IF
*
    END TRANSACTION
  END-FOR
*
  IF #CALL-C2320PCI                         /* DW36
    PERFORM DO-LAPO-C2320PCO    /* Moved from above
  END-IF
*
  IF (#CAP-AUTO-PAY      /* Clear CAP-BILL-DATE IF now paying 1/2/3/4/8   /* DW37
      OR #NO-CAP-LOAN)      /*     or if there is no CAP loan              /* DW41
      AND (ST-V.CAP-BILL-DATE NE 0)
    GET ST-V #ST-ISN
    RESET ST-V.CAP-BILL-DATE
    UPDATE (1531)
    END TRANSACTION
    WRITE ST-V.ID-NUMBER 'CAP-BILL-DATE reset'
  END-IF
*
  IF #DID-A-LAPS                      /* DW38
    MOVE 'EDS' TO #CLERK
    CALLNAT 'GAUTHSXX' ST-V.ID-NUMBER     /*Set ALOT-CHG-AUTH if FA chged
      #CLERK  #FORCE-A
  END-IF
END-READ
*
WRITE (7) 'Total: Prin' #TOT-PRIN (EM=ZZ,ZZZ.99)
  'Int'  #TOT-INT  (EM=Z,ZZZ.99)
  'CSV'  #TOT-CSV  (EM=ZZ,ZZZ.99)
  'OVL'  #TOT-OVLN  (EM=ZZ,ZZZ.99)
  'Prms-Paid'  #TOT-TPP (EM=ZZ,ZZZ.99)
  'Taxbl-Inc'  #TOT-TAXABLE-INC (EM=ZZ,ZZZ.99)
WRITE (5) 'total APL bypasses=' #OVER-60-APL
*
IF (#BYP-X1 NE 1) OR (#BYP-X2 NE 0)
  PERFORM NX-BYPASS
END-IF
*
IF (#LAP-X1 NE 1) OR (#LAP-X2 NE 0)
  PERFORM NX-LAPSE
END-IF
*
IF #CNT-3 = 0
  WRITE (3) /// 'NO EXACTLY-60 day delq today'
END-IF
*
WRITE 'Number LAPSE"s bypassed due to LOAN'  #BYPASS-LON-CNT
WRITE 'Number LAPSE"s bypassed due to ALT '  #BYPASS-ALT-CNT
WRITE 'Number LAPSE"s bypassed due to APL '  #BYPASS-APL-CNT
WRITE 'Number LAPSE"s bypassed due to ADJ '  #BYPASS-ADJ-CNT
WRITE 'Number LAPSE"s bypassed due to EZP ' #BYPASS-EZP-CNT
WRITE 'Number LAPSE"s bypassed due to SPG ' #BYPASS-SPG-CNT
WRITE 'Number LAPSE"s bypassed due to CCRD' #BYPASS-CCRD-CNT
WRITE 'Number LAPSE"s bypassed due to BANK' #BYPASS-BANK-CNT
WRITE 'Number LAPSE"s bypassed with FPF' #BYPASS-FPF-CNT   /* DW20
WRITE 'Number LAPSE"s bypassed due to KATR' #BYPASS-KAT    /* DW21
WRITE 'Number LAPSE"s bypassed due to COLL' #BYPASS-COLL    /* DW34
*
RESET #NOTE-TEXT (*)
COMPRESS 'ATHPLAPS has completed for' #TODA 'a/o' *TIMN 'on' *DATU
  INTO #NOTE-TEXT (1)
COMPRESS '30-day WES letters=' #30-DAY-WES-CNT
  '  30-day CERT letters=' #30-DAY-CERT-CNT
  INTO #NOTE-TEXT (2)
COMPRESS 'LAPS/LAPN"s=' #LAPS-LAPN-CNT 'LAPO"s='#LAPO-CNT
  '  LAPC"s=' #LAPC-CNT '  BYPASSED= APL:'#BYPASS-APL-CNT
  INTO #NOTE-TEXT (3)
COMPRESS       'LON:'  #BYPASS-LON-CNT
  ' ADJ:'  #BYPASS-ADJ-CNT
  ' EZP:'  #BYPASS-EZP-CNT
  ' SPG:'  #BYPASS-SPG-CNT
  ' ALT:'  #BYPASS-ALT-CNT
  ' CCRD:' #BYPASS-CCRD-CNT
  ' BANK:' #BYPASS-BANK-CNT
  ' FPF:' #BYPASS-FPF-CNT        /* DW20
  ' COLL:' #BYPASS-COLL          /* DW34

  INTO #NOTE-TEXT (4) LEAVING NO
MOVE 'VXT' TO #TO-INIT                                        /* vt8 \/
MOVE '*NX' TO #CGA-SCR-SUFFIX
FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)  /* vt8   /\
*
FOR #I3 1 TO 5
  WRITE #NOTE-TEXT (#I3)
END-FOR
*
END TRANSACTION
*
***********************************************************************
DEFINE SUBROUTINE BUILD-BYPASS
***********************************************************************
*
ADD 1 TO #BYP-X2
IF #BYP-X2 GT 5
  ADD 1 TO #BYP-X1
  MOVE 1 TO #BYP-X2
  IF #BYP-X1 GT 4
    PERFORM NX-BYPASS
  END-IF
END-IF
*
MOVE ST-V.ID-NUMBER TO #BYP-CN    (#BYP-X1, #BYP-X2)
MOVE '-'            TO #BYP-DASH  (#BYP-X1, #BYP-X2)
MOVE #BYPASS-REASON TO #BYP-TYPE  (#BYP-X1, #BYP-X2)
MOVE '/'            TO #BYP-SLASH (#BYP-X1, #BYP-X2)
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE NX-BYPASS
***********************************************************************
*
RESET #NOTE-TEXT (*)
MOVE 'These are due to LAPSE or be Sent to Coll but were bypassed'
  TO #NOTE-TEXT (1)
*
FOR #I3 1 TO 4
  IF #BYP-TEXT (#I3) NE ' '
    MOVE #BYP-TEXT (#I3) TO #NOTE-TEXT (#I3 + 1)
  END-IF
END-FOR
*
MOVE 'ELB' TO #TO-INIT
MOVE '*NX' TO #CGA-SCR-SUFFIX
FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*
MOVE 'VXT' TO #TO-INIT
move '*NX' to #cga-scr-suffix                                     /* PM46
FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5) /* PM46
MOVE 1 TO #BYP-X1
MOVE 1 TO #BYP-X2
*
RESET #BYP-TEXT (*)
*
FOR #I3 1 TO 5
  WRITE #NOTE-TEXT (#I3)
END-FOR
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE NX-LAPSE
***********************************************************************
*
RESET #NOTE-TEXT (*)
MOVE 'The following were LAPSE"d automatically last night:'
  TO #NOTE-TEXT (1)
*
FOR #I3 1 TO 4
  IF #LAP-TEXT (#I3) NE ' '
    MOVE #LAP-TEXT (#I3) TO #NOTE-TEXT (#I3 + 1)
  END-IF
END-FOR
*
MOVE 'ELB' TO #TO-INIT
MOVE '*NX' TO #CGA-SCR-SUFFIX
FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*
MOVE 'VXT' TO #TO-INIT
MOVE '*NX' TO #CGA-SCR-SUFFIX
FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*
IF #LAPO-CNT NE 0
  MOVE 'RXB' TO #TO-INIT                                     /* vt2  /* vt5 was 'SH' vt6 was KMC /* vt14 05/09/2016
  MOVE '*NX' TO #CGA-SCR-SUFFIX
  FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*   MOVE 'MB' TO #TO-INIT                      /* DW26               /* vt15 \/  11/18/2016       
*   MOVE '*NX' TO #CGA-SCR-SUFFIX
*   FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)     /* vt15 /\  11/18/2016
  MOVE 'AXD' TO #TO-INIT                     /* PM47                /* vt 06/18/2013 was 'BHL' /* vt14 05/02/2016
  MOVE '*NX' TO #CGA-SCR-SUFFIX
  FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*  MOVE 'KXG' TO #TO-INIT                     /* PM48             /* vt 06/18/2013 \/ /* vt14 05/02/2016 \/ removed on 05/31/2016
*  MOVE '*NX' TO #CGA-SCR-SUFFIX
*  FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)   /* vt 06/18/2013 /\ /* vt14 05/02/2016 /\
END-IF
*
MOVE 1 TO #LAP-X1
MOVE 1 TO #LAP-X2
*
RESET #LAP-TEXT (*)
*
FOR #I3 1 TO 5
  WRITE #NOTE-TEXT (#I3)
END-FOR
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE PROCESS-LAPSE
***********************************************************************
*
*   print "ST" screen before LAPSE
*
MOVE 'ST' TO #CGA-SCR-COMMAND #CGA-ORIG-COMMAND
MOVE ST-V.ID-NUMBER TO #CGA-SCR-ID #CGA-ORIG-ID
MOVE #I1 TO #N1
COMPRESS 'P' #N1 INTO #CGA-SCR-SUFFIX LEAVING NO   /* DW10
MOVE #CGA-SCR-SUFFIX TO #CGA-ORIG-SUFFIX
MOVE #ST-ISN TO #CGA-ISN
FETCH RETURN 'C2600PST'   /* to print an 'ST' before laps in CMPRINT 8
*
*    Setup TR REGISTER and UPDATE record
*
MOVE TRUE TO #UPDATE
*
RESET TR-V
MOVE ST-V.PROCESS-IND TO TR-V.PROCESS-IND
MOVE ST-V.ID-NUMBER   TO TR-V.ID-NUMBER
*
MOVE ST-V.MEMBER-CONTACT-ID TO #CONTACT-ID                                                   /* vt1 \/
#NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME-F,#MIDDLE-NAME-F,#LAST-NAME-F,#SUFFIX-F>)
COMPRESS #FIRST-NAME-F #MIDDLE-NAME-F #LAST-NAME-F INTO #NAME
MOVE #NAME TO TR-V.NAME
* MOVE ST-V.NAME        TO TR-V.NAME                                                         /* vt1 /\
*
MOVE ST-V.DATE-ACCT-UPDATE  TO TR-V.DATE-LAST-UPDATE
MOVE *INIT-ID         TO TR-V.TERMINAL-ID
MOVE 'EDS'            TO TR-V.CLERK-ID
* MOVE *DATN            TO TR-V.TRANSACTION-DATN
* MOVE *TIMN            TO TR-V.TRANSACTION-TIMN
MOVE #TODA            TO TR-V.TRANSACTION-DATN   /* DW22
MOVE 2300000          TO TR-V.TRANSACTION-TIMN  /* 11:00 PM
*
IF NOT ST-V.ONLINE-ACTION-GN = '1' OR = '2' OR = '3'
  MOVE '4' TO ST-V.ONLINE-ACTION-GN
END-IF
*
IF #LAPS-TYPE = 'LAPS'
  MOVE '6' TO ST-V.ONLINE-ACTION (#I1)
  MOVE 'CI-LAPSE' TO #TR-REG-LAP-LBL-1
ELSE
  IF #LAPS-TYPE = 'LAPN'
    MOVE 'L' TO ST-V.ONLINE-ACTION (#I1)
    MOVE 'CI-LAPS-NOPR' TO #TR-REG-LAP-LBL-1
  ELSE   /* must be LAPO
    MOVE 'M' TO ST-V.ONLINE-ACTION (#I1)    /* DW4
    MOVE 'CI-LAPS-OVLN' TO #TR-REG-LAP-LBL-1
  END-IF
END-IF
*
MOVE ST-V.ISSUE-DATE (#I1) TO #TR-REG-LAP-ISSUE-DATE
MOVE ST-V.PLAN (#I1)       TO #TR-REG-LAP-PLAN
MOVE EDITED ST-V.FACE-AMOUNT(#I1)  (EM=ZZZZZZ.99) TO #TR-REG-LAP-FAC-AMT
* VE EDITED ST-V.CASH-VALUE (#I1)(EM=ZZZZZ.99) TO #TR-REG-LAP-CASH-VALUE
MOVE EDITED #CSV (#I1)(EM=ZZZZZ.99) TO #TR-REG-LAP-CASH-VALUE  /* DW13
* MOVE EDITED ST-V.DEATH-BENEFIT(#I1) (EM=ZZZZZZ.99) TO #TR-REG-LAP-DB
MOVE EDITED #DB (#I1) (EM=ZZZZZZ.99) TO #TR-REG-LAP-DB    /* DW13
MOVE EDITED ST-V.FACE-AMOUNT(#I1)(EM=ZZZZZZ.99)
  TO #TR-REG-LAP-FACE-CASHED
MOVE 1 TO #ITR1
MOVE #TR-REG-LAP TO TR-V.OLD-DATA (#ITR1)
*
MOVE #TODA TO ST-V.ONLINE-DATE (#I1)
MOVE #TODA TO ST-V.DATE-ACCT-UPDATE
MOVE #TODA TO ST-V.DTS-DATN
MOVE *TIMN  TO ST-V.DTS-TIMN
RESET          X-BILL-DOLLAR (#I1)
MOVE 'E' TO ST-V.STATUS (#I1)
*
RESET #POLS-REMAIN
FOR #I2 1 TO 9
  IF ST-V.STATUS (#I2) = 'D'
    MOVE TRUE TO #POLS-REMAIN
    ESCAPE BOTTOM
  END-IF
END-FOR
*
IF NOT #POLS-REMAIN
  RESET ST-V.NUMBER-MEMBERSHIPS
  MOVE '9' TO ST-V.HANDLE-FLAG
    ST-V.S-ADDRESS-CODE
END-IF
*
RESET #HAS-PP-G
FOR #I2 1 TO 9
  IF ST-V.STATUS (#I2) = 'D'
      AND (ST-V.MODE (#I2) = 'G')
      AND (ST-V.PAY-STATUS (#I2) LE '40')
    MOVE TRUE TO #HAS-PP-G
    ESCAPE BOTTOM
  END-IF
END-FOR
*    create note
*
MOVE 1 TO #INT
MOVE 'EDS' TO #CLERK
COMPRESS '* POL ISS' #ISSUED INTO #NOTE-TEXT (#INT)
IF #LAPS-TYPE = 'LAPS'
  COMPRESS #NOTE-TEXT (#INT) 'LAPSED ON' #DATX
    INTO #NOTE-TEXT (#INT)
ELSE
  IF #LAPS-TYPE = 'LAPN'
    COMPRESS #NOTE-TEXT (#INT) 'LAPS NOPMT ON' #DATX
      INTO #NOTE-TEXT (#INT)
  ELSE    /* Must be LAPO
    RESET #PREMS-PAID
    PERFORM CALC-PREMS-PAID   /* To get #prems-paid   /* DW4
    COMPUTE #TAXABLE-INC = #CSV (#I1) - #PREMS-PAID
    MOVE EDITED #TAXABLE-INC (EM=ZZ,ZZZ.99)    /* For ATHFLAPO
      TO #TAXABLE-INC-DISP
    MOVE LEFT #TAXABLE-INC-DISP TO #TAXABLE-INC-DISP
    COMPRESS '$' #TAXABLE-INC-DISP '.' INTO #TAXABLE-INC-DISP LEAVING NO
*
    COMPRESS #NOTE-TEXT (#INT) 'LAPS OVRLN ON' #DATX
      INTO #NOTE-TEXT (#INT)
*
    COMPUTE #P = ST-V.X-LOAN-AMOUNT   (#I1)    /* DW1
      + ST-V.X-LOAN-AMOUNT-2 (#I1)    /* DW1
    COMPUTE #I = #ACC-INT (#I1) + #ACC-INT-2 (#I1) /* DW1
    COMPUTE #OVLN-AMT = #P + #I - #CSV (#I1)              /* DW13
    MOVE EDITED #P (EM=ZZZZ,ZZZ.99) TO #P-DISP  /* DW1
    MOVE EDITED #I (EM=-Z,ZZZ.99) TO #I-DISP    /* DW1
    MOVE EDITED #OVLN-AMT (EM=-Z,ZZZ.99) TO #OVLN-AMT-DISP
    MOVE LEFT #P-DISP TO #P-DISP               /* DW1
    MOVE LEFT #I-DISP TO #I-DISP               /* DW1
    MOVE LEFT #OVLN-AMT-DISP TO #OVLN-AMT-DISP
*
    ADD 1 TO #INT
    COMPRESS '* P+I' #P-DISP '+' #I-DISP 'Exceeds CSV by $'
      #OVLN-AMT-DISP      INTO #NOTE-TEXT (#INT)
  END-IF
END-IF
* WRITE ST-V.ID-NUMBER #NOTE-TEXT (#INT)
*
PERFORM ADD-NOTE-MESSAGE
*
*    update stats
*
IF ST-V.FACE-AMOUNT (#I1) GE 500000
  MOVE 99 TO #PUR-MBRS
ELSE
  COMPUTE #PUR-MBRS = ST-V.FACE-AMOUNT (#I1) / 5000
END-IF
*
**IF ST-V.PLAN (#I1) = 'AL'                      /* RE1
**  MOVE 4 TO #GL-X
**ELSE
**  IF ST-V.PLAN (#I1) = MASK ('LT')
**    MOVE 2 TO #GL-X
**  ELSE
**    IF ST-V.PLAN (#I1) = MASK ('RT')
**      MOVE 3 TO #GL-X
**    ELSE
**      IF ST-V.PLAN (#I1) = MASK ('SO')
**        MOVE 5 TO #GL-X
**      ELSE
**        IF ST-V.PLAN (#I1) = 'GPL'                    /* DW40
**          MOVE 7 TO #GL-X                         /* DW43
**        ELSE
**          MOVE ST-V.PLAN (#I1) TO #PLAN-3
**        IF   (#PLAN-3-A1 GE 'U')
**            AND (#PLAN-3-A1 LE 'Z')
**            MOVE 6 TO #GL-X
**          ELSE
**            MOVE 1 TO #GL-X
**          END-IF
**        END-IF
**      END-IF
**    END-IF
**  END-IF
**END-IF
*
MOVE ST-V.PLAN (#I1) TO #PLAN-3
DECIDE FOR FIRST CONDITION
  WHEN F-LT2PLUS-TRUE(<ST-V.PLAN(#I1)>)
    MOVE 9 TO #GL-X
  WHEN ST-V.PLAN (#I1) = 'EZ'
    MOVE 8 TO #GL-X
  WHEN ST-V.PLAN (#I1) = 'GPL'
    MOVE 7 TO #GL-X
  WHEN  (#PLAN-3-A1 GE 'U') AND (#PLAN-3-A1 LE 'Z')
    MOVE 6 TO #GL-X
  WHEN ST-V.PLAN (#I1) = 'SO' OR = 'FSO'
    MOVE 5 TO #GL-X
  WHEN IS-ANNUITY-LIFE(<ST-V.PLAN (#I1)>)            /* TT2
    MOVE 4 TO #GL-X
  WHEN ST-V.PLAN (#I1) = 'RT'
    MOVE 3 TO #GL-X
  WHEN ST-V.PLAN (#I1) = 'LT'
    MOVE 2 TO #GL-X
  WHEN NONE
    MOVE 1 TO #GL-X
END-DECIDE                                       /* RE1
*
IF ST-V.INTRO-FLAG = 'S'
  MOVE 2 TO #CAT-X
ELSE
  IF ST-V.INTRO-FLAG = 'K'
    MOVE 3 TO #CAT-X
  ELSE
    IF ST-V.INTRO-FLAG = 'G'
      MOVE 4 TO #CAT-X
    ELSE
      MOVE 1 TO #CAT-X
    END-IF
  END-IF
END-IF
*
* wrITE 'Cat-x=' #CAT-X 'gl-x=' #GL-X
* move 201110 to #ms-month-key
MOVE TRUE TO #STATS-FOUND

FIND (1) MS-V WITH MONTH-KEY = #MS-MONTH-KEY
  IF NO RECORDS FOUND
    MOVE FALSE TO #STATS-FOUND
    WRITE 'Stats rec not found for' #MS-MONTH-KEY
  END-NOREC
*
  IF #STATS-FOUND
    ADD 1 TO LOSSES-BY-PLAN (#GL-X)
*
    IF ST-V.DEATH-BENEFIT (#I1) = 0
      ADD ST-V.FACE-AMOUNT (#I1) TO LOSSES-BY-PLAN-DB (#GL-X)
    ELSE
      ADD ST-V.DEATH-BENEFIT (#I1)  TO LOSSES-BY-PLAN-DB (#GL-X)
    END-IF
*
    IF ST-V.NUMBER-MEMBERSHIPS = 0
*     ADD 1 TO LOSS-MBRS (3)                            /* PM33
      IF ST-V.PLAN (#I1) NE 'FSO'
        ADD 1 TO LOSSES-LIVES-BY-CAT (#CAT-X)
      END-IF
*
      IF ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
*       ADD 1 TO SPS-GEN-LOSS-MBRS (#CAT-X)
        ADD 1 TO SPS-GEN-LOSS-MBRS (3)                  /* PM33
      ELSE                                              /* PM33
        ADD 1 TO LOSS-MBRS (3)                          /* PM33
      END-IF
    END-IF
*
    IF ST-V.PROCESS-IND = 'I' OR = 'O' OR = 'D'
      ADD 1 TO INS-ONLY-LOSS-PLANS (3)
    END-IF
*
    IF ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
*     ADD 1 TO SPS-GEN-LOSS-MBRS (3)                    /* PM33
      ADD 1 TO SPS-GEN-LOSS-PLANS (3)                   /* PM33
    ELSE                                                /* PM33
      ADD 1 TO LOSS-PLANS (3)                           /* PM33
    END-IF
*
*   ADD 1 TO LOSS-PLANS (3)                             /* PM33
    ADD #PUR-MBRS TO LOSS-SHIPS (3)
  END-IF
*
  UPDATE (1922)   /* ms file
* WRITE 'updated ms rec' MONTH-KEY
END-FIND
*
* update MD file
*
RESET MD-V
COMPUTE ENTRY-DATE = 99999999 - #TODA
MOVE #ST-ISN   TO MD-V.REC-ISN
MOVE ST-V.ISSUE-DATE (#I1) TO MD-V.ISSUE-DATE
MOVE ST-V.ID-NUMBER        TO MD-V.ID-NUMBER
MOVE #PUR-MBRS TO MD-V.NUM-MBRSHIPS
*
IF #LAPS-TYPE = 'LAPS'
  MOVE 'L' TO MD-V.CODE   /* LAPS
ELSE
  IF #LAPS-TYPE = 'LAPN'
    MOVE 'T' TO MD-V.CODE  /* LAPN
  ELSE    /* must be LAPO
    MOVE 'U' TO MD-V.CODE  /* LAPO   DW4
  END-IF
END-IF
*
STORE MD-V
*
*    print lapse letter
*
RESET #MBRSHP-TERM-MSG #REINSTATE-MSG
*
IF   (ST-V.NUMBER-MEMBERSHIPS = 0)
    AND (NOT ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G')
  MOVE 'As a result, your membership has been terminated.'
    TO #MBRSHP-TERM-MSG
END-IF
*
IF #WL
  MOVE 'If you wish to reinstate your certificate, please let us know.'
    TO #REINSTATE-MSG
END-IF
*
RESET #CGA-SCR-COMMAND #CERT #CGA-SCR-SUFFIX
IF #LAPS-TYPE = 'LAPS' OR = 'LAPN'
  ADD 1 TO #LAPS-LAPN-CNT
  MOVE 'AAFM' TO #CERT   /* AAFM is now mailing
* NEWPAGE (6)                              /* PM28            /* YK10
* WRITE (6) NOTITLE USING FORM 'ATHFLAPS'  /* WES mails       /* YK10
  MOVE 'COPY' TO #CERT
  MOVE 'AD' TO #CGA-SCR-COMMAND
  MOVE 'LAP' TO #CGA-SCR-SUFFIX
  NEWPAGE (8)                              /* PM28                /* YK10
  WRITE (8) NOTITLE USING FORM 'ATHFLAPS'  /* AAFMAA copy to DAL  /* YK10
*    Also printing is a copy of the ST to CMPRINT(*)
ELSE
  IF #LAPS-TYPE = 'LAPO'   /* DW4
    MOVE ST-V.BILL-TO-DATE (#I1) TO #YYYYMMDD  /* PM49
*   MOVE X-LOAN-DATE (#I1) TO #YYYYMMDD        /* PM49
    SUBTRACT 1 FROM #MM
    IF #MM LT 1
      ADD 12 TO #MM
      SUBTRACT 1 FROM #YYYY
    END-IF
    MOVE *DATN TO #TODAY-YYYYMMDD-N
    MOVE #TODAY-YYYY TO #YYYY
*
    IF #MM GE #TODAY-MM
      SUBTRACT 1 FROM #YYYY
    END-IF
*
    COMPRESS #MM-A '01' #YYYY-A INTO #LOAN-INT-NOTICE-DT WITH '/'
    ADD 1 TO #LAPO-CNT
    MOVE 'AAFM' TO #CERT   /* AAFM is now mailing
*   NEWPAGE (6)                              /* PM28            /* YK10
*   WRITE (6) NOTITLE USING FORM 'ATHFLAPO'  /* AAFM mails      /* YK10
    MOVE 'COPY' TO #CERT
    MOVE 'AD' TO #CGA-SCR-COMMAND
    MOVE 'LAP' TO #CGA-SCR-SUFFIX
    NEWPAGE (8)                              /* PM28                  /* YK10
    WRITE (8) NOTITLE USING FORM 'ATHFLAPO'  /* AAFMAA copy to DAL    /* YK10
  ELSE   /* Must be LAPC
    MOVE EDITED X-LOAN-AMOUNT (#I1) (EM=ZZ,ZZZ.99) TO #LAPC-LOAN-DISP
    MOVE EDITED #ACC-INT (#I1) (EM=ZZ,ZZZ.99) TO #LAPC-INT-DISP
    COMPUTE #LAPC-P-I = X-LOAN-AMOUNT (#I1) + #ACC-INT (#I1)
    MOVE EDITED #LAPC-P-I   (EM=ZZ,ZZZ.99) TO #LAPC-TOT-P-I-DISP
    ADD 1 TO #LAPC-CNT
    RESET #CGA-SCR-SUFFIX
    MOVE 'AAFM' TO #CERT   /* AAFM is now mailing
*   NEWPAGE (6)                              /* PM28                /* YK10
*   WRITE (6) NOTITLE USING FORM 'ATHFLAPC'  /* WES mails           /* YK10
    MOVE 'COPY' TO #CERT
    MOVE 'AD' TO #CGA-SCR-COMMAND
    MOVE 'LAP' TO #CGA-SCR-SUFFIX
    NEWPAGE (8)                              /* PM28                /* YK10
    WRITE (8) NOTITLE USING FORM 'ATHFLAPC'  /* AAFMAA copy to DAL  /* YK10
  END-IF
END-IF
*
* YK9 - Call generic subroutine to create Letters Data
IF #LAPS-TYPE = 'LAPS' OR = 'LAPO'
  PARM-LETTERS.ID-NUMBER         := ST-V.ID-NUMBER
  PARM-LETTERS.PROCESS-TYPE      := #LAPS-TYPE
  PARM-LETTERS.POLICY-NUMBER     := #POL-NUM
  PARM-LETTERS.TAX-INCOME-AMOUNT := #TAXABLE-INC-DISP
  CALLNAT 'GPBNCOMM' PARM-LETTERS
  COMPRESS ST-V.ID-NUMBER #TAB #POL-NUM #TAB #DATX #TAB #NAME #TAB #LAPS-TYPE #TAB
    INTO #REPORT-OUTPUT                                                            /* YK11
  WRITE WORK FILE 4 #REPORT-OUTPUT                                                 /* YK11
END-IF
*
*   DE-GRANDFATHERING PROCESSING (also see c2300pci & C2100pai)
IF   (ST-V.PROCESS-IND = 'G')  /* was 'not = I'
    AND (NOT ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G' OR = 'F')

  RESET #G-F #POL-AFT-7-1-2000
*
  FOR #I3 1 TO 9
    IF ST-V.STATUS(#I3) = 'D'
      IF ST-V.ISSUE-DATE (#I3) LT 20000701
        MOVE TRUE TO #G-F
      ELSE
        MOVE TRUE TO #POL-AFT-7-1-2000
      END-IF
    END-IF
  END-FOR
*
  IF NOT #G-F
    IF #POL-AFT-7-1-2000
      IF ST-V.ID-NUMBER GE 106030
        RESET #NOTE-TEXT (*)
        MOVE 1 TO #INT
        MOVE '* Orig a post-split pipelined G/F mbr' TO #NOTE-TEXT(1)
        CALLNAT 'E4205SDM' ST-V.ID-NUMBER #INT #CGA-CLERK
          #NOTE-TEXT (1:10)
      END-IF
*
      MOVE 'D' TO ST-V.PROCESS-IND
*
      IF ST-V.INTRO-FLAG = 'C'
        MOVE 'P' TO ST-V.INTRO-FLAG
      ELSE
        IF ST-V.INTRO-FLAG = 'B'
          MOVE 'Q' TO ST-V.INTRO-FLAG
        ELSE
          MOVE 'O' TO ST-V.INTRO-FLAG
        END-IF
      END-IF
    END-IF
*
    RESET #NOTE-TEXT (*)
    IF #POL-AFT-7-1-2000
      COMPRESS 'CN' ST-V.ID-NUMBER ' has terminated his last'
        'pre 7/1/2000 policy'    INTO #NOTE-TEXT (1)
      COMPRESS 'but is still an active AAFMAA member'
        'so has been De-G/F"d' INTO #NOTE-TEXT (2)
      MOVE TRUE TO #NX-401       /* DW24
    ELSE
      COMPRESS 'CN' ST-V.ID-NUMBER ' has terminated his AAFMAA'
        'membership'  INTO #NOTE-TEXT (1)
      MOVE TRUE TO #NX-402       /* DW24
    END-IF
*
*   MOVE 'MAS' TO #TO-INIT                              /* TM1 DW93
*   MOVE #CGA-SCR-SUFFIX TO #HOLD-SUFFIX
*   MOVE '*NX' TO #CGA-SCR-SUFFIX
*   FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*
*   IF #POL-AFT-7-1-2000
*     RESET #NOTE-TEXT (*)
*     COMPRESS 'CN' ST-V.ID-NUMBER ' has been de Grandfathered'
*                                     INTO #NOTE-TEXT (1)
*     MOVE TRUE TO #NX-403       /* DW24
*     MOVE 'KRM'      TO #TO-INIT
*     FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
*   END-IF
*   MOVE #HOLD-SUFFIX TO #CGA-SCR-SUFFIX
  END-IF
END-IF
*
RESET #SFX    /* DW24
IF #NX-401
  ADD 1 TO #SFX
  MOVE 401          TO SYNC-FLD-NUM (#SFX)
  MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
END-IF
*
IF #NX-402
  ADD 1 TO #SFX
  MOVE 402          TO SYNC-FLD-NUM (#SFX)
  MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
  WRITE ST-V.ID-NUMBER '402 NX Message' SYNC-FLD-NEW-DATA (#SFX)
END-IF
*
IF #NX-403
  ADD 1 TO #SFX
  MOVE 403          TO SYNC-FLD-NUM (#SFX)
  MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
  ADD 1 TO #SFX
  MOVE 503          TO SYNC-FLD-NUM (#SFX)
  MOVE 'NS Message' TO SYNC-FLD-NEW-DATA (#SFX)
END-IF
*
ADD 1 TO #SFX                               /* DW29
MOVE 504 TO SYNC-FLD-NUM (#SFX)
COMPRESS 'NS Message' ST-V.ISSUE-DATE (#I1) #LAPS-TYPE
  INTO SYNC-FLD-NEW-DATA (#SFX)
*
* IF #SFX GT 0   /* DW24/DW29
*   WRITE ST-V.ID-NUMBER 'SYNC NX recs were written'
* END-IF
*
STORE TR-V    /* MOVED from above to process SYNC NX's /* DW24
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE ADD-NOTE-MESSAGE
***********************************************************************
*
* STORE ns note below
* WRITE 'NOTE bypassed for' ST-V.ID-NUMBER
CALLNAT 'E4205SDM' ST-V.ID-NUMBER #INT #CLERK #NOTE-TEXT (1:10)
*
END-SUBROUTINE /* (2175)
*
***********************************************************************
DEFINE SUBROUTINE CALC-PREM-DUE
***********************************************************************
*
RESET #SVC-FEE #HAS-FBR
RESET #PMNT-DUE #1ST-POL-X
*
FOR #I2 1 TO 9
  IF  (ST-V.STATUS (#I2) NE  'D')
      OR (ST-V.PAY-STATUS (#I2) GT '40')
    ESCAPE TOP
  END-IF
*
  IF #1ST-POL-X NE 0
    MOVE #I2 TO #1ST-POL-X
  END-IF
*
  IF RID-PLAN (#I2) NE ' '
    MOVE TRUE TO #HAS-FBR
  END-IF
  RESET #MODAL-SVC-FEE
*
  CALLNAT 'GDUESSXX' ST-V.ID-NUMBER #I1 #SVC-FEE
*
  IF ST-V.MODE (#I2) = 'A' OR = '1'       /* DW1
      AND NOT #FORCE-QUARTERLY               /* DW11
    MOVE 1 TO #MOD-FREQ
    COMPUTE #MODAL-SVC-FEE = #SVC-FEE * 12
  ELSE
    IF ST-V.MODE (#I2) = 'S' OR = '2'    /* DW1
        AND NOT #FORCE-QUARTERLY                /* DW11
      MOVE 2 TO #MOD-FREQ
      COMPUTE #MODAL-SVC-FEE = #SVC-FEE * 6
    ELSE
      IF ST-V.MODE (#I2) = 'Q' OR = '4'    /* DW1
          OR #FORCE-QUARTERLY              /* DW11
        MOVE 4 TO #MOD-FREQ
        COMPUTE #MODAL-SVC-FEE = #SVC-FEE * 3
      ELSE
        MOVE 12 TO #MOD-FREQ
        MOVE #SVC-FEE TO #MODAL-SVC-FEE
      END-IF
    END-IF
  END-IF
*
  COMPUTE #MOD-PREM = ST-V.ANNUAL-PREM (#I2) / #MOD-FREQ
*
  ADD #MOD-PREM    TO #PMNT-DUE
  ADD DUES-BALANCE TO #PMNT-DUE
*
  ADD #MODAL-SVC-FEE TO #PMNT-DUE
END-FOR
*
IF #HAS-FBR
  MOVE ST-V.ID-NUMBER TO #ID
  CALLNAT 'GRIDCSXX' USING
    #ID
    #AT-RID-ATTACH-FAC-AMT
    #AT-RID-ATTACH-PLAN
    #AT-RID-PLAN            (1:5)
    #AT-RID-ATTACH-ISS-DT   (1:5)
    #AT-TOT-FBR-PREM
    #EX-FBR-PREM-BY-LINE    (1:9)
    #EX-SPS-DB-BY-LINE      (1:9)
    #EX-DEP-DB-BY-LINE      (1:9)
    #EX-EACH-DEP-DB-BY-LINE (1:9)
    #NUM-ELIG-CHILDREN
    #NUM-ELIG-CHILDREN-UNDER-6-MON
    #TOT-CHILD-DB
    #RID-TEXT
*
  IF #RID-TEXT NE ' '
    WRITE ST-V.ID-NUMBER 'FBR ERROR MESSAGE' #RID-TEXT
  END-IF
*
  FOR #I2 1 TO 9
    IF   (ST-V.STATUS (#I2) = 'D')
        AND (ST-V.PAY-STATUS (#I2) LT '40')
        AND (ST-V.MODE (#I2) = 'G')
*
      ADD #EX-FBR-PREM-BY-LINE (#I2) TO #PMNT-DUE
      ADD X-RID-BALANCE (#I2)        TO #PMNT-DUE
*
*     IF #EX-FBR-PREM-BY-LINE (#I2) NE 0
*       WRITE ST-V.ID-NUMBER 'FBR POLICY' #EX-FBR-PREM-BY-LINE (#I2)
*     END-IF
    END-IF
  END-FOR
END-IF
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE DO-LAPO-C2320PCO    /* DW4
***********************************************************************
*
MOVE 'CI' TO #CGA-SCR-COMMAND #CGA-ORIG-COMMAND
MOVE ST-V.ID-NUMBER TO #CGA-SCR-ID #CGA-ORIG-ID
MOVE 'UPD' TO #CGA-SCR-SUFFIX #CGA-ORIG-SUFFIX
MOVE 'EDS' TO #CGA-CLERK
MOVE #ST-ISN TO #CGA-ISN
MOVE TRUE TO #DID-LAPO
COMPUTE #LOAN-PRIN (*) = #LOAN-BAL   (*) + #LOAN-BAL-2 (*)
COMPUTE #LOAN-INT  (*) = #ACC-INT    (*) + #ACC-INT-2  (*)
*
MOVE #I1 TO #SAVE-I1
* Write st-v.id-number 'Do LAPO' 'ALL loans=' #LOAN-PRIN (*)     /* DW99
* YK6
* FETCH RETURN 'C2320PCI' #CGA-CLERK #DID-DEAD #DID-CSV #DID-RPU
*   #DID-LAPO #DID-RSGN #DID-LAPN #DID-LAPS #DID-LAPC #PASSED-INFO-1
*   #PASSED-INFO-2 #DID-REIN                 /* DW30
FETCH RETURN 'C2320PCI'  #CGA-CLERK #DID-DEAD #DID-CSV #DID-RPU
  #DID-LAPO #DID-RSGN #DID-LAPN #DID-LAPS #DID-LAPC #DID-REIN #DID-ACDB
  #PASSED-INFO-1 #PASSED-INFO-2 #PASSED-INFO-3 #TIME          /* YK6  YK7
MOVE #SAVE-I1 TO #I1
* YK6
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE DO-PEACHTREE-PROCESSING      /* DW36
***********************************************************************
*
* MOVE ST-V.NAME TO #NAME                                                          /* vt1 \/
* RESET #LAST #MI #FIRST-20
* CALLNAT 'GFMLNSXX' /* split name
*  #NAME
*  #FIRST-20
*  #MI
*  #LAST
*  #ERR-MSG
*
MOVE ST-V.MEMBER-CONTACT-ID TO #CONTACT-ID
#NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME-F,#MIDDLE-NAME-F,#LAST-NAME-F,#SUFFIX-F>)
MOVE #LAST-NAME-F TO #LAST
*
* SEPARATE #LAST INTO #LAST #EXTRA1 #EXTRA2 #EXTRA3 WITH DELIMITER ','             /* vt1 /\
*
RESET #LOAN-X #ACC-INT-X #LOAN-2-X #ACC-INT-2-X #LOAN-DATE #PREMS-PAID
PERFORM CALC-PREMS-PAID
MOVE #CSV (#I1) TO #CSV-X
* COMPUTE #AMT-OVERLOANED =
*   (ST-V.X-LOAN-AMOUNT   (#I1) + #ACC-INT   (#I1)
*   + ST-V.X-LOAN-AMOUNT-2 (#I1) + #ACC-INT-2 (#I1))   - #CSV (#I1)
if st-v.conv-duration (#i1) = 999
  compute #amt-overloaned-cap = ST-V.X-LOAN-AMOUNT   (#I1) + #ACC-INT   (#I1)       /* vt3 \/
  compute #amt-overloaned-var =  ST-V.X-LOAN-AMOUNT-2 (#I1) + #ACC-INT-2 (#I1)
    - #CSV (#I1)
else
  COMPUTE #AMT-OVERLOANED =
    (ST-V.X-LOAN-AMOUNT   (#I1) + #ACC-INT   (#I1)
    + ST-V.X-LOAN-AMOUNT-2 (#I1) + #ACC-INT-2 (#I1))   - #CSV (#I1)
end-if                                                                              /* vt3  /\
*
COMPUTE #TAXABLE-INC = #CSV (#I1) - #PREMS-PAID
ADD 1 TO #CNT-7   /*  this is so each policy is counted
*
ADD +2 TO #PEACH-CNT                                                  /* PM45
DECIDE FOR EVERY CONDITION                                            /* PM45
  when st-v.x-loan-amount(#i1) gt 0                            /* vt3 \/
      and st-v.conv-duration(#i1) = 999
    add 1 to #peach-cnt                                        /* vt3 /\
  WHEN ST-V.X-LOAN-AMOUNT (#I1) GT 0                                  /* PM45
    ADD 1 TO #PEACH-CNT                                               /* PM45
  WHEN #ACC-INT (#I1) GT 0                                            /* PM45
    ADD +1 TO #PEACH-CNT                                              /* PM45
  WHEN ST-V.X-LOAN-AMOUNT-2 (#I1) GT 0                                /* PM45
    ADD +1 TO #PEACH-CNT                                              /* PM45
  WHEN #ACC-INT-2 (#I1) GT 0                                          /* PM45
    ADD +1 TO #PEACH-CNT                                              /* PM45
  WHEN NONE                                                           /* PM45
    IGNORE                                                            /* PM45
END-DECIDE                                                            /* PM45
*
MOVE EDITED #PEACH-CNT (EM=99999) TO #PEACH-CNT-X
*  MOVE LEFT #PEACH-CNT TO #PEACH-CNT-X                        /* vt3

PERFORM DISPLAY-7
*
*********     PEACHTREE RECORD 1   (CSV)
PERFORM PEACHTREE-FIRST-PART                         /* col 1/2/3     /* DW7
MOVE #CSV (#I1) TO #AMT
*
#TRAN-CODE-IN := 'CVAL'                                               /* PM45
#CAT-1-IN     := ' '                                                  /* PM45
PERFORM GET-ACCT#                                                     /* PM45
*
COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO                    /* PM45
COMPRESS #ACCT-NUM-OUT '- 00' INTO #DISP-ACCOUNT-NUM                  /* PM45
COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO      /* PM45
PERFORM PEACHTREE-LAST-PART                         /* col 5/6/7/8    /* DW7
*
**********    PEACHTREE RECORD 2   (AMT OVERLOANED)
PERFORM PEACHTREE-FIRST-PART                        /* col 1/2/3      /* DW7
* MOVE #AMT-OVERLOANED TO #AMT                                        /* vt3 \/
if #amt-overloaned-cap ne 0
  move #amt-overloaned-cap to #amt
  #CAT-1-IN     := 'CP'
else                                                                  /* vt3 /\
  MOVE #AMT-OVERLOANED TO #AMT
  #CAT-1-IN     := '  '                                                 /* PM45
end-if                                                                /* vt3
*
#TRAN-CODE-IN := 'LWOF'                                               /* PM45
* #CAT-1-IN     := '  '                                               /* vt3
PERFORM GET-ACCT#                                                     /* PM45
*
COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO                    /* PM45
COMPRESS #ACCT-NUM-OUT '- 07' INTO #DISP-ACCOUNT-NUM                  /* PM45
COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO      /* PM44 PM45
PERFORM PEACHTREE-LAST-PART                        /* col 5/6/7/8     /* DW7
*
RESET #TAXABLE-INC #PREMS-PAID #CSV-X #AMT-OVERLOANED
  #amt-overloaned-cap                                   /* vt3
IF  (X-LOAN-AMOUNT (#I1) NE 0)
    OR (#ACC-INT (#I1)      NE 0)
  MOVE X-LOAN-AMOUNT (#I1) TO #LOAN-X
  MOVE #ACC-INT      (#I1) TO #ACC-INT-X
  MOVE X-LOAN-DATE   (#I1) TO #LOAN-DATE
*
  PERFORM DISPLAY-7
END-IF
*
RESET #LOAN-X #LOAN-2-X
IF  (X-LOAN-AMOUNT-2 (#I1) NE 0)
    OR (#ACC-INT-2 (#I1)      NE 0)
  MOVE X-LOAN-AMOUNT-2 (#I1) TO #LOAN-2-X
  MOVE #ACC-INT-2      (#I1) TO #ACC-INT-2-X
  MOVE X-LOAN-DATE-2 (#I1) TO #LOAN-DATE
*
  PERFORM DISPLAY-7
END-IF
*
**********    PEACHTREE RECORD 2-A   (Var amount -overloaned for CAP membeers only )
/* For CAP members this will be additional line after the original second line - line 2-a
PERFORM PEACHTREE-FIRST-PART
if #amt-overloaned-var ne 0                                        /* vt3  \/
  move #amt-overloaned-var to #amt
*
  #TRAN-CODE-IN := 'LWOV'
  #CAT-1-IN     := 'CP'
  PERFORM GET-ACCT#
*
  COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO
  COMPRESS #ACCT-NUM-OUT '- 07' INTO #DISP-ACCOUNT-NUM
  COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO
  PERFORM PEACHTREE-LAST-PART
*
  move  #amt-overloaned-var  to #amt-overloaned
  reset #loan-x #loan-2-x #acc-int-x #acc-int-2-x #csv-x
  PERFORM DISPLAY-7
end-if                                                            /* vt3  /\
**********    PEACHTREE RECORD 3   (FIXED PRINCIPAL)
IF ST-V.X-LOAN-AMOUNT (#I1) NE 0                                      /* PM45
  PERFORM PEACHTREE-FIRST-PART                     /* col 1/2/3       /* DW7
*
  #AMT := ST-V.X-LOAN-AMOUNT (#I1) * -1                               /* PM45
*
  #TRAN-CODE-IN := 'PADF'                                             /* PM45
  if not #no-cap-loan                                /* vt3 \/
    #cat-1-In     := '  '     /* vt4  reverse it was CP
  else                                               /* vt3 /\
    #CAT-1-IN     := 'CP'                                               /* PM45
  end-if                                             /* vt3
  PERFORM GET-ACCT#                                                   /* PM45
*
  COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO                  /* PM45
  COMPRESS #ACCT-NUM-OUT '- 00' INTO #DISP-ACCOUNT-NUM                /* PM45
  COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO    /* PM44 PM45
  PERFORM PEACHTREE-LAST-PART                      /* col 5/6/7/8     /* DW7
END-IF                                                                /* PM45
*
**********    PEACHTREE RECORD 4   (FIXED INTEREST)
IF #ACC-INT (#I1) NE 0                                                /* PM45
  PERFORM PEACHTREE-FIRST-PART                     /* col 1/2/3       /* DW7
*
  #AMT := #ACC-INT (#I1)* -1                                          /* PM45
*
  #TRAN-CODE-IN := 'AIAF'                                             /* PM45
  if not #no-cap-loan                                /* vt3 \/
    #cat-1-In     := 'CP'
  else                                               /* vt3 /\
    #CAT-1-IN     := '  '                                               /* PM45
  end-if                                             /* vt3
  PERFORM GET-ACCT#                                                   /* PM45
*
  COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO                  /* PM45
  COMPRESS #ACCT-NUM-OUT '- 00' INTO #DISP-ACCOUNT-NUM                /* PM45
  COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO    /* PM44 PM45
  PERFORM PEACHTREE-LAST-PART                      /* col 5/6/7/8     /* DW7
END-IF                                                                /* PM45
*
**********    PEACHTREE RECORD 5   (VARIABLE PRINCIPAL)
IF ST-V.X-LOAN-AMOUNT-2 (#I1) NE 0                                    /* PM45
  PERFORM PEACHTREE-FIRST-PART                     /* col 1/2/3       /* PM45
*                                                                     /* PM45
  #AMT := ST-V.X-LOAN-AMOUNT-2 (#I1) * -1                             /* PM45
*                                                                     /* PM45
  #TRAN-CODE-IN := 'PADV'                                             /* PM45
  #CAT-1-IN     := '  '                                               /* PM45
  PERFORM GET-ACCT#                                                   /* PM45
*                                                                     /* PM45
  COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO                  /* PM45
  COMPRESS #ACCT-NUM-OUT '- 00' INTO #DISP-ACCOUNT-NUM                /* PM45
  COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO    /* PM45
  PERFORM PEACHTREE-LAST-PART                      /* col 5/6/7/8     /* PM45
END-IF                                                                /* PM45
*                                                                     /* PM45
**********    PEACHTREE RECORD 6   (VARIABLE INTEREST)                /* PM45
IF #ACC-INT-2 (#I1) NE 0                                              /* PM45
  PERFORM PEACHTREE-FIRST-PART                     /* col 1/2/3       /* PM45
*                                                                     /* PM45
  #AMT := #ACC-INT-2 (#I1)* -1                                        /* PM45
*                                                                     /* PM45
  #TRAN-CODE-IN := 'AIAV'                                             /* PM45
  #CAT-1-IN     := '  '                                               /* PM45
  PERFORM GET-ACCT#                                                   /* PM45
*                                                                     /* PM45
  COMPRESS #PEACHTREE ',' INTO #PEACHTREE LEAVING NO                  /* PM45
  COMPRESS #ACCT-NUM-OUT '- 00' INTO #DISP-ACCOUNT-NUM                /* PM45
  COMPRESS #PEACHTREE #DISP-ACCOUNT-NUM INTO #PEACHTREE LEAVING NO    /* PM45
  PERFORM PEACHTREE-LAST-PART                      /* col 5/6/7/8     /* PM45
END-IF                                                                /* PM45
*

END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE PEACHTREE-FIRST-PART
***********************************************************************
*
COMPRESS #TODA-X                                                /* 1
  ',' 'LAPO' #TODA-MM-A #TODA-DD-A 'CN' ST-V.ID-NUMBER-A     /* 2
*    ',' '4'                                                    /* 3
*    ',' '176'       /* Temporary for 1st time                  /* 3
  ',' #PEACH-CNT-X                                           /* 3
  INTO #PEACHTREE LEAVING NO
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE PEACHTREE-LAST-PART
***********************************************************************
*
MOVE EDITED #AMT (EM=-ZZZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
*
COMPRESS #PEACHTREE
  ',' #LAST                                              /* 5
  INTO #PEACHTREE LEAVING NO
COMPRESS #PEACHTREE #POL-NUM                             /* More 5
  INTO #PEACHTREE
COMPRESS #PEACHTREE
  ',' #AMT-10              /* CSV                            /* 6
*  ','                     /* bz OI-3078  /* Blank                          /* 7
  INTO #PEACHTREE LEAVING NO
WRITE WORK 2 #PEACHTREE
ADD 1 TO #NUM-PEACH
*
END-SUBROUTINE
*
***********************************************************************
DEFINE CALC-PREMS-PAID   /* DW4
***********************************************************************
*
RESET #DATE-OF-BIRTH
#DATE-OF-BIRTH         := GET-DATE-OF-BIRTH(<CI-V.MEMBER-CONTACT-ID>)     /* TT1
MOVE #DATE-OF-BIRTH               TO #PP-DATE-OF-BIRTH
MOVE CI-V.ANNUAL-PREM (#I1)       TO #PP-ANNUAL-PREM
MOVE CI-V.PAY-STATUS (#I1)        TO #PP-PAY-STATUS
MOVE CI-V.TOT-PREMIUMS-PAID (#I1) TO #PP-TOT-PREMIUMS-PAID
MOVE CI-V.PAID-TO-DATE (#I1)      TO #PP-PAID-TO-DATE
MOVE CI-V.ISSUE-DATE (#I1)        TO #PP-ISSUE-DATE
MOVE CI-V.MODE (#I1)              TO #PP-MODE
MOVE CI-V.PLAN (#I1)              TO #PP-PLAN
MOVE CI-V.COST-BASIS (#I1)        TO #PP-COST-BASIS
MOVE CI-V.MONTH-ALLOC-AMT (#I1)   TO #PP-MONTH-ALLOC-AMT
MOVE ST-V.INTRO-FLAG              TO #PP-INTRO-FLAG
MOVE ST-V.X-FIRST-PLACE-FEE (#I1) TO #PP-FIRST-PLACE-FEE
MOVE ST-V.X-BILL-ADJUST     (#I1) TO #PP-BADJ
*
CALLNAT 'GPRPDSCO'
  #PP-DATE-OF-BIRTH
  #PP-ANNUAL-PREM
  #PP-PAY-STATUS
  #PP-TOT-PREMIUMS-PAID
  #PP-PAID-TO-DATE
  #PP-ISSUE-DATE
  #PP-MODE
  #PP-PLAN
  #PP-COST-BASIS
  #PP-MONTH-ALLOC-AMT
  #PP-INTRO-FLAG
  #PP-FIRST-PLACE-FEE
  #PREMS-PAID
  #SUB-PREMS-PAID
  #PP-BADJ
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE DISPLAY-7
***********************************************************************
*
if #amt-overloaned-cap ne 0
  move #amt-overloaned-cap to #amt-overloaned
end-if
* ADD 1 TO #CNT-7   /*  this is added above
DISPLAY (7) #CNT-7 (EM=ZZ9)
  'CN'             ST-V.ID-NUMBER
*  ST-V.NAME                        (EM=XXXXXXXXXXXXXX)                       /* vt1
  #NAME-F  (AL=14)                                                                  /* vt1
  'Issue/Date'     ST-V.ISSUE-DATE (#I1)
  'Loan/Date'      #LOAN-DATE
  'PADF/PRIN'      #LOAN-X         (EM=ZZ,ZZZ.99)
  'AIAF/INT'       #ACC-INT-X      (EM=-ZZZZ.99)
  'PADV/PRIN'      #LOAN-2-X       (EM=ZZ,ZZZ.99)
  'AIAV/INT'       #ACC-INT-2-X    (EM=-ZZZZ.99)
  'Amt/Overloaned' #AMT-OVERLOANED (EM=-ZZZZ.99)
  'CSV'            #CSV-X          (EM=ZZZ,ZZZ.99)
  'Prems/paid'     #PREMS-PAID     (EM=ZZZ,ZZZ.99)
  'Taxable/Income' #TAXABLE-INC    (EM=ZZ,ZZZ.99)
ADD #LOAN-X      TO #TOT-PRIN
ADD #LOAN-2-X    TO #TOT-PRIN
ADD #ACC-INT-X   TO #TOT-INT
ADD #ACC-INT-2-X TO #TOT-INT
ADD #CSV-X       TO #TOT-CSV
ADD #AMT-OVERLOANED  TO #TOT-OVLN
ADD #PREMS-PAID      TO #TOT-TPP
ADD #TAXABLE-INC     TO #TOT-TAXABLE-INC
*
END-SUBROUTINE
*
***********************************************************************
DEFINE SUBROUTINE CHECK-OVERLOANED-RPU    /* DW31
***********************************************************************
*
* write st-v.id-number 'checking overloan for RPU'
IF (ST-V.PAY-STATUS (#I1) NE '45')   /* RPU
  ESCAPE ROUTINE
END-IF
*  Develope beginning date for TR search based on Loan-Date
IF X-LOAN-DATE (#I1) NE 0
  MOVE X-LOAN-DATE (#I1) TO #YYYYMMDD
ELSE
  MOVE X-LOAN-DATE-2 (#I1) TO #YYYYMMDD
END-IF
*
MOVE #TODA-YYYY TO #YYYY
MOVE 1 TO #DD
SUBTRACT 1 FROM #MM  /* get to month of billing
IF #MM LT 1
  ADD 1 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
*
IF #TODA-MM GE #MM
  SUBTRACT 1 FROM #YYYY
END-IF
*
RESET #TOT-INT-PD
READ TR-A-V BY ID-NUMBER FROM ST-V.ID-NUMBER
  IF TR-A-V.ID-NUMBER NE ST-V.ID-NUMBER
    ESCAPE BOTTOM
  END-IF
*
*   write st-v.id-number 'Check TR for RPU' transaction-datn txn-code
*     'CR-AMT' credit-amount 'Billed-Int' x-bill-interest-amt (#i1)
  IF  (TRANSACTION-DATN LT #YYYYMMDD)
      OR (NOT TXN-CODE = 'INPF' OR = 'INPV' OR = 'INTF' OR = 'INTV')
    ESCAPE TOP
  END-IF
*
  ADD CREDIT-AMOUNT TO #TOT-INT-PD
END-READ
*
COMPUTE #TOT-BILLED-INT = X-BILL-INTEREST-AMT (#I1) + X-BILL-INTEREST-AMT-2 (#I1)
* write 'strt date=' #yyyymmdd 'tot-int-pd=' #tot-int-pd 'bild-int=' #tot-billed-int

*
IF #TOT-BILLED-INT = 0
  COMPUTE #TOT-BILLED-INT =
    (X-LOAN-AMOUNT   (#I1) * X-INTEREST-RATE (#I1) / 100)
    + (X-LOAN-AMOUNT-2 (#I1) * #CURR-VAR-INT-RATE / 100)
END-IF
*
IF #TOT-INT-PD GE (#TOT-BILLED-INT * .95)
  RESET #OVERLOANED
  WRITE ST-V.ID-NUMBER 'Reset Overloaned' #TOT-INT-PD
END-IF
*
END-SUBROUTINE
*

***********************************************************************
DEFINE SUBROUTINE GET-ACCT#
***********************************************************************
*
CALLNAT 'ATHS03P2'
  #TRAN-CODE-IN
  #ACCT-NUM-IN
  #CAT-1-IN
  #AMT-SIGN-IN
*
  #ACCT-NUM-OUT
  #D-C-OUT
  #CN-IN
  #AMT-IN
  #SOURCE-IN
*
END-SUBROUTINE
*
****************
define subroutine combine-and-pay                                /* vt8 \/
*****************
*
move #pd-to-dt to #paid-to-date                          /* vt11
callnat 'ATHNCOMB' #st-isn  #x-bill-adjust
  #debit-credit-amt
  #OUT-TERM-REF-AMOUNT(*)
  #OUT-TERM-REF-YEAR  (*)
  #NEW-POL-ISS-DATE   (*)
  #OUT-TERM-REF-ENTRY-DATE  (*)
  #NEW-TERM-POL-NBR      (*)
  #tot-premiums-paid
  #billing-adjustment
  #pol-nbr
  #seg
  #BADJ-left
  #PAID-TO-DATE
  #2-mons-ago
*
end-subroutine                                                   /* vt8 /\
*
END
