* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* A-CC-INFO - Object Module
****************************************
* MODIFICATION LOG
****************************************
* USER   DATE      TAG  REASON
* YAK    05122009  YAK  Initial Creation
* YAK    02012015  YK1  Use new PDA, changes for MC2
* YAK    04012016  YK2  Rewritten for EB&P Phase 1
*                       Call to SAGE Vault Service added when
*                       add/update/delete CC information
* YAK    051012016 YK3  Assign Application source based on USER-ID
*                       Do not call SAGE if coming from Online App
* YAK    08312016  YK4  Allow storing multiple credit cards for CN (up to 3)
* YAK    08312016  YK5  Add method to accept requests from CRM
*                       (CC request or Customer request) in any order
* YAK    05082017  YK6  Add LAST-TIME-UPDATE field
* YAK    06202017  YK7  Add UPDATE-ID-NUMBER method
****************************************
*
DEFINE DATA
PARAMETER USING OBJACC01        /* YK1
PARAMETER 1 CC-ARRAY(P9/3) OPTIONAL
*
LOCAL USING OBJLCC01
LOCAL USING WCCA0031            /* YK2
LOCAL USING ERROR_L             /* YK2
LOCAL USING GPRATR06            /* YK5
LOCAL
1 CC-HIST VIEW OF A-CC-INFO
  2 ID-NUMBER
1 #N     (N2)                   /* YK1
* YK2 >
1 #DATN  (A) DYNAMIC
1 #TIMN  (A) DYNAMIC
1 #LOG   (A32000)
1 #SUCCESS             (A) DYNAMIC CONST <'true'>
1 #ERROR-STORING-CARD  (A3) CONST <"094">
1 #ERROR-UPDATING-CARD (A3) CONST <"095">
1 #ERROR-DELETING-CARD (A3) CONST <"096">
1 #UKNOWN-ACTION       (A) DYNAMIC INIT <"  Uknown Action">
1 #WEBCHARGE-LOG-FILE  (A) DYNAMIC INIT <'/usr/SAG/tmp/SAGE_@DB_@Date.log'>
1 #DB                  (A) DYNAMIC
* YK3 >
1 #MEMBER              (A) DYNAMIC INIT <'MEMBER'>
1 #MC                  (A) DYNAMIC INIT <'MemberCenter'>
1 #OAP-USER            (A) DYNAMIC INIT <'WEB'>
1 #OAP                 (A) DYNAMIC INIT <'OnlineApp'>
1 #IAS                 (A) DYNAMIC INIT <'IAS'>
1 #USER-ID             (A8)
* < YK3
*
1 #CC-ACTION
  2 #GET-CC          (A) DYNAMIC CONST <'GET-CC'>
  2 #GET-ALL         (A) DYNAMIC CONST <'GET-ALL'>
  2 #GET             (A) DYNAMIC CONST <'GET'>
  2 #GET-GUID        (A) DYNAMIC CONST <'GET-GUID'>
  2 #GET-BY-ISN      (A) DYNAMIC CONST <'GET-BY-ISN'>
  2 #GET-BY-ID       (A) DYNAMIC CONST <'GET-BY-GUID'>
  2 #HIST            (A) DYNAMIC CONST <'HIST'>
  2 #ADD             (A) DYNAMIC CONST <'ADD'>
  2 #CRM-ADD-REQUEST (A) DYNAMIC CONST <'CRM-ADD-REQUEST'>       /* YK5
  2 #UPDATE          (A) DYNAMIC CONST <'UPDATE'>
  2 #UPDATE-DEF-IND  (A) DYNAMIC CONST <'UPDATE-DEF-IND'>
  2 #UPDATE-ID-NUMBER(A) DYNAMIC CONST <'UPDATE-ID-NUMBER'>
  2 #UPDATE-EXP-DATE (A) DYNAMIC CONST <'UPDATE-EXP-DATE'>
  2 #UPDATE-ADDRESS  (A) DYNAMIC CONST <'UPDATE-ADDRESS'>
  2 #DELETE          (A) DYNAMIC CONST <'DELETE'>
1 #FILE-EXIST (L)
1 #NOT-FOUND  (L)
1 #CN         (N6)
* < YK2
1 #TRAN-CONTACT-ID (N8)                                          /* YK5
1 #WORK-FIELD      (A) DYNAMIC                                   /* YK5
1 FUNCTION_CODE (A) DYNAMIC CONST <'CreditCardInfo'>             /* YK5
1 #LAST-UPDATE-DATE (N8)                                         /* YK7
END-DEFINE
* YK2 >
#DATN := *DAT4I
#TIMN := *TIMX
*
IF #ACTION = #ADD OR = #UPDATE OR = #UPDATE-EXP-DATE OR = #DELETE
  #DATN := *DATN
  EXAMINE #WEBCHARGE-LOG-FILE FOR '@Date' REPLACE #DATN
  #DB := GET_DBN(<>)
  EXAMINE #WEBCHARGE-LOG-FILE FOR '@DB' REPLACE #DB
DEFINE WORK FILE 3 #WEBCHARGE-LOG-FILE TYPE 'ASCII-COMPRESSED' ATTRIBUTES 'APPEND'
  #FILE-EXIST := FN_EXIST(<#WEBCHARGE-LOG-FILE,1>)
* #DATN := *DAT4I
* #TIMN := *TIMX
  #USER-ID := *USER
END-IF
* > YK2
* Main processing
*
* YK3 >
IF PARM-CC-INFO.LAST-USER-UPDATE <> ' '
  #CC-STORAGE-FIELDS.UserId := PARM-CC-INFO.LAST-USER-UPDATE
END-IF
DECIDE FOR FIRST CONDITION
  WHEN #CC-STORAGE-FIELDS.UserId = #MEMBER
    #CC-STORAGE-FIELDS.ApplicationSource := #MC
  WHEN #CC-STORAGE-FIELDS.UserId = #OAP-USER
    #CC-STORAGE-FIELDS.ApplicationSource := #OAP
  WHEN #CC-STORAGE-FIELDS.UserId = #USER-ID
    #CC-STORAGE-FIELDS.UserId := FUNCTION-CLERK-AD(<#USER-ID>)
    EXAMINE #CC-STORAGE-FIELDS.UserId FOR '\' REPLACE '\\'
    #CC-STORAGE-FIELDS.ApplicationSource := #IAS
  WHEN NONE
    IGNORE
END-DECIDE
* < YK3
DECIDE ON FIRST VALUE #ACTION
  VALUE #ADD
    PERFORM ADD-RECORD
  VALUE #CRM-ADD-REQUEST
    PERFORM CREATE-RECORD-FROM-CRM           /* YK5
  VALUE #UPDATE, #UPDATE-EXP-DATE
    PERFORM UPDATE-RECORD
  VALUE #UPDATE-ADDRESS
    PERFORM UPDATE-ADDRESS
  VALUE #UPDATE-DEF-IND
    PERFORM UPDATE-DEF-IND
  VALUE #UPDATE-ID-NUMBER
    PERFORM UPDATE-ID-NUMBER
  VALUE #DELETE
    PERFORM DELETE-RECORD
  VALUE #GET, #GET-GUID, #GET-CC, #GET-ALL
    PERFORM GET-DEFAULT-RECORD
  VALUE #GET-BY-ID
    PERFORM GET-BY-GUID
  VALUE #GET-BY-ISN
    PERFORM GET-BY-ISN
  VALUE #HIST                        /* Histogram - check existence
    PERFORM CHECK-EXIST
  NONE
    IGNORE
END-DECIDE
*
****************************
DEFINE SUBROUTINE ADD-RECORD
****************************
* call service to create GUID if NOT from Online App or Member Center
* IF #CC-STORAGE-FIELDS.ApplicationSource <> #OAP                 /* YK3
IF PARM-CC-INFO.CC-GUID = ' '                                     /* YK4
  #CC-STORAGE-FIELDS.CNumber    := #PARM-ID-NUMBER
  #CC-STORAGE-FIELDS.Action     := #ACTION
  #CC-STORAGE-FIELDS.CardNumber := PARM-CC-INFO.CC-NUMBER
COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH SUBSTR(PARM-CC-INFO.CC-EXPIRATION-YEAR,3,2) INTO #CC-STORAGE-FIELDS.CardExpDate LEAVING NO
  CALLNAT 'WCCN0031' #CC-STORAGE-FIELDS
*
* Check Response
  IF #CC-STORAGE-FIELDS.ResultStatus = #SUCCESS
    PARM-CC-INFO.CC-GUID   := #CC-STORAGE-FIELDS.CardGUID
PARM-CC-INFO.CC-NUMBER := FUNCTION-MASK(<#CC-STORAGE-FIELDS.CardNumber,'*'>)
  ELSE
    #RESULT-CODE := #ERROR-STORING-CARD
    #LOG := F-ERROR-DESCRIPTION(<#RESULT-CODE>)
COMPRESS #LOG #CC-STORAGE-FIELDS.ResultStatus #CC-STORAGE-FIELDS.ResultMessage INTO #LOG
COMPRESS #DATN #TIMN 'Member CN =' #PARM-ID-NUMBER #ACTION #LOG INTO #LOG
    WRITE WORK FILE 3 #LOG
    CLOSE WORK FILE 3
    ESCAPE ROUTINE
  END-IF
END-IF                                                          /* YK3
*
MOVE BY NAME PARM-CC-INFO TO CC-INFO-V
STORE CC-INFO-V
IF #PARM-ID-NUMBER <> 0
  F7.
  FIND NUMBER CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
  #NUMBER-OF-RECORDS := *NUMBER (F7.)
*
  IF PARM-CC-INFO.CC-DEFAULT-IND = 'Y'
    PERFORM RESET-DEFAULT-IND
  END-IF
END-IF
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE UPDATE-RECORD
*******************************
* call service to update cc number for existing GUID
#CC-STORAGE-FIELDS.CNumber := #PARM-ID-NUMBER
#CC-STORAGE-FIELDS.Action  := #ACTION
DECIDE ON FIRST VALUE PARM-CC-DATA.#ACTION
  VALUE #UPDATE-EXP-DATE
    RESET #CC-STORAGE-FIELDS.CardNumber
  VALUE #UPDATE
    #CC-STORAGE-FIELDS.CardNumber := PARM-CC-INFO.CC-NUMBER
  ANY VALUE
COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH SUBSTR(PARM-CC-INFO.CC-EXPIRATION-YEAR,3,2) INTO #CC-STORAGE-FIELDS.CardExpDate LEAVING NO
    #CC-STORAGE-FIELDS.CardGUID    := PARM-CC-INFO.CC-GUID
  NONE
    #LOG := #UKNOWN-ACTION
COMPRESS #DATN #TIMN 'Member CN =' #PARM-ID-NUMBER #ACTION #LOG INTO #LOG
    WRITE WORK FILE 3 #LOG
    CLOSE WORK FILE 3
    ESCAPE ROUTINE
END-DECIDE
*
CALLNAT 'WCCN0031' #CC-STORAGE-FIELDS
* Check Response
IF #CC-STORAGE-FIELDS.ResultStatus = #SUCCESS
* GUID is not changing for Update function
* PARM-CC-INFO.CC-GUID   := #CC-STORAGE-FIELDS.CardGUID  ???
* Keep the full number (temp)
  IF PARM-CC-DATA.#ACTION = #UPDATE
   PARM-CC-INFO.CC-NUMBER := FUNCTION-MASK(<PARM-CC-INFO.CC-NUMBER,'*'>)
  END-IF
  GT2.
  GET CC-INFO-V #ISN
  MOVE BY NAME PARM-CC-INFO TO CC-INFO-V
  UPDATE (GT2.)
  IF PARM-CC-INFO.CC-DEFAULT-IND = 'Y'
    PERFORM RESET-DEFAULT-IND
  END-IF
ELSE
  #RESULT-CODE := #ERROR-UPDATING-CARD
  #LOG := F-ERROR-DESCRIPTION(<#RESULT-CODE>)
COMPRESS #LOG #CC-STORAGE-FIELDS.ResultStatus #CC-STORAGE-FIELDS.ResultMessage INTO #LOG
COMPRESS #DATN #TIMN 'Member CN =' #PARM-ID-NUMBER #ACTION #LOG INTO #LOG
  WRITE WORK FILE 3 #LOG
  CLOSE WORK FILE 3
END-IF
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE UPDATE-ADDRESS
********************************
*
GA.
GET CC-INFO-V #ISN
CC-INFO-V.CCHOLDER-NAME        := PARM-CC-INFO.CCHOLDER-NAME
CC-INFO-V.CCHOLDER-STREET-ADDR := PARM-CC-INFO.CCHOLDER-STREET-ADDR
CC-INFO-V.CCHOLDER-ADDL-ADDR   := PARM-CC-INFO.CCHOLDER-ADDL-ADDR
CC-INFO-V.CCHOLDER-CITY        := PARM-CC-INFO.CCHOLDER-CITY
CC-INFO-V.CCHOLDER-STATE-CD    := PARM-CC-INFO.CCHOLDER-STATE-CD
CC-INFO-V.CCHOLDER-COUNTRY     := PARM-CC-INFO.CCHOLDER-COUNTRY
CC-INFO-V.CCHOLDER-ZIP-CODE    := PARM-CC-INFO.CCHOLDER-ZIP-CODE
CC-INFO-V.CCHOLDER-POSTAL-CODE := PARM-CC-INFO.CCHOLDER-POSTAL-CODE
CC-INFO-V.CC-ADDR-FORMAT-CODE  := PARM-CC-INFO.CC-ADDR-FORMAT-CODE
CC-INFO-V.CC-ADDR-VALIDATION-CODE := PARM-CC-INFO.CC-ADDR-VALIDATION-CODE
CC-INFO-V.LAST-USER-UPDATE     := PARM-CC-INFO.LAST-USER-UPDATE
CC-INFO-V.LAST-DATE-UPDATE     := PARM-CC-INFO.LAST-DATE-UPDATE
CC-INFO-V.LAST-TIME-UPDATE     := PARM-CC-INFO.LAST-TIME-UPDATE               /* YK6
CC-INFO-V.CC-DEFAULT-IND       := PARM-CC-INFO.CC-DEFAULT-IND
UPDATE (GA.)
*
IF PARM-CC-INFO.CC-DEFAULT-IND = 'Y'
  PERFORM RESET-DEFAULT-IND
END-IF
*
END-SUBROUTINE
*
**********************************
DEFINE SUBROUTINE UPDATE-ID-NUMBER   /* YK7
**********************************
* Used only when Insured has 1 card only and is not a payer for any other policies
* Moving CC info to the new Payer
F8.
FIND(1) CC-INFO-V WITH ID-NUMBER = PARM-CC-DATA.#PARM-ID-NUMBER
  #LAST-UPDATE-DATE          := CC-INFO-V.LAST-DATE-UPDATE
  CC-INFO-V.ID-NUMBER        := PARM-CC-INFO.ID-NUMBER
  CC-INFO-V.LAST-USER-UPDATE := PARM-CC-INFO.LAST-USER-UPDATE
  CC-INFO-V.LAST-DATE-UPDATE := PARM-CC-INFO.LAST-DATE-UPDATE
  CC-INFO-V.LAST-TIME-UPDATE := PARM-CC-INFO.LAST-TIME-UPDATE
  UPDATE (F8.)
  MOVE BY NAME CC-INFO-V TO PARM-CC-INFO
  PARM-CC-INFO.LAST-DATE-UPDATE := #LAST-UPDATE-DATE
END-FIND
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE UPDATE-DEF-IND
********************************
*
GD.
GET CC-INFO-V #ISN
CC-INFO-V.CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND
CC-INFO-V.LAST-USER-UPDATE := PARM-CC-INFO.LAST-USER-UPDATE
CC-INFO-V.LAST-DATE-UPDATE := PARM-CC-INFO.LAST-DATE-UPDATE
CC-INFO-V.LAST-TIME-UPDATE := PARM-CC-INFO.LAST-TIME-UPDATE        /* YK6
UPDATE (GD.)
*
IF PARM-CC-INFO.CC-DEFAULT-IND = 'Y'
  PERFORM RESET-DEFAULT-IND
END-IF
*
END-SUBROUTINE
*
***********************************
DEFINE SUBROUTINE RESET-DEFAULT-IND          /* YK4
***********************************
*
RESET #ISN
F4.
FIND CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
IF CC-INFO-V.CC-GUID <> PARM-CC-INFO.CC-GUID AND CC-INFO-V.CC-DEFAULT-IND = 'Y'
    RESET CC-INFO-V.CC-DEFAULT-IND
* Return ISN of the record where default ind is reset from 'Y'
* Calling program will write transaction log
    PARM-CC-DATA.#ISN := *ISN
    CC-INFO-V.LAST-USER-UPDATE := PARM-CC-INFO.LAST-USER-UPDATE
    CC-INFO-V.LAST-DATE-UPDATE := PARM-CC-INFO.LAST-DATE-UPDATE
 CC-INFO-V.LAST-TIME-UPDATE := PARM-CC-INFO.LAST-TIME-UPDATE      /* YK6
    UPDATE (F4.)
  END-IF
END-FIND
*
END-SUBROUTINE
*
****************************************
DEFINE SUBROUTINE CREATE-RECORD-FROM-CRM    /* YK5
****************************************
*
FIND(1) CC-INFO-V WITH CRM-CONTACT-ID = PARM-CC-INFO.CRM-CONTACT-ID
  IF NO RECORDS FOUND
    #NOT-FOUND := TRUE
    ESCAPE BOTTOM
  END-NOREC
  CC-INFO-V.CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND := 'Y'
  IF CC-INFO-V.ID-NUMBER = 0
    CC-INFO-V.ID-NUMBER := PARM-CC-INFO.ID-NUMBER
* write transaction register after we got CN
    PERFORM WRITE-TRANSACTION-LOG
  ELSE
    #CN := CC-INFO-V.ID-NUMBER
    MOVE BY NAME PARM-CC-INFO TO CC-INFO-V
    CC-INFO-V.ID-NUMBER := PARM-CC-INFO.ID-NUMBER := #CN
  END-IF
  UPDATE
END-FIND
*
IF #NOT-FOUND
  MOVE BY NAME PARM-CC-INFO TO CC-INFO-V
  STORE CC-INFO-V
END-IF
*
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE GET-DEFAULT-RECORD
************************************
*
F1.
FIND CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
    WHERE CC-INFO-V.CC-DEFAULT-IND = 'Y'
  #ISN := *ISN
  MOVE BY NAME CC-INFO-V TO PARM-CC-INFO
  #NUMBER-OF-RECORDS := *NUMBER(F1.)
  ESCAPE BOTTOM
END-FIND
IF CC-ARRAY SPECIFIED
  #N := 1
  CC-ARRAY(#N) := PARM-CC-DATA.#ISN
  PERFORM GET-OTHER-CARDS
END-IF
*
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE GET-BY-GUID
*****************************
*
F2.
FIND CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
    WHERE CC-INFO-V.CC-GUID = PARM-CC-INFO.CC-GUID
  #ISN := *ISN
  #NUMBER-OF-RECORDS := *NUMBER
  MOVE BY NAME CC-INFO-V TO PARM-CC-INFO
  ESCAPE ROUTINE
END-FIND
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE DELETE-RECORD
*******************************
* call service to delete GUID from SAGE
#CC-STORAGE-FIELDS.CNumber  := #PARM-ID-NUMBER
#CC-STORAGE-FIELDS.Action   := #ACTION
#CC-STORAGE-FIELDS.CardGUID := PARM-CC-INFO.CC-GUID
CALLNAT 'WCCN0031' #CC-STORAGE-FIELDS
* Check Response
IF #CC-STORAGE-FIELDS.ResultStatus = #SUCCESS
* GUID is deleted from SAGE
  GT3.
  GET CC-INFO-V #ISN
  DELETE (GT3.)
ELSE
  #RESULT-CODE := #ERROR-DELETING-CARD
  #LOG := F-ERROR-DESCRIPTION(<#RESULT-CODE>)
COMPRESS #LOG #CC-STORAGE-FIELDS.ResultStatus #CC-STORAGE-FIELDS.ResultMessage INTO #LOG
COMPRESS #DATN #TIMN 'Member CN =' #PARM-ID-NUMBER #ACTION #LOG INTO #LOG
  WRITE WORK FILE 3 #LOG
  CLOSE WORK FILE 3
END-IF
F6.
FIND NUMBER CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
#NUMBER-OF-RECORDS := *NUMBER (F6.)
IF PARM-CC-INFO.CC-DEFAULT-IND = 'Y'
* No need to set deafault indicator to the next record
* If delete from online app - next action add default card
    AND #CC-STORAGE-FIELDS.ApplicationSource <> #OAP
  PERFORM SET-DEFAULT-IND
END-IF
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE SET-DEFAULT-IND          /* YK4
*********************************
* set new default ind if default card deleted
RESET #ISN
F5.
FIND(1) CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
  IF CC-INFO-V.CC-DEFAULT-IND = ' '
    CC-INFO-V.CC-DEFAULT-IND := 'Y'
* Return ISN of the record where default ind is set to 'Y'
* Calling program will write transaction log
    PARM-CC-DATA.#ISN := *ISN
    CC-INFO-V.LAST-USER-UPDATE := PARM-CC-INFO.LAST-USER-UPDATE
    CC-INFO-V.LAST-DATE-UPDATE := PARM-CC-INFO.LAST-DATE-UPDATE
CC-INFO-V.LAST-TIME-UPDATE := PARM-CC-INFO.LAST-TIME-UPDATE        /* YK6
    UPDATE (F5.)
  END-IF
END-FIND
*
END-SUBROUTINE
*
*********************************
DEFINE SUBROUTINE GET-OTHER-CARDS
*********************************
*
F3.
FIND CC-INFO-V WITH ID-NUMBER = #PARM-ID-NUMBER
    WHERE CC-INFO-V.CC-DEFAULT-IND <> 'Y'
  IF #N < 3
    #N := #N + 1
    CC-ARRAY(#N) := *ISN
  END-IF
END-FIND
*
END-SUBROUTINE
*
****************************
DEFINE SUBROUTINE GET-BY-ISN
****************************
*
G1.
GET CC-INFO-V PARM-CC-DATA.#ISN
MOVE BY NAME CC-INFO-V TO PARM-CC-INFO
*
END-SUBROUTINE
*
*****************************
DEFINE SUBROUTINE CHECK-EXIST
*****************************
*
H1.
HISTOGRAM CC-HIST FOR ID-NUMBER FROM
    #PARM-ID-NUMBER THRU #PARM-ID-NUMBER
END-HISTOGRAM
#NUMBER-OF-RECORDS := *NUMBER(H1.)
*
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE WRITE-TRANSACTION-LOG
***************************************
*
RESET BEFORE_IMAGE
MOVE BY NAME CC-INFO-V TO AFTER_IMAGE
TR_ID_NUMBER := CC-INFO-V.ID-NUMBER
#TRAN-CONTACT-ID := F-GET-CONTACT-ID(<TR_ID_NUMBER>)
TR_NAME  := FUNCTION-CONTACT-NAME(<#TRAN-CONTACT-ID>)
TR_CLERK := #OAP-USER
COMPRESS CC-INFO-V.CC-EXPIRATION-MONTH CC-INFO-V.CC-EXPIRATION-YEAR INTO AFTER_IMAGE.CC-EXPIRATION-DATE
AFTER_IMAGE.CCHOLDER-ADDRESS-1 := CC-INFO-V.CCHOLDER-STREET-ADDR
AFTER_IMAGE.CCHOLDER-ADDRESS-2 := CC-INFO-V.CCHOLDER-ADDL-ADDR
IF CC-INFO-V.CC-ADDR-FORMAT-CODE = '1'
  AFTER_IMAGE.CCHOLDER-ADDRESS-3    := PARM-CC-INFO.CCHOLDER-ZIP-CODE
ELSE
  AFTER_IMAGE.CCHOLDER-ADDRESS-3    := PARM-CC-INFO.CCHOLDER-POSTAL-CODE
  #WORK-FIELD := PARM-CC-INFO.CCHOLDER-COUNTRY
COMPRESS AFTER_IMAGE.CCHOLDER-ADDRESS-3 F-COUNTRY-CODE(<#WORK-FIELD,'S'>)
    INTO AFTER_IMAGE.CCHOLDER-ADDRESS-3
END-IF
COMPRESS PARM-CC-INFO.CCHOLDER-CITY PARM-CC-INFO.CCHOLDER-STATE-CD AFTER_IMAGE.CCHOLDER-ADDRESS-3
  INTO AFTER_IMAGE.CCHOLDER-ADDRESS-3
IF AFTER_IMAGE.CC-DEFAULT-IND = ' '
  AFTER_IMAGE.CC-DEFAULT-IND := 'N'
END-IF
CALLNAT 'GPRNTR06' FUNCTION_CODE TRAN_LOG_HEADER BEFORE_IMAGE AFTER_IMAGE
*
END-SUBROUTINE
*
END
