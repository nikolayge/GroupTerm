* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: ATHPALOT - find exception alottment amt
*
*******************************************
*                       MODIFICATION LOG
* USER DATE     TAG  REASON
* DRW  09062006 DW1  Increase size of #recs-read  
* DRW 09/22/2009 DW2 SVC-FEE CALC  /  PROCESS-IND / Number-memberships /600000
*******************************************
DEFINE DATA
LOCAL
*
1 ST-V VIEW OF A-STATUS
 2 ID-NUMBER
 2 LINKED-CN      (40)
 2 REDEFINE LINKED-CN
  3 LINKED-CN-A   (A6/40)
 2 WIDOW-FLAG
 2 INTRO-FLAG
 2 PROCESS-IND                   /* DW2
 2 ALOT-AMT
 2 X-LOAN-AMOUNT    (9)
 2 X-LOAN-AMOUNT-2  (9)
 2 X-ALT-LP-IND     (9)
 2 X-ALT-LP-IND-2   (9)
 2 X-ALT-LP-AMT     (9)
 2 X-ALT-LP-AMT-2   (9)
 2 DEBIT-CREDIT-AMT
 2 DUES-ALL-PAID-IND
 2 NUMBER-MEMBERSHIPS
 2 ISSUE-DATE          (9)
 2 STATUS              (9)
 2 PAY-STATUS          (9)
 2 PLAN                (9)
 2 REDEFINE PLAN
  3 PLAN-OCC   (9)
   4 PLAN-A1    (A1)
   4 PLAN-A2    (A2)
 2 MONTH-ALLOC-AMT     (9)
 2 MODE                (9)
 2 ANNUAL-PREM         (9)
 2 PAID-TO-DATE        (9)
*
1 LK-V VIEW OF A-STATUS
 2 ID-NUMBER      (N6)
 2 INTRO-FLAG
 2 WIDOW-FLAG
 2 ALOT-AMT
 2 DEBIT-CREDIT-AMT
 2 NUMBER-MEMBERSHIPS
 2 STATUS              (9)
 2 PAY-STATUS          (9)
 2 PLAN                (9)
 2 MODE                (9)
 2 ANNUAL-PREM         (9)
 2 ISSUE-DATE          (9)
 2 PAID-TO-DATE        (9)
 2 REDEFINE PAID-TO-DATE
  3 PAID-TO-DATE-OCC (9)
   4 PAID-TO-DATE-YYYYMM (N6)
   4 REDEFINE PAID-TO-DATE-YYYYMM
    5 PAID-TO-DATE-YYYY (N4)
    5 PAID-TO-DATE-MM   (N2)
   4 PAID-TO-DATE-DD   (N2)
*
1 #SVC-FEE    (N2.2)
1 #SVC-FEE-2P (N2.2) INIT <18.50>
1 #SVC-FEE-3P (N2.2) INIT <12.50>
1 #SVC-FEE-4P (N1.2) INIT <9.50>
1 #SVC-FEE-5P (N1.2) INIT <7.50>
1 #SVC-FEE-6P (N1.2) INIT <6.50>
1 #SVC-FEE-7P (N1.2) INIT <6.00>
1 #SVC-FEE-10 (N1.2) INIT <4.50>
1 #SVC-FEE-20 (N1.2) INIT <3.00>
1 #SVC-FEE-30 (N1.2) INIT <2.50>
1 #SVC-FEE-OL (N1.2) INIT <2.00>
1 #SVC-FEE-TM (N1.2) INIT <2.00>
*
1 #COUNTERS
 2 #RECS-READ        (P7)   /* DW1
 2 #RECS-SELECTED    (P5)
 2 #CNT              (P5)
 2 #CNT-2            (P5)
 2 #CNT-3            (P5)
 2 #CNT-4            (P5)
 2 #CNT-5            (P5)
 2 #CNT-6            (P5)
 2 #CNT-7            (P5)
 2 #I1               (I2)
 2 #I2               (I2)
 2 #I3               (I2)
*
1 #YYYYMMDD        (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY          (N4)
  2 #MM            (N2)
  2 #DD            (N2)
*
1 #HAS-ALP     (L)
1 #TOT-FIXED    (P7.2)
1 #TOT-VAR      (P7.2)
1 #TOT-ALT-AMT       (P5.2)
1 #TOT-MBR-G        (P5.2)
1 #TOT-LNK-G        (P5.2)
1 #LNK-G            (P5.2)
1 #MONS-DIFF        (P3)
1 #PREM-DIFF        (P5.2)
1 #MONS             (P3)
1 #REMAINDER        (P3.2)
*
END-DEFINE
* * * * * * * * * * * * * * * * *
*
FORMAT (2) LS=133 PS=76
WRITE  (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
          'Allotment Amt exceeds MBR amount needed & has linked pols'
                      5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (3) LS=133 PS=76
WRITE  (3) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
          'Allotment transfered to Linked Policy(ies)'
                      5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (4) LS=133 PS=76
WRITE  (4) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
          'Allotment not transfered to Linked Policy(ies)'
                      5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (5) LS=133 PS=76
WRITE  (5) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
          'Letters needed because of transfer of Allot Amt'
                      5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (6) LS=133 PS=76
WRITE  (6) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
          'Alot Amt exceeds Amt Needed'
                      5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
READ ST-V BY MEMBER-KEY FROM '001900'
* READ ST-V BY MEMBER-KEY FROM '084268'
*  IF #RECS-READ GT 1900
*    ESCAPE BOTTOM
*  END-IF
*
  ADD 1 TO #RECS-READ
*
  RESET #TOT-MBR-G #TOT-ALT-AMT #HAS-ALP
  RESET #TOT-FIXED #TOT-VAR
  FOR #I1 1 TO 9
    IF X-ALT-LP-IND   (#I1) = '1' OR = '2'
      MOVE TRUE TO #HAS-ALP
      ADD X-ALT-LP-AMT   (#I1) TO #TOT-MBR-G
      ADD X-ALT-LP-AMT   (#I1) TO #TOT-ALT-AMT
      ADD X-LOAN-AMOUNT  (#I1) TO #TOT-FIXED
    END-IF
*
    IF X-ALT-LP-IND-2 (#I1) = '1' OR = '2'
      MOVE TRUE TO #HAS-ALP
      ADD X-ALT-LP-AMT-2 (#I1) TO #TOT-MBR-G
      ADD X-ALT-LP-AMT-2 (#I1) TO #TOT-ALT-AMT
      ADD X-LOAN-AMOUNT-2 (#I1) TO #TOT-VAR
    END-IF
*
    IF   (ST-V.STATUS (#I1) = 'D')
     AND (ST-V.PAY-STATUS (#I1) LT '40')
     AND (ST-V.MODE (#I1) = 'G')
      COMPUTE #TOT-MBR-G = #TOT-MBR-G + (ST-V.ANNUAL-PREM (#I1) / 12)
    END-IF
  END-FOR
*
  FOR #I1 1 TO 9  /* find 1st active pol
    IF ST-V.STATUS (#I1) = 'D'
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  IF #I1 GT 9
    MOVE 1 TO #I1
  END-IF
*
  RESET #SVC-FEE
  IF (ST-V.ISSUE-DATE (#I1) GE 19970101)
   AND (ST-V.MONTH-ALLOC-AMT (#I1) NE 999.99)
   AND (NOT ST-V.PLAN (#I1) = 'SO' OR = 'FSO')
   AND (NOT ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
                      OR = 'O' OR = 'P' OR = 'Q')
   AND (ST-V.PROCESS-IND = 'G')           /* MUST BE G/F         DW2
    IF NOT ST-V.DUES-ALL-PAID-IND = 'Y'
      IF ST-V.PAY-STATUS (#I1) LT '40'
        DECIDE ON FIRST VALUE ST-V.PLAN (#I1)
          VALUE '2PF' MOVE #SVC-FEE-2P TO #SVC-FEE
          VALUE '3PF' MOVE #SVC-FEE-3P TO #SVC-FEE
          VALUE '4PF' MOVE #SVC-FEE-4P TO #SVC-FEE
          VALUE '5PF' MOVE #SVC-FEE-5P TO #SVC-FEE
          VALUE '6PF' MOVE #SVC-FEE-6P TO #SVC-FEE
          VALUE '7PF' MOVE #SVC-FEE-7P TO #SVC-FEE
          VALUE '8PF' MOVE #SVC-FEE-7P TO #SVC-FEE
          VALUE '9PF' MOVE #SVC-FEE-7P TO #SVC-FEE
          VALUE '7P'  MOVE #SVC-FEE-7P TO #SVC-FEE
          VALUE '20P' MOVE #SVC-FEE-20 TO #SVC-FEE
          VALUE '30P' MOVE #SVC-FEE-30 TO #SVC-FEE
          VALUE 'OL'  MOVE #SVC-FEE-OL TO #SVC-FEE
          VALUE 'RT'  MOVE #SVC-FEE-TM TO #SVC-FEE
          VALUE 'LT'  MOVE #SVC-FEE-TM TO #SVC-FEE
          NONE        IGNORE
        END-DECIDE
*
        IF (ST-V.PLAN-A1 (#I1) GE 'U') AND (ST-V.PLAN-A1 (#I1) LE 'Z')
          MOVE #SVC-FEE-TM TO #SVC-FEE
        END-IF
*
        IF ST-V.PLAN (#I1) = MASK (NN'F')
          IF PLAN (#I1) LE '19F' MOVE #SVC-FEE-10 TO #SVC-FEE ELSE
          IF PLAN (#I1) LE '29F' MOVE #SVC-FEE-20 TO #SVC-FEE ELSE
          IF PLAN (#I1) LE '34F' MOVE #SVC-FEE-30 TO #SVC-FEE ELSE
                                 MOVE #SVC-FEE-OL TO #SVC-FEE
          END-IF END-IF END-IF
        END-IF
      END-IF
    END-IF
  END-IF
*
  ADD #SVC-FEE TO #TOT-MBR-G
*
  IF ALOT-AMT GT #TOT-MBR-G
   AND #HAS-ALP
    ADD 1 TO #CNT-6
    DISPLAY (6) #CNT-6 ST-V.ID-NUMBER ALOT-AMT #TOT-MBR-G
       'TOT/FIXED/LOANS' #TOT-FIXED
       'TOT/VAR/LOANS'   #TOT-VAR
       'TOT/alt/amt'     #TOT-ALT-AMT
  END-IF
*
  ESCAPE TOP
*
  RESET #TOT-LNK-G
  IF ST-V.ALOT-AMT GT #TOT-MBR-G + #TOT-ALT-AMT
    FOR #I1 1 TO 30
      IF ST-V.LINKED-CN (#I1) NE 0
        FIND (1) LK-V WITH MEMBER-KEY = LINKED-CN-A (#I1)
          IF LK-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
            FOR #I2 1 TO 9
              IF   (LK-V.STATUS (#I2) = 'D')
               AND (LK-V.PAY-STATUS (#I2) LT '40')
               AND (LK-V.MODE (#I2) = 'G')
                COMPUTE #TOT-LNK-G = #TOT-LNK-G
                 + (LK-V.ANNUAL-PREM (#I2) / 12)
              END-IF
            END-FOR
          END-IF
        END-FIND
      END-IF
    END-FOR
*
    IF #TOT-LNK-G NE 0
      DIVIDE #TOT-LNK-G INTO ST-V.DEBIT-CREDIT-AMT
                              GIVING #MONS REMAINDER #REMAINDER
      MULTIPLY #MONS BY -1
      MULTIPLY #REMAINDER BY -1
*
      ADD 1 TO #CNT-2
      DISPLAY (2) #CNT-2 'CN' ST-V.ID-NUMBER
           'ALOT/Amt'         ST-V.ALOT-AMT
           'Tot/MBR/needed'   #TOT-MBR-G
           'Tot/Lnked/needed' #TOT-LNK-G
           'Debit/Credit/Amt' ST-V.DEBIT-CREDIT-AMT
           'Numr/Mons'        #MONS
           'Rem'              #REMAINDER
           'Tot/ALP/Amt'      #TOT-ALT-AMT
*
      IF   (#REMAINDER = 0)    /* was lt 1.00
       AND (ST-V.ALOT-AMT = #TOT-MBR-G + #TOT-LNK-G)
       AND  (ST-V.DEBIT-CREDIT-AMT LT 0)
        ADD 1 TO #CNT-3
        DISPLAY (3) #CNT-3 'CN' ST-V.ID-NUMBER
           'ALOT/Amt'         ST-V.ALOT-AMT
           'Tot/MBR/needed'   #TOT-MBR-G
           'Tot/Lnked/needed' #TOT-LNK-G
           'Debit/Credit/Amt' ST-V.DEBIT-CREDIT-AMT
           'Num/Mons'         #MONS
           'Rem'              #REMAINDER
           'Tot/ALT/amt'      #TOT-ALT-AMT
*
        MOVE #TOT-MBR-G TO ST-V.ALOT-AMT
        RESET ST-V.DEBIT-CREDIT-AMT
        UPDATE /*(0143)
*
        RESET #LNK-G
        FOR #I1 1 TO 30
          IF LINKED-CN (#I1) NE 0
            FIND (1) LK-V WITH MEMBER-KEY = LINKED-CN-A (#I1)
              IF LK-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
                FOR #I2 1 TO 9
                  IF   (LK-V.STATUS (#I2) = 'D')
                   AND (LK-V.PAY-STATUS (#I2) LT '40')
                   AND (LK-V.MODE (#I2) = 'G')
                    COMPUTE #LNK-G =
                         #LNK-G + (LK-V.ANNUAL-PREM (#I2) / 12)
*
                    IF LK-V.PAY-STATUS (#I2) = '12'
                      MOVE '20' TO LK-V.PAY-STATUS (#I2)
                    ELSE
                      MOVE '22' TO LK-V.PAY-STATUS (#I2)
                    END-IF
*
                    ADD #MONS TO LK-V.PAID-TO-DATE-MM (#I2)
                    IF LK-V.PAID-TO-DATE-MM (#I2) GT 12
                      SUBTRACT 12 FROM LK-V.PAID-TO-DATE-MM (#I2)
                      ADD 1 TO LK-V.PAID-TO-DATE-YYYY (#I2)
                    END-IF
*
                    WRITE (3) '    ' LK-V.ID-NUMBER
                         '  Issued' LK-V.ISSUE-DATE (#I2)
                                    LK-V.PAY-STATUS (#I2)
                         'ADJ Pd-to-dt'  LK-V.PAID-TO-DATE (#I2)
                    IF LK-V.PAID-TO-DATE-YYYYMM (#I2) NE 199905
                      COMPUTE #MONS-DIFF
                         = 199905 - LK-V.PAID-TO-DATE-YYYYMM (#I2)
                      COMPUTE #PREM-DIFF = #MONS-DIFF
                            * (ANNUAL-PREM (#I2) / 12)
                      MOVE 19990515 TO LK-V.PAID-TO-DATE (#I2)
                      ADD #PREM-DIFF TO LK-V.DEBIT-CREDIT-AMT
                      WRITE (3) '          Prem Diff =' #PREM-DIFF
                                'New db/cr' LK-V.DEBIT-CREDIT-AMT
                           'Final Pd-to-dt ' LK-V.PAID-TO-DATE (#I2)
                      ADD 1 TO #CNT-5
                      DISPLAY (5) #CNT-5
                       'CN' LK-V.ID-NUMBER
                       'Debit/Credit/Amt' LK-V.DEBIT-CREDIT-AMT
                       'Tot/MBR/needed'   #TOT-MBR-G
                       'Tot/Lnked/needed' #TOT-LNK-G
                       'Num/Mons'         #MONS
                       'Rem'              #REMAINDER
                    END-IF
                  END-IF
                END-FOR
*
                MOVE #LNK-G TO LK-V.ALOT-AMT
              END-IF
              UPDATE /*(0295)
            END-FIND
          END-IF
        END-FOR
      ELSE
        ADD 1 TO #CNT-4
        DISPLAY (4) #CNT-4 'CN' ST-V.ID-NUMBER
           'ALOT/Amt'         ST-V.ALOT-AMT
           'Tot/MBR/needed'   #TOT-MBR-G
           'Tot/Lnked/needed' #TOT-LNK-G
           'Debit/Credit/Amt' ST-V.DEBIT-CREDIT-AMT
           'Num/Mons'         #MONS
           'Rem'              #REMAINDER
           'Linked/To'        ST-V.LINKED-CN (1)
           'Linked/To'        ST-V.LINKED-CN (2)
      END-IF
    END-IF
  END-IF
*
  END TRANSACTION
END-READ
*
END
