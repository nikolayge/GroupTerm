* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
*************************************************************************
* PGM ID : PAYDRIVP                                                     *
*                                                                       *
* FUNCTION : PAY ALL AMOUNTS DUE PER A policy FIRST PAY REQUIRED PAYMENTS  *
*            AND AFTER THAT OPTIONAL. IF THERE IS A LOAN APPLY MONEY TO *
*            THE PRINCIPAL OF THE LOAN ELSE PAY PREMIUMS IN ADVANCE.    *
*                                                                       *
* 01/04/2013 VT  INITIAL CREATION                                       *
* 06/10/2015 bz  OI-3594 Change ESCAPE BOTTOM to ESCAPE ROUTINE         *
* 01/09/2017 vt1 Add PS payments /ticket 2177/                          *
*************************************************************************
DEFINE DATA
parameter
1 #INPUT-RECORD
  2 #CN                   (N6)
  2 #policy-number        (a16)
  2 #CHQ-AMT              (N7.2)
LOCAL
1 #REMAINING-AMT          (N7.2)
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER             (N6)
  2 NAME                  (A25)
  2 PROCESS-IND
  2 PLAN                  (9)
  2 ISSUE-DATE            (9)
*
1 #AR  (1:30)
  2 PROCESS-IND           (A1)
  2 POLICY-NUMBER         (A16)
  2 AALP-FLAG             (A1)
  2 TXN-CODE              (A4)
  2 TXN-ACCT-NUMBER       (N3)
  2 MESSAGE-CODE          (A1)
  2 SG-AMOUNT             (N6.2/1)
  2 CREDIT-AMOUNT         (P7.2)
  2 DESCRIPTION           (A20)
*
1 CC-PAYMENT
  2 PARM-DATE             (N8.0)
  2 ID-NUMBER             (N6.0)
  2 INSURED-NAME          (A50)
  2 C@PAY-POLICY          (N2.0)
  2 PAY-POLICY     (1:9)
    3 POLICY-NBR          (A16)
    3 SEGMENT             (I2)                     /* VT
    3 CAP-POLICY          (A1)
    3 PLAN-TYPE           (A3)
    3 ISSUE-DATE          (N8.0)
    3 FACE-AMOUNT         (N7.2)
    3 MAX-PREMIUMS        (N4)
    3 MIN-PREMIUMS        (N2)
    3 DEFAULT-PREM        (N2)
    3 C@AVAILABLE-PAYMENT (N2.0)
    3 AVAILABLE-PAYMENT (1:10)
      4 PAYMENT-NOTE      (A) DYNAMIC
      4 CC-PAYABLE        (A1)
      4 VAR-AMOUNT        (A1)
      4 EXCEED-AMT        (A1)
      4 TRAN-TYPE         (A6)                    /* vt1
      4 PAID-TO-DATE      (N8.0)
      4 REDEFINE PAID-TO-DATE
        5 PAID-TO-DATE-YYYYMM (N6)
        5 PAID-TO-DATE-DD     (N2)
      4 PAYMENT-MODE      (A1)
      4 DEFAULT-AMOUNT    (N6.2)
      4 DUE-AMOUNT        (N6.2)
*
1 CC-PAYMENT-by-pol
  2 PARM-DATE             (N8.0)
  2 ID-NUMBER             (N6.0)
  2 INSURED-NAME          (A50)
  2 C@PAY-POLICY          (N2.0)
  2 PAY-POLICY
    3 POLICY-NBR          (A16)
    3 segment             (i2)
    3 CAP-POLICY          (A1)
    3 PLAN-TYPE           (A3)
    3 ISSUE-DATE          (N8.0)
    3 FACE-AMOUNT         (N7.2)
    3 MAX-PREMIUMS        (N4)
    3 MIN-PREMIUMS        (N2)
    3 DEFAULT-PREM        (N2)
    3 C@AVAILABLE-PAYMENT (N2.0)
    3 AVAILABLE-PAYMENT (1:10)
      4 PAYMENT-NOTE      (A) DYNAMIC
      4 CC-PAYABLE        (A1)
      4 VAR-AMOUNT        (A1)
      4 EXCEED-AMT        (A1)
      4 TRAN-TYPE         (A4)
      4 PAID-TO-DATE      (N8.0)
      4 redefine paid-to-date
        5 paid-to-date-yyyymm (n6)
        5 paid-to-date-dd     (n2)
      4 PAYMENT-MODE      (A1)
      4 DEFAULT-AMOUNT    (N6.2)
      4 DUE-AMOUNT        (N6.2)
*
*
1 #ERROR-MESSAGE          (A100)
1 #ERR-MSG                (A75)
1 #STATUS-ISN             (P8)
*
1 AR-V VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER             (N6)
  2 NAME                  (A25)
  2 TRANSACTION-DATN      (P9)
  2 TRANSACTION-TIMN      (P7)
  2 CASH-CODE             (A1)
  2 CLERK-ID              (A3)
  2 TERMINAL-ID           (A8)
  2 PROCESS-IND           (A1)
  2 POLICY-NUMBER         (A16)
  2 AALP-FLAG             (A1)
  2 TXN-CODE              (A4)
  2 TXN-ACCT-NUMBER       (N3)
  2 MESSAGE-CODE          (A1)
  2 SG-AMOUNT             (N6.2/1)
  2 CREDIT-AMOUNT         (P7.2)
  2 ACCT-DATE             (N8)
  2 DEBIT-AMOUNT          (P7.2)
  2 DESCRIPTION           (A20)
  2 SG-CATEGORY-1         (15)
*
1 #J                      (I4)
1 #N                      (I4)
1 #P                      (I4)                     /* 01112012
1 #Q                      (I4)
1 #L                      (I4)
1 #NBR-MONTHS             (N2/9)
1 BLANK (A1) CONST <' '>
1 #DATN                   (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY             (N4)
  2 #DATN-MM               (N2)
  2 #DATN-DD               (N2)
1 #DATN-A                  (A10)
1 #AMOUNT                  (A10)
1 #TIMN                   (N7)
1 #K                      (I4)
1 #HAS-LOAN               (L)    INIT <FALSE>
1 #LINKED-CNS             (N6/30)
1 #TRAN-TYPE-STR          (A) DYNAMIC
1 #CNT-CN                 (N2)
1 #TOT-PREM-AMT           (P7.2)
1 #POL-NBR                (A16)
1 #LX                     (I2)
1 #ISSUE-DATE              (N8)
1 REDEFINE #ISSUE-DATE
  2 #ISSUE-DATE-A          (A8)
1 #1-YR-AGO-A               (A8)
1 REDEFINE #1-YR-AGO-A
  2 #1-YR-AGO               (N8)
1 #YYYYMMDD  (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY     (N4)
  2 #MM       (N2)
  2 #DD       (N2)
1  REDEFINE #YYYYMMDD
  2 #YYYYMM     (N6)
  2 #DDD        (N2)
1 #PAY          (L/9) INIT<TRUE>
1 #PAY-BY-MODE  (L/9)
1 #YYYYMMDD-W  (N8)
1 REDEFINE #YYYYMMDD-W
  2 #YYYY-W     (N4)
  2 #MM-W       (N2)
  2 #DD-W       (N2)
1  REDEFINE #YYYYMMDD-W
  2 #YYYYMM-W     (N6)
  2 #DDD-W        (N2)
*
LOCAL USING C2500AAM
*
LOCAL
1 #OUT-REC            (A100)
1 #TAB                (A1) INIT <H'09'>
1 #TRAN-CODE          (A4)
1 #MONTHLY-TOTAL-DUE-PDR (P7.2/9)
1 #MODE-TOTAL-DUE-PDR    (P7.2/9)
1 #idx (i2)
*
END-DEFINE
**********************************************************************************
*
* DEFINE WORK FILE 2 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/R2.TXT'
*   TYPE 'ASCII' ATTRIBUTES 'APPEND'
* DEFINE WORK FILE 3 '/usr/SAG/AAFMAA/batch/workfiles/SYSDA/ATH/R3.TXT'
*   TYPE 'ASCII' ATTRIBUTES 'APPEND'
*

#DATN     := *DATN
#YYYYMMDD := *DATN
SUBTRACT 1 FROM #YYYYMMDD.#YYYY
COMPRESS #YYYYMMDD.#MM #YYYYMMDD.#DD #YYYYMMDD.#YYYY INTO #1-YR-AGO-A LEAVING NO
*
#REMAINING-AMT := #CHQ-AMT
*
IF #REMAINING-AMT LE 0
  ESCAPE ROUTINE
END-IF
*
FIND (1) ST-V WITH ID-NUMBER = #cn
  IF NO
    WRITE 'NO RECORD'
    ESCAPE ROUTINE
  END-NOREC
END-FIND
*
*      REQUIRED
*
IF #REMAINING-AMT GT 0
  PERFORM FIND-POLICY-MATCH
  PERFORM BASIC-PAYMENTS
  END TRANSACTION
END-IF
*
*      OPTIONAL
*
IF #REMAINING-AMT GT 0
  PERFORM FIND-POLICY-MATCH
  PERFORM PAY-LOAN-AND-PAY-IN-THE-FUTURE
  END TRANSACTION
END-IF
*
*      CREDIT TRANSACTION
*
IF #REMAINING-AMT > 0
  FIND (1) ST-V WITH ID-NUMBER = #CN
    #STATUS-ISN := *ISN (0233)
    CALLNAT 'PAY-ADCR' #REMAINING-AMT
      #STATUS-ISN
      CC-PAYMENT
      #TIMN
      #ERR-MSG
    IF #ERR-MSG NE BLANK
      PRINT #ERROR-MESSAGE
      ESCAPE ROUTINE
    END-IF
  END-FIND
END-IF
*
*****************
define subroutine find-policy-match
*****************
*
RESET CC-PAYMENT #ERROR-MESSAGE
#STATUS-ISN          := *ISN (0207)
CC-PAYMENT.ID-NUMBER := ST-V.ID-NUMBER
CC-PAYMENT.PARM-DATE := *DATN
*
CALLNAT 'GETDUE' CC-PAYMENT #ERROR-MESSAGE
*
examine cc-payment.policy-nbr(*) for #policy-number giving index #idx
if #idx gt 0
  move cc-payment.PARM-DATE                      to  cc-payment-by-pol.PARM-DATE
  move cc-payment.ID-NUMBER                      to  cc-payment-by-pol.ID-NUMBER
  move cc-payment.INSURED-NAME                   to  cc-payment-by-pol.INSURED-NAME
  move 1                                         to  cc-payment-by-pol.c@pay-policy
  move cc-payment.POLICY-NBR          (#idx)     to  cc-payment-by-pol.POLICY-NBR
  move cc-payment.SEGMENT             (#idx)     to  cc-payment-by-pol.SEGMENT
  move cc-payment.CAP-POLICY          (#idx)     to  cc-payment-by-pol.CAP-POLICY
  move cc-payment.PLAN-TYPE           (#idx)     to  cc-payment-by-pol.PLAN-TYPE
  move cc-payment.ISSUE-DATE          (#idx)     to  cc-payment-by-pol.ISSUE-DATE
  move cc-payment.FACE-AMOUNT         (#idx)     to  cc-payment-by-pol.FACE-AMOUNT
  move cc-payment.MAX-PREMIUMS        (#idx)     to  cc-payment-by-pol.MAX-PREMIUMS
  move cc-payment.MIN-PREMIUMS        (#idx)     to  cc-payment-by-pol.MIN-PREMIUMS
  move cc-payment.DEFAULT-PREM        (#idx)     to  cc-payment-by-pol.DEFAULT-PREM
  move cc-payment.C@AVAILABLE-PAYMENT (#idx)     to cc-payment-by-pol.C@AVAILABLE-PAYMENT
  move  cc-payment.PAYMENT-NOTE      (#idx,*)  to  cc-payment-by-pol.PAYMENT-NOTE   (*)
  move  cc-payment.CC-PAYABLE        (#idx,*)  to  cc-payment-by-pol.CC-PAYABLE     (*)
  move  cc-payment.VAR-AMOUNT        (#idx,*)  to  cc-payment-by-pol.VAR-AMOUNT     (*)
  move  cc-payment.EXCEED-AMT        (#idx,*)  to  cc-payment-by-pol.EXCEED-AMT     (*)
  move  cc-payment.TRAN-TYPE         (#idx,*)  to  cc-payment-by-pol.TRAN-TYPE      (*)
  move  cc-payment.PAID-TO-DATE      (#idx,*)  to  cc-payment-by-pol.PAID-TO-DATE   (*)
  move  cc-payment.PAYMENT-MODE      (#idx,*)  to  cc-payment-by-pol.PAYMENT-MODE   (*)
  move  cc-payment.DEFAULT-AMOUNT    (#idx,*)  to  cc-payment-by-pol.DEFAULT-AMOUNT (*)
  move  cc-payment.DUE-AMOUNT        (#idx,*)  to  cc-payment-by-pol.DUE-AMOUNT     (*)
*
  reset cc-payment.pay-policy(*)
    cc-payment.available-payment (*,*)
  move by name cc-payment-by-pol.pay-policy  to cc-payment.pay-policy(1)
  move  cc-payment-by-pol.PAYMENT-NOTE   (*) to cc-payment.PAYMENT-NOTE      (1,*)
  move  cc-payment-by-pol.CC-PAYABLE     (*) to cc-payment.CC-PAYABLE        (1,*)
  move  cc-payment-by-pol.VAR-AMOUNT     (*) to cc-payment.VAR-AMOUNT        (1,*)
  move  cc-payment-by-pol.EXCEED-AMT     (*) to cc-payment.EXCEED-AMT        (1,*)
  move  cc-payment-by-pol.TRAN-TYPE      (*) to cc-payment.TRAN-TYPE         (1,*)
  move  cc-payment-by-pol.PAID-TO-DATE   (*) to cc-payment.PAID-TO-DATE      (1,*)
  move  cc-payment-by-pol.PAYMENT-MODE   (*) to cc-payment.PAYMENT-MODE      (1,*)
  move  cc-payment-by-pol.DEFAULT-AMOUNT (*) to cc-payment.DEFAULT-AMOUNT    (1,*)
  move  cc-payment-by-pol.DUE-AMOUNT     (*) to cc-payment.DUE-AMOUNT        (1,*)
else
  escape routine
end-if
*
end-subroutine
*
*****************
define subroutine basic-payments
*****************
*
RESET #AR (*)
*
CALLNAT 'PAY-CAP' #REMAINING-AMT
  #STATUS-ISN
  CC-PAYMENT
  #TIMN
  #ERR-MSG
IF #ERR-MSG NE BLANK
  PRINT #ERROR-MESSAGE
  ESCAPE ROUTINE  /* bz 3594
END-IF
*
CALLNAT 'PAY-FPF' #REMAINING-AMT
  #STATUS-ISN
  CC-PAYMENT
  #TIMN
  #ERR-MSG
IF #ERR-MSG NE BLANK
  PRINT #ERROR-MESSAGE
  ESCAPE ROUTINE  /* bz 3594
END-IF
*
CALLNAT 'PAY-RFPF' #REMAINING-AMT
  #STATUS-ISN
  CC-PAYMENT
  #TIMN
  #ERR-MSG
IF #ERR-MSG NE BLANK
  PRINT #ERROR-MESSAGE
  ESCAPE ROUTINE  /* bz 3594
END-IF
*
CALLNAT 'PAY-PDRN' #REMAINING-AMT      /* PAY PREM DUE AND RIDER ACCORDING THE MODE
  #STATUS-ISN
  CC-PAYMENT
  #TIMN
  #ERR-MSG
IF #ERR-MSG NE BLANK
  PRINT #ERR-MSG
  ESCAPE ROUTINE  /* bz 3594
END-IF
*
* CALLNAT 'PAY-INT' #REMAINING-AMT
*   #STATUS-ISN
*   CC-PAYMENT
*   #TIMN
*   #ERR-MSG
* IF #ERR-MSG NE BLANK
*   PRINT #ERR-MSG
*   ESCAPE BOTTOM
* END-IF
END-subroutine
*
*****************
DEFINE subroutine PAY-LOAN-AND-PAY-IN-THE-FUTURE
*****************
*
RESET #AR (*)
*
CALLNAT 'PAY-CAP' #REMAINING-AMT
  #STATUS-ISN
  CC-PAYMENT
  #TIMN
  #ERR-MSG
IF #ERR-MSG NE BLANK
  PRINT #ERROR-MESSAGE
  ESCAPE ROUTINE  /* bz 3594
END-IF
*
EXAMINE #TRAN-TYPE-STR FOR 'PRNF' POSITION #N /* PAY PRINCIPAL OF FIXED LOAN
EXAMINE #TRAN-TYPE-STR FOR 'PRNV' POSITION #P /* PAY PRINCIPAL OF VAR LOAN
COMPRESS cc-payment.TRAN-TYPE (*,*) INTO #TRAN-TYPE-STR
* IF #N > 0
*     OR #P > 0
*   CALLNAT 'PAY-PRNF' #REMAINING-AMT
*     #STATUS-ISN
*     CC-PAYMENT
*     #TIMN
*     #ERR-MSG
*   IF #ERR-MSG NE BLANK
*     PRINT #ERR-MSG
*     ESCAPE BOTTOM
*   END-IF
* END-IF
*
CALLNAT 'PAYPREPM' #REMAINING-AMT     /* PAY PREMIUM IN THE FUTURE
  #STATUS-ISN
  CC-PAYMENT
  #TIMN
  #ERR-MSG
IF #ERR-MSG NE BLANK
  PRINT #ERR-MSG
  ESCAPE ROUTINE  /* bz 3594
END-IF
END-SUBROUTINE
*
* IF #REMAINING-AMT > 0
* write '=' #REMAINING-AMT '=' #CN
* *  FIND (1) ST-V WITH ID-NUMBER = #CN
* *    #STATUS-ISN := *ISN (0405)
*     callnat 'PAY-ADCR' #remaining-amt
*       #STATUS-ISN
*       CC-PAYMENT
*       #timn
*       #ERR-MSG
*     IF #ERR-MSG NE BLANK
*       PRINT #ERROR-MESSAGE
*       ESCAPE routine
*     END-IF
* *  END-FIND
* END-IF
end
