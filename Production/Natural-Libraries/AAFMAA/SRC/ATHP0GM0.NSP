* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ATHP0GM0 bz
* When Delete or suspended <186294>  <167286> POLICY-NUMBER = POL ??
* ATHP0GM0 - New GM AR report
* bz  09/10/2014  (OI-3078) - Add new routine for CASH-CODE
* vxt 03/23/2016  vt1  Ticket 4252 - add new GL for services
*
DEFINE DATA LOCAL
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 REDEFINE ID-NUMBER
    3 CN-A1           (A1)
    3 CN_A5           (A5)
  2 MEMBER-CONTACT-ID
  2 PROCESS-IND
  2 INTRO-FLAG
  2 NUMBER-MEMBERSHIPS
  2 INS-MAIL-CODE
  2 MILITARY-SERVICE
  2 C*ACTIVE-SEGMENTS
  2 ACTIVE-SEGMENTS(9)
    3 PLAN
    3 STATUS
    3 ISSUE-DATE        (EM=9999-99-99)
    3 NUM-MBRSHIPS
    3 POL-NUM-PRE
    3 POL-NUM-SUF
*
1 AR-V  VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER        (N6)      /* D
  2 TRANSACTION-DATN (P9)      /* D
  2 TRANSACTION-TIMN (P7)
  2 TXN-CODE         (A4)     /*  D
  2 CASH-CODE        (A1)
  2 TXN-ACCT-NUMBER  (N3)
  2 DEBIT-AMOUNT     (N7.2)
  2 CREDIT-AMOUNT    (N7.2)
  2 POLICY-NUMBER    (A16)
  2 MONTH-END        (A1)
  2 SEQUENCE-NUM     (N1)
  2 C*SUNGARD-INFO
  2 SUNGARD-INFO     (15)
    3 SG-CATEGORY-1    (A2)
    3 SG-CATEGORY-2    (A2)
    3 SG-AMOUNT        (N6.2)
*
1 v_DN           (N8)
1 REDEFINE v_DN
  2 v_D_A       (A8)
1 REDEFINE v_DN
  2 D_YYYY      (N4)
  2 D_MM        (N2)
  2 D_DD        (N2)

1 v_Di  (D)  INIT  <*DATX> (EM=MM/DD/YYYY)
1 #SG-CATEGORY-1  (A2)
1 v_Account_No      (A4)
*
1  MTX
  2 mtx_ACC#         (I4)
  2 mtx_CD#          (I4)
  2 ACCOUNTS    (100)
    3 mtx_ACC        (A4)
    3 mtx_ACC@       (I4)
    3 mtx_ACC_Val    (N8.2)
    3 mtx_CD@        (I4/20)
    3 mtx_CD@_Val    (N8.2/20)
  2 CODES       (20)
    3 mtx_CD         (A4)
    3 mtx_CD_Sum     (I4)
    3 mtx_CD_Val     (N8.2)

1  srt-ACC
  2 wrk_ACC        (A4)
  2 wrk_ACC@       (I4)
  2 wrk_ACC_Val    (N8.2)
  2 wrk_CD@        (I4/20)
  2 wrk_CD@_Clmn       (I4/100)
  2 wrk_CD@_Val        (N8.2/20)
  2 wrk_CD@_Val_Clmn   (N8.2/100)

1  srt-CD
  2 wrk_CD         (A4)
  2 wrk_CD_Sum     (I4)
  2 wrk_CD_Val     (N8.2)
*
1 v_A (A) DYNAMIC
1 wrk_VARS
  2 v_ROW             (A200)
  2 v_A4              (A4)
  2 v_A2              (A2)
  2 v_A19             (A19)
  2 v_Amount          (N9.2)
  2 v_Total_ACC       (N9.2)
  2 v_Total_CD        (N9.2)
  2 v_Total_ACC_Ocur  (I4)
  2 v_Total_CD_Ocur   (I4)
  2 #i                (I2)
  2 #j                (I2)
  2 #k                (I2)
*
1 v_w1                (A13)
1 v_w2                (A13)
1 dm                  (A1) INIT <H'09'>
1 l_ME                (L)
1 v_CN                (N6) INIT <000000>
1 l_Ocur              (L)
1 l_Source            (L)
1 v_MSG               (A78)
*
1 f_Rep   (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/WORK/GMAR@.txt'>
1 f_Rep_S (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/WORK/GMAR@_S.txt'>
*
1 v_A78  (A78)
1 l_SORT (L)

1 l_Note   (L) INIT <TRUE>
1 p_Key (N8)
1 p_Res (A/*) DYNAMIC
*******
1  v_RC          (N3)
1  shcmd         (A) DYNAMIC
1  FTP_Script    (A) DYNAMIC INIT <'/usr/SAG/AAFMAA/batch/workfiles/PROD/PGM/ftpSAS'>
1  DIR_Win       (A) DYNAMIC INIT <'ftp/TEST'>
1  f_FTP         (A) DYNAMIC
*******
1 v_Segment     (N1)
1 v_PLAN        (A3)
1 v_Pol         (A16)
1 #NEW-GL-ACCOUNT (A4/10) CONST <'PREP','PRER','FPFP','FPFR','FPRP','RIDP','RIDR','DUEP','DUER','DISC'>
1 v_Timer       (A17)
1 c_AR_rec      (I4)
1 v_Dscr        (A25)
1 v_N6          (N6)
1 v_Limit       (N6)  INIT <200000>
1 c_New_Acc     (I4)
1 c_Old_Acc     (I4)
1 c_Bl_Acc      (I4)
1  v_PN         (I1)     INIT  <1>
1  rp_Log       (A80)    INIT <"/usr/SAG/AAFMAA/batch/workfiles/WORK/GMAR_Log.TXT">
1 c_Empty       (I4)
END-DEFINE

ON ERROR
  IF *DEVICE = 'BATCH'
    WRITE (1) NOTITLE  *PROGRAM "Err-ln:" *ERROR-LINE "Err:" *ERROR-NR
  ELSE
    WRITE NOTITLE  *PROGRAM "Err-ln:" *ERROR-LINE "Err:" *ERROR-NR
  END-IF
END-ERROR
FORMAT PS=22
IF *DEVICE = 'BATCH'
  IF *DATA <> 0 INPUT v_A78 /*  PRINT(1) v_A78
    IF v_A78 = SCAN 'Source' l_Source := TRUE  END-IF
    IF v_A78 = SCAN 'NoNote' l_Note := FALSE ELSE l_Note := TRUE  END-IF
    IF v_A78 = SCAN 'Daily' v_Di := v_Di - 1  END-IF
    IF v_A78 = SCAN 'Month-End'   /* Month-End-XX
      l_ME := TRUE
      v_Di := v_Di + 15
      MOVE EDITED v_Di (EM=YYYYMMDD)   TO v_D_A
      D_DD := 01
      MOVE EDITED v_D_A   TO v_Di (EM=YYYYMMDD)
      IF v_A78 = SCAN 'Month-End-Last'
        v_Di := v_Di - 1
*                   PRINT(1) 'Last date:'  v_Di (EM=YYYY-MM-DD)
      END-IF
    ELSE
      l_ME := FALSE
    END-IF
  END-IF
  IF *DATA <> 0 INPUT v_A78 /* PRINT(1) v_A78
    IF v_A78 <> MASK('#')
      f_Rep   := v_A78
    END-IF
  END-IF
  IF *DATA <> 0 INPUT v_A78 /* PRINT(1) v_A78
    IF v_A78 <> MASK('#')
      f_Rep_S := v_A78
    END-IF
  END-IF
  IF *DATA <> 0 INPUT v_A78 /* PRINT(1) v_A78
    IF v_A78 <> MASK('#')
      DIR_Win := v_A78
    END-IF
  END-IF
  IF *DATA <> 0 INPUT v_A78 /* PRINT(1) v_A78
    IF v_A78 = MASK ('DATE='MM'/'DD'/'YYYY)
      v_A := SUBSTR(v_A78,6,10)
      MOVE EDITED v_A  TO v_Di (EM=MM/DD/YYYY)
*            PRINT(1) v_Di (EM=MM/DD/YYYY)
    END-IF
  END-IF
  IF *DATA <> 0 INPUT v_A78 /* PRINT(1) v_A78
    IF v_A78 = MASK ('CN='999999)
      v_A := SUBSTR(v_A78,4,6)
      v_CN := VAL(v_A)
*            PRINT(1) v_Di (EM=MM/DD/YYYY)
    END-IF
  END-IF
END-IF

IF *DEVICE <> 'BATCH'
  v_RC := PRT_FN_PUT(<v_PN, rp_Log>)
  REPEAT
    INPUT  (IP=OFF)  WITH TEXT v_MSG
      '-'(5) *DATX *TIMX 'Production:' F-IS-DEV(<>)(AD=I EM=YES/NO) GET_DBN(<>)(AD=I) //
      'Date:' v_Di(AD=UM) 3x 'Process Month-End' l_ME(AD=UM EM=N/Y) //
      'Report ocurrances' l_Ocur (AD=UM EM=N/Y)    //
      'Write source data' l_Source (AD=UM EM=N/Y)  //
      'Restrict to CN' v_CN (AD=UM EM=ZZZZZZ)     //
      'Limit AR records' v_Limit(AD=UM EM=ZZZZZZ)  'Processed AR records' c_AR_rec(AD=O) /
      'New Acc:' c_New_Acc(AD=O) 'Old Acc:' c_Old_Acc(AD=O) 'Blanc' c_Bl_Acc(AD=O)  'Empty' c_Empty(AD=O)   //
      'Windows folder:' // DIR_Win  (AL=70 AD=MI)
    v_MSG := " "
    RESET c_New_Acc c_Old_Acc c_Bl_Acc
    PERFORM sbr_MAIN
    CLOSE WORK FILE 1
    CLOSE WORK FILE 2
    PERFORM sbr_FTP
    PRINT(1)  v_MSG
    CLOSE PRINTER(1)
* ----------------------------------------------------
*  PRINT 'Accounts:' mtx_ACC# 'Cash codes:' mtx_CD#
*   FOR #i = 1 TO mtx_ACC#
*    PRINT #i (EM=ZZ9')') mtx_ACC(#i) mtx_ACC@(#i)
*   END-FOR
*   EJECT
*   FOR #i = 1 TO mtx_CD#
*    PRINT #i (EM=ZZ9')') mtx_CD(#i)  mtx_CD@(1,#i)
*   END-FOR
* ----------------------------------------------------
  END-REPEAT
ELSE
  PERFORM sbr_MAIN
  CLOSE WORK FILE 1
  CLOSE WORK FILE 2
  PERFORM  sbr_FTP
  PRINT(1)  v_MSG
  CLOSE PRINTER(1)
END-IF
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DEFINE sbr_MAIN
MOVE EDITED v_Di (EM=YYYYMMDD)   TO v_D_A
MOVE EDITED v_Di (EM=MM-DD-YYYY) TO v_A
IF l_ME
  COMPRESS '_' v_A '_Monthly' INTO v_A LEAVING NO SPACE
ELSE
  COMPRESS '_' v_A '_Daily'   INTO v_A LEAVING NO SPACE
END-IF
IF v_CN <> 0
  COMPRESS v_A '_' v_CN   INTO v_A LEAVING NO SPACE
END-IF

EXAMINE f_Rep   FOR '@' REPLACE v_A
DEFINE WORK FILE 1 f_Rep TYPE 'ASCII-COMPRESSED'
f_FTP := f_Rep
EXAMINE f_Rep   FOR v_A REPLACE '@'

IF l_Source
  EXAMINE f_Rep_S FOR '@' REPLACE v_A
  DEFINE WORK FILE 2 f_Rep_S TYPE 'ASCII-COMPRESSED'
  EXAMINE f_Rep_S FOR v_A REPLACE '@'
END-IF
COMPRESS FULL '-- GMAR Report for:' v_A '        Executed:' *DATX *TIMX  INTO v_Row
WRITE WORK FILE 1 v_ROW

IF l_Source                             /* ---------------------------
  WRITE WORK FILE 2 VARIABLE
    'CN' dm 'v_Account_No' dm 'CASH-CODE' dm 'CREDIT-AMOUNT' dm
    'DEBIT-AMOUNT' dm 'SG-AMOUNT' dm 'v_AMOUNT' dm 'M-E' dm 'C*'
END-IF                                  /* ---------------------------
PRINT(1) NOTITLE v_ROW / *PROGRAM 'Exceptions' /

RESET MTX wrk_VARS
FIND NUMBER AR-V WITH  TRANSACTION-DATN = v_DN
c_AR_rec := *NUMBER

SETA. SETTIME
FAR.
FIND(v_Limit) AR-V WITH  TRANSACTION-DATN = v_DN SORTED BY ID-NUMBER
  IF v_CN <> 0 AND ID-NUMBER < v_CN ESCAPE TOP END-IF
  IF l_ME      AND MONTH-END <> 'Y' ESCAPE TOP END-IF
  IF NOT l_ME  AND MONTH-END =  'Y' ESCAPE TOP END-IF

  IF TXN-CODE = 'STOP' OR = 'STRT' OR = 'FLNF' OR= 'FLNV' ESCAPE TOP END-IF
  IF  DEBIT-AMOUNT = 0  AND  CREDIT-AMOUNT = 0
    c_Empty := c_Empty + 1
    v_N6 := TRANSACTION-TIMN / 10
    WRITE(1) NOTITLE 'Db=0 and Cr=0' AR-V.ID-NUMBER POLICY-NUMBER
      TRANSACTION-DATN(EM=9999-99-99) v_N6(EM=99h:99m:99sec)
      TXN-CODE MONTH-END
    ESCAPE TOP
  END-IF
  v_AMOUNT := CREDIT-AMOUNT - DEBIT-AMOUNT
  IF C*SUNGARD-INFO = 0
    #i := 0
    #SG-CATEGORY-1 := ' '
    PERFORM sbr_Process
  ELSE
    FOR #i = 1 TO C*SUNGARD-INFO
      IF CREDIT-AMOUNT = 0   v_AMOUNT := SG-AMOUNT(#i) * -1
      ELSE                   v_AMOUNT := SG-AMOUNT(#i)
      END-IF
      #SG-CATEGORY-1 := SG-CATEGORY-1(#i)
      PERFORM sbr_Process
    END-FOR
  END-IF
END-FIND
PERFORM sbr_SORT
COMPRESS FULL 'ACCT' 'Entries Total' INTO v_Row WITH ALL DELIMITERS dm
FOR #j = 1 TO mtx_CD#
  COMPRESS v_ROW mtx_CD(#j) INTO v_Row WITH ALL DELIMITERS dm
END-FOR
COMPRESS v_ROW 'Grand Total' INTO v_Row WITH ALL DELIMITERS dm
WRITE WORK FILE 1 v_ROW

FOR #i = 1 TO mtx_ACC#
* --------------- catch an error
  IF mtx_ACC_Val(#i) = 0
    WRITE(1) NOTITLE 'Account is Empty' mtx_ACC(#i)  ESCAPE TOP
  END-IF
* ---------------
  MOVE EDITED mtx_ACC@(#i) (EM=ZZZ9) TO v_A4
  COMPRESS  mtx_ACC(#i) v_A4 INTO v_Row WITH ALL DELIMITERS dm

  FOR #j = 1 TO mtx_CD#
    IF l_Ocur
      MOVE EDITED mtx_CD@(#i,#j) (EM=ZZZ9) TO v_A4
    ELSE
      MOVE EDITED mtx_CD@_Val(#i,#j) (EM=NZZZ,ZZZ,ZZ9.99) TO v_A19
    END-IF
    COMPRESS v_Row v_A19 INTO v_Row WITH ALL DELIMITERS dm
  END-FOR

  v_Total_ACC := v_Total_ACC + mtx_ACC_Val(#i)
  v_Total_ACC_Ocur :=  v_Total_ACC_Ocur + mtx_ACC@(#i)

  IF l_Ocur
    MOVE EDITED mtx_ACC@(#i) (EM=NZZZ,ZZZ,ZZ9) TO v_A19
  ELSE
    MOVE EDITED mtx_ACC_Val(#i) (EM=NZZZ,ZZZ,ZZ9.99) TO v_A19
  END-IF
  COMPRESS v_Row v_A19  INTO v_Row WITH ALL DELIMITERS dm
*    PRINT v_A19 'Gr. Tot Vert'   /* ++++++++++++++++
  WRITE WORK FILE 1 v_ROW
END-FOR
* -------------------------------------- Bottom Line  ----------------
COMPRESS 'Grand Total' dm INTO v_Row
FOR #j = 1 TO mtx_CD#
  v_Total_CD      := v_Total_CD      + mtx_CD_Val(#j)
  v_Total_CD_Ocur := v_Total_CD_Ocur + mtx_CD_Sum(#j)          /* ?????
  IF l_Ocur
    MOVE EDITED mtx_CD_Sum(#j) (EM=ZZZ,ZZZ,ZZ9) TO v_A19
  ELSE
    MOVE EDITED mtx_CD_Val(#j) (EM=NZZZ,ZZZ,ZZ9.99) TO v_A19
  END-IF
  COMPRESS v_ROW v_A19 INTO v_Row WITH ALL DELIMITERS dm
END-FOR
IF l_Ocur
  MOVE EDITED v_Total_CD_Ocur (EM=ZZZ,ZZZ,ZZ9)  TO v_A19
ELSE
  MOVE EDITED v_Total_CD      (EM=NZZZ,ZZZ,ZZ9.99) TO v_A19
END-IF
COMPRESS v_ROW v_A19 INTO v_Row WITH ALL DELIMITERS dm

*   IF l_Ocur  MOVE EDITED v_Total_ACC_Ocur (EM=ZZ,ZZZ,ZZ9) TO v_A19     /* verified
*   ELSE       MOVE EDITED v_Total_ACC (EM=NZZ,ZZZ,ZZ9.99) TO v_A19      /* verified
*   END-IF
* COMPRESS v_ROW v_A19 INTO v_Row WITH ALL DELIMITERS dm                 /* verified

WRITE WORK FILE 1 v_ROW
v_ROW := " "
WRITE WORK FILE 1 v_ROW
IF l_ME AND  D_DD = 01 AND l_Note
  p_Key := 800105
  CALLNAT 'GMAR0N01'  p_Key p_Res(*)
  IF *OCCURRENCE (p_Res) > 0
    #k := *UBOUND(p_Res)
    FOR #i = 1 TO #k
      v_ROW := p_Res(#i)
      WRITE WORK FILE 1 v_ROW
    END-FOR
  END-IF
END-IF
COMPUTE ROUNDED v_N6 = *TIMD(SETA.) / 10
MOVE EDITED v_N6(EM=99h:99min:99sec) TO v_ROW
WRITE(1) /
  'AR records        :' c_AR_rec(EM=ZZZZZ9) /
  'Accounts          :' mtx_ACC#(EM=ZZZZZ9)  /
  'Cash codes        :' mtx_CD#(EM=ZZZZZ9)   /
  'New Acc           :' c_New_Acc(EM=ZZZZZ9) /
  'Old Acc           :' c_Old_Acc(EM=ZZZZZ9)    /
  'Empty Transactions:' c_Empty(EM=ZZZZZ9)
PRINT(1) 'Elapsed' v_Row

END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_Process
PERFORM sbr_Account_Number
*  WRITE *COUNTER(FAR.)  (EM=ZZZ9) POLICY-NUMBER v_Account_No TXN-CODE MONTH-END
EXAMINE mtx_ACC(*) FOR v_Account_No GIVING INDEX #j
IF #j = 0
  mtx_ACC# := mtx_ACC# + 1
  mtx_ACC(mtx_ACC#)  :=  v_Account_No
  mtx_ACC@(mtx_ACC#) := 1
  mtx_ACC_Val(mtx_ACC#) := v_AMOUNT
  #j := mtx_ACC#
ELSE
  mtx_ACC@(#j) := mtx_ACC@(#j) + 1
  mtx_ACC_Val(#j) := mtx_ACC_Val(#j) + v_AMOUNT
END-IF

v_A4 := CASHCD(<AR-V.CASH-CODE>)                         /* bz OI-3018

IF l_Source  /* ------------------------------------------------ WRITE SOURCE
  IF #i <> 0
    MOVE EDITED SG-AMOUNT(#i) (EM=NZ,ZZZ,ZZ9.99)  TO v_w1
  END-IF
  MOVE EDITED v_AMOUNT      (EM=NZ,ZZZ,ZZ9.99)  TO v_w2
  WRITE WORK FILE 2 VARIABLE
    AR-V.ID-NUMBER dm v_Account_No dm v_A4 dm CREDIT-AMOUNT dm
    DEBIT-AMOUNT dm v_w1 dm v_w2 dm MONTH-END dm C*SUNGARD-INFO
END-IF     /* ---------------------------------------------------------------
EXAMINE mtx_CD(*) FOR v_A4 INDEX #k
IF #k = 0
  mtx_CD# := mtx_CD# + 1
  mtx_CD(mtx_CD#)  := v_A4
  mtx_CD_Sum(mtx_CD#) := 1
  mtx_CD@(#j,mtx_CD#) := 1
  mtx_CD@_Val(#j,mtx_CD#) := v_AMOUNT
  mtx_CD_Val(mtx_CD#) := v_AMOUNT
ELSE
  mtx_CD_Sum(#k) := mtx_CD_Sum(#k) + 1
  mtx_CD@(#j,#k) := mtx_CD@(#j,#k) + 1
  mtx_CD_Val(#k)     := mtx_CD_Val(#k) + v_AMOUNT
  mtx_CD@_Val(#j,#k) := mtx_CD@_Val(#j,#k) + v_AMOUNT
END-IF
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE SUBROUTINE sbr_Account_Number
v_Segment := 0
v_PLAN := ' '
IF     TRANSACTION-DATN GE 20140101
    AND AR-V.TXN-CODE = #NEW-GL-ACCOUNT(*)
    AND SG-CATEGORY-1(#i) <> 'SS'
  FIND(1) ST-V WITH ID-NUMBER = AR-V.ID-NUMBER
    FOR #j = 1 TO C*ACTIVE-SEGMENTS
      PERFORM sbr_PolName
      IF  v_Pol = POLICY-NUMBER
        v_Plan := PLAN(#j)
        v_Segment := #j
        ESCAPE BOTTOM
      END-IF
    END-FOR
    IF v_Segment <> 0
      v_Account_No   := F-GL-PLAN(<AR-V.ID-NUMBER, v_Segment, #SG-CATEGORY-1, v_Plan>)(1)
      IF v_Account_No <> ' '
        c_New_Acc := c_New_Acc + 1
        ESCAPE ROUTINE
      END-IF
    END-IF
  END-FIND
END-IF
v_Account_No         := F-GL-TRAN(<TXN-CODE, #SG-CATEGORY-1, SEQUENCE-NUM>)(1)
*
if TRANSACTION-DATN GE 20160301 and AR-V.TXN-CODE = 'DUEP' and  AR-V.sg-category-1(1) = 'SS'       /* vt1 \/
  v_Account_No := '4115'
end-if
*                                                                                                  /* vt1 /\
c_Old_Acc := c_Old_Acc + 1
IF v_Account_No = ' '             /* Error. Account not found
  c_Bl_Acc := c_Bl_Acc + 1
  WRITE(1) NOTITLE 'Account not found' AR-V.ID-NUMBER v_Pol  v_Segment(EM=' Segm:{'9'}') 'TXN:' AR-V.TXN-CODE 'SG-1:' #SG-CATEGORY-1  #i(EM=' sg#{'9'}')
END-IF
* ----------------
*   IF v_Account_No = '4012'
*      WRITE v_Pol (Al=10) v_Segment(EM=' {'9'}') TRANSACTION-DATN(EM=9999-99-99) TRANSACTION-TIMN (EM=99:99:99.9)
*           'TXN:' AR-V.TXN-CODE 'SG-1:' #SG-CATEGORY-1  #i (EM=' sg#{'9'}') 'Empty Acc'(I) v_Account_No
*   END-IF
* ----------------
END-SUBROUTINE
* ------------------------------------------------------------------------------------------
DEFINE sbr_SORT
* PRINT 'sbr_SORT'
l_SORT := TRUE
#k := 0
REPEAT  WHILE l_SORT AND #k < 10000
  #k := #k + 1
  l_SORT := FALSE
  FOR #i = 1 TO ( mtx_ACC# - 1 )
    IF mtx_ACC(#i) > mtx_ACC(#i + 1)      /* (1:mtx_CD#)  instead of (*) ???
      wrk_ACC        := mtx_ACC(#i)
      wrk_ACC@       := mtx_ACC@(#i)
      wrk_ACC_Val    := mtx_ACC_Val(#i)
      wrk_CD@(*)     := mtx_CD@(#i,*)
      wrk_CD@_Val(*) := mtx_CD@_Val(#i,*)

      mtx_ACC(#i)        :=   mtx_ACC(#i+1)
      mtx_ACC@(#i)       :=   mtx_ACC@(#i+1)
      mtx_ACC_Val(#i)    :=   mtx_ACC_Val(#i+1)
      mtx_CD@(#i,*)      :=   mtx_CD@(#i+1,*)
      mtx_CD@_Val(#i,*)  :=   mtx_CD@_Val(#i+1,*)

      mtx_ACC(#i+1)        :=  wrk_ACC
      mtx_ACC@(#i+1)       :=  wrk_ACC@
      mtx_ACC_Val(#i+1)    :=  wrk_ACC_Val
      mtx_CD@(#i+1,*)      :=  wrk_CD@(*)
      mtx_CD@_Val(#i+1,*)  :=  wrk_CD@_Val(*)
      l_SORT := TRUE
    END-IF
  END-FOR
END-REPEAT
*  PRINT 'ACC sorted in' #k 'Iterrations'

l_SORT := TRUE
#k := 0
REPEAT  WHILE l_SORT AND #k < 10000
  #k := #k + 1
  l_SORT := FALSE
  FOR #i = 1 TO ( mtx_CD# - 1 )
    IF mtx_CD(#i) > mtx_CD(#i + 1)      /* (1:mtx_ACC#)  instead of (*) ???
      wrk_CD                 := mtx_CD(#i)
      wrk_CD_Sum             := mtx_CD_Sum(#i)
      wrk_CD_Val             := mtx_CD_Val(#i)
      FOR #j = 1  TO mtx_ACC#
        wrk_CD@_Clmn    (#j) := mtx_CD@(#j,#i)
        wrk_CD@_Val_Clmn(#j) := mtx_CD@_Val(#j,#i)
      END-FOR

      mtx_CD(#i)             :=   mtx_CD(#i+1)
      mtx_CD_Sum(#i)         :=   mtx_CD_Sum(#i+1)
      mtx_CD_Val(#i)         :=   mtx_CD_Val(#i+1)
      FOR #j = 1  TO mtx_ACC#
        mtx_CD@   (#j,#i)    := mtx_CD@(#j,#i+1)
        mtx_CD@_Val(#j,#i)   := mtx_CD@_Val(#j,#i+1)
      END-FOR

      mtx_CD(#i+1)           :=   wrk_CD
      mtx_CD_Sum(#i+1)       :=   wrk_CD_Sum
      mtx_CD_Val(#i+1)       :=   wrk_CD_Val
      FOR #j = 1  TO mtx_ACC#
        mtx_CD@    (#j,#i+1) := wrk_CD@_Clmn(#j)
        mtx_CD@_Val(#j,#i+1) := wrk_CD@_Val_Clmn(#j)
      END-FOR
      l_SORT := TRUE
    END-IF
  END-FOR
END-REPEAT
*  PRINT 'CD sorted in' #k 'Iterrations'
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_FTP
COMPRESS FTP_Script f_FTP "X" DIR_Win INTO shcmd
call 'shcmd' shcmd
v_RC :=  RET('shcmd')
IF v_RC <> 0
  COMPRESS 'FTP Error. Code:' v_RC INTO v_MSG
ELSE
  COMPRESS 'FTP Success:' DIR_Win INTO v_MSG
END-IF
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
DEFINE sbr_PolName
IF ISSUE-DATE(#j) GE 19941201
  COMPRESS ST-V.ID-NUMBER '-' ST-V.NUM-MBRSHIPS(#j)         INTO v_Pol  LEAVING NO SPACE
ELSE
  COMPRESS ST-V.POL-NUM-PRE(#j) CN_A5 ST-V.POL-NUM-SUF(#j)  INTO v_Pol  LEAVING NO SPACE
END-IF
MOVE LEFT v_Pol TO v_Pol
END-SUBROUTINE
* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
END
