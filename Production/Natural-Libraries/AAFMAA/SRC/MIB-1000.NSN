* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* MIB-1000 MIB Request
* bz Aug 15, 2016. Ver-5(11/14/2016)
*  
* -- Request
* Check for existing
* Save results in DB file - Only last response 
* Save 401 request and response 

DEFINE DATA
PARAMETER
1 p_AT          (N6) BY VALUE
1 p_Clerk       (A3) BY VALUE
1 p_Message     (A) DYNAMIC
1 p_Mode        (A1) /* T = test mote
1 p_RC          (N4)
LOCAL USING ADDA0001
LOCAL
1 v_AT_REQ         (A) DYNAMIC
* -----------------------------------
1 AT-V VIEW of A-APPL-TRACKING
  2 ID-NUMBER               (N6)
  2 CONTACT-ID              (N8)
  2 AT-STATUS               (A2)
  2 FACE-AMT-UNITS          (N4)     
* -----------------------------------  
 1 CNT-V VIEW OF A-CONTACTS
  2 FULL-NAME 
    3 FIRST-NAME            (A25)
    3 MIDDLE-NAME           (A25)  
    3 LAST-NAME             (A25)
    3 SUFFIX                (A10) 
   2 SSN                    (N9)  (EM=999-99-9999)
   2 DATE-OF-BIRTH          (N8)  (EM=9999-99-99)
   2 REDEFINE DATE-OF-BIRTH 
     3 DATE-OF-BIRTH_A      (A8) 
   2 GENDER-CD              (A1)  
   2 MILITARY-STATUS
* ---------------------------------------------------------------------   
1  MIB-V VIEW OF A-MIB
  2  MIB-SSN                (N9)  (EM=999-99-9999)    /* SSN         /* DE
  2  MIB-DATE               (N8)  (EM=9999-99-99)     /* Date
  2  MIB-AT                 (N6)  (EM=999999)         /* AT
  2  MIB-CLERK              (A3)
  2  MIB-COMM               (A1)                      /* (R)equest / (S)ubmit
  2  MIB-CODES#             (N2)                      /* 0:No info
  2 C*MIB-RECORD
  2  MIB-RECORD    (20)                      /* PE 20 times 
     3  MIB-MATCH           (A3)             /* Hit/Try
     3  MIB-FORM      
        4  MIB-FORM-TYPE    (A4/19)          /* Type Code/Note/Disp
        4  MIB-FORM-DATE    (A10/19)         /* YYYY-MM-DD Code Date
        4  MIB-FORM-TEXT    (A120/19)        /* Code(s) / Note
* ------------------------------------     
1 v_Name                 (A60)
1 v_FA                   (N7) (EM=ZZZ,ZZ9)
1 v_Occ                  (A8)
1 v_Codes#               (N2)
1 v_Msg                  (A78)
* -----------------
1 CMD                    (A) DYNAMIC INIT <'/usr/SAG/APPS/MIB/MIBget @@F_REQ'>
1 RESP                   (A) DYNAMIC
1 FNC                    (A) DYNAMIC 
* -----------------
1 file_Req               (A) DYNAMIC INIT <'/usr/SAG/APPS/MIB/401/REQ-401_@@AT.xml'>
1 file_Resp              (A) DYNAMIC INIT <'/usr/SAG/APPS/MIB/401/RESP-401_@@AT.xml'>
1 file_TMPL_401          (A) DYNAMIC INIT <'/usr/SAG/APPS/MIB/TMPL_401.xml'>
1 file_Log               (A) DYNAMIC INIT <'/usr/SAG/APPS/MIB/Log_401.txt'>
1 XML                    (A) DYNAMIC
1 A200                   (A130)
1 has_MIB                (L)
1 l_Test                 (L)
*
1 #r                     (I2)
1 #i                     (I2)
1 #j                     (I2)
1 #n                     (I2)
1 #k                     (I2)
1 #Pages                 (I2)
 1 p_Records#           (N2)
 1 p_Records(20)                        /* Assumption: Nine records max 
   2 p_R-Match          (A3)        /* HIT/TRY
   2 p_R-Forms#         (N2)
   2 p_R-Coded#         (N2)        /* Forms with Code 
   2 p_R-Notes#         (N2)        /* Forms with Note
   2 p_R-Disputed#      (N2)        /* Forms Disputed
   2 p_Forms (19)                   /* FormInstance 
     3 p_Ref            (N2)        /* Form Ref#  
     3 p_Type           (A4)        /* Code/Note/Disp (dispute note) 
     3 p_Date           (A10)
     3 p_Code#          (N2)
     3 p_Text           (A120)      /* Code / Note 
*
 1 p_Person (20)     
   2 pp_State           (A)  DYNAMIC   /*  1
   2 pp_Country         (A)  DYNAMIC   /*  2
   2 pp_ZIP             (A)  DYNAMIC   /*  3        
   2 pp_FN              (A)  DYNAMIC   /*  4       
   2 pp_MN              (A)  DYNAMIC   /*  5       
   2 pp_LN              (A)  DYNAMIC   /*  6         
   2 pp_PX              (A)  DYNAMIC   /*  7        
   2 pp_SX              (A)  DYNAMIC   /*  8         
   2 pp_Occ             (A)  DYNAMIC   /*  9         
   2 pp_Sex             (A)  DYNAMIC   /* 10         
   2 pp_BD              (A)  DYNAMIC   /* 11  
*
 1 p_Alt
  2 alt_Name#           (N1)
  2 alt_Names(5)
    3 alt_FN            (A)  DYNAMIC
    3 alt_MN            (A)  DYNAMIC
    3 alt_LN            (A)  DYNAMIC
  2 alt_DOB#            (N1)
  2 alt_DOB             (A10/5)    
*  
1 v_A                   (A) DYNAMIC
1 v_B                   (A) DYNAMIC
1 R-Codes#              (N2)
1 tst_Case              (A3)
1 v_L                   (L)
* ******
1  v_PN         (I1)     INIT  <1>  
1  v_RC         (N3)
1  A80          (A80)
* ******
1 run_MIB        (L)    INIT <TRUE>
1 has_MIB_cv     (C)
1 has_MIB_Text   (A23)  INIT<'View report only Y/N :'>
1 has_MIB_Report   (L)
1 cv_Print        (C)
1 c_Try           (N2)
1 c_Hit           (N2)
1 #d0             (D)  INIT <*DATX>           /* bz-60 days
1 #d              (D)                        /* bz-60 days
1 mib_Age         (I4) INIT <61>             /* bz-60 days
1 A79            (A79/121)
END-DEFINE

ON ERROR
    COMPRESS *PROGRAM "Err-ln:" *ERROR-LINE "Err:" *ERROR-NR INTO p_Message
    p_RC := 10
    PERFORM sbr_Error_Exit
END-ERROR
* - - - - - - - - - - - - - - - - - -
    DEFINE WINDOW WIN-401
      SIZE 10 * 64
      BASE 8 / 8
      TITLE ' MIB Request '
      CONTROL SCREEN
      FRAMED
* - - - - - - - - - - - - - - - - - -      
 FORMAT LS=80 PS=23
 IF F-IS-DEV(<>) OR p_Mode = 'T' l_Test := TRUE END-IF
* DEFINE WORK FILE 2 file_Log TYPE 'ASCII-COMPRESSED'
  PERFORM sbr_Get_Data 
  IF p_RC <> 0
     p_Message := v_Msg
     p_RC := 1
     PERFORM sbr_Error_Exit
  END-IF     
  IF has_MIB
     run_MIB := FALSE
     IF C*MIB-RECORD = 0
       MOVE (AD=N) TO Has_MIB_CV
     ELSE
       MOVE (AD=I) TO Has_MIB_CV
       MOVE TRUE TO has_MIB_Report 
     END-IF  
  ELSE
       run_MIB := TRUE
       MOVE (AD=N) TO Has_MIB_CV
  END-IF
   
  IF mib_Age > 60 
     run_MIB := TRUE
  END-IF
*  ELSE   /* always show MIB confirmation to bypas conversions (per Cliff)
      INPUT WINDOW='WIN-401' (AD=O IP=OFF) /
      2x  v_Msg(AL=64) //
      2x 'Run MIB request Y/N  :'(I) 2x run_MIB(AD=MI EM=N/Y) //
      2x  Has_MIB_Text (CV=Has_MIB_cv)  has_MIB_Report(AD=MI EM=N/Y CV=Has_MIB_cv) //
      2x  54x  l_Test (EM=' '/[Test])
*  END-IF
  
  IF run_MIB  has_MIB_Report := FALSE END-IF
  
  IF has_MIB_Report
     IF p_AT <> MIB-AT      
        v_A := p_AT v_B := MIB-AT
        EXAMINE v_AT_REQ FOR v_A REPLACE v_B
     END-IF  
     EXAMINE file_Resp FOR '@@AT' REPLACE v_AT_REQ 
     v_L := FN_EXIST(<file_Resp>)
     IF NOT v_L 
        p_RC := 3 
        p_Message := 'Report not found.'
        PRINT '='file_Resp
        PERFORM sbr_Error_Exit
     END-IF
     DEFINE WORK FILE 1 file_Resp TYPE 'UNFORMATTED' 
     READ WORK FILE 1 ONCE RESP
     CLOSE WORK FILE 1
     PERFORM sbr_Response
     IF p_RC <> 0 
       PERFORM sbr_Error_Exit 
     END-IF
     PERFORM sbr_Print
     p_RC := 0 
     COMPRESS v_MSG 'Bypass.Print' INTO p_Message
    PERFORM sbr_Exit
  END-IF
    
  IF NOT run_MIB 
    IF v_MSG = ' '
      p_Message := 'MIB Request.Bypass'
    ELSE  
      COMPRESS v_MSG 'Bypass.' INTO p_Message
    END-IF  
    p_RC      := 0 
    ESCAPE ROUTINE 
  END-IF
  IF l_Test 
     PERFORM sbr_Test
     IF *PF-KEY = 'PF3' OR SSN = 0
       p_Message := 'Cancel'
       PERFORM sbr_Exit
     END-IF  
  END-IF
  PERFORM sbr_Request
  PERFORM sbr_Response
  PERFORM sbr_Store
  PERFORM sbr_Print   
  PERFORM sbr_Exit
* -------------------------------------------------------------------------------
DEFINE sbr_Get_Data
*      ------------
  FIND(1) AT-V WITH ID-NUMBER = p_AT
      IF NO RECORD FOUND
         COMPRESS 'AT' p_AT 'not found' INTO v_Msg
         p_RC := 1
         ESCAPE ROUTINE
      END-NOREC
  END-FIND
  v_AT_REQ := p_AT
  IF l_Test
    COMPRESS v_AT_REQ '-TST' INTO v_AT_REQ LEAVING NO SPACE 
  END-IF

  v_FA := FACE-AMT-UNITS * 1000 
 
  FIND(1) CNT-V WITH CONTACT-ID = AT-V.CONTACT-ID
       IF NO RECORD FOUND
         COMPRESS 'Contact' AT-V.CONTACT-ID 'not found' INTO v_Msg
         p_RC := 1
         ESCAPE ROUTINE
      END-NOREC
  END-FIND
  IF MILITARY-STATUS = 'A' 
     v_Occ := 'Military'
  ELSE   
     v_Occ := 'Unknown'
  END-IF
   RESET #PDA-ADDRESS
  #ADD-TYPE := 'P'
  #ADD-CONTACT-ID := AT-V.CONTACT-ID
  CALLNAT 'ADDN0001'   #PDA-ADDRESS
  FIND MIB-V WITH MIB-SSN = CNT-V.SSN
    WHERE MIB-COMM = 'R'
       has_MIB := TRUE
       FOR #r = 1 TO C*MIB-RECORD
          IF MIB-MATCH(#r) = 'TRY'
             c_Try := c_Try + 1
          END-IF
          IF MIB-MATCH(#r) = 'HIT'
             c_Hit := c_Hit + 1
          END-IF
       END-FOR   
       RESET v_A v_B
       IF c_Hit <> 0 
         COMPRESS 'Hit-' c_Hit INTO v_A LEAVING NO SPACE
       END-IF   
       IF c_Try <> 0 
         COMPRESS 'Try-' c_Try INTO v_B LEAVING NO SPACE
       END-IF
       IF c_Hit = 0  AND c_Try = 0 
          v_A := 'No records.'
       END-IF   
       MOVE EDITED MIB-DATE (EM=9999-99-99'.') TO v_Msg      
       MOVE EDITED v_Msg TO #d (EM=YYYY-MM-DD)                      /* bz-60 days
       mib_Age := #d0 - #d                                          /* bz-60 days
       COMPRESS v_Msg '(' mib_Age ')' INTO v_Msg LEAVING NO SPACE
       COMPRESS 'MIB report AT:' MIB-AT v_Msg  v_A v_B INTO v_Msg
  END-FIND
END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Request
*      -----------
 /* --- Read template --- 
 p_RC := 0
 DEFINE WORK FILE 1 file_TMPL_401 TYPE 'UNFORMATTED' 
 READ WORK FILE 1 ONCE XML
 CLOSE WORK FILE 1
 /* --- Create request ---
 PERFORM sbr_Create_Request
 /* --- Store Request ---
 EXAMINE file_Req FOR '@@AT' REPLACE v_AT_REQ  /* PRINT 'Req-' file_Req    /*--db
 v_L := FN_Exist(<file_Req,1>)
 DEFINE WORK FILE 1 file_Req  TYPE 'UNFORMATTED'
 WRITE WORK FILE 1 VARIABLE XML
 CLOSE WORK FILE 1
 EXAMINE CMD FOR '@@F_REQ' REPLACE file_REQ    /*  PRINT 'CMD-' CMD         /* --db
 CALL INTERFACE4 'CMDX' CMD RESP FNC
 EXAMINE file_Resp FOR '@@AT' REPLACE v_AT_REQ  /*  PRINT 'Resp-' file_Resp  /* --db
 v_L := FN_EXIST(<file_Resp,1>)
 DEFINE WORK FILE 1 file_Resp TYPE 'UNFORMATTED' 
 WRITE WORK FILE 1 VARIABLE RESP                 
 CLOSE WORK FILE 1
END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Create_Request
*      ------------------
 IF l_Test
   EXAMINE XML FOR '@@TC-TID' REPLACE '1'
   EXAMINE XML FOR '@@TID'    REPLACE 'True'
 ELSE 
  EXAMINE XML FOR '@@TC-TID' REPLACE '0'
  EXAMINE XML FOR '@@TID'    REPLACE 'False'
 END-IF
 EXAMINE XML FOR '@@AT' REPLACE v_AT_REQ
 v_A := *DATN
 v_B := *TIMN
 COMPRESS v_AT_REQ '-' v_A '-' v_B INTO v_A LEAVING NO SPACE
 EXAMINE XML FOR '@@TRAN' REPLACE v_A
 MOVE EDITED *DATN(EM=9999-99-99) TO v_A
 EXAMINE XML FOR '@@DD' REPLACE v_A
 MOVE EDITED *TIMX(EM=HH:MM:SS'Z') TO v_A
 EXAMINE XML FOR '@@TT' REPLACE v_A
 v_A := v_FA
 EXAMINE XML FOR '@@FA' REPLACE v_A
 v_A := SSN 
 EXAMINE XML FOR '@@SSN' REPLACE v_A
 EXAMINE XML FOR '@@FIRST' REPLACE FIRST-NAME
 EXAMINE XML FOR '@@MIDD'  REPLACE MIDDLE-NAME
 EXAMINE XML FOR '@@LAST'  REPLACE LAST-NAME
 EXAMINE XML FOR '@@SFFX'  REPLACE SUFFIX
 EXAMINE XML FOR '@@OCCU'  REPLACE v_occ
 
 DECIDE ON FIRST VALUE OF GENDER-CD
   VALUE 'M'   v_A := '1'
   VALUE 'F'   v_A := '2'
   NONE        v_A := '0' 
 END-DECIDE
 EXAMINE XML FOR '@@SEX'  REPLACE v_A
 MOVE EDITED DATE-OF-BIRTH(EM=9999-99-99) TO v_A
 EXAMINE XML FOR '@@DOB'  REPLACE v_A
 v_A := #ADD-ZIP5
 EXAMINE XML FOR '@@ZIP' REPLACE v_A

 IF #ADD-STATE = ' '
   v_A := '0'
 ELSE
   v_A := #ADD-STATE
   v_A := FUNCTION-STATE-CODE(<v_A,'N'>)
 END-IF
 EXAMINE XML FOR '@@TC-STATE' REPLACE v_A
 END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Response
*      ------------
  EXAMINE RESP FOR H'22' DELETE
  EXAMINE RESP FOR H'0A' DELETE
  EXAMINE RESP FOR H'09' DELETE
  IF RESP = SCAN '<env:Fault>'
    p_message := 'Data error'
    p_RC := 1
    PERFORM sbr_Error_Exit  
 END-IF 
  p_Message := ' ' p_RC := 0
  CALLNAT 'MIB-1001' RESP p_Records# p_Records(*) p_Person(*) p_Alt p_Message p_RC
  DECIDE ON FIRST VALUE OF p_RC
    VALUE 0 ESCAPE ROUTINE
    VALUE 1 
       PERFORM sbr_Error_Exit 
    VALUE 2
       IF p_Message = SCAN 'SNMMMM pattern'
          p_Message := 'Test Case - Wrong test data'
          p_RC := 5
          PERFORM sbr_Error_Exit 
      END-IF
     VALUE 11 
        p_Message := 'Internal Error parsing response'
        p_RC := 2
        PERFORM sbr_Error_Exit       
  NONE IGNORE
  END-DECIDE  
END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Store
*      ---------
 FIND MIB-V WITH MIB-SSN = SSN 
   WHERE MIB-COMM = 'R'
  DELETE
 END-FIND
 RESET MIB-V 
     MIB-SSN         :=  SSN
     MIB-DATE        := *DATN
     MIB-AT          := AT-V.ID-NUMBER
     MIB-COMM        := 'R'
    IF l_Test 
        MIB-Clerk    := 'TST'
     ELSE
        MIB-Clerk    := p_Clerk
     END-IF   

 FOR #r = 1 TO p_Records#
     MIB-MATCH(#r)    := p_R-Match(#r)
     FOR #i = 1 TO p_R-Forms#(#r)
        MIB-FORM-TYPE(#r,#i)  := p_Type(#r,#i)
        MIB-FORM-DATE(#r,#i)  := p_Date(#r,#i)
        MIB-FORM-TEXT(#r,#i)  := p_Text(#r,#i)
        MIB-CODES#      :=  MIB-CODES# + p_Code#(#r,#i)
     END-FOR
 END-FOR     
 STORE MIB-V
END-SUBROUTINE     
* -------------------------------------------------------------
DEFINE sbr_Print
*      ---------
 IF p_Records# = 0
    p_Message := 'MIB Request. No MIB Data found.'
    ESCAPE ROUTINE
 END-IF
 A80 := file_Resp
 EXAMINE A80 FOR 'xml' REPLACE 'TXT'
 v_L := FN_Exist(<A80,1>) 
 v_PN := 9  v_RC := PRT_FN_PUT(<v_PN, A80>)
 FORMAT(9) PS=20 LS=80

  AT TOP OF PAGE(9)
    v_Name := EDIT_NAME_FMLS(<FULL-NAME>)
    WRITE(9) NOTITLE 'MIB Response' *DAT4U  'AT:' p_AT 'MIB Codes reported'  MIB-CODES#  4X 'Page' *PAGE-NUMBER(9) (EM=9) / 
                   v_Name / '-'(79)
    IF p_AT <> MIB-AT 
      PRINT(9) 11x '--' 'Report printed for' MIB-AT 'based on SSN:' MIB-SSN '--'
    END-IF 
                    
  END-TOPPAGE
 
 c_Try := 0 c_Hit := 0
 FOR #r = 1 TO p_Records#
   IF p_R-Match(#r) = 'TRY'
      c_Try := c_Try + 1
   END-IF
   IF p_R-Match(#r) = 'HIT'
      c_Hit := c_Hit + 1
   END-IF
      
   R-Codes# := 0
   FOR #j = 1 TO p_R-Forms#(#r)
     R-Codes# := R-Codes# + p_Code#(#r, #j)
   END-FOR 
   IF #r <> 1  SKIP(9) 1 END-IF
   COMPRESS 'Record-' #r '_' p_R-Match(#r) INTO v_A LEAVING NO SPACE 
   PRINT(9) v_A  'Forms:' p_R-Forms#(#r)(EM=Z9) 'MIB Codes:' R-Codes#(EM=Z9) ' Notes:' p_R-Notes#(#r)(EM=Z9) ' Disputed:' p_R-Disputed#(#r)(EM=Z9)
   IF p_R-Match(#r) = 'TRY'
        PRINT(9) 'Last Name  :' pp_LN(#r)    40T 'First Name :' pp_FN(#r)
        PRINT(9) 'Middle Name:' pp_MN(#r)    40T 'Suffix     :' pp_SX(#r)
        PRINT(9) 'DOB        :' pp_BD(#r)    40T 'Gender     :' pp_Sex(#r) 
        PRINT(9) 'Occupation :' pp_Occ(#r)   
        PRINT(9) 'State      :' pp_State(#r) 40T 'ZIP        :' pp_ZIP(#r)
        IF alt_Name# <> 0
           PRINT(9) 'Alternative Names - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
           FOR #i = 1 TO alt_Name#
             WRITE(9) #i(EM=9'.')  'F:' alt_FN(#i)(AL=25) 'M:' alt_MN(#i)(AL=15) 'L:'  alt_LN(#i)(AL=25)
           END-FOR    
        END-IF
        IF alt_DOB# <> 0
           PRINT(9) 'Alternative DOB'  alt_DOB(*) /
        END-IF
   END-IF
  
   FOR #i = 1 TO p_R-Forms#(#r)
      v_Codes# := v_Codes# + p_Code#(#r, #i)
      IF p_Type(#r,#i) = 'Disp'    v_B := '[Disputed]'
      ELSE                         v_B := ' '
      END-IF
      PRINT(9) p_Ref(#r,#i)(EM=Z9')') v_B  p_Date(#r,#i) p_Text(#r,#i)
   END-FOR         
 END-FOR
 CLOSE PRINTER(9)
 RESET v_A v_B
 IF c_Hit <> 0 
    COMPRESS 'Hit-' c_Hit INTO v_A LEAVING NO SPACE
 END-IF   
 IF c_Try <> 0 
    COMPRESS 'Try-' c_Try INTO v_B LEAVING NO SPACE
 END-IF   

 COMPRESS 'MIB Response:' v_A v_B ' Codes:' MIB-CODES# INTO p_Message
 
/* Display report */

 DEFINE WORK FILE 1 A80
 #j := 1
 READ WORK 1 A79(#j)
    EXAMINE A79(#j) FOR H'0C' DELETE
    #j := #j + 1
 END-WORK
  #i := 0
  REPEAT UNTIL #j <= 0  
    IF #j >= 20 
        A80 := 'Hit ENTER for next page'
    ELSE
        A80 := 'The last page. Hit ENTER to continue'
    END-IF   
  INPUT (AD=O IP=OFF) WITH TEXT A80
    //
    A79(1) / A79(2) / A79(3) / A79(4) / A79(5) / A79(6) / A79(7) / A79(8) / A79(9) / A79(10)
    A79(11) / A79(12) / A79(13) / A79(14) / A79(15) / A79(16) / A79(17) / A79(18) / A79(19) / A79(20)
    #i := #i + 20
    #j := #j - 20
    A79(1:20) := A79( #i + 1 : #i + 20)
  END-REPEAT  
 CLOSE WORK FILE 1
 SET WINDOW OFF 
END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Exit
*      --------
  ESCAPE MODULE
END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Error_Exit
*      --------------
   PRINT NOTITLE // '-'(70)                /
          'Error in the MIB Request' p_RC  /
          'AT' p_AT                        /
           p_Message                     

   IF p_RC <> 5 
        PRINT 'Please notify MSS'  3x *DAT4U  3x *TIMX      
   END-IF
   PRINT NOTITLE '-'(  70)                 /

  IF p_RC >= 10
     p_Message := 'Internal'
  END-IF
  COMPRESS 'MIB Request Error.' p_Message INTO p_Message     
  ESCAPE MODULE
END-SUBROUTINE
* -------------------------------------------------------------
DEFINE sbr_Test
*      -----------
     CALLNAT 'MIB-TEST' tst_Case 
                       FIRST-NAME MIDDLE-NAME LAST-NAME SUFFIX v_Occ
                       GENDER-CD  DATE-OF-BIRTH_A #ADD-STATE
                       p_AT SSN
/*          SSN := 122334453              
 END-SUBROUTINE
* -------------------------------------------------------------
END
