* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 5
* <Natural Source Header
* PROGRAM-ID: C1601SCO    ** PROCESS CALL TO AOCX2V6A
*  CALLNAT'D FROM C1600PCO/C2V12CVP/G3520PAD/C2304PCI/AOAP005A
*                 G3520pad
**************************************************
*                       MODIFICATION LOG
* USER DATE      TAG  REASON
*
* DRW  12272004  DW1  Increase variable loan to handle 999,999.99.
* DRW  12292004  DW2  Fix Prem-adj calc on CONV when VW-TPP not Zero
* DRW  12292004  DW3  Fix Prem-adj calc on CONV- use DATN not Tran Dt
* PAM  02102005  PM4  Increased #LUMP-SUM from 5.2 to 6.2.
* DRW  03052005  DW5  Add AL (Annuity Life) Processing
* SAG  11012005  RH1  AB - Replace CALL to Cobol with CALLNAT to Natural
* DRW  06262006  DW6  Adjust New Dues by dues-tot-pd in case of AP
* DRW  04102007  DW7  Replace CALLNAT to AOCX2V6A/B with code
* DRW  05212007  DW8  Fix Calc of new prem if to-plan is "OL"
* DRW  11142007  DW9  Do not wipe out NPR & MIN CSV on a NXT CONV To AP
* DRW 05/12/2008 DW10 Fix Amt due Calc on NXT Conversions
* DRW 08/28/2009 DW11 Gen Plus Processing
* RSE 10/01/2009 RE1  Change 600k logic for Unification
* bz : Effected but not modified yet --
* YAK 10/03/2012 YK1  Use function to identify Level Term II plans
* TMT 10/14/2014 TT2  ANNUITYLife Harmonization
* NGG 20160128   NG1  VAWL  refactoring NXT-CONV-CALC-NU-PREM
***************************************************
*
DEFINE DATA
PARAMETER
1 #CGA-ORIG-COMMAND    (A2)
1 #CGA-ORIG-ID         (N6)
1 REDEFINE #CGA-ORIG-ID
  2 #CGA-ORIG-ID-A      (A6)
1 #CGA-ID              (N6)
1 #CGA-SCR-SUFFIX      (A3)   /* may be orig-suffix
1 #TO-PLAN             (A3)   /* incr from a2 11/2000
1 REDEFINE #TO-PLAN
  2 #TO-PLAN-N2         (N2)
1 REDEFINE #TO-PLAN
  2 #TO-PLAN-N1         (N1)
1 REDEFINE #TO-PLAN
  2 #TO-PLAN-A1         (A1)
1 #SEX                 (A1)
1 #IFL               (I2)
*
1 #TRAN-YYYYMMDD     (N8)
1 REDEFINE #TRAN-YYYYMMDD
  2 #TRAN-YYYYMM    (N6)
  2 REDEFINE #TRAN-YYYYMM
    3 #TRAN-YYYY     (N4)
    3 #TRAN-MM       (N2)
  2 #TRAN-DD        (N2)
*
1 #STATUS              (A1/9)
1 #PLAN                (A3/9)
1 REDEFINE #PLAN
  2 #PLAN-OCC      (9)
    3 #PLAN-2            (A2)
    3 REDEFINE #PLAN-2
      4 #PLAN-N2          (N2)
    3 REDEFINE #PLAN-2
      4 #PLAN-A1          (A1)
    3 REDEFINE #PLAN-2
      4 #PLAN-N1          (N1)
      4 #PLAN-2ND-1       (A1)
    3 #PLAN-1            (A1)
1 #ONLINE-ACTION       (A1/9)
1 #MODE                (A1/9)
1 #CONVERSION-FLAG     (A1/9)
1 #SMOKER-FLAG         (A1/9)
1 #ISSUE-AGE           (A2/9)
1 REDEFINE #ISSUE-AGE
  2 #ISSUE-AGE-N  (N2/9)
1 #PAY-STATUS          (A2/9)
*
1 #ISSUE-DATE          (N8/9)
1 REDEFINE #ISSUE-DATE
  2 #ISSUE-DATE-OCC     (9)
    3 #ISSUE-DATE-YYYYMMDD (N8)
    3 REDEFINE #ISSUE-DATE-YYYYMMDD
      4 #ISD-YYYYMM  (N6)
      4 REDEFINE #ISD-YYYYMM
        5 #ISD-YYYY    (N4)
        5 #ISD-MM      (N2)
      4 #ISD-DD      (N2)
*
1 #PAID-TO-DATE       (N8/9)
1 REDEFINE #PAID-TO-DATE
  2 #PAID-TO-DATE-TAB  (9)
    3 #PAID-TO-YYYYMM (N6)
    3 REDEFINE #PAID-TO-YYYYMM
      4 #PAID-TO-DATE-YYYY (N4)
      4 #PAID-TO-DATE-MM   (N2)
    3 #PAID-TO-DATE-DD  (N2)
*
1 #FACE-AMOUNT         (P7.2/9)
1 #ANNUAL-PREM         (P5.2/9)
1 #LAST-DURATION       (P3/9)
1 #CASH-VALUE          (P7.2/9)
1 #DEATH-BENEFIT       (P7.2/9)
1 #NUM-MBRSHIPS        (P1/9)
1 #DURATION            (P3/9)
1 #MONTH-IND           (P3/9)
1 #MIN-CASH-VALUE      (P7.2/9)
1 #NXT-YR-MIN-CASH-VALUE (P7.2/9)
1 #NXT-MON-CASH-VALUE  (P7.2/9)
1 #NXT-MON-DEATH-BENEFIT (P7.2/9)
1 #ACC-CASH-VALUE        (P7.2/9)
1 #CONV-DURATION         (P3/9)
1 #MONTH-ALLOC-AMT       (P7.2/9)        /*TT1
1 #PREM-DEFICIENCY       (P3.2/9)
1 #BEG-CASH-VALUE        (P7.2/9)
1 #NET-PR-RATIO          (P2.5/9)
*
1 #OUTPUT-CALC-AMT    (P7.2)
1 #OUTPUT-OLD-PDUP-AMT (P7.2)
*
1 #PRORATE-LOAN       (L)
1 #RPU-ACV            (P7.2)
1 #TOT-LOAN-AMOUNT    (P6.2)   /* DW1
1 #TOT-CURR-ACCUM-INT (P5.2)
1 #NU-ANN-PREM        (N7.2) /*TT1 INCREASED TO 7.2
1 #OUTPUT-PREM-DIFF   (N6.2)
1 #DUES-DIFF          (N5.2)
1 #LUMP-SUM           (N6.2)                                      /* PM4
*
LOCAL  USING GC2V6LXX
LOCAL  USING GC2V5LXX
LOCAL USING ATHISMTD        /* DW7
LOCAL
*
1 #pd-up-indx-used (i2)   /* DW10
1 #att-age-at-beg  (i2)
1 #att-indx-used (i2)
*
1 #sm-x       (i2)      /* DW7
1 #att-xx     (i2)
1 #iss-x      (i2)
*
1 #NEW-DUES   (N3.2)
1 #OLD-DUES   (N3.2)
1 #SVC-FEE-SP (N3.2) INIT <450.00>
1 #SVC-FEE-2P (N2.2) INIT <18.50>
1 #SVC-FEE-3P (N2.2) INIT <12.50>
1 #SVC-FEE-4P (N1.2) INIT <9.50>
1 #SVC-FEE-5P (N1.2) INIT <7.50>
1 #SVC-FEE-6P (N1.2) INIT <6.50>
1 #SVC-FEE-7P (N1.2) INIT <6.00>
1 #SVC-FEE-10 (N1.2) INIT <4.50>
1 #SVC-FEE-20 (N1.2) INIT <3.00>
1 #SVC-FEE-30 (N1.2) INIT <2.50>
1 #SVC-FEE-OL (N1.2) INIT <2.00>
1 #SVC-FEE-TM (N1.2) INIT <2.00>
*
1 #NEW-ANN-PREM  (N6.2)
1 #AP-PLAN       (A2)
1 #PUSP-PRM      (N6.2)
1 #OLD-PRMS-PD   (P6.2)
1 #NEW-PRMS-PD   (P6.2)
1 #SUFFIX            (A3)
1 #ID-9                  (N9)
1 #I1       (I2)
1 #FAC-AMT               (N7.2)
1 #NUM-MONTHS            (P5)
1 #PREMS-YET-TO-PAY      (P7.2)
1 #WORK-LAST-DURATION    (P3)
1 #PREM-DIFF             (P3.2)
1 #ACCUM-PREM-DIFF       (P5.2)
1 #AMT-TO-ADD-TO-ACV     (P6.2)
1 #AMT-TO-ADD-TO-ACV-W-O-PREM-DIFF (P6.2)
1 #AMT-TO-CHG-MBR        (P6.2)
1 #CSV           (P7.2)
1 #DOB         (N8)
1 REDEFINE #DOB
  2 #DOB-YYYYMM    (N6)
  2 REDEFINE #DOB-YYYYMM
    3 #DOB-YYYY     (N4)
    3 #DOB-MM       (N2)
  2 #DOB-DD        (N2)
*
1 #YYYYMMDD    (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM   (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY     (N4)
    3 #MM       (N2)
  2 #DD       (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A   (A4)
  2 #MM-A     (A2)
  2 #DD-A     (A2)
*
1 #WORK-DATE-G
  2 #WD-YYYY (N4)
  2 REDEFINE #WD-YYYY
    3 #WD-CC  (N2)
    3 #WD-YY  (N2)
  2 #WD-MM   (N2)
  2 #WD-DD   (N2)
1 REDEFINE #WORK-DATE-G
  2 #WORK-DATE     (N8)
*
1 ST-V VIEW OF A-STATUS
  2 INTRO-FLAG
  2 DUES-TOT-PAID
  2 C*ACTIVE-SEGMENTS
  2 TOT-PREMIUMS-PAID   (9)
  2 PLAN              (A3/9)
  2 REDEFINE PLAN
    3 PLAN-OCC      (9)
      4 PLAN-N2      (N2)
      4 REDEFINE PLAN-N2
        5 PLAN-N1     (N1)
        5 PLAN-P      (A1)
      4 PLAN-LAST    (A1)
*
1 #att-date-work  (n8)           /* DW10
1 #att-date       (n8/101)       /* DW10
1 #ATT-AGE (P3/101)
1 #MORT-RATE (P4.3/101)
1 #QX      (P0.7/101)
1 #LX      (P8.5/101)
1 #DX-X    (P7.5/101)
1 #DX      (P9.5/101)
1 #NX      (P9.5/101)
1 #PV      (P9.7)
1 #DISP-X  (I2)   /* DISPLACEMENT INDEX
1 #DUR-X   (I2)
1 #ATT-X   (I2)
1 #WORK-X  (P7.7)
1 #ORIGINAL-TERM   (N3)
1 #DESIRED-TERM    (N3)
1 #I2              (I2)
1 #CURR-YR-MONS    (P3)
1 #PD-UP-AGE       (P3)
1 #NU-PD-UP-AGE    (P3)
1 #CURR-ANNU-FACT   (P5.7)
1 #NEXT-ANNU-FACT   (P5.7)
1 #INTERP-ANNU-FACT (P5.7)
1 #NU-CURR-ANNU-FACT   (P5.7)
1 #NU-NEXT-ANNU-FACT   (P5.7)
1 #NU-INTERP-ANNU-FACT (P5.7)
1 #NU-MON-PREM         (N5.2)
1 REDEFINE #NU-MON-PREM
  2 #NU-MON-PREM-6    (N6)
  2 #NU-MON-PREM-C    (N1)    /* CENTS
*
END-DEFINE
*
* * * * * * * * * * * * *
*
* if #to-plan = 'AP'
*  WRITE 'top of c1601sco TO pln' #to-Plan 'nu an-prm=' #NU-ANN-PREM 'TIM=' *TIMN
*  'nxt-yr min-csv=' #NXT-YR-MIN-CASH-VALUE (#IFL)
* write 'top ann prem=' #annual-prem (#ifl) 'ifl=' #ifl
*   write 'INPUT TRAN-DATE=' #TRAN-YYYYMMDD
* end-if
*
RESET #DUES-DIFF
IF #CGA-ORIG-COMMAND = 'VP' OR = 'AV'
  IF   (#ISSUE-DATE (#IFL) GE 19970101)
      AND (#MONTH-ALLOC-AMT (#IFL) NE 999.99)
    PERFORM NXT-CONV-CALC-NU-PREM
    reset #NU-ANN-PREM
    CALLNAT 'RTEN0008'    /* new premium calculation = clone of NXT-CONV-CALC-NU-PREM
      MEMBER-CONTACT-ID
      #IFL
      #SMOKER-FLAG (#IFL)
      #ISSUE-DATE  (#IFL)
      #ISSUE-AGE   (#IFL)
      #PLAN        (#IFL)
      #ANNUAL-PREM (#IFL)
      #TO-PLAN
      #TRAN-YYYYMMDD
      #LUMP-SUM
      #NU-ANN-PREM /* OUT
    PERFORM CONV-1997
    ESCAPE ROUTINE
  END-IF
*
  RESET #L-604-MIN-CSV
  RESET #L-604-RSV-35-DIFF
  RESET #L-604-RSV-VA-DIFF
  RESET #L-604-NEW-PRM
  RESET #L-604-NEW-LST-MCV
  RESET #L-604-NEW-NXT-MCV
  RESET #L-604-NEW-CUR-MCV
  RESET #L-604-NEW-NPR
*
  MOVE 604 TO #L-CI-TRAN
  MOVE #FACE-AMOUNT (#IFL) TO #L-604-FAC-AMT
  MOVE #SEX               TO #L-604-SEX
  MOVE #ISSUE-AGE-N (#IFL) TO #L-604-ISS-AGE
  MOVE #NU-ANN-PREM        TO #L-604-NEW-PRM
*
  MOVE #DEATH-BENEFIT  (#IFL) TO #L-604-DB
*
  IF  (#CGA-ORIG-ID = 0)        /* BLANK VP OPTION
      OR (#CGA-SCR-SUFFIX ='ADD')
      OR ((#CGA-ID GE 500000) AND (#CGA-ID LT 700000))  /* NOT A MBR YET
      OR (#DEATH-BENEFIT (#IFL) = 0)     /* NEW POLICY THIS MONTH
      OR (#CGA-ORIG-COMMAND = 'AV')
    RESET #L-604-MIN-CSV
    MOVE #ISSUE-DATE (#IFL) TO #YYYYMMDD
*
    IF #DD NE 1
      IF #MM = 12
        ADD 1 TO #YYYY
        MOVE 1 TO #MM
      ELSE
        ADD 1 TO #MM
      END-IF
    END-IF
*
    MOVE 1       TO #DD
    MOVE #YYYYMMDD TO #ISSUE-DATE (#IFL)
  ELSE
    IF   (#TO-PLAN = 'AP' OR = 'SP')
        AND (#MIN-CASH-VALUE (#IFL) LT 0)
      RESET #L-604-MIN-CSV
    ELSE
      MOVE #MIN-CASH-VALUE (#IFL) TO #L-604-MIN-CSV
    END-IF
    MOVE *DATN TO #YYYYMMDD
  END-IF
*
  MOVE #YYYYMMDD         TO #L-604-TRN-DATE
  MOVE #ISSUE-DATE (#IFL) TO #L-604-ISS-DATE
*
  IF #TO-PLAN = 'AP' OR = 'SP'
    MOVE #ANNUAL-PREM (#IFL) TO #L-604-OLD-PRM
    IF #CGA-ORIG-ID = 0     /* BLANK VP OPTION
        OR (#CGA-SCR-SUFFIX ='ADD')
      MOVE 'OL'       TO #L-604-FM-TYPE
      MOVE 'SP'       TO #L-604-TO-TYPE
    ELSE
      MOVE #PLAN (#IFL) TO #L-604-FM-TYPE
      MOVE #TO-PLAN   TO #L-604-TO-TYPE
    END-IF
  ELSE
    MOVE #PLAN (#IFL)  TO #L-604-FM-TYPE
    MOVE #TO-PLAN     TO #L-604-TO-TYPE
    MOVE #CGA-ORIG-ID TO #ID-9
    MOVE #FACE-AMOUNT (#IFL) TO #FAC-AMT
    MOVE #ANNUAL-PREM (#IFL) TO #L-604-OLD-PRM
  END-IF
ELSE
  IF #TO-PLAN = 'RP'
    MOVE 606        TO #L-CI-TRAN
    MOVE #TRAN-YYYYMMDD TO #L-606-TRN-DATE
    MOVE #ISSUE-DATE (#IFL) TO #L-606-ISS-DT
    MOVE #ISSUE-AGE-N       (#IFL) TO #L-606-ISS-AGE
    MOVE #PLAN              (#IFL) TO #L-606-TYPE
*
    IF #PRORATE-LOAN
      MOVE #RPU-ACV TO #L-606-ACV
    ELSE
*   below line commented out 5/98 to match ci
*   below line reinstated 3/99 as per lcc
      COMPUTE #L-606-ACV = #ACC-CASH-VALUE (#IFL)
*   below line commented out 3/99 as per lcc
*     COMPUTE #L-606-ACV = #RPU-ACV   /* chged 5/98 to match ci
        - #TOT-LOAN-AMOUNT - #TOT-CURR-ACCUM-INT
    END-IF
*
*   MOVE #FACE-AMOUNT       (#IFL) TO #L-606-FAC-AMT
    MOVE #MIN-CASH-VALUE    (#IFL) TO #L-606-LST-MN-CV
    MOVE #NXT-YR-MIN-CASH-VALUE (#IFL) TO #L-606-NXT-MN-CV
    MOVE #ACC-CASH-VALUE    (#IFL) TO #L-606-LN-INT
    SUBTRACT #L-606-ACV              FROM #L-606-LN-INT
*
    RESET #L-606-NEW-DB
      #L-606-NEW-FAC-AMT
      #L-606-NEW-LST-MCV
      #L-606-NEW-NXT-MCV
      #L-606-NEW-CUR-MCV
  END-IF
*
  IF   (#ISSUE-DATE (#IFL) GE 19970101)
      AND (#MONTH-ALLOC-AMT (#IFL) NE 999.99)
      AND ((#TO-PLAN = MASK (NN)) OR (#TO-PLAN = MASK (N'P'))
      OR (#TO-PLAN = MASK (N'F'))
      or (#to-plan = 'OL')   /* DW8
      or (#to-plan = 'GPL' OR= 'GP2')             /* DW11
      OR (#TO-PLAN = 'AP'))
    PERFORM NXT-CONV-CALC-NU-PREM
    reset #NU-ANN-PREM
    CALLNAT 'RTEN0008'
      MEMBER-CONTACT-ID
      #IFL
      #SMOKER-FLAG (#IFL)
      #ISSUE-DATE  (#IFL)
      #ISSUE-AGE   (#IFL)
      #PLAN        (#IFL)
      #ANNUAL-PREM (#IFL)
      #TO-PLAN
      #TRAN-YYYYMMDD
      #LUMP-SUM
      #NU-ANN-PREM /* OUT
  END-IF
*
  IF (#TO-PLAN = 'AP' OR = '20' OR = '30' OR = '7P' OR = 'OL'
*            or = 'GPL'                                          /* DW11  /* YK1
*            OR = 'RT' OR = 'LT' OR = 'LTD' OR = 'AL')  /* DW5            /* YK1
*  OR ((#TO-PLAN-A1 GE 'U') AND (#TO-PLAN-A1 LE 'Z'))   /* var term       /* YK1
      OR = 'GPL' OR= 'GP2' OR = 'LTD')                                    /* YK1      /* TT2
      OR (IS-ANNUITY-LIFE(<#TO-PLAN>))                                                /* TT2
      OR (FUNCTION-TERM-POLICY(<#TO-PLAN>))                               /* YK1
      OR ((#TO-PLAN = MASK (NN)) OR (#TO-PLAN = MASK (N'P'))
      OR (#TO-PLAN = MASK (N'F')))
      OR (#TO-PLAN = MASK ('C'))  /* csv splits
      OR ((#TO-PLAN = MASK ('R')) AND (#TO-PLAN NE 'RP'))  /* rsgn splits
*   OR (#CGA-ID GE 600000)   /* afsc account      RE1
      OR AFFL-ONLY-CLIENT(<#CGA-ID>)              /* RE1
    IF   (#ISSUE-DATE (#IFL) GE 19970101)
        AND (#MONTH-ALLOC-AMT (#IFL) NE 999.99)
      PERFORM CONV-1997
      ESCAPE ROUTINE
    END-IF
*
    MOVE 604   TO #L-CI-TRAN
    MOVE #SEX   TO #L-604-SEX
    MOVE #TRAN-YYYYMMDD TO #L-604-TRN-DATE
    MOVE #ISSUE-DATE (#IFL) TO #L-604-ISS-DATE
    MOVE #PLAN              (#IFL) TO #L-604-FM-TYPE
    MOVE #TO-PLAN                      TO #L-604-TO-TYPE
    MOVE #FACE-AMOUNT       (#IFL) TO #L-604-FAC-AMT
    MOVE #ISSUE-AGE-N       (#IFL) TO #L-604-ISS-AGE
    MOVE #MIN-CASH-VALUE    (#IFL) TO #L-604-MIN-CSV
    MOVE #DEATH-BENEFIT     (#IFL) TO #L-604-DB
    MOVE #ANNUAL-PREM       (#IFL) TO #L-604-OLD-PRM
    MOVE #NU-ANN-PREM              TO #L-604-NEW-PRM
*
    RESET #L-604-RSV-35-DIFF
      #L-604-RSV-VA-DIFF
*         #L-604-NEW-PRM
      #L-604-NEW-LST-MCV
      #L-604-NEW-NXT-MCV
      #L-604-NEW-CUR-MCV
      #L-604-NEW-NPR
  END-IF
*
  IF #TO-PLAN = MASK ('C')   /* c1 thru c9 for csv split
    MOVE 602        TO #L-CI-TRAN
    MOVE #SEX   TO #L-602-SEX
    MOVE #TRAN-YYYYMMDD TO #L-602-TRN-DATE
    MOVE #ISSUE-DATE (#IFL) TO #L-602-ISS-DATE
    MOVE #PLAN              (#IFL) TO #L-602-TYPE
    MOVE #ISSUE-AGE-N       (#IFL) TO #L-602-ISS-AGE
    MOVE #MIN-CASH-VALUE    (#IFL) TO #L-602-OLD-MCV-L
    MOVE #NXT-YR-MIN-CASH-VALUE (#IFL) TO #L-602-OLD-MCV-N
    MOVE #FACE-AMOUNT       (#IFL) TO #L-602-OLD-FACE
    MOVE #ACC-CASH-VALUE    (#IFL) TO #L-602-OLD-ACV
*
    DECIDE ON FIRST VALUE OF #TO-PLAN
      VALUE 'C1'  MOVE 10000  TO #L-602-NEW-FACE
      VALUE 'C2'  MOVE 25000  TO #L-602-NEW-FACE
      VALUE 'C3'  MOVE 50000  TO #L-602-NEW-FACE
      VALUE 'C4'  MOVE 75000  TO #L-602-NEW-FACE
      VALUE 'C5'  MOVE 100000 TO #L-602-NEW-FACE
      VALUE 'C6'  MOVE 200000 TO #L-602-NEW-FACE
      VALUE 'C7'  MOVE 300000 TO #L-602-NEW-FACE
      VALUE 'C8'  MOVE 400000 TO #L-602-NEW-FACE
      VALUE 'C9'  MOVE 500000 TO #L-602-NEW-FACE
      NONE IGNORE
    END-DECIDE
*
    RESET #L-602-NEW-PRM
*         #L-602-NEW-FACE
      #L-602-NEW-DB
      #L-602-NEW-LST-MCV
      #L-602-NEW-NXT-MCV
      #L-602-NEW-CUR-MCV
      #L-602-NEW-ACV
      #L-602-NEW-CSV
  END-IF
*
  IF (#TO-PLAN = 'AP')
      AND (#L-604-MIN-CSV LT 0)
    RESET #L-604-MIN-CSV
  END-IF
END-IF
*
*  *  *  *  *  A O C P 2 V 6 A  *  *  *  *  *  *  *  *  *  *  *  *  *
*
IF (#CGA-ORIG-ID = 67621) AND (#TO-PLAN = '30')
  IGNORE
ELSE
  IF *DEVICE = 'BATCH'
**    CALL 'AOCX2V6B' #L-CI-TRAN       /* SAG 11012005 RH1
    CALLNAT 'AOCX2V6B' #L-PARMS      /* SAG 11012005 RH1
  ELSE
**    CALL 'AOCX2V6A' #L-CI-TRAN       /* SAG 11012005 RH1
*  write 'c1601sco call AOCX2v6a'
    CALLNAT 'AOCX2V6A' #L-PARMS      /* SAG 11012005 RH1
  END-IF
END-IF
*
* WRITE 'CONV TO ' #TO-PLAN
* WRITE 'ifl         = ' #IFL
* WRITE 'ACV         = ' #ACC-CASH-VALUE (#IFL)
* WRITE 'CSV         = ' #CASH-VALUE (#IFL)
* WRITE 'L-604-RSV-35-DIFF'  #L-604-RSV-35-DIFF
* WRITE 'L-604-RSV-VA-DIFF'  #L-604-RSV-VA-DIFF
* WRITE 'CURR NPR' #NET-PR-RATIO (#IFL) 'NEW' #L-604-NEW-NPR
* WRITE 'CURR MCV -last' #MIN-CASH-VALUE (#IFL)
*                 'next' #NXT-YR-MIN-CASH-VALUE (#IFL)
* WRITE 'NEW  MCV -last' #L-604-NEW-LST-MCV
*                 'next' #L-604-NEW-NXT-MCV
* WRITE 'NEW-CUR-MCV = ' #L-604-NEW-CUR-MCV
* WRITE 'NEW-PREM    = ' #L-604-NEW-PRM
* WRITE 'CALC ACV FROM (VA)     '   #L-604-MIN-CSV   /* ONLY FOR
* WRITE 'CALC-ACV TO   (VA)     '   #L-604-DB        /* DEBUGGING
* WRITE '604-RSV-35-DIFF B4 (NEW MN CSV)         '  #L-604-RSV-35-DIFF
* IF #TO-PLAN = 'AP' OR = 'SP'
*   WRITE '604-RSV-VA-DIFF B4 (NEW CALC ACV)       '  #L-604-RSV-VA-DIFF
* ELSE
*   WRITE '604-RSV-VA-DIFF B4 (DIFF IN VA FROM/TO) '  #L-604-RSV-VA-DIFF
* END-IF
* WRITE 'CURR CASH VALUE  '   CASH-VALUE (#IFL)
* WRITE 'CURR NX CASH VALUE ' NXT-MON-CASH-VALUE(#IFL)
* WRITE 'CURR ACV           ' ACC-CASH-VALUE(#IFL)
*
IF #TO-PLAN = 'RP'
  MOVE #L-606-NEW-DB TO #OUTPUT-CALC-AMT
* WRITE 'C1601sco new DB=' #L-606-NEW-DB
  ESCAPE ROUTINE
END-IF
*
IF #TO-PLAN = MASK ('C')
  MOVE #L-602-NEW-DB TO #OUTPUT-CALC-AMT
  ESCAPE ROUTINE
END-IF
*
IF   (#ISD-DD (#IFL) NE 01)
    AND (#ISD-DD (#IFL) LE #TRAN-DD)
    AND (NOT #CGA-ORIG-COMMAND = 'VP' OR = 'AV')
  MOVE #NXT-MON-CASH-VALUE (#IFL) TO #CSV
ELSE
  MOVE #CASH-VALUE (#IFL) TO #CSV
END-IF
*
IF #CGA-ORIG-COMMAND = 'VP' OR = 'AV'
  IF #CGA-ORIG-ID = 0         /* BLANK VP OPTION - MUST BE SNG PREM
      OR (#CGA-SCR-SUFFIX ='ADD')
      OR ((#CGA-ORIG-COMMAND = 'AV') AND (#TO-PLAN = 'SP'))
    MOVE #L-604-RSV-VA-DIFF TO #OUTPUT-CALC-AMT
    MOVE #L-604-RSV-VA-DIFF TO #CASH-VALUE (#IFL)
    MOVE #L-604-RSV-VA-DIFF TO #ACC-CASH-VALUE (#IFL)
    MOVE #L-604-NEW-LST-MCV TO #MIN-CASH-VALUE (#IFL)
    MOVE '47'               TO #PAY-STATUS (#IFL)
    ESCAPE ROUTINE
  END-IF
*
  IF #TO-PLAN = 'AP'
    MOVE '48' TO #PAY-STATUS (#IFL)
*
    IF #ISSUE-DATE (#IFL) GT 19860630
      MOVE #L-604-NEW-NPR TO #NET-PR-RATIO (#IFL)
*     MOVE '47'           TO #PAY-STATUS   (#IFL)
    END-IF
  END-IF
END-IF
*
IF #ISSUE-DATE (#IFL) LT 19860701
* WRITE 'OLD Conv- RSV-35-diff =' #L-604-RSV-35-DIFF 'minus CSV of' #CSV
  COMPUTE #L-604-RSV-35-DIFF = #L-604-RSV-35-DIFF - #CSV
* STARTED USING CSV ABOVE INSTEAD OF ACV 6/18/91 AS PER CROOKS
ELSE
* WRITE 'NEW Conversion'
  IF #TO-PLAN = 'AP'                  /* convert to puap on new issue
*   WRITE 'NEW Conv- Amt to Chg Mbr = RSV-VA-DIFF of' #L-604-RSV-VA-DIFF
*         'minus CSV of' #CSV
*   WRITE 'NEW Conv- RSV-VA-diff =' #L-604-RSV-VA-DIFF
*        'minus ACV of' #ACC-CASH-VALUE (#IFL)
    COMPUTE #AMT-TO-CHG-MBR =         /* back into it
      #L-604-RSV-VA-DIFF - #CSV
    COMPUTE #L-604-RSV-VA-DIFF =
      #L-604-RSV-VA-DIFF - #ACC-CASH-VALUE (#IFL)
  END-IF
END-IF
*
IF  #L-604-RSV-VA-DIFF GT #L-604-RSV-35-DIFF    /* PICK BEST FOR AAFMAA
  MOVE #L-604-RSV-VA-DIFF TO #AMT-TO-ADD-TO-ACV  /* (HIGHEST AMOUNT)
ELSE
  MOVE #L-604-RSV-35-DIFF TO #AMT-TO-ADD-TO-ACV
END-IF
*
* wRITE 'Higher of 2 amts below is ACV change'
* WRITE '604-RSV-35-DIFF  '   #L-604-RSV-35-DIFF
* WRITE '604-RSV-VA-DIFF  '   #L-604-RSV-VA-DIFF
* WRITE 'CSV              '   #CSV
* WRITE 'NEW-CUR-MIN-CSV  '   #L-604-NEW-CUR-MCV
* WRITE 'NEW-LST-MIN-CSV  '   #L-604-NEW-LST-MCV
* WRITE 'NEW-NXT-MIN-CSV  '   #L-604-NEW-NXT-MCV
* WRITE 'AMT-TO-CHG-MBR   '   #AMT-TO-CHG-MBR
* WRITE 'AMT to add to acv'   #AMT-TO-ADD-TO-ACV
*
IF  (#TO-PLAN = 'AP')
  MOVE #AMT-TO-ADD-TO-ACV TO #OUTPUT-OLD-PDUP-AMT /* save old-pd-up-amt
END-IF
*
IF   (#CGA-SCR-SUFFIX NE 'OLD')  /* below is new way to calc
    AND (#ISSUE-DATE (#IFL) LT 19860701) /* after 7/1/86 puap amt
    AND (#TO-PLAN = 'AP')
  COMPUTE #AMT-TO-ADD-TO-ACV = #L-604-DB - #ACC-CASH-VALUE (#IFL)
* DISPLAY #AMT-TO-ADD-TO-ACV   #L-604-DB   #ACC-CASH-VALUE (#IFL)
END-IF
*
IF   (#CGA-SCR-SUFFIX = 'OLD')
    AND (#ISSUE-DATE (#IFL) LT 19860701)
    AND (#TO-PLAN = 'AP')
  WRITE 'using old lower pd-up calcs'   /* do not remove
END-IF
*
* IF CONV TO 20/30 PAY PD-UP NEVER MAKE MBR PAY MORE THAN REMAINING PMTS
*
RESET #PREMS-YET-TO-PAY
IF #TO-PLAN = 'AP'
    AND (#PLAN (#IFL) = '20' OR = '30' OR = '7P')
*
  MOVE #LAST-DURATION (#IFL) TO #WORK-LAST-DURATION
  MOVE #MONTH-IND (#IFL)     TO #NUM-MONTHS
  ADD 1 TO #NUM-MONTHS /* SINCE V/A IS 1 MONTH BEHIND ACTUAL PMT
*
  IF #NUM-MONTHS GE 12
    SUBTRACT 12 FROM #NUM-MONTHS
    ADD 1         TO #WORK-LAST-DURATION
  END-IF
*
  IF   (#PLAN (#IFL) = '20P')
      AND (#WORK-LAST-DURATION LT 20)
    COMPUTE #PREMS-YET-TO-PAY = (#ANNUAL-PREM (#IFL) / 12)
      * (((19 - #WORK-LAST-DURATION) * 12) + (12 - #NUM-MONTHS))
  END-IF
*
  IF   (#PLAN (#IFL) = '30P')
      AND (#WORK-LAST-DURATION LT 30)
    COMPUTE #PREMS-YET-TO-PAY = (#ANNUAL-PREM (#IFL) / 12)
      * (((29 - #WORK-LAST-DURATION) * 12) + (12 - #NUM-MONTHS))
  END-IF
*
  IF   (#PLAN (#IFL) = '7P')
      AND (#WORK-LAST-DURATION LT 7)
    COMPUTE #PREMS-YET-TO-PAY = (#ANNUAL-PREM (#IFL) / 12)
      * (((29 - #WORK-LAST-DURATION) * 12) + (12 - #NUM-MONTHS))
  END-IF
*
  IF #PREMS-YET-TO-PAY LT #AMT-TO-ADD-TO-ACV
    MOVE #PREMS-YET-TO-PAY TO #AMT-TO-ADD-TO-ACV
  END-IF
END-IF
*
MOVE #AMT-TO-ADD-TO-ACV TO #AMT-TO-ADD-TO-ACV-W-O-PREM-DIFF
IF #TO-PLAN = '20' OR = '30' OR = '7P' OR = 'OL' or = 'GPL'  OR= 'GP2'  /* DW11
  IF   (#L-604-NEW-PRM GT #L-604-OLD-PRM)
      AND (#AMT-TO-ADD-TO-ACV LT 0)
* IF CONV FROM LOWER TO HIGHER PREMS NEVER REDUCE ACV (IE NEVER PAY MBR)
*   WRITE 'NEG ACV CHG RESET to 0 due to new higher prems'
    RESET #AMT-TO-ADD-TO-ACV #AMT-TO-ADD-TO-ACV-W-O-PREM-DIFF
  END-IF
  /* NEVER LET ACV GO BELOW ZERO
  IF #ACC-CASH-VALUE (#IFL) + #AMT-TO-ADD-TO-ACV LT 0
    COMPUTE #AMT-TO-ADD-TO-ACV = (#ACC-CASH-VALUE (#IFL) * -1)
  END-IF
*
  COMPUTE #PREM-DIFF =  /* compute diff due to prem chg
    ((#L-604-NEW-PRM / 12) - (#L-604-OLD-PRM / 12))
  RESET #ACCUM-PREM-DIFF
  MOVE #TRAN-YYYYMMDD TO #WORK-DATE
  MOVE 15 TO #WD-DD
  MOVE 15 TO #PAID-TO-DATE-DD (#IFL)
*
  REPEAT UNTIL #WORK-DATE GT #PAID-TO-DATE (#IFL) /* COMPUTE PREMIUM
    ADD #PREM-DIFF TO #ACCUM-PREM-DIFF   /* DIFFERENCE DUE IF PAID AHEAD
    ADD 1 TO #WD-MM
    IF #WD-MM GT 12
      MOVE 01 TO #WD-MM
      ADD 01 TO #WD-YYYY
    END-IF
  END-REPEAT /* (0678)
*
  ADD #ACCUM-PREM-DIFF TO #AMT-TO-ADD-TO-ACV      /* ADJUST ACV-ADJ-AMT
END-IF
*
IF #CGA-ORIG-COMMAND = 'VP' OR = 'AV'
  PERFORM UPDATE-REC
ELSE
  IF #CGA-ORIG-COMMAND = 'CI'
    PERFORM UPDATE-REC
    IF  (#TO-PLAN = 'AP') AND (#ISSUE-DATE (#IFL) GE 19860701)
      MOVE #AMT-TO-CHG-MBR TO #OUTPUT-CALC-AMT
      RESET #OUTPUT-PREM-DIFF
    ELSE
      MOVE #AMT-TO-ADD-TO-ACV-W-O-PREM-DIFF TO #OUTPUT-CALC-AMT
      MOVE #ACCUM-PREM-DIFF                 TO #OUTPUT-PREM-DIFF
    END-IF
    ESCAPE ROUTINE
  END-IF
*
  IF  (#TO-PLAN = 'AP') AND (#ISSUE-DATE (#IFL) GE 19860701)
    MOVE #AMT-TO-CHG-MBR TO #OUTPUT-CALC-AMT
  ELSE
    MOVE #AMT-TO-ADD-TO-ACV TO #OUTPUT-CALC-AMT
  END-IF
*
  ESCAPE ROUTINE
END-IF
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE UPDATE-REC
* * * * * * * * * * * * * * * * *
*
MOVE #L-604-NEW-LST-MCV    TO #MIN-CASH-VALUE (#IFL)
MOVE #L-604-NEW-NXT-MCV TO #NXT-YR-MIN-CASH-VALUE(#IFL)
*
IF #ISSUE-DATE (#IFL) GT 19860630
  MOVE #L-604-NEW-NPR TO #NET-PR-RATIO (#IFL)
END-IF

*
IF #CGA-ORIG-COMMAND NE 'CI'
  ADD #AMT-TO-ADD-TO-ACV TO #ACC-CASH-VALUE (#IFL)
  MOVE #ACC-CASH-VALUE (#IFL) TO #CASH-VALUE (#IFL)
*
  IF   (#CONVERSION-FLAG (#IFL) = 'C')
      AND (#CONV-DURATION (#IFL) LE 10)
    COMPUTE ROUNDED #CASH-VALUE (#IFL) = #ACC-CASH-VALUE (#IFL)
      - (#MONTH-ALLOC-AMT (#IFL) * (120
      - (((#CONV-DURATION (#IFL) - 1) * 12) + #MONTH-IND (#IFL))))
    MOVE #CASH-VALUE (#IFL)
      TO #NXT-MON-CASH-VALUE (#IFL)
  END-IF
*
  IF #L-604-NEW-CUR-MCV GT #CASH-VALUE (#IFL)
*   WRITE 'min exceeds csv' #L-604-NEW-CUR-MCV  CASH-VALUE (#IFL)
*                                           ACC-CASH-VALUE (#IFL)
    MOVE #L-604-NEW-CUR-MCV TO #CASH-VALUE (#IFL)
      #NXT-MON-CASH-VALUE (#IFL)
  END-IF
*
  IF #CGA-ORIG-COMMAND = 'VP'
    MOVE #AMT-TO-ADD-TO-ACV TO #OUTPUT-CALC-AMT  /* used by VP
  ELSE
    MOVE #L-604-RSV-VA-DIFF TO #OUTPUT-CALC-AMT /* USED BY "AV"
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE CONV-1997
* * * * * * * * * * * * * *
*
* write 'c1601SCO line 3574 conv-1997' 'to-plan=' #to-plan
FIND (1) ST-V WITH MEMBER-KEY = #CGA-ORIG-ID-A
END-FIND
*
PERFORM GET-OLD-AND-NEW-DUES
*
* MOVE #TRAN-YYYYMMDD       TO #YYYYMMDD
MOVE *DATN                TO #YYYYMMDD  /* DW3
MOVE #PAID-TO-DATE (#IFL) TO #WORK-DATE
*
IF #WD-MM LT #MM
  ADD 12 TO #WD-MM
  SUBTRACT 1 FROM #WD-YYYY
END-IF
*
COMPUTE #NUM-MONTHS = ((#WD-YYYY - #YYYY) * 12) + (#WD-MM - #MM )
*
* IF #DD = 1
*   ADD 1 TO #NUM-MONTHS
* END-IF
*
COMPUTE #OLD-PRMS-PD = ((#ANNUAL-PREM (#IFL) / 12) * #NUM-MONTHS)
*           + TOT-PREMIUMS-PAID (#IFL) /*to handle flex plans   /* DW2
COMPUTE #OLD-DUES    = #OLD-DUES * #NUM-MONTHS
*
IF #TO-PLAN = 'AP'
  IGNORE
ELSE
  COMPUTE #NEW-PRMS-PD = (#NU-ANN-PREM / 12) * #NUM-MONTHS
  COMPUTE #NEW-DUES    = #NEW-DUES * #NUM-MONTHS
END-IF
*
* write 'line 3731 new ann-prem=' #new-ann-prem
MOVE #NU-ANN-PREM TO #NEW-ANN-PREM
*
IF  (#TO-PLAN = 'AP') AND (#ISSUE-DATE (#IFL) GE 19860701)
  COMPUTE ROUNDED #NXT-YR-MIN-CASH-VALUE (#IFL) =
*  #NXT-YR-MIN-CASH-VALUE (#IFL) +
    #MIN-CASH-VALUE (#IFL) +
    (#NET-PR-RATIO (#IFL) *  #NEW-ANN-PREM)
ELSE
  COMPUTE #OUTPUT-PREM-DIFF = #NEW-PRMS-PD - #OLD-PRMS-PD
END-IF
*
COMPUTE #DUES-DIFF = #NEW-DUES - #OLD-DUES
* WRITE #NEW-DUES  #OLD-DUES #DUES-DIFF
* WRITE 'c1601sco NUM-MONS=' #NUM-MONTHS 'TPP=' TOT-PREMIUMS-PAID (#IFL)
*  'OPP' #OLD-PRMS-PD
*  'NPP' #NEW-PRMS-PD
*  'PREMS-DIFF' #OUTPUT-PREM-DIFF
*  'NU-ann-prem' #NEW-ANN-PREM
RESET #OUTPUT-CALC-AMT
* DISPLAY 'ISS-DT' ISSUE-DATE (#IFL)
*         'OLD-PP'#OLD-PRMS-PD
*         'NEW-PP' #NEW-PRMS-PD
*         TOT-PREMIUMS-PAID (#IFL)
*         #OUTPUT-PREM-DIFF
*         #NEW-ANN-PREM
*         #OUTPUT-CALC-AMT
*         #OLD-DUES
*         #NEW-DUES
*         #DUES-DIFF
*
IF #CGA-ORIG-COMMAND = 'VP'
* ADD #OUTPUT-PREM-DIFF TO #ACC-CASH-VALUE (#IFL) /* chgd 3/2003 rlb
  ADD #NEW-ANN-PREM TO #ACC-CASH-VALUE (#IFL)
  MOVE #NEW-ANN-PREM TO #OUTPUT-CALC-AMT   /* FOR ON VP HEADER
END-IF
*
IF #CGA-ORIG-COMMAND = 'CO'
  MOVE #OUTPUT-PREM-DIFF TO #OUTPUT-CALC-AMT
  RESET #OUTPUT-PREM-DIFF
END-IF
*
* RESET NET-PREM-RATIO & MIN-CSV
*
* IF (NOT #TO-PLAN = 'RT' OR = 'LT' OR = 'LTD' OR = 'AL')  /* DW5         /* YK1
*  AND ((#TO-PLAN-A1 LT 'U') OR (#TO-PLAN-A1 GT 'Z'))  /* not var term    /* YK1
IF (NOT #TO-PLAN = 'LTD')              AND                                /* YK1    /* TT2
    (NOT IS-ANNUITY-LIFE(<#TO-PLAN>))  AND                                          /* TT2
    (NOT FUNCTION-TERM-POLICY(<#TO-PLAN>))                                /* YK1
    AND (#CGA-ORIG-COMMAND = 'CI' OR = 'VP')
* AND (#CGA-ID LT 600000)                         /* RE1
    AND NOT AFFL-ONLY-CLIENT(<#CGA-ID>)              /* RE1
    AND (#LAST-DURATION (#IFL) GT 0) /* if 0 then NPE & mins are ok
  FIND #PROJECTION-VIEW WITH MEMBER-KEY = #CGA-ORIG-ID-A
  END-FIND
  MOVE 1 TO #PROJECTION-VIEW.ONLINE-ACTION (#IFL)
*
  IF #TO-PLAN = 'AP'   /* used
    MOVE #NEW-ANN-PREM TO #PROJECTION-VIEW.LAST-ANN-CASH-VALUE (#IFL)
  ELSE
    MOVE #PROJECTION-VIEW.ANNUAL-PREM (#IFL) /* SO AOCX2V5A HAS OLD PREM
      TO #PROJECTION-VIEW.LAST-ANN-CASH-VALUE (#IFL)
  END-IF
*
  MOVE #NEW-ANN-PREM TO #PROJECTION-VIEW.ANNUAL-PREM (#IFL)
* RESET #PROJECTION-VIEW.ACC-CASH-VALUE (#IFL)
* RESET #PROJECTION-VIEW.CASH-VALUE (#IFL)
* RESET #PROJECTION-VIEW.MIN-CASH-VALUE (#IFL)
*
  IF #TO-PLAN = 'AP'
    MOVE '47' TO #PROJECTION-VIEW.PAY-STATUS (#IFL)
  ELSE
    IF #TO-PLAN = '20'
      MOVE '20P' TO #PROJECTION-VIEW.PLAN (#IFL)
    ELSE
      IF #TO-PLAN = '30'
        MOVE '30P' TO #PROJECTION-VIEW.PLAN (#IFL)
      ELSE
        MOVE #TO-PLAN TO #PROJECTION-VIEW.PLAN (#IFL)
      END-IF
    END-IF
  END-IF
*
  MOVE ST-V.C*ACTIVE-SEGMENTS TO #L-ACTIVE-SEG
  MOVE *DATN TO #YYYYMMDD
  COMPRESS #MM-A #DD-A #YYYY INTO #PARM-DATE WITH '/'
  MOVE #IFL              TO #L-SEGNO
  MOVE #PAID-TO-DATE (#IFL) TO #L-PAID-THRU
*
  FOR #I1 1 TO 9
    MOVE #PROJECTION-VIEW.ISSUE-DATE (#I1) TO #L-ISS-DT (#I1)
  END-FOR
*
  MOVE 08250              TO #L-GROWTH-RATE
  RESET                      #L-MONTHLY-SW
  MOVE 1986               TO #L-MNTHLY-START-YR
* MOVE 'MCSV'             TO #L-REIN-CODE
  MOVE 'NP'               TO #L-REIN-NPR
*
  IF ST-V.PLAN (#IFL) = 'OL' or = 'GPL' OR= 'GP2'             /* DW11
    MOVE 99 TO #L-REIN-NPR-OLD-TERM
  ELSE
    IF ST-V.PLAN-P (#IFL) = 'P'
      MOVE ST-V.PLAN-N1 (#IFL) TO #L-REIN-NPR-OLD-TERM
    ELSE
      MOVE ST-V.PLAN-N2 (#IFL) TO #L-REIN-NPR-OLD-TERM
    END-IF
  END-IF
*  WRITE 'OLD-PRM 4 NPR CALC' #PROJECTION-VIEW.LAST-ANN-CASH-VALUE(#IFL)
*  WRITE 'new-PRM 4 NPR CALC' #PROJECTION-VIEW.ANNUAL-PREM        (#IFL)
*  WRITE 'old-term          ' #L-REIN-NPR-OLD-TERM
*  WRITE 'plan              ' #PROJECTION-VIEW.PLAN (#IFL)
*  WRITE 'pay-status        ' #PROJECTION-VIEW.PAY-STATUS (#IFL)
*  WRITE 'L-REIN-CODE =' #L-REIN-CODE
  MOVE 01                 TO #L-NUM-PROJ-YRS
  MOVE 'N'                TO #L-DISPLAY-CALCS
  MOVE 'N'                TO #L-SHOW-LOAN-REPAID
*
* IF *DEVICE = 'BATCH'
*   CALL 'AOCX2V5B' #PROJECTION-VIEW.ID-NUMBER
*                   #L-ACTIVE-SEG
*                   #L-NUM-DTLS
* ELSE
*   CALL 'AOCX2V5A' #PROJECTION-VIEW.ID-NUMBER
*                   #L-ACTIVE-SEG
*                   #L-NUM-DTLS
* END-IF
*
* WRITE  'OLD NPR' #NET-PR-RATIO  (#IFL)  'NEW' #L-CALC-AMT (1)
* WRITE  'OLD NXMN' #NXT-YR-MIN-CASH-VALUE (#IFL) 'NEW' #L-CALC-AMT2 (2)
  IF  (#TO-PLAN = 'AP') AND (#ISSUE-DATE (#IFL) GE 19860701)    /* DW9
    ignore                                  /* Has already been Calced & loaded
  else
    MOVE ROUNDED #L-CALC-AMT  (1) TO #NET-PR-RATIO (#IFL)
    MOVE ROUNDED #L-CALC-AMT2 (2) TO #NXT-YR-MIN-CASH-VALUE (#IFL)
  end-if
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE GET-OLD-AND-NEW-DUES
* * * * * * * * * * * * * * * * * * * * *
*
RESET #NEW-DUES #OLD-DUES
IF  (ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    OR = 'O' OR = 'P' OR = 'Q')
    OR (#PLAN (#IFL) = 'SO')
    OR (#IFL NE 1)
  ESCAPE ROUTINE
END-IF
*
DECIDE ON FIRST VALUE #TO-PLAN
  VALUE '2P' MOVE #SVC-FEE-2P TO #NEW-DUES
  VALUE '3P' MOVE #SVC-FEE-3P TO #NEW-DUES
  VALUE '4P' MOVE #SVC-FEE-4P TO #NEW-DUES
  VALUE '5P' MOVE #SVC-FEE-5P TO #NEW-DUES
  VALUE '6P' MOVE #SVC-FEE-6P TO #NEW-DUES
  VALUE '7P' MOVE #SVC-FEE-7P TO #NEW-DUES
  VALUE '8P' MOVE #SVC-FEE-7P TO #NEW-DUES
  VALUE '9P' MOVE #SVC-FEE-7P TO #NEW-DUES
  VALUE '20' MOVE #SVC-FEE-20 TO #NEW-DUES
  VALUE '30' MOVE #SVC-FEE-30 TO #NEW-DUES
  VALUE 'OL' MOVE #SVC-FEE-OL TO #NEW-DUES
* VALUE 'RT' MOVE #SVC-FEE-TM TO #NEW-DUES            /* YK1
* VALUE 'LT' MOVE #SVC-FEE-TM TO #NEW-DUES            /* YK1
  VALUE 'LTD' MOVE #SVC-FEE-TM TO #NEW-DUES
  VALUE 'AP' MOVE #SVC-FEE-SP TO #NEW-DUES
  VALUE 'SP' MOVE #SVC-FEE-SP TO #NEW-DUES
  NONE        IGNORE
END-DECIDE
*
* IF (#TO-PLAN-A1 GE 'U') AND (#TO-PLAN-A1 LE 'Z')    /* YK1
IF FUNCTION-TERM-POLICY(<#TO-PLAN>)                   /* YK1
  MOVE #SVC-FEE-TM TO #NEW-DUES
END-IF
*
IF (#TO-PLAN = MASK (NN)) AND (#NEW-DUES = 0)
  IF #TO-PLAN LE '19' MOVE #SVC-FEE-10 TO #NEW-DUES ELSE
    IF #TO-PLAN LE '29' MOVE #SVC-FEE-20 TO #NEW-DUES ELSE
      IF #TO-PLAN LE '34' MOVE #SVC-FEE-30 TO #NEW-DUES ELSE
        MOVE #SVC-FEE-OL TO #NEW-DUES
      END-IF END-IF END-IF
END-IF
*
DECIDE ON FIRST VALUE #PLAN-2 (#IFL)
  VALUE '2P' MOVE #SVC-FEE-2P TO #OLD-DUES
  VALUE '3P' MOVE #SVC-FEE-3P TO #OLD-DUES
  VALUE '4P' MOVE #SVC-FEE-4P TO #OLD-DUES
  VALUE '5P' MOVE #SVC-FEE-5P TO #OLD-DUES
  VALUE '6P' MOVE #SVC-FEE-6P TO #OLD-DUES
  VALUE '7P' MOVE #SVC-FEE-7P TO #OLD-DUES
  VALUE '8P' MOVE #SVC-FEE-7P TO #OLD-DUES
  VALUE '9P' MOVE #SVC-FEE-7P TO #OLD-DUES
  VALUE '20' MOVE #SVC-FEE-20 TO #OLD-DUES
  VALUE '30' MOVE #SVC-FEE-30 TO #OLD-DUES
  VALUE 'OL' MOVE #SVC-FEE-OL TO #OLD-DUES
* VALUE 'RT' MOVE #SVC-FEE-TM TO #OLD-DUES                    /* YK1
* VALUE 'LT' MOVE #SVC-FEE-TM TO #OLD-DUES                    /* YK1
  VALUE 'SP' MOVE #SVC-FEE-SP TO #OLD-DUES
  NONE        IGNORE
END-DECIDE
*
* IF (#PLAN-A1 (#IFL) GE 'U') AND (#PLAN-A1 (#IFL) LE 'Z')    /* YK1
IF FUNCTION-TERM-POLICY(<#PLAN(#IFL)>)                        /* YK1
  MOVE #SVC-FEE-TM TO #OLD-DUES
END-IF
* DISPLAY #TO-PLAN #PLAN-2 (#IFL) #OLD-DUES #NEW-DUES
*
IF (#PLAN-2 (#IFL) = MASK (NN)) AND (#OLD-DUES = 0)
  IF #PLAN-2 (#IFL) LE '19' MOVE #SVC-FEE-10 TO #OLD-DUES ELSE
    IF #PLAN-2 (#IFL) LE '29' MOVE #SVC-FEE-20 TO #OLD-DUES ELSE
      IF #PLAN-2 (#IFL) LE '34' MOVE #SVC-FEE-30 TO #OLD-DUES ELSE
        MOVE #SVC-FEE-OL TO #OLD-DUES
      END-IF END-IF END-IF
END-IF
*
IF #TO-PLAN = 'AP'    /* DW6
  SUBTRACT DUES-TOT-PAID FROM #NEW-DUES
*
  IF #NEW-DUES LT 0
    RESET #NEW-DUES
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE NXT-CONV-CALC-NU-PREM
* * * * * * * * * * * * * * * * * * * *
*
* write 'C1601SCO line 4850 calc new prem'
if #smoker-flag (#ifl) = 'S'                         /* DW7
  move +2 to #sm-x
else
  move +1 to #sm-x
end-if
*
RESET #DUR-X
reset #mort-rate (*)                                 /* DW7
*
move #issue-date (#ifl) to #yyyymmdd                                  /* DW10
subtract 1 from #yyyy
move #yyyymmdd to #att-date-work                                      /* DW10
*
FOR #ATT-X #ISSUE-AGE-N (#IFL) TO 100
  ADD 1 TO #DUR-X
  move #att-date-work to #yyyymmdd                                /* DW10
  add 1 to #yyyy
  move #yyyymmdd to #att-date-work
  move #yyyymmdd to #att-date (#dur-x)                            /* END DW10
* MOVE #DUR-X TO #L-999-DURATION                      /* DW7
  compute #iss-x = #issue-age-n (#ifl) + 1            /* DW7
*
  FOR #I2 1 TO 2
    move #dur-x to #att-xx                            /* DW7
    if #att-xx gt +16
      if #i2 = 2
        add 1 to #iss-x
      else
        compute #iss-x = #iss-x + (#att-xx - 16)
      end-if
*
      move +16 to #att-xx
      if #iss-x gt +86
        move +86 to #iss-x
      end-if
    end-if
*
    ADD td-mort (#sm-x, #iss-x, #att-xx) TO #MORT-RATE (#dur-x)  /* DW7
*
    IF #I2 = 1
*      ADD 1 TO #L-999-ISS-AGE
      if #dur-x le +16
        ADD 1 TO #iss-x                         /* DW7
      end-if
    ELSE
*     SUBTRACT 1 FROM #L-999-ISS-AGE
      if #dur-x le +16
        subtract 1 from #iss-x                       /* DW7
      end-if
      DIVIDE 2 INTO #MORT-RATE (#DUR-X)
    END-IF
  END-FOR
*
  MOVE #ATT-X TO #ATT-AGE (#DUR-X)
  COMPUTE ROUNDED #QX (#DUR-X) = (#MORT-RATE (#DUR-X) * .65) / 1000
*
  IF #DUR-X = 1
    MOVE 10000000 TO #LX (1)
  ELSE
    COMPUTE ROUNDED #LX (#DUR-X) = #LX (#DUR-X - 1) - #DX-X (#DUR-X - 1)
  END-IF
*
  COMPUTE ROUNDED #DX-X (#DUR-X) = #QX (#DUR-X) * #LX (#DUR-X)
  COMPUTE ROUNDED #WORK-X = (1 / 1.0525) ** (#DUR-X - 1)
  COMPUTE ROUNDED #DX (#DUR-X) = #LX (#DUR-X) * #WORK-X
END-FOR
*
MOVE #DX (#DUR-X) TO #NX (#DUR-X) /* fill in att age 100
SUBTRACT 1 FROM #DUR-X
FOR #ATT-X #DUR-X TO 1 STEP -1
  COMPUTE #NX (#ATT-X) = #NX (#ATT-X + 1) + #DX (#ATT-X)
END-FOR
*
* IF #TO-PLAN = 'AP'
*   FOR #ATT-X 1 TO 100
*   IF #ATT-AGE (#ATT-X) = 0
*     WRITE 'escape bottom'
*     ESCAPE BOTTOM
*   END-IF
*     DISPLAY
*      'ATT/AGE' #ATT-AGE (#ATT-X)
*      'Mort/Rate' #MORT-RATE (#ATT-X)
*      #QX (#ATT-X)
*      #LX (#ATT-X)
*    'DX' #DX-X (#ATT-X)
*      #DX (#ATT-X)
*      #NX (#ATT-X)
*   END-FOR
* END-IF
*
IF #to-plan = 'OL'  or = 'GPL' OR= 'GP2'                /* DW8    /* DW11
  COMPUTE #desired-term = 100 - #ISSUE-AGE-N (#IFL)          /* DW8
Else
  IF #TO-PLAN = MASK (NN)
    MOVE #TO-PLAN-N2 TO #DESIRED-TERM
  ELSE
    IF  (#TO-PLAN = MASK (N'P'))
        OR (#TO-PLAN = MASK (N'F'))
      MOVE #TO-PLAN-N1 TO #DESIRED-TERM
    END-IF
  end-if
END-IF
*
IF #PLAN-2 (#IFL) = 'OL' or = 'GPL' OR= 'GP2'                   /* DW11
  COMPUTE #ORIGINAL-TERM = 100 - #ISSUE-AGE-N (#IFL)
ELSE
  IF #PLAN-2 (#IFL) = MASK (NN)
    MOVE #PLAN-N2 (#IFL) TO #ORIGINAL-TERM
  ELSE
    MOVE #PLAN-N1 (#IFL) TO #ORIGINAL-TERM
  END-IF
END-IF
*
* if #to-plan = 'AP'
*   write 'issue-age=' #ISSUE-AGE-N (#IFL) 'annual-prem =' #ANNUAL-PREM (#IFL)
*      'iss-date=' #issue-date (#ifl) 'orig-term=' #original-term
* end-if
*
COMPUTE #DISP-X = #ISSUE-AGE-N (#IFL) - 1
COMPUTE #PD-UP-AGE = #ISSUE-AGE-N (#IFL) + #ORIGINAL-TERM
MOVE #TRAN-YYYYMMDD TO #YYYYMMDD
*
FIND (1) #PROJECTION-VIEW WITH MEMBER-KEY = #CGA-ORIG-ID-A
  #DOB := GET-DATE-OF-BIRTH (< #PROJECTION-VIEW.MEMBER-CONTACT-ID >)
END-FIND
* MOVE #PROJECTION-VIEW.DATE-OF-BIRTH TO #DOB
*
MOVE #TRAN-YYYYMMDD TO #YYYYMMDD
IF #TRAN-MM LT ISSUE-DATE-MM (#IFL)  /* get correct month with the yr
  ADD 12 TO #MM
END-IF
*
SUBTRACT #ISD-MM (#IFL) FROM #MM
MOVE #MM   TO #CURR-YR-MONS
*
MOVE #TRAN-YYYYMMDD TO #YYYYMMDD       /* DW10
IF #TRAN-MM LT #DOB-MM   /* get correct year
  add 1 to #yyyy      /* To fix ATTAINED Problem
END-IF
*
SUBTRACT #DOB-YYYYMM FROM #YYYYMM
*
compute #pd-up-indx-used = #pd-up-age - #disp-x       /* DW10
*
move #tran-yyyymmdd to #yyyymmdd  /* Compute ATT AGE at beg of pol yr /* DW10
subtract #curr-yr-mons from #mm
if #mm lt 1
  add 12 to #mm
  subtract 1 from #yyyy
end-if
subtract #dob-yyyymm from #yyyymm
move #yyyy to #att-age-at-beg
compute #att-indx-used = #att-age-at-beg - #disp-x  /* EMD DW10
*
*  if #to-plan = 'AP'   /* To display a chunk of comutation table
*    write '#i1 #att-date #curr-ann-fact #next-annu-fact #interp-fact  #pv'
*    for #i1 1 to 8   /* for display purposes only
*      COMPUTE ROUNDED #CURR-ANNU-FACT =
*        (#NX (#i1) - #NX (#pd-up-indx-used))
*           / #DX (#i1)
*      COMPUTE ROUNDED #NEXT-ANNU-FACT =
*        (#NX (#i1 + 1) - #NX (#pd-up-indx-used))
*         / #DX (#i1 + 1)
*      COMPUTE ROUNDED #INTERP-ANNU-FACT =
*          ((12 - #CURR-YR-MONS) / 12 * #CURR-ANNU-FACT)
*          + (#CURR-YR-MONS / 12 * #NEXT-ANNU-FACT)
*      COMPUTE ROUNDED #PV = #ANNUAL-PREM (#IFL) * #INTERP-ANNU-FACT
*    write  #i1 #att-date (#i1) #curr-annu-fact (em=ZZ.9999999)
*       #next-annu-fact (em=ZZ.9999999) #INTERP-ANNU-FACT (em=ZZ.9999999)
*       #pv (em=-ZZZ9.9999999)
*    end-for
*  end-if
*
COMPUTE ROUNDED #CURR-ANNU-FACT =                          /* DW10
  (#NX (#att-indx-used) - #NX (#pd-up-indx-used))
  / #DX (#att-indx-used)
COMPUTE ROUNDED #NEXT-ANNU-FACT =
  (#NX (#att-indx-used + 1) - #NX (#pd-up-indx-used))
  / #DX (#att-indx-used + 1)
COMPUTE ROUNDED #INTERP-ANNU-FACT =
  ((12 - #CURR-YR-MONS) / 12 * #CURR-ANNU-FACT)
  + (#CURR-YR-MONS / 12 * #NEXT-ANNU-FACT)
COMPUTE ROUNDED #PV = #ANNUAL-PREM (#IFL) * #INTERP-ANNU-FACT /* END DW10
*  below was replaced by above 5/12/2008
* COMPUTE ROUNDED #CURR-ANNU-FACT =
*     (#NX (#CURR-ATT-AGE - #DISP-X) - #NX (#PD-UP-AGE - #DISP-X))
*      / #DX (#CURR-ATT-AGE - #DISP-X)
* COMPUTE ROUNDED #NEXT-ANNU-FACT =
*     (#NX (#NEXT-ATT-AGE - #DISP-X) - #NX (#PD-UP-AGE - #DISP-X))
*      / #DX (#NEXT-ATT-AGE - #DISP-X)
* COMPUTE ROUNDED #INTERP-ANNU-FACT =
*     ((12 - #CURR-YR-MONS) / 12 * #CURR-ANNU-FACT)
*      + (#CURR-YR-MONS / 12 * #NEXT-ANNU-FACT)
* COMPUTE ROUNDED #PV = #ANNUAL-PREM (#IFL) * #INTERP-ANNU-FACT
*  If #to-plan = 'AP'
*   display 'pd-to-dt' #tran-yyyymmdd
*     'disp-x' #disp-x
*     'Mons' #curr-yr-mons
*     'pv' #pv (em=-ZZZ9.9999999)
*     'att age/at beg' #att-age-at-beg
*     'att/indx used' #att-indx-used
*  end-if
*
IF #TO-PLAN = 'AP'
  RESET #NU-MON-PREM
  MOVE ROUNDED #PV TO #NU-ANN-PREM  /* Amount due on PUAP
ELSE
  COMPUTE #NU-PD-UP-AGE = #ISSUE-AGE-N (#IFL) + #DESIRED-TERM
  COMPUTE ROUNDED #NU-CURR-ANNU-FACT =                             /* DW10
    (#NX (#att-indx-used) - #NX (#NU-PD-UP-AGE - #DISP-X))
    / #DX (#att-indx-used)
  COMPUTE ROUNDED #NU-NEXT-ANNU-FACT =
    (#NX (#att-indx-used + 1) - #NX (#NU-PD-UP-AGE - #DISP-X))
    / #DX (#att-indx-used + 1)
*  below was replaced by above 5/14/2008
*  COMPUTE ROUNDED #NU-CURR-ANNU-FACT =
*    (#NX (#CURR-ATT-AGE - #DISP-X) - #NX (#NU-PD-UP-AGE - #DISP-X))
*     / #DX (#CURR-ATT-AGE - #DISP-X)
*  COMPUTE ROUNDED #NU-NEXT-ANNU-FACT =
*    (#NX (#NEXT-ATT-AGE - #DISP-X) - #NX (#NU-PD-UP-AGE - #DISP-X))
*     / #DX (#NEXT-ATT-AGE - #DISP-X)
  COMPUTE ROUNDED #NU-INTERP-ANNU-FACT =
    ((12 - #CURR-YR-MONS) / 12 * #NU-CURR-ANNU-FACT)
    + (#CURR-YR-MONS / 12 * #NU-NEXT-ANNU-FACT)
  COMPUTE ROUNDED #NU-MON-PREM =
    (#PV - #LUMP-SUM) / (#NU-INTERP-ANNU-FACT * 12)
*
  IF #NU-MON-PREM-C NE 0
    ADD .10 TO #NU-MON-PREM
  END-IF
  RESET #NU-MON-PREM-C
  COMPUTE #NU-ANN-PREM = #NU-MON-PREM * 12
END-IF
*
END-SUBROUTINE
*
END
