* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
************************************************************************
* NAME         : GPXNCC03                                              *
* DESCRIPTION  : Input parameter is #OWNER-ID. This Subprogram will    *
*                return all policies owned by #OWNER-ID and being paid *
*                by credit card that belong to this owner              *
************************************************************************
*                       MODIFICATION LOG                               *
* USER  DATE       TAG   REASON                                        *
* YAK  05/31/2016        Initial Creation                              *
*                        Update expiration date on multiple  records   *
*                        with the same credit card number              *
* YAK  08/25/2016  YK1   Add updates for CC Number                     *
************************************************************************
*
DEFINE DATA
PARAMETER
1 #REQUEST-ACTION (A) DYNAMIC
1 #CN-OWNER       (N6)
1 #CC-GUID        (A32)
1 #NEW-CC-NUMBER  (A16)
1 #OLD-CC-NUMBER  (A16)
1 #CC-ZIP         (N5)
1 #CC-POSTAL-CODE (A10)
LOCAL USING OBJLCC01
LOCAL USING OBJACC01
LOCAL USING GPRATR06
LOCAL
*
1 ST-V VIEW OF A-STATUS
  2 MEMBER-CONTACT-ID
  2 C*ACTIVE-SEGMENTS
  2 POLICY-ID (9)
  2 STATUS    (9)
  2 MODE      (9)
*
1 POS-V VIEW OF A-POLICY-CONTACTS
  2 POLICY-NUMBER
  2 RELATION
  2 REFERENCE-NUMBER
  2 CONTACT-ID
  2 NI-OWNER
*
1 #PRIMARY-OWNER       (N2) CONSTANT    <2>
1 #INSURED             (N2) CONSTANT    <1>
1 #ACTIVE              (A2) CONSTANT    <'D'>
1 #OWNER-POLICY-ARRAY  (*)
  2 #POLICY-CN         (N6)
  2 #CONTACT-ID        (N8)
  2 #POLICY-NUMBER     (A16)
  2 #POLICY-STATUS     (A1)
  2 #CC-ISN            (P9)
1 #OTHER-POLICY-ARRAY  (*)
  2 #POLICY-CN         (N6)
  2 #CONTACT-ID        (N8)
  2 #CC-ISN            (P9)
1 #OTHER-POLICY-LIST   (A) DYNAMIC
1 #LOOP_COUNTERS
* 2 #I     (I2)
  2 #I1    (I2)
  2 #I2    (I2)
  2 #I_SL  (I2)    /* Show Table line counter
1 #FINAL_COUNTERS
  2 #I_CC  (I2)    /* Number of CN's with the same credit card
  2 #I_PO  (I2)    /* Number of policies own
  2 #I_PN  (I2)    /* Number of CN's with the same credit card but not owned policies (payer)
  2 #I_O_SL(I2)    /* Number of CN's to show with own policies
  2 #I_N_SL(I2)    /* Number of CN's to show with policies not own
*
1 #CN-A          (A6)
1 #OWNER         (L)
1 #SAME-CC       (*)
  2 CN           (N6)
  2 ISN          (P9)
1 cSel           (C/20)
1 cSel_1         (C/20)
1 #SEL           (L/20)
1 #SHOW_TABLE    (20)
  2 #CN          (A6)
  2 #ISN         (P9)
  2 #SHOW_LINE   (A65)
  2 REDEFINE #SHOW_LINE
    3 #INSURED-NAME (A25)
    3 #POLICY-LIST (A40)
*
1 #OWNER-CC-NUMBER    (A16)
1 #OWNER-CC-EXP-MONTH (A2)
1 #OWNER-CC-EXP-YEAR  (A4)
1 #OWNER-INFORMATION
  2 CCHOLDER-NAME (A50)
  2 CCHOLDER-STREET-ADDR (A50)
  2 CCHOLDER-ADDL-ADDR (A50)
  2 CCHOLDER-CITY (A50)
  2 CCHOLDER-STATE-CD (A2)
  2 CCHOLDER-COUNTRY (A50)
  2 CCHOLDER-ZIP-CODE (N5.0)
  2 CCHOLDER-POSTAL-CODE (A10)
  2 CC-ADDR-FORMAT-CODE (A1)
  2 CC-ADDR-VALIDATION-CODE (A1)
1 #CC-MODE         (A1/4) CONST <'0','1','2','4'>
1 FUNCTION_CODE    (A) DYNAMIC CONST <'CreditCardInfo'>    /* YK3
1 #TRAN-CONTACT-ID (N8)
1 #USER-ID         (A8)
1 #CC-ACTION
  2 #GET-BY-ISN      (A) DYNAMIC CONST <'GET-BY-ISN'>
  2 #UPDATE          (A) DYNAMIC CONST <'UPDATE'>
  2 #UPDATE-EXP-DATE (A) DYNAMIC CONST <'UPDATE-EXP-DATE'>
  2 #UPDATE-ADDRESS  (A) DYNAMIC CONST <'UPDATE-ADDRESS'>
*
1 #TITLE_1 (A75) CONST <'Please verify with the member the CNs they want to have updated'>
1 #TITLE_2 (A75) CONST <'Mark "N" if you do NOT wish to update CC Info for CN'>
1 #TITLE_3 (A75) CONST <'Press "ENTER" when you are done'>
1 #TITLE_4 (A75) CONST <'Y/N Insured Name           Policy #                 '>
1 #TITLE_5 (A75) CONST <'             Owner                                  '>
1 #TITLE_6 (A75) CONST <'           Not owner - (Paid by the same CC)        '>
*
END-DEFINE
*
DEFINE WINDOW CONFIRMATION
  SIZE 24 * 70
  BASE 2/10
  TITLE 'Same CC used'
  CONTROL SCREEN
  FRAMED
*
*  Get OWNER/PAYER CC Information
FIND CC-INFO-V WITH ID-NUMBER = #CN-OWNER
  ACCEPT IF CC-INFO-V.CC-GUID = #CC-GUID
  #OWNER-CC-EXP-MONTH := CC-INFO-V.CC-EXPIRATION-MONTH
  #OWNER-CC-EXP-YEAR  := CC-INFO-V.CC-EXPIRATION-YEAR
  MOVE BY NAME CC-INFO-V TO #OWNER-INFORMATION
END-FIND
* Get list of CN's with the same credit card number / zip-code - #I_CC
* Search by CC number / zip code that was before the change
FIND CC-INFO-V WITH CC-NUMBER = #OLD-CC-NUMBER
  IF (CC-INFO-V.CCHOLDER-ZIP-CODE <> 0 AND CC-INFO-V.CCHOLDER-ZIP-CODE = #CC-ZIP) OR
      (CC-INFO-V.CCHOLDER-POSTAL-CODE <> ' ' AND CC-INFO-V.CCHOLDER-POSTAL-CODE = #CC-POSTAL-CODE)
    #I_CC := #I_CC + 1
    EXPAND ARRAY #SAME-CC TO (*:#I_CC)
    #SAME-CC.CN(#I_CC) := CC-INFO-V.ID-NUMBER
    #SAME-CC.ISN(#I_CC) := *ISN
  END-IF
END-FIND
* If none of records match by CC-NUMBER && ZIP-CODE - stop
IF #I_CC = 0
  ESCAPE ROUTINE
END-IF
*
* Get policies owned - #I_PO
FIND POS-V WITH REFERENCE-NUMBER = #CN-OWNER
  IF NO RECORDS FOUND
    ESCAPE ROUTINE
  END-NOREC
  ACCEPT IF RELATION = #PRIMARY-OWNER
  #I_PO := #I_PO + 1
  EXPAND ARRAY #OWNER-POLICY-ARRAY TO (*:#I_PO)
  #OWNER-POLICY-ARRAY.#POLICY-NUMBER(#I_PO) := POS-V.POLICY-NUMBER
END-FIND
* Get policy status / Insured CN for own policies
FOR #I1 = 1 TO #I_PO
  FIND POS-V WITH POLICY-NUMBER = #OWNER-POLICY-ARRAY.#POLICY-NUMBER(#I1)
      WHERE POS-V.RELATION = #INSURED
    #OWNER-POLICY-ARRAY.#POLICY-CN(#I1)  := POS-V.REFERENCE-NUMBER
    #OWNER-POLICY-ARRAY.#CONTACT-ID(#I1) := POS-V.CONTACT-ID
  END-FIND
  #OWNER-POLICY-ARRAY.#POLICY-STATUS(#I1):= GET-POLICY-STATUS(<#OWNER-POLICY-ARRAY.#POLICY-NUMBER(#I1)>)
END-FOR
*
*  Remember CN when NOT the owner
* #I_PN - number of CN's for not owned policies
FOR #I1 = 1 TO #I_CC
  RESET #OWNER
  FOR #I2 = 1 TO #I_PO
    IF #OWNER-POLICY-ARRAY.#POLICY-CN(#I2) = #SAME-CC.CN(#I1)
      #OWNER-POLICY-ARRAY.#CC-ISN(#I2) := #SAME-CC.ISN(#I1)
      #OWNER := TRUE
      ESCAPE BOTTOM
    END-IF
  END-FOR
  IF NOT #OWNER AND #SAME-CC.CN(#I1) <> #CN-OWNER
    #I_PN := #I_PN + 1
    EXPAND ARRAY #OTHER-POLICY-ARRAY TO (*:#I_PN)
    #OTHER-POLICY-ARRAY.#POLICY-CN(#I_PN) := #SAME-CC.CN(#I1)
    #OTHER-POLICY-ARRAY.#CC-ISN(#I_PN)    := #SAME-CC.ISN(#I1)
  END-IF
END-FOR
* Create a List of matching CN/Policies/CC Info
RESET #I2
#I_SL := 5
MOVE (AD=NP) TO cSEL(*)
MOVE (AD=P)  TO cSEL_1(*)
FOR #I1 = 1 TO #I_PO
  IF #OWNER-POLICY-ARRAY.#POLICY-CN(#I1) <> #CN-OWNER AND #OWNER-POLICY-ARRAY.#POLICY-CN(#I1) = #SAME-CC.CN(*)
      AND #OWNER-POLICY-ARRAY.#POLICY-STATUS(#I1) = #ACTIVE
    #CN-A := #OWNER-POLICY-ARRAY.#POLICY-CN(#I1)
    IF #I_O_SL <> 0
      EXAMINE #CN(*) FOR #CN-A INDEX #I2
    END-IF
    IF #I2 <> 0
      COMPRESS #POLICY-LIST(#I2) #OWNER-POLICY-ARRAY.#POLICY-NUMBER(#I1) INTO #POLICY-LIST(#I2)
    ELSE
      #I_O_SL := #I_O_SL + 1
      #I_SL   := #I_SL + 1
*     EXPAND ARRAY #SHOW_TABLE TO (*:#I_SL)
      #SHOW_TABLE.#CN(#I_SL) := #OWNER-POLICY-ARRAY.#POLICY-CN(#I1)
      #SHOW_TABLE.#ISN(#I_SL):= #OWNER-POLICY-ARRAY.#CC-ISN(#I1)
      #INSURED-NAME(#I_SL) := FUNCTION-CONTACT-NAME-2(<#OWNER-POLICY-ARRAY.#CONTACT-ID(#I1)>)
      COMPRESS #POLICY-LIST(#I_SL) #OWNER-POLICY-ARRAY.#POLICY-NUMBER(#I1) INTO #POLICY-LIST(#I_SL)
      MOVE (AD=I) TO cSEL(#I_SL)
      #SEL(#I_SL) := true
    END-IF
  END-IF
END-FOR
FOR #I1 = 6 TO #I_SL
  COMPRESS '(' #POLICY-LIST(#I1) ')' INTO #POLICY-LIST(#I1) LEAVING NO
END-FOR
*
#I_SL   := #I_SL + 2
#SHOW_LINE(#I_SL) := #TITLE_6
MOVE (AD=IP) TO cSel_1(#I_SL)
* Get policy number / status for paid policies
* #I_SL_N - final number of CNs with matching CC info and active policies with reccurring CC payments
FOR #I1 = 1 TO #I_PN
  RESET #OTHER-POLICY-LIST
  FIND ST-V WITH ID-NUMBER = #OTHER-POLICY-ARRAY.#POLICY-CN(#I1)
    #OTHER-POLICY-ARRAY.#CONTACT-ID(#I1) := ST-V.MEMBER-CONTACT-ID
    FOR #I2 = 1 TO C*ACTIVE-SEGMENTS
      IF ST-V.STATUS(#I2) = #ACTIVE AND ST-V.MODE(#I2) = #CC-MODE(*)
        COMPRESS #OTHER-POLICY-LIST ST-V.POLICY-ID(#I2) INTO #OTHER-POLICY-LIST
      END-IF
    END-FOR
  END-FIND
* If there are no policies paid by recurring CC - show CN
  #I_N_SL := #I_N_SL + 1
  #I_SL   := #I_SL + 1
  #SHOW_TABLE.#CN(#I_SL) := #OTHER-POLICY-ARRAY.#POLICY-CN(#I1)
  #SHOW_TABLE.#ISN(#I_SL):= #OTHER-POLICY-ARRAY.#CC-ISN(#I1)
  #INSURED-NAME(#I_SL) := FUNCTION-CONTACT-NAME-2(<#OTHER-POLICY-ARRAY.#CONTACT-ID(#I1)>)
  IF #OTHER-POLICY-LIST = ' '
    #OTHER-POLICY-LIST := #OTHER-POLICY-ARRAY.#POLICY-CN(#I1)
  END-IF
  COMPRESS '(' #OTHER-POLICY-LIST ')' INTO #POLICY-LIST(#I_SL) LEAVING NO
  MOVE (AD=I) TO cSel(#I_SL)
  #SEL(#I_SL) := true
END-FOR
*
IF #I_O_SL > 0 OR #I_N_SL > 0
  IF *DEVICE <> 'BATCH'
    PERFORM CONFIRM-UPDATE
  ELSE
    PRINT #POLICY-LIST(*)
  END-IF
END-IF
*
********************************
DEFINE SUBROUTINE CONFIRM-UPDATE
********************************
*
#SHOW_LINE(1) := #TITLE_1
#SHOW_LINE(2) := #TITLE_2
#SHOW_LINE(3) := #TITLE_3
#SHOW_LINE(4) := #TITLE_4
#SHOW_LINE(5) := #TITLE_5
*
SET KEY PF3
INPUT WINDOW = 'CONFIRMATION' (IP=OFF AD=O)
*
  /
  1x #SHOW_LINE(1) (CV=cSel_1(01)) /
  1x #SHOW_LINE(2) (CV=cSel_1(02)) /
  1x #SHOW_LINE(3) (CV=cSel_1(03)) /
  1x #SHOW_LINE(4) (CV=cSel_1(04)) /
  1x #SHOW_LINE(5) (AD=MI CV=cSel_1(05)) /
  1x #SEL(6)  (AD=MI EM=N/Y CV=cSel(06)) #SHOW_LINE(6)  (CV=cSel_1(06)) /
  1x #SEL(7)  (AD=MI EM=N/Y CV=cSel(07)) #SHOW_LINE(7)  (CV=cSel_1(07)) /
  1x #SEL(8)  (AD=MI EM=N/Y CV=cSel(08)) #SHOW_LINE(8)  (CV=cSel_1(08)) /
  1x #SEL(9)  (AD=MI EM=N/Y CV=cSel(09)) #SHOW_LINE(9)  (CV=cSel_1(09)) /
  1x #SEL(10) (AD=MI EM=N/Y CV=cSel(10)) #SHOW_LINE(10) (CV=cSel_1(10)) /
  1x #SEL(11) (AD=MI EM=N/Y CV=cSel(11)) #SHOW_LINE(11) (CV=cSel_1(11)) /
  1x #SEL(12) (AD=MI EM=N/Y CV=cSel(12)) #SHOW_LINE(12) (CV=cSel_1(12)) /
  1x #SEL(13) (AD=MI EM=N/Y CV=cSel(13)) #SHOW_LINE(13) (CV=cSel_1(13)) /
  1x #SEL(14) (AD=MI EM=N/Y CV=cSel(14)) #SHOW_LINE(14) (CV=cSel_1(14)) /
  1x #SEL(15) (AD=MI EM=N/Y CV=cSel(15)) #SHOW_LINE(15) (CV=cSel_1(15)) /
  1x #SEL(16) (AD=MI EM=N/Y CV=cSel(16)) #SHOW_LINE(16) (CV=cSel_1(16)) /
  1x #SEL(17) (AD=MI EM=N/Y CV=cSel(17)) #SHOW_LINE(17) (CV=cSel_1(17)) /
  1x #SEL(18) (AD=MI EM=N/Y CV=cSel(18)) #SHOW_LINE(18) (CV=cSel_1(18)) /
  1x #SEL(19) (AD=MI EM=N/Y CV=cSel(19)) #SHOW_LINE(19) (CV=cSel_1(19)) /
  1x #SEL(20) (AD=MI EM=N/Y CV=cSel(20)) #SHOW_LINE(20) (CV=cSel_1(20))
*
IF *PF-KEY = 'PF3'
  ESCAPE ROUTINE
END-IF
FOR #I1 4 TO 20
  IF #SEL(#I1) AND #CN(#I1) <> ' '
    PERFORM UPDATE-RECORD
  END-IF
END-FOR
SET WINDOW OFF
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE UPDATE-RECORD    /* YK1
*******************************
*
RESET PARM-CC-DATA PARM-CC-INFO BEFORE_IMAGE AFTER_IMAGE
#ACTION := #GET-BY-ISN
PARM-CC-DATA.#PARM-ID-NUMBER := val(#SHOW_TABLE.#CN(#I1))
PARM-CC-DATA.#ISN            := #SHOW_TABLE.#ISN(#I1)
CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
BEFORE_IMAGE.DATE-LAST-UPDATE        := PARM-CC-INFO.LAST-DATE-UPDATE
BEFORE_IMAGE.CC-NUMBER               := PARM-CC-INFO.CC-NUMBER
BEFORE_IMAGE.CC-GUID                 := PARM-CC-INFO.CC-GUID
COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH PARM-CC-INFO.CC-EXPIRATION-YEAR
  INTO BEFORE_IMAGE.CC-EXPIRATION-DATE
BEFORE_IMAGE.CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND
IF BEFORE_IMAGE.CC-DEFAULT-IND = ' '
  BEFORE_IMAGE.CC-DEFAULT-IND := 'N'
END-IF
*
* when cc number changed - sync name/addess as well
IF #REQUEST-ACTION = #UPDATE OR #REQUEST-ACTION = #UPDATE-ADDRESS
  BEFORE_IMAGE.CCHOLDER-NAME         := PARM-CC-INFO.CCHOLDER-NAME
  BEFORE_IMAGE.CCHOLDER-ADDRESS-1    := PARM-CC-INFO.CCHOLDER-STREET-ADDR
  BEFORE_IMAGE.CCHOLDER-ADDRESS-2    := PARM-CC-INFO.CCHOLDER-ADDL-ADDR
  IF PARM-CC-INFO.CC-ADDR-FORMAT-CODE = '1'
    BEFORE_IMAGE.CCHOLDER-ADDRESS-3  := PARM-CC-INFO.CCHOLDER-ZIP-CODE
  ELSE
    COMPRESS PARM-CC-INFO.CCHOLDER-POSTAL-CODE PARM-CC-INFO.CCHOLDER-COUNTRY
      INTO BEFORE_IMAGE.CCHOLDER-ADDRESS-3
  END-IF
  COMPRESS PARM-CC-INFO.CCHOLDER-CITY PARM-CC-INFO.CCHOLDER-STATE-CD BEFORE_IMAGE.CCHOLDER-ADDRESS-3
    INTO BEFORE_IMAGE.CCHOLDER-ADDRESS-3
  BEFORE_IMAGE.CC-ADDR-VALIDATION-CODE := PARM-CC-INFO.CC-ADDR-VALIDATION-CODE
END-IF
*
PARM-CC-INFO.CC-NUMBER           := #NEW-CC-NUMBER
PARM-CC-INFO.CC-EXPIRATION-MONTH := #OWNER-CC-EXP-MONTH
PARM-CC-INFO.CC-EXPIRATION-YEAR  := #OWNER-CC-EXP-YEAR
PARM-CC-INFO.LAST-DATE-UPDATE := *DATN
PARM-CC-INFO.LAST-USER-UPDATE := *USER
* when cc number changed - sync name/addess as well
IF #REQUEST-ACTION = #UPDATE OR #REQUEST-ACTION = #UPDATE-ADDRESS
  MOVE BY NAME #OWNER-INFORMATION TO PARM-CC-INFO
END-IF
*
* YK1 >
#ACTION := #REQUEST-ACTION
* < YK1
CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
IF PARM-CC-DATA.#RESULT-CODE = ' '
  AFTER_IMAGE.CC-NUMBER               := PARM-CC-INFO.CC-NUMBER
  AFTER_IMAGE.CC-GUID                 := PARM-CC-INFO.CC-GUID
  COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH PARM-CC-INFO.CC-EXPIRATION-YEAR
    INTO AFTER_IMAGE.CC-EXPIRATION-DATE
  AFTER_IMAGE.CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND
  IF AFTER_IMAGE.CC-DEFAULT-IND = ' '
    AFTER_IMAGE.CC-DEFAULT-IND := 'N'
  END-IF
* when cc number changed - sync name/addess as well
  IF #REQUEST-ACTION = #UPDATE OR #REQUEST-ACTION = #UPDATE-ADDRESS
    AFTER_IMAGE.CCHOLDER-NAME      := PARM-CC-INFO.CCHOLDER-NAME
    AFTER_IMAGE.CCHOLDER-ADDRESS-1 := PARM-CC-INFO.CCHOLDER-STREET-ADDR
    AFTER_IMAGE.CCHOLDER-ADDRESS-2 := PARM-CC-INFO.CCHOLDER-ADDL-ADDR
    IF PARM-CC-INFO.CC-ADDR-FORMAT-CODE = '1'
      AFTER_IMAGE.CCHOLDER-ADDRESS-3  := PARM-CC-INFO.CCHOLDER-ZIP-CODE
    ELSE
      COMPRESS PARM-CC-INFO.CCHOLDER-POSTAL-CODE PARM-CC-INFO.CCHOLDER-COUNTRY
        INTO AFTER_IMAGE.CCHOLDER-ADDRESS-3
    END-IF
    COMPRESS PARM-CC-INFO.CCHOLDER-CITY PARM-CC-INFO.CCHOLDER-STATE-CD AFTER_IMAGE.CCHOLDER-ADDRESS-3
      INTO AFTER_IMAGE.CCHOLDER-ADDRESS-3
    AFTER_IMAGE.CC-ADDR-VALIDATION-CODE := PARM-CC-INFO.CC-ADDR-VALIDATION-CODE
  END-IF
  PERFORM WRITE-TRANSACTION-LOG
END-IF
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE WRITE-TRANSACTION-LOG
***************************************
*
#TRAN-CONTACT-ID := F-GET-CONTACT-ID(<#PARM-ID-NUMBER>)
#USER-ID := *USER
#USER-ID := *TRANSLATE(#USER-ID,UPPER)
TR_ID_NUMBER  := #PARM-ID-NUMBER
TR_NAME       := FUNCTION-CONTACT-NAME(<#TRAN-CONTACT-ID>)
TR_CLERK      := FUNCTION-CLERK(< #USER-ID >)
CALLNAT 'GPRNTR06' FUNCTION_CODE TRAN_LOG_HEADER BEFORE_IMAGE AFTER_IMAGE
END-SUBROUTINE
END
