* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
**********************************************************************************
* Pgm ID : PAY-PDRN
*
* Function : pay premium, dues,rider amounts per policy according the mode
*
* 01/18/2012 vt Initial creation
* 05/25/2012 vt1 Fix billing adjustment to TA and Status file.
* 12/19/2013 vt2 Store plan-type to sg-category-2 field on TA file.
* 02/10/2014 vt3 /Ticket 2579/
* 02/21/2014 YK1 Keep paid to date for Rider in sync with policy paid to date
* 06/13/2014 TT2 CONTACT NORMALIZATION
* 09/09/2014 vt4 /Ticket 3047/ Fix the months paid when the BADJ amount is greater than monthly due amount.
* 05/11/2015 vt5 /Ticket 3518/ put pol nbr and SG plan for BADJ transaction
* 01/09/2017 vt6 Add PS payments /ticket 2177/
**********************************************************************************
define data parameter
1 #rest-amt               (n7.2)
1 #STATUS-ISN             (P8)
1 CC-PAYMENT
  2 PARM-DATE             (N8.0)
  2 ID-NUMBER             (N6.0)
  2 INSURED-NAME          (A50)
  2 C@PAY-POLICY          (N2.0)
  2 PAY-POLICY     (1:9)
    3 POLICY-NBR          (A16)
    3 segment             (i2)
    3 cap-policy          (a1)
    3 PLAN-TYPE           (A3)
    3 ISSUE-DATE          (N8.0)
    3 FACE-AMOUNT         (N7.2)
    3 MAX-PREMIUMS        (N4)
    3 MIN-PREMIUMS        (N2)
    3 DEFAULT-PREM        (N2)
    3 C@AVAILABLE-PAYMENT (N2.0)
    3 AVAILABLE-PAYMENT (1:10)
      4 PAYMENT-NOTE      (A) DYNAMIC
      4 CC-PAYABLE        (A1)
      4 VAR-AMOUNT        (A1)
      4 EXCEED-AMT        (A1)
      4 TRAN-TYPE         (A6)               /* vt6 was a4
      4 PAID-TO-DATE      (N8.0)
      4 PAYMENT-MODE      (A1)
      4 DEFAULT-AMOUNT    (N6.2)
      4 DUE-AMOUNT        (N6.2)
1 #timn               (n7)
1 #error-message      (a75)
*
LOCAL USING C2500AAM
local using svca0003                         /* vt6
LOCAL
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER              (N6)
  2 MEMBER-CONTACT-ID      (N8)             /* TT2
  2 name                   (a25)
  2 PROCESS-IND            (A1)
  2 STATUS                 (A1/9)
  2 PAY-STATUS             (A2/9)
  2 MODE                   (A1/9)
  2 PLAN                   (A3/9)
  2 ISSUE-DATE             (N8/9)
  2 PAID-TO-DATE           (N8/9)
  2 PAID-UP-DATE           (N8/9)
  2 ANNUAL-PREM            (P5.2/9)
  2 MTD-ACV-PREM-ADJ       (P7.2/9)
*  2 date-of-birth          (n8)                 /* TT2
  2 MONTH-ALLOC-AMT        (p7.2/9)              /* TT1
  2 X-BILL-ADJUST          (p5.2/9)
  2 X-BILL-DOLLAR          (p5.2/9)
  2 OWNERSHIP-FLAG         (a1/9)
  2 DUES-ALL-PAID-IND      (a1)
  2 DUES-BALANCE           (p5.2)
  2 DUES-FPF               (p3.2)
  2 DUES-TOT-PAID          (p5.2)
  2 INTRO-FLAG             (a1)
  2 RID-PLAN               (a2/9)
  2 RID-EFF-DT             (n8/9)
  2 RID-PD-TO              (n8/9)
  2 X-RID-FPF              (9)
  2 X-RID-BALANCE          (9)
  2 RID-TOT-PAID
  2 debit-credit-amt                            /* vt6
*
1 AR-V VIEW OF A-ACCOUNTING-REGISTER
  2 id-number         (n6)
  2 name              (a25)
  2 transaction-datn  (p9)
  2 transaction-timn  (p7)
  2 cash-code         (a1)
  2 clerk-id          (a3)
  2 terminal-id       (a8)
  2 PROCESS-IND       (A1)
  2 POLICY-NUMBER     (A16)
  2 AALP-FLAG         (A1)
  2 TXN-CODE          (A4)
  2 TXN-ACCT-NUMBER   (N3)
  2 MESSAGE-CODE      (A1)
  2 credit-amount     (p7.2)
  2 acct-date         (n8)
  2 debit-amount      (p7.2)
  2 description       (a20)
  2 sg-category-1     (a2/15)
  2 sg-category-2     (a2/15)
  2 SG-AMOUNT         (N6.2/2)
*
1 #tot-prep-amt       (p7.2/9,4)                 /* vt6  
1 #pol-nbr            (a16)
1 #pol-nbr-x          (a16)
1 #lxx                (i2)
*
1 #i1                      (i2)
1 #l                       (i2)
1 #m                       (i2)
1 #n                       (i2)
1 #cc-x                    (i2)
1 #iln1                    (i2)
1 #iln2                    (i2)
1 #lx                      (i2)
1 #prep-amt                (p7.2)
1 #inp-amt                 (p7.2)
1 #inp-tr-cd               (a4)
1 #cash-code               (a1)
1 #issue-date              (n8)
1 REDEFINE #ISSUE-DATE
  2 #ISSUE-DATE-A          (A8)
1 #TERM                    (L)
1 #DATE-MMDDYYYY           (N8)
1 REDEFINE #DATE-MMDDYYYY
  2 #MMDD                  (N4)
  2 #YYYY                  (N4)
1 REDEFINE #DATE-MMDDYYYY
  2 #DATE-MMDDYYYY-A       (A8)
1 #update-mode             (l) init<TRUE>
1 #SG-TBL                  (15)
  2 #SG-CAT1               (A2)
  2 #SG-CAT2               (A2)
  2 #SG-AMT                (N6.2)
1 #datn                    (n8)
1 redefine #datn
  2 #datn-yyyy             (n4)
  2 #datn-mm               (n2)
  2 #datn-dd               (n2)
1 #datn-a                  (a10)
1 #mode                     (a1)
1 #CAP-POLICY               (L)
1 #WEB-CHARGE               (A1) INIT <'Y'>
1 #1-YR-ago-a               (a8)
1 redefine #1-YR-ago-a
  2 #1-YR-AGO               (N8)
1 #YYYYMMDD  (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY     (N4)
  2 #MM       (N2)
  2 #DD       (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYmm     (N6)
  2 #ddd       (N2)
*
1 #out-rec            (a100)
1 #tab                (a1) INIT <H'09'>
1 #tran-code          (a4)
1 #amount             (a10)
1 #orig-mode          (a1/9)
1 #work-pay-to-date   (n8)
1 redefine #work-pay-to-date
  2 #work-pay-to-date-YYYYMM (n6)
  2 #work-pay-to-date-dd     (n2)
1 redefine #work-pay-to-date
  2 #work-pay-to-date-YYYY   (n4)
  2 #work-pay-to-date-mm     (n2)
  2 #work-pay-to-date-ddd    (n2)
1 #nbr-months                (n2)
1 #badj-amt                  (n7.2)
*
1 #new-adj-amt               (n7.2/9)
1 #new-adj-amt-p             (n7.2)            /* 03062012 vt
1 #has-adj                   (l)
1 #bill-adj-amt              (n7.2)
1 #difference                (n7.2)
1 #x                  (n7.2)              /* vt 05/23/2012
1 #ar-adjustment      (n7.2/9)            /* vt 05/23/2012
1 #st-adjustment      (n7.2)
1 #j                  (i2)
1 #plan               (a3)                    /* vt2
1 date-of-birth          (n8)   /* TT2
1 #source-program      (a8)              /* vt4
1 #badj-left          (n7.2)            /* vt4
1 #is-ps              (l)                     /* vt6
1 #msg                (a) dynamic             /* vt6
1 #s                  (i2)                    /* vt6 
1 #tot-due-amt        (n7.2)                  /* vt6  
1 #calc-nbr-months    (n2)                    /* vt6  
*
end-define
*
if #rest-amt = 0           /* 03/06/2012 vt
  escape routine
end-if                     /* 03/06/2012 vt
GET ST-V #STATUS-ISN
*
#datn          := *datn
#DATE-MMDDYYYY := FUNCTION-DATE(<#DATN>)
#YYYYMMDD      := *datn
SUBTRACT 1 FROM #YYYYMMDD.#YYYY
move #yyyymmdd to #1-yr-ago
#YYYYMMDD      := *datn
*
for-pol.
for #l 1 C@PAY-POLICY
  if cap-policy (#l) ne 'Y'
    if c@available-payment(#l) gE 1                                       /* vt6  \/
      for #s 1 c@available-payment(#l)
        if tran-type(#l,#s) = 'PREP' or = 'DUEP' or = 'RIDP' or = 'DUEPPS'
          add due-amount(#l,#s) to #tot-due-amt
        end-if
      end-for
      divide  #tot-due-amt into #rest-amt giving #calc-nbr-months
    else
      reset #calc-nbr-months
    end-if                                                                /* vt6  /\
    for #m 1 C@AVAILABLE-PAYMENT(#l)
      if tran-type(#l,#m) = 'BADJ'                                        /* vt4 \/
        if x-bill-adjust (#l) ge #rest-amt
          compute #badj-left := x-bill-adjust(#l) - #rest-amt
        else
          reset #badj-left
        end-if
      end-if                                                              /* vt4 /\
      if tran-type(#l,#m) = 'DUEPPS'                                      /* vt6 \/
        move true to #is-PS
      else
        reset     #is-ps
      end-if                                                              /* vt6 /\
      if tran-type(#l,#m) = 'PREP' OR= 'DUEP' OR= 'RIDP'
          or = 'DUEPPS'                                                   /* vt6
        if (payment-mode(#l,#m) = 'A' or = 'S' or  = 'Q' or = 'M')
          decide on first value of payment-mode(#l,#m)
            value 'A'
              move 12 to #nbr-months
            value 'S'
              move 6  to #nbr-months
            value 'Q'
              move 3  to #nbr-months
            value 'M'
              move 1  to #nbr-months
            none value
              ignore
          end-decide
        else
          move 1  to #nbr-months
        end-if
*
        if #calc-nbr-months lt #nbr-months                       /* vt6  \/
          move #calc-nbr-months to #nbr-months
        end-if                                                   /* vt6   /\
*
        #work-pay-to-date := cc-payment.paid-to-date(#l,#m)
        repeat until #YYYYMM LE #work-pay-to-date-yyyymm
            or #work-pay-to-date-yyyymm = 0
          for #n 1 to #nbr-months
            if  #rest-amt ge due-amount (#l,#m)
              compute #rest-amt = #rest-amt - due-amount (#l,#m)
              PERFORM ONE-MONTH-PAYMENT
            else
              move true to #has-adj
              if tran-type (#l,1) = 'BADJ'      /* Adjustment is the first transaction #m = 1
                move due-amount (#l,1) to #bill-adj-amt
              else
                reset #bill-adj-amt
              end-if
              #x := due-amount (#l,#m) - ( #rest-amt - #bill-adj-amt )
              DECIDE FOR FIRST CONDITION
                WHEN #X = 0
                  PERFORM ONE-MONTH-PAYMENT /* AR: due-amount (#l,#m);   ST: 1 month payment
                  #ar-adjustment (#l) := #bill-adj-amt /* AR: Adjustment #bill-adj-amt
                  RESET #st-adjustment
                WHEN #X > 0
                  #ar-adjustment (#l) := #rest-amt  /* AR: Adj #rest-amt
                  #ST-adjustment := #bill-adj-amt - #rest-amt
                WHEN #X < 0
                  PERFORM ONE-MONTH-PAYMENT  /* AR: due-amount (#l,#m);  ST: 1 month payment
                  #ar-adjustment (#l) := #rest-amt - due-amount (#l,#m) /* AR: Adj due-amount (#l,#m)
                  #st-adjustment := #bill-adj-amt - #ar-adjustment (#l)
                WHEN ANY
                  PERFORM APPLY-BADJ
                  RESET #rest-amt
                WHEN NONE IGNORE
              END-DECIDE
              escape bottom  (for-pol.)
            end-if
            #work-pay-to-date-mm := #work-pay-to-date-mm + 1
            if #work-pay-to-date-mm gt 12
              add 1 to #work-pay-to-date-yyyy
              subtract 12 from #work-pay-to-date-mm
            end-if
          end-for
          #nbr-months := 1
        end-repeat
      end-if
    end-for
  end-if
end-for
*
FOR #L 1 TO C@PAY-POLICY
  #issue-date    := cc-payment.issue-date (#l)
  move policy-nbr ( #L ) to #pol-nbr
  #cash-code:= 'I'
  DECIDE FOR EVERY CONDITION
    WHEN #tot-prep-amt ( #L,1) gt 0
      #scr-tran-amt (1) := #tot-prep-amt ( #L, 1 )
      #scr-tran-code(1) := 'PREP'
      perform prepare-ACCT-REG                             /* vt 09052012
      perform write-report                                 /* vt 09052012
    WHEN #tot-prep-amt ( #L,2) gt 0
      #scr-tran-amt (1) := #tot-prep-amt ( #L, 2 )
      #scr-tran-code(1) := 'DUEP'
      perform prepare-ACCT-REG                             /* vt 09052012
      perform write-report                                 /* vt 09052012
    WHEN #tot-prep-amt ( #L,3) gt 0
      #scr-tran-amt (1) := #tot-prep-amt ( #L, 3 )
      #scr-tran-code(1) := 'RIDP'
      perform prepare-ACCT-REG                             /* vt 09052012 \/
      perform write-report
    WHEN #tot-prep-amt ( #L,4) gt 0                        /* vt6  \/

      #inp-amt          := #tot-prep-amt(#l,4)
      perform apply-ps
      perform write-report                                 /* vt6  /\
*     WHEN ANY
*       perform prepare-ACCT-REG
*       perform write-report                               /* vt 09052012 /\
    WHEN NONE IGNORE
  END-DECIDE
END-FOR
*
FOR #L 1 TO C@PAY-POLICY
  IF #ar-adjustment (#l) > 0   /* Adjuustment with no payments
      and #tot-prep-amt ( #L, 1 ) = 0
      and #tot-prep-amt ( #L, 2 ) = 0
      and #tot-prep-amt ( #L, 3 ) = 0
    move policy-nbr ( #L ) to #pol-nbr                         /* vt5
    move st-v.plan (#L) to #plan                               /* vt5
    #scr-tran-code(1) := 'BADJ'
    perform prepare-ACCT-REG
    perform write-report
  END-IF
END-FOR
*
*****************
DEFINE SUBROUTINE ONE-MONTH-PAYMENT
*****************
move segment(#l) to #cc-x
#inp-amt   := due-amount (#l,#m)
#cash-code := 'I'
DECIDE ON FIRST VALUE OF tran-type(#l,#m)
  VALUE 'PREP'
    add due-amount (#l,#m) to #tot-prep-amt ( #l,1 )
    #inp-tr-cd := 'PREP'
    perform apply-prep

  VALUE 'DUEPPS'                                                        /* vt6
    if #is-ps                                                           /* vt6
      add due-amount(#l,#m) to #tot-prep-amt(#l,4)                      /* vt6                                      
    end-if
    
  VALUE 'DUEP'
    add due-amount (#l,#m) to #tot-prep-amt ( #l,2 )
    #inp-tr-cd := 'DUEP'
    perform apply-DUEP

  VALUE 'RIDP'
    add due-amount (#l,#m) to #tot-prep-amt ( #l,3 )
    #inp-tr-cd := 'RIDP'
    perform apply-RIDP
  NONE VALUE IGNORE
END-DECIDE
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-PREP
*****************
*
MOVE 1 TO #ILN1
MOVE #CC-X TO #LX
MOVE ST-V.ID-NUMBER TO #SCR-ID-SSN    (1)
#SCR-EFF-DT (1) := #DATE-MMDDYYYY-A
*
MOVE #INP-TR-CD     TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT       TO #SCR-TRAN-AMT  (1)
MOVE #CASH-CODE     TO #SCR-CASH-CODE (1)
*
* write '=' st-v.id-number '=' #cc-x '=' #lx
DECIDE ON FIRST VALUE ST-V.MODE(#LX)
  VALUE '4','2','1'
    #MODE := '0'
  VALUE 'A','S','Q'
    #MODE := 'M'
  VALUE 'G'
    IF ST-V.PAY-STATUS (#LX) = '21'
      #MODE := ST-V.MODE(#LX)
    ELSE
      #MODE := 'M'
    END-IF
  NONE VALUE
    #MODE := ST-V.MODE(#LX)
END-DECIDE
*
move st-v.plan (#lx) to #plan             /* vt2
MOVE 'NEWINVP' to #source-program                                /* vt4
RESET DATE-OF-BIRTH                                              /* TT2
DATE-OF-BIRTH := GET-DATE-OF-BIRTH(<ST-V.MEMBER-CONTACT-ID>)     /* TT2
CALLNAT 'CPREPSAM' #SCR-LINES
  DATE-OF-BIRTH                                                  /* TT2
  ST-V.STATUS            (#LX)
  ST-V.PAY-STATUS        (#LX)
  #MODE
  ST-V.PLAN              (#LX)
  ST-V.ISSUE-DATE        (#LX)
  ST-V.PAID-TO-DATE      (#LX)
  ST-V.PAID-UP-DATE      (#LX)
  ST-V.ANNUAL-PREM       (#LX)
  ST-V.MTD-ACV-PREM-ADJ  (1:9)
  ST-V.MONTH-ALLOC-AMT   (#LX)
  ST-V.X-BILL-ADJUST     (#LX)
  ST-V.X-BILL-DOLLAR     (#LX)
  ST-V.OWNERSHIP-FLAG    (#LX)
  ST-V.DUES-ALL-PAID-IND
  ST-V.DUES-BALANCE
  ST-V.DUES-FPF
  ST-V.DUES-TOT-PAID
  ST-V.INTRO-FLAG
  ST-V.RID-PLAN          (#LX)
  ST-V.RID-EFF-DT        (#LX)
  ST-V.RID-PD-TO         (#LX)
*
  #ILN1
  #ILN2
  #UPDATE-MODE
  #SG-TBL (1:15)
  #LX
  #CAP-POLICY                 /* YK3
  #ERROR-MESSAGE              /* YK1
  #WEB-CHARGE                 /* YK1
  #source-program             /* vt4
*
update (0203)
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-DUEP
*****************
*
MOVE 1 TO #ILN1
MOVE ST-V.ID-NUMBER   TO #SCR-ID-SSN    (1)
MOVE #DATE-MMDDYYYY-A TO #SCR-EFF-DT (1)
MOVE #INP-TR-CD       TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT         TO #SCR-TRAN-AMT  (1)
MOVE #CASH-CODE       TO #SCR-CASH-CODE (1)
*
CALLNAT 'CDUESSAM' #SCR-LINES
  ST-V.DUES-FPF
  ST-V.DUES-BALANCE
  ST-V.DUES-TOT-PAID
  #ILN1
  #ILN2
  #SG-TBL (1:15)
  #ERROR-MESSAGE
*
update (0203)                      /* vt 09/11/2014
*
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-PS                                             /* vt6    \/
*****************
*
RESET PARM-SVC
PARM-SVC.ACTION         := 'APPLY'
PARM-SVC.USER           := 'EDS'
PARM-SVC.SVC-MEMBER-ID  := ST-V.ID-NUMBER
PARM-SVC.SVC-PLAN       := 'PSM'
PARM-SVC.CASH-MODE      := #cash-code
PARM-SVC.SVC-PAY-AMOUNT := #inp-amt
PARM-SVC.TRANSACTION-DATN := #datn
PARM-SVC.TRANSACTION-TIMN := #TIMN
CALLNAT 'SVCN0003' PARM-SVC #MSG 1X ST-V.DEBIT-CREDIT-AMT
*
END-SUBROUTINE                                                        /* vt6     /\
*
*****************
DEFINE SUBROUTINE APPLY-RIDP
*****************
*
MOVE 1 TO #ILN1
MOVE #CC-X TO #LX
MOVE ST-V.ID-NUMBER   TO #SCR-ID-SSN    (1)
MOVE #DATE-MMDDYYYY-A TO #SCR-EFF-DT (1)
MOVE #INP-TR-CD       TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT         TO #SCR-TRAN-AMT  (1)
MOVE #CASH-CODE       TO #SCR-CASH-CODE (1)
*
CALLNAT 'CRIDRSAM' #SCR-LINES
  ST-V.X-RID-FPF     (1:9)
  ST-V.X-RID-BALANCE (1:9)
  ST-V.RID-TOT-PAID
  ST-V.RID-PLAN      (1:9)
  ST-V.RID-EFF-DT    (1:9)
  ST-V.RID-PD-TO     (1:9)
  #ORIG-MODE        (1:9)
*
  #ILN1
  #ILN2
  #SG-TBL (1:15)
  #LX
  #ERROR-MESSAGE
*
ST-V.RID-PD-TO(#CC-X) := ST-V.PAID-TO-DATE(#CC-X)                        /* YK1
update (0203)
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE APPLY-BADJ
*****************
MOVE #INP-TR-CD     TO #SCR-TRAN-CODE (1)
MOVE #INP-AMT       TO #SCR-TRAN-AMT  (1)
*
for #j 1 9
  callnat 'gplnmsxx' #pol-nbr-x cc-payment.ID-NUMBER #j
  if #pol-nbr-x = policy-nbr ( #L )
    find st-v with st-v.id-number = cc-payment.ID-NUMBER
      if #badj-left ne 0                                    /* vt4
        st-v.x-bill-adjust (#j) := #badj-left               /* vt4
      else                                                  /* vt4
        st-v.X-BILL-ADJUST (#j) := #ST-ADJUSTMENT
      end-if                                                /* vt4
      update (0534)
    end-find
    escape bottom
  end-if
end-for
*
end-subroutine
*
*****************
define subroutine Prepare-ACCT-REG
*****************
*
write '=' #scr-tran-amt(1) '=' #iln1

RESET AR-V
ar-v.id-number               := ST-V.id-number
ar-v.transaction-datn        := #datn
ar-v.transaction-timn        := #timn
ar-v.acct-date               := #datn
ar-v.cash-code               := 'I'
ar-v.name                    := ST-V.name
ar-v.clerk-id                := 'EDS'
ar-v.terminal-id             := *init-id
AR-V.TXN-CODE                := #SCR-TRAN-CODE (1)
AR-V.PROCESS-IND             := ST-V.PROCESS-IND
AR-V.AALP-FLAG               := #SCR-ALP-CODE  (1)
AR-V.POLICY-NUMBER           := #POL-Nbr
IF ar-v.txn-code = 'BADJ'
  AR-V.credit-amount         := #ar-adjustment ( #l )
  ar-v.sg-amount(1)          := #ar-adjustment (#l)                          /* vt2
ELSE
  AR-V.SG-AMOUNT           (1) := #scr-tran-amt (1)
  if #has-adj and (ar-v.txn-code = 'PREP'
      or #plan = 'SO' )                                                      /* vt2
    AR-V.SG-AMOUNT         (2) := #ar-adjustment (#l)
    AR-V.SG-CATEGORY-1     (2) := 'UN'
    ar-v.credit-amount         := #scr-tran-amt(1) + #ar-adjustment (#l)
  else
    AR-V.credit-amount         := #scr-tran-amt(1)
  end-if
END-IF
AR-V.MESSAGE-CODE            := '1'
IF #plan = 'SO'
  AR-v.txn-code := 'DUEP'                                    /* vt2
  ar-v.sg-category-1(1) := 'SO'                              /* vt2
  AR-V.TXN-ACCT-NUMBER  := 422
else
  AR-V.TXN-ACCT-NUMBER  := 420
end-if
*
if #plan = 'OL' OR= '20P' OR= '30P' OR= '7P' OR= 'SO' OR= 'SPF' OR= 'FSO'    /* vt2  \/
    OR= 'LT' OR= 'RT' OR = 'GPL' OR = 'EZ' or = 'GP2' or = 'AL' or = 'AL2'   /* vt5
  move #plan to ar-v.sg-category-2(1)
else
  if f-lt2-true(<#plan>)
    move 'VT' to ar-v.sg-category-2(1)
  else
    if (#plan = mask (NN'F'))
        or (#plan = mask (N'PF'))
        or (#plan = 'SPF')
      move 'FL' TO ar-v.sg-category-2(1)
    else
      move 'FX' to ar-v.sg-category-2(1)
    end-if
  end-if
end-if                                                                       /* vt2 /\
*
IF ar-v.txn-code = 'BADJ'
  AR-V.TXN-ACCT-NUMBER  := 420
END-IF
*
IF ar-v.txn-code = 'DUEP'
  AR-V.TXN-ACCT-NUMBER  := 422
END-IF
IF AR-V.TXN-CODE = 'RIDP'
  AR-V.TXN-ACCT-NUMBER  := 434
  ar-v.sg-category-2(1)  := 'RD'                 /* 09212012
END-IF
IF #TIMN = 0 AND AR-V.TXN-ACCT-NUMBER   NE 999
  AR-V.TXN-ACCT-NUMBER  := 999
END-IF
AR-V.DESCRIPTION             := 'INV'
*
if #SCR-TRAN-CODE (1) = 'PREP' or = 'RIDP'     /* 09212012
  IF #ISSUE-DATE GT #1-YR-AGO
    MOVE '1Y' TO AR-V.SG-CATEGORY-1 (1)
  ELSE
    MOVE 'RN' TO AR-V.SG-CATEGORY-1 (1)
  END-IF
END-IF
*
if #plan = 'SO'                                               /* vt3 \/
  move #plan to ar-v.sg-category-1(1)
end-if                                                        /* vt3 /\
*
STORE AR-V
* reset #new-adj-amt #difference #has-adj
end-subroutine
*
*****************
define subroutine write-report
*****************
#tran-code := #SCR-TRAN-CODE (1)
compress #datn-mm '/' #datn-dd '/' #datn-yyyy into #datn-a leaving no
move edited #scr-tran-amt(1) (EM=zzzzzz9.99) to #amount
compress st-v.id-number #tab
  #tran-code              #tab
  #amount                 #tab
  #datn-a                 #tab
  into #out-rec leaving no
write work 3 #out-rec
*
end-subroutine
*
end
