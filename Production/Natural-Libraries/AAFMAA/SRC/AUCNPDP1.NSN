* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNPI01'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   null
*   using PARSE XML statement and datastructure 'AUCPPC01'
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE  /* INPUT
1 #XML_OUTPUT            (A) DYNAMIC           /* OUTPUT
**LOCAL USING AUCPPC01
LOCAL USING AUCAPOLR
LOCAL USING AUCAHI01
LOCAL USING ERROR_L
*
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
1 #CX                          (I4)
1 #CY                          (I4)
1 #CZ                          (I4)
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 #LEN                         (I4)
1 BLANK                (A1) CONSTANT <' '>
END-DEFINE
*
RESET PolicyDetailsRequest
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  HeaderInfo.ErrorCode := VAL(#PARSE-ERROR)
  HeaderInfo.ErrorDescription := F-ERROR-DESCRIPTION(<#PARSE-ERROR>)
  CALLNAT 'AUCNHIS1' #XML_OUTPUT HeaderInfo
  ESCAPE ROUTINE
END-IF
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
/*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
HeaderInfo.ErrorCode := VAL(#PARSE-ERROR)
HeaderInfo.ErrorDescription := F-ERROR-DESCRIPTION(<#PARSE-ERROR>)
CALLNAT 'AUCNHIS1' #XML_OUTPUT HeaderInfo
ESCAPE ROUTINE
END-SUBROUTINE
/*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE
*
DECIDE FOR FIRST CONDITION
  WHEN PolicyNumber = BLANK
    HeaderInfo.ErrorCode := VAL(#MISSING-POLICY-NUMBER)
    HeaderInfo.ErrorDescription := F-ERROR-DESCRIPTION(<#MISSING-POLICY-NUMBER>)
    CALLNAT 'AUCNHIS1' #XML_OUTPUT HeaderInfo
  WHEN POLICYDETAILSREQUEST.ContactID = 0
    HeaderInfo.ErrorCode := VAL(#NO-INSURED-FOUND)
    HeaderInfo.ErrorDescription := F-ERROR-DESCRIPTION(<#NO-INSURED-FOUND>)
    CALLNAT 'AUCNHIS1' #XML_OUTPUT HeaderInfo
  WHEN HeaderInfo.ErrorCode = 0 /* NO ERRORS
*     CALLNAT 'AUCNPDG1' PolicyNumber POLICYDETAILSREQUEST.ContactID #XML_OUTPUT
    CALLNAT 'AUCNPDG1' PolicyDetailsRequest #XML_OUTPUT
  WHEN NONE  
    IGNORE
END-DECIDE



* IF HeaderInfo.ErrorCode = 0
*   IF PolicyNumber <> ' ' AND POLICYDETAILSREQUEST.ContactID > 0
*     CALLNAT 'AUCNPDG1' PolicyNumber POLICYDETAILSREQUEST.ContactID #XML_OUTPUT
*   ELSE
*     HeaderInfo.ErrorCode := 954
*     HeaderInfo.ErrorDescription := 'Missing policy number or Contact ID'
*     CALLNAT 'AUCNHIS1' #XML_INPUT PolicyDetailsRequest
*   END-IF
* END-IF

* -------- CALL THE PARSER
DEFINE SUBROUTINE PARSE-DOCUMENT
*
DECIDE ON FIRST #XML_PATH
  VALUE 'PolicyDetailsRequest//'
    IGNORE
  VALUE 'PolicyDetailsRequest'
    RESET INITIAL PolicyDetailsRequest
  VALUE 'PolicyDetailsRequest/ActionType//'
    IGNORE
  VALUE 'PolicyDetailsRequest/ActionType'
    IGNORE
  VALUE 'PolicyDetailsRequest/ActionType/$'
    PolicyDetailsRequest.ActionType := VAL(#XML_VALUE)
  VALUE 'PolicyDetailsRequest/ContactID//'
    IGNORE
  VALUE 'PolicyDetailsRequest/ContactID'
    IGNORE
  VALUE 'PolicyDetailsRequest/ContactID/$'
    PolicyDetailsRequest.ContactID := VAL(#XML_VALUE)
  VALUE 'PolicyDetailsRequest/User//'
    IGNORE
  VALUE 'PolicyDetailsRequest/User'
    IGNORE
  VALUE 'PolicyDetailsRequest/User/$'
    PolicyDetailsRequest.USER := #XML_VALUE
  VALUE 'PolicyDetailsRequest/PolicyNumber//'
    IGNORE
  VALUE 'PolicyDetailsRequest/PolicyNumber'
    IGNORE
  VALUE 'PolicyDetailsRequest/PolicyNumber/$'
    PolicyDetailsRequest.PolicyNumber := #XML_VALUE
  VALUE 'PolicyDetailsRequest/SystemSource//'
    IGNORE
  VALUE 'PolicyDetailsRequest/SystemSource'
    IGNORE
  VALUE 'PolicyDetailsRequest/SystemSource/$'
    PolicyDetailsRequest.SystemSource := #XML_VALUE
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
