* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNDAP1'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   C:\Users\nguentchev\workspace96\PolicyOwnership\Natural-Libraries\AUCPO\RES\AssignDesignation.xsd
*   using PARSE XML statement and datastructure 'AUCADA01'
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
1 #XML_OUTPUT            (A) DYNAMIC        /* Out
LOCAL USING AUCADA01
LOCAL USING PARSER-X
*
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
*
LOCAL
1 #CX                          (I4)
1 #CY                          (I4)
1 #CZ                          (I4)
1 XML_PARSER_XPATH_TYPE        (A1)
1 XML_PARSER_ERROR_TEXT        (A253)
1 XML_PARSER_RESPONSE          (I4)
1 XML_PARSER_CONTENT_IS_EMPTY  (L)
1 #LEN              (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 BLANK             (A1) CONST <' '>
1 #GETUPDATE        (I4) CONSTANT <4>
END-DEFINE
*
RESET DesignationPolicies
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  DesignationPolicies.ErrorCode := #PARSE-ERROR
  DesignationPolicies.ErrorDescription := 'Empty search data XML'
  CALLNAT 'AUCNDSS2' #XML_OUTPUT DesignationPolicies
  ESCAPE ROUTINE
END-IF
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
/*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
DesignationPolicies.ErrorCode := #PARSE-ERROR
DesignationPolicies.ErrorDescription := XML_PARSER_ERROR_TEXT
CALLNAT 'AUCNDAS1' #XML_OUTPUT DesignationPolicies
END-SUBROUTINE
*
DEFINE SUBROUTINE CALLBACK
/*                ========
#XML_VALUE := *TRIM (#XML_VALUE)
MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
PERFORM PARSE-DOCUMENT
END-SUBROUTINE
*
*  Put the code to do the "real" work
*
IF DesignationPolicies.InsuredContactID NE 0
  IF DesignationPolicies.ActionType = 0
    DesignationPolicies.ActionType := #GETUPDATE
  END-IF
  CALLNAT 'AUCNDAM1' DesignationPolicies
  CALLNAT 'AUCNDAS1' #XML_OUTPUT DesignationPolicies
END-IF
* ------------------------------------------------- CALL THE PARSER
**PARSE XML #XML_INPUT INTO PATH #XML_PATH NAME #XML_NAME VALUE #XML_VALUE
DEFINE PARSE-DOCUMENT
/*
DECIDE ON FIRST #XML_PATH
  VALUE 'DesignationPolicies//'
    IGNORE
  VALUE 'DesignationPolicies'
    RESET INITIAL DesignationPolicies
  VALUE 'DesignationPolicies/ActionType//'
    IGNORE
  VALUE 'DesignationPolicies/ActionType'
    IGNORE
  VALUE 'DesignationPolicies/ActionType/$'
    DesignationPolicies.ActionType := VAL(#XML_VALUE)
  VALUE 'DesignationPolicies/InsuredContactID//'
    IGNORE
  VALUE 'DesignationPolicies/InsuredContactID'
    IGNORE
  VALUE 'DesignationPolicies/InsuredContactID/$'
    DesignationPolicies.InsuredContactID := VAL(#XML_VALUE)
  VALUE 'DesignationPolicies/InsuredName//'
    IGNORE
  VALUE 'DesignationPolicies/InsuredName'
    IGNORE
  VALUE 'DesignationPolicies/InsuredName/$'
    DesignationPolicies.InsuredName := #XML_VALUE
  VALUE 'DesignationPolicies/Designations//'
    IGNORE
  VALUE 'DesignationPolicies/Designations'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation//'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation'
    ADD 1 TO DesignationPolicies.C@Designation
    #CX := DesignationPolicies.C@Designation
    EXPAND ARRAY DesignationPolicies.Designation TO (1:#CX)
  VALUE 'DesignationPolicies/Designations/Designation/DesignationID//'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation/DesignationID'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation/DesignationID/$'
    DesignationPolicies.DesignationID(#CX) := VAL(#XML_VALUE)
VALUE 'DesignationPolicies/Designations/Designation/DesignationStatus//'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation/DesignationStatus'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/DesignationStatus/$'
    DesignationPolicies.DesignationStatus(#CX) := #XML_VALUE
  VALUE 'DesignationPolicies/Designations/Designation/Policies//'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation/Policies'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy//'
    IGNORE
  VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy'
    ADD 1 TO DesignationPolicies.C@Policy_002(#CX)
    #CY := DesignationPolicies.C@Policy_002(#CX)
    EXPAND ARRAY DesignationPolicies.Policy_002 TO (*,1:#CY)
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/PolicyID//'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/PolicyID'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/PolicyID/$'
    DesignationPolicies.PolicyNumber(#CX,#CY) := #XML_VALUE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/InSameDesignation//'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/InSameDesignation'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/InSameDesignation/$'
    /* INFO: is boolean
    IF #XML_VALUE = 'TRUE'
      DesignationPolicies.InSameDesignation(#CX,#CY) := TRUE
    ELSE
      DesignationPolicies.InSameDesignation(#CX,#CY) := FALSE
    END-IF
    /*
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedDate//'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedDate'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedDate/$'
    DesignationPolicies.LastUpdatedDate(#CX,#CY) := VAL(#XML_VALUE)
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedTime//'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedTime'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedTime/$'
    DesignationPolicies.LastUpdatedTime(#CX,#CY) := VAL(#XML_VALUE)
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedUser//'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedUser'
    IGNORE
VALUE 'DesignationPolicies/Designations/Designation/Policies/Policy/LastUpdatedUser/$'
    DesignationPolicies.LastUpdatedUser(#CX,#CY) := #XML_VALUE
  VALUE 'DesignationPolicies/ErrorCode//'
    IGNORE
  VALUE 'DesignationPolicies/ErrorCode'
    IGNORE
  VALUE 'DesignationPolicies/ErrorCode/$'
    DesignationPolicies.ErrorCode := VAL(#XML_VALUE)
  VALUE 'DesignationPolicies/ErrorDescription//'
    IGNORE
  VALUE 'DesignationPolicies/ErrorDescription'
    IGNORE
  VALUE 'DesignationPolicies/ErrorDescription/$'
    DesignationPolicies.ErrorDescription := #XML_VALUE
  VALUE 'DesignationPolicies/User//'
    IGNORE
  VALUE 'DesignationPolicies/User'
    IGNORE
  VALUE 'DesignationPolicies/User/$'
    DesignationPolicies.User := #XML_VALUE
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
