* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
************************************************************************
* CLASS  NATURAL <XML TOOLKIT>
* ACHP0001 - ACH Billing Notice Information
*
* DESCRIPTION - creates XML file for each policy that has EZPay mode and
*               where payment was rejected by bank
* Work File 1 - Input file on UNIX created on request (ACH_RET_BILL.TXT)
* Work File 2 - XML file created for each record from the input file (ACHXml.xml)
* Work File 3 - ACH List file (ACHList.txt)
* Work File 4 - ACH DAL Index file (upload_index.xml)
* Work File 5 - ACH E-mail notification file (email.xml)
* Work File 6 - ACH E-mail DAL Index file (upload_index.xml)
************************************************************************
* YK3    06072011  Check Scanning Project
* YK4    07102015  Echeck / EZ-Pay email/billing notices with rejection code
* YK5    03092017  Change index file structure for DALe
*
DEFINE DATA
LOCAL USING GPRL0001      /* General Processes Properties
LOCAL USING GPRL0002      /* Index File XML Structure
LOCAL USING GPRA0003      /* Error Log
LOCAL USING ACHL0001      /* ACH Billing Notice Properties
LOCAL USING ACHA0001      /* Billing Notice XML Data
LOCAL USING ACHA0002      /* ACH Input File Data
LOCAL USING INVA0001      /* Check scan file data              YK3
LOCAL USING P_PARMS       /* Error processing                  YK3
*
LOCAL
1 XML             (A) DYNAMIC
1 XML-END         (A) DYNAMIC
1 #OUTPUT-RECORD  (A32000)
1 #INPUT-RECORD   (A100)
1 #DOCUMENT-LIST  (A) DYNAMIC
1 #UNIX-FILE-NAME (A) DYNAMIC
1 #WIN-FILE-NAME  (A) DYNAMIC
1 #POL-SEQ        (A2)
1 #ISSUE-DATE     (A10)
1 #REC-OUT        (N4)
1 #MAX-REC        (N5)  INIT <100>
1 #IND            (N5)
1 #DATN           (A8)
1 REDEFINE #DATN
  2 #YYYY         (A4)
  2 #MM           (A2)
  2 #DD           (A2)
1 #SUBMIT-DATE    (A10)
1 #HEADER         (L)
*
1 OUT             (A500)
1 #II             (I4)
1 #I              (I4)
1 #I1             (I4)
1 #J              (I4)
1 #K              (I4)
*
1 OUTDYN (A) DYNAMIC
1 OBJLEN (I4)
1 OBJEND (I4)
1 OBJSTART (I4)
1 OBJLINE (I4)
1 #TAB (A1) INIT <H'09'>
*
1 #CX             (I4)
1 #CY             (I4)
1 #CZ             (I4)
1 #CGA-ID         (N6)
1 #INDEX          (N2)
1 EMAIL-INDEX     (1:*)
  2 INS-CN        (A) DYNAMIC
  2 POL-NUM       (A) DYNAMIC
  2 EMAIL-TEMPLATE (A) DYNAMIC
1 #ACH-WINDOWS-TEST-DIR         (A) DYNAMIC CONST <'Ftp/EDS/Yelena/ACHBillUnix/'>
1 #EMAIL-WINDOWS-BACKUP-DIR     (A) DYNAMIC CONST <'Ftp/EDS/Yelena/EmailsTest/ACH/'>
1 #CHECK-SCAN-FILE              (A) DYNAMIC CONST <'AAFMAA_ACH_bills.txt'>
*
END-DEFINE
*
* INCLUDE GONERCXX
*
* Define ACH input file
* #ACH-REJECT-FILE := "/usr/SAG/AAFMAA/batch/workfiles/PERMDA/ACHPROCESSED/ACH_RET_BILL.TXT.20120216"
DEFINE WORK FILE 1 #ACH-REJECT-FILE
* Define ACH XML file - remove old XML file
COMPRESS #UNIX-DIR #ACH-XML-FILE INTO #UNIX-FILE-NAME leaving no
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #ACH-XML-FILE
DEFINE WORK FILE 2 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
* Define ACH List file - remove old list
COMPRESS #UNIX-DIR #ACH-LIST-FILE INTO #UNIX-FILE-NAME leaving no
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #ACH-LIST-FILE
DEFINE WORK FILE 3 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
* Define ACH DAL Index file - remove old index file
COMPRESS #UNIX-DIR #ACH-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #ACH-INDEX-FILE
DEFINE WORK FILE 4 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
* Define ACH E-mail file - remove old e-mail file
COMPRESS #UNIX-DIR #ACH-EMAIL-FILE INTO #UNIX-FILE-NAME leaving no
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #ACH-EMAIL-FILE
DEFINE WORK FILE 5 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 23 #ACH-EXCEPTION-FILE-NAME  /*  TYPE 'ASCII-COMPRESSED'
*
* YK3 Start
COMPRESS #UNIX-DIR #CHECK-SCAN-FILE INTO #UNIX-FILE-NAME leaving no
DEFINE WORK FILE 7 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
#INV-LINE-TYPE := 'H'
CALLNAT 'INVN0001' #INVOICE-RECORD #INV-LINE-TYPE #INV-I #INV-INVOICE-LINE
WRITE WORK 7 #INVOICE-RECORD
RESET #INVOICE-RECORD #INV-LINE-TYPE
* YK3 End
*
WRITE 'begin process...'
*
* Check on which server process is running (Test/Prod)
IF F-IS-DEV(<>)
  #ACH-WINDOWS-DIR   := #ACH-WINDOWS-TEST-DIR
  #EMAIL-WINDOWS-DIR := #EMAIL-WINDOWS-BACKUP-DIR
END-IF
*
* Clean up existing ACH Print Folder on Windows Server
CALLNAT 'GPRN0002' #CLEAN-DIR-SCRIPT-NAME #ACH-WINDOWS-DIR
* Create Record for XML tool from Tab-delimited file
*
RESET DOCUMENTS #ERROR
*
EXPAND ARRAY DOCUMENT TO (*:#MAX-REC)
EXPAND ARRAY EMAIL-INDEX TO (*:#MAX-REC)
#DATN  := *DATN
COMPRESS #MM '/' #DD '/' #YYYY INTO #SUBMIT-DATE LEAVING NO
*
READ WORK FILE 1 #INPUT-RECORD
  SEPARATE #INPUT-RECORD INTO #CN-NUMBER #POLICY-NUMBER #BILL-TYPE #PREM-CODE #PREM-AMOUNT
    #LOAN-CODE #LOAN-AMOUNT #CAP-LOAN-AMOUNT #OTHER-AMOUNT #REJ-CODE IGNORE WITH DELIMITER #TAB
*
  RESET #ERROR
  RESET BILLING-INFORMATION
  CALLNAT 'ACHN0001' INPUT-DATA BILLING-INFORMATION
  IF #ERROR NE ' '
    ESCAPE TOP
  END-IF
*
* Add entry to the array for creating index file
*
  #REC-OUT := #REC-OUT + 1
  IF #REC-OUT = 1
    #HEADER := TRUE
    PERFORM WRITE-HEADER
  END-IF
  IF #REC-OUT > #MAX-REC
    #MAX-REC := #MAX-REC + 100
    RESIZE ARRAY DOCUMENT TO (*:#MAX-REC)
    RESIZE ARRAY EMAIL-INDEX TO (*:#MAX-REC)
  END-IF
  #IND                       := #REC-OUT
  DOCUMENTS.CN(#IND)         := BILLING-INFORMATION.CN-NUMBER
  DOCUMENTS.POL-NUM(#IND)    := BILLING-INFORMATION.POLICY-NUMBER
* DOCUMENTS.DOCTYPE(#IND)    := #ACH-DOCTYPE
  DOCUMENTS.DOCTITLE(#IND)   := #ACH-DOCTYPE                     /* YK5  
  DOCUMENTS.SUBMITDATE(#IND) := #SUBMIT-DATE
  COMPRESS #DOCUMENT-NAME-PREFIX DOCUMENTS.POL-NUM(#IND) #DOCUMENT-NAME-SUFFIX
    INTO DOCUMENTS.FILENAME(#IND) LEAVING NO
  DOCUMENTS.DESCRIPTION(#IND) := #ACH-DOCUMENT-DESCRIPTION
  IF BILLING-INFORMATION.EMAIL-TEMPLATE = SCAN('Check')
    EXAMINE DOCUMENTS.DESCRIPTION(#IND) FOR 'EZPay' REPLACE 'Check'
  END-IF 
  DOCUMENTS.DELIVERABLE(#IND) := BILLING-INFORMATION.DELIVERABLE-IND
  DOCUMENTS.ORGANIZATION(#IND)      := 'AAFMAA'                  /* YK5
  DOCUMENTS.MEMBER-ACCESSIBLE(#IND) := 'FALSE'                   /* YK5
*
* Create XML Billing Notice
*
  RESET #OUTPUT-RECORD XML
  INCLUDE ACHCS001 "XML" "#CX" "#CY" "#CZ"
  #OUTPUT-RECORD := XML
  WRITE WORK FILE 2 VARIABLE #OUTPUT-RECORD
  CLOSE WORK FILE 2
*
* FTP XML Billing Notice
*
  COMPRESS #ACH-WINDOWS-DIR #DOCUMENT-NAME-PREFIX BILLING-INFORMATION.POLICY-NUMBER
    #FILE-EXTENSION INTO #WIN-FILE-NAME LEAVING NO
  COMPRESS #UNIX-DIR #ACH-XML-FILE INTO #UNIX-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
* Write record to the ACH List File
*
  IF BILLING-INFORMATION.DELIVERABLE-IND = 'N'
    write BILLING-INFORMATION.DELIVERABLE-IND
    #DOCUMENT-LIST := BILLING-NOTICE-ACH-UNDL
    COMPRESS 'Undeliverable Address for Policy '
      BILLING-INFORMATION.POLICY-NUMBER INTO OUT
    WRITE WORK FILE 23 VARIABLE OUT
  ELSE
    #DOCUMENT-LIST := BILLING-NOTICE-ACH
  END-IF
  COMPRESS #DOCUMENT-NAME-PREFIX BILLING-INFORMATION.POLICY-NUMBER
    #FILE-EXTENSION #TAB #DOCUMENT-LIST INTO OUT leaving no
  WRITE WORK FILE 3 VARIABLE OUT
*
* Create XML E-mail Notification
*
  IF BILLING-INFORMATION.OWNER-EMAIL NE ' '
    #II := #II + 1
    EMAIL-INDEX.INS-CN(#II)  := BILLING-INFORMATION.CN-NUMBER
    EMAIL-INDEX.POL-NUM(#II) := BILLING-INFORMATION.POLICY-NUMBER
    EMAIL-INDEX.EMAIL-TEMPLATE(#II) := BILLING-INFORMATION.EMAIL-TEMPLATE
    RESET #OUTPUT-RECORD XML
    INCLUDE ACHCS002 "XML" "#CX" "#CY" "#CZ"
    #OUTPUT-RECORD := XML
    WRITE WORK FILE 5 #OUTPUT-RECORD
  ELSE
    COMPRESS 'No E-mail address for policy '
      BILLING-INFORMATION.POLICY-NUMBER INTO OUT
    WRITE WORK FILE 23 VARIABLE OUT
  END-IF
*
END-WORK
*
IF #REC-OUT = 0
  ESCAPE ROUTINE
END-IF
*
#HEADER := FALSE
PERFORM WRITE-HEADER       /* Write the last line in e-mail file
CLOSE WORK FILE 5
*
* FTP XML E-mail Notification
* Email
COMPRESS #EMAIL-WINDOWS-DIR #ACH-EMAIL-FILE INTO #WIN-FILE-NAME LEAVING NO
COMPRESS #UNIX-DIR #ACH-EMAIL-FILE INTO #UNIX-FILE-NAME LEAVING NO
CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
* * Email Backup
COMPRESS #EMAIL-WINDOWS-BACKUP-DIR #ACH-EMAIL-FILE '_' #DATN INTO #WIN-FILE-NAME LEAVING NO
COMPRESS #UNIX-DIR #ACH-EMAIL-FILE INTO #UNIX-FILE-NAME LEAVING NO
CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
* FTP document list
*
CLOSE WORK FILE 3
COMPRESS #UNIX-DIR #ACH-LIST-FILE INTO #UNIX-FILE-NAME leaving no
COMPRESS #ACH-WINDOWS-DIR #ACH-LIST-FILE INTO #WIN-FILE-NAME leaving no
CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
* Number of Created documents in this run
*
C@DOCUMENT := #REC-OUT
RESIZE ARRAY DOCUMENT TO (*:C@DOCUMENT)
*
* Create Billing Notice Upload Index File
*
RESET #OUTPUT-RECORD XML
INCLUDE GPRCS002 "XML" "#CX" "#CY" "#CZ"
#INDEX := 1
PERFORM WRITE-FORMATTED-XML
CLOSE WORK FILE 4
*
* FTP Billing Notice Upload Index File
*
COMPRESS #UNIX-DIR #ACH-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
COMPRESS #ACH-WINDOWS-DIR #ACH-INDEX-FILE INTO #WIN-FILE-NAME leaving no
CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
* Create E-mail Notification Upload Index File
*
* Define ACH E-mail index file - remove old e-mail index file
COMPRESS #UNIX-DIR #ACH-EMAIL-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #ACH-EMAIL-INDEX-FILE
DEFINE WORK FILE 6 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
* *
RESET DOCUMENT(*)
IF #II > 0
  C@DOCUMENT := #II
  RESIZE ARRAY DOCUMENT TO (*:C@DOCUMENT)
  FOR #IND = 1 TO C@DOCUMENT
    DOCUMENTS.CN(#IND)          := EMAIL-INDEX.INS-CN(#IND)
    DOCUMENTS.POL-NUM(#IND)     := EMAIL-INDEX.POL-NUM(#IND)
*   DOCUMENTS.DOCTYPE(#IND)     := #EMAIL-DOCTYPE
    DOCUMENTS.DOCTITLE(#IND)    := #EMAIL-DOCTYPE                  /* YK5  
    DOCUMENTS.DESCRIPTION(#IND) := #EMAIL-DOCUMENT-DESCRIPTION
    DOCUMENTS.SUBMITDATE(#IND)  := #SUBMIT-DATE
    DOCUMENTS.TEMPLATENAME(#IND):= EMAIL-INDEX.EMAIL-TEMPLATE(#IND)
    IF DOCUMENTS.TEMPLATENAME(#IND) = SCAN('Check')
      EXAMINE DOCUMENTS.DESCRIPTION(#IND) FOR 'EZPay' REPLACE 'Check'
    END-IF  
    COMPRESS DOCUMENTS.POL-NUM(#IND) #EMAIL-DOCUMENT-NAME-SUFFIX
      INTO DOCUMENTS.FILENAME(#IND) LEAVING NO
    DOCUMENTS.ORGANIZATION(#IND)      := 'AAFMAA'                  /* YK5
    DOCUMENTS.MEMBER-ACCESSIBLE(#IND) := 'FALSE'                   /* YK5
  END-FOR
  RESET #OUTPUT-RECORD XML
  INCLUDE GPRCS002 "XML" "#CX" "#CY" "#CZ"
  #INDEX := 2
  PERFORM WRITE-FORMATTED-XML
  CLOSE WORK FILE 6
*
* FTP E-mail Notification Upload Index File
* Email
  COMPRESS #UNIX-DIR #ACH-EMAIL-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
  COMPRESS #EMAIL-WINDOWS-DIR #ACH-EMAIL-INDEX-FILE INTO #WIN-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
* Email Backup
  COMPRESS #UNIX-DIR #ACH-EMAIL-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
  COMPRESS #EMAIL-WINDOWS-BACKUP-DIR #ACH-EMAIL-INDEX-FILE '_' #DATN INTO #WIN-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
END-IF
* Rename Input File
*
CLOSE WORK FILE 1
#UNIX-FILE-NAME := 'X'
CALLNAT 'GPRN0002' #MV-SCRIPT-NAME #UNIX-FILE-NAME #ACH-REJECT-FILE
CLOSE WORK FILE 23
CALLNAT 'GPRN0002' #EMAIL-USER-SCRIPT-NAME #ACH-EXCEPTION-FILE-NAME
WRITE 'process ended'
*
******************************
DEFINE SUBROUTINE WRITE-HEADER
******************************
*
IF #HEADER
  RESET #OUTPUT-RECORD XML
  #OUTPUT-RECORD := '<?xml version="1.0" encoding="utf-8" ?>'
  WRITE WORK FILE 5 #OUTPUT-RECORD
  #OUTPUT-RECORD := '<EmailRecipients>'
  WRITE WORK FILE 5 #OUTPUT-RECORD
ELSE
  #OUTPUT-RECORD := '</EmailRecipients>'
  WRITE WORK FILE 5 #OUTPUT-RECORD
END-IF
END-SUBROUTINE
*************************************
DEFINE SUBROUTINE WRITE-FORMATTED-XML
*************************************
*
OBJSTART := 1
COMPRESS XML H'0A' INTO XML
EXAMINE xml FOR "<DOCUMENTS><" REPLACE WITH "<DOCUMENTS>" - H'0A' -"<"
EXAMINE xml FOR "></DOCUMENTS>" REPLACE WITH ">" - H'0A' -"</DOCUMENTS>"
EXAMINE xml FOR "</DOCUMENT><DOCUMENT>" REPLACE WITH "</DOCUMENT>" - H'0A' -"<DOCUMENT>"
* EXAMINE xml FOR "><" REPLACE WITH ">" - H'0A' -"<"
EXAMINE xml FOR H'0A' GIVING POSITION OBJEND
REPEAT WHILE OBJEND NE 0
  IF OBJSTART GT 0 THEN
    ADD OBJSTART TO OBJEND
  END-IF
  OBJLEN := OBJEND - OBJSTART -1
  IF OBJLEN > 0 THEN
    OUTDYN := SUBSTRING(xml, OBJSTART, OBJLEN)
    FOR OBJLINE = 1 TO *LENGTH(OUTDYN) STEP 500
      OUT := SUBSTR (OUTDYN,OBJLINE)
      IF #INDEX = 1
        WRITE WORK FILE 4 OUT
      ELSE
        WRITE WORK FILE 6 OUT
      END-IF
    END-FOR
  END-IF
  OBJSTART := OBJEND
  IF OBJSTART GT *LENGTH(xml)
    ESCAPE BOTTOM
  END-IF
  EXAMINE SUBSTRING(xml,OBJSTART) FOR H'0A' GIVING POSITION OBJEND
END-REPEAT
END-SUBROUTINE
*
END
