* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: OBJNAR01   AT PREMIER SERVICES
*
************************************************************************
*                       MODIFICATION LOG                               *
* USER   DATE      TAG     REASON                                      *
*                                                                      *
* NGG    12/30/2011  NG1     Initial creation.                         *
* vxt    04/23/2014  vt1     Change the function for formatting the name /Ticket 2579/
*
* ACCT-REG-V.CASH-CODE --- This is specific to the process and should be passed to the module that creates
*  the entry. For credit cards, it's a 'C', for allotment, its a 'G', for EZPay, its a 'E', etc
* ACCT-REG-V.POLICY-NUMBER --- We dont have a policy number for service plans.
*  Can we include CONTRACT-NUMBER? I think this field is only 16 characters though
* ACCT-REG-V.TXN-CODE         --- Should be DUEP
* ACCT-REG-V.TXN-ACCT-NUMBER  --- Should be 422
* ACCT-REG-V.DESCRIPTION      --- Any description something like service plan pymnt or maybe
*  the contract number here. Im open to suggestions
* ACCT-REG-V.SG-CATEGORY-1 --- This is where we want to use a 2 character representation of the plan
*  (maybe use PS for Premier Services)
* ACCT-REG-V.SG-CATEGORY-2 --- Set this to **
* ACCT-REG-V.SG-AMOUNT --- This should be equal to the transaction amount (TXN-AMOUNT)
*
DEFINE DATA
PARAMETER /* USING OBJAAR01
1 ACCT-REG
  2 ID-NUMBER (N6)            /* input
  2 TRANSACTION-DATN (P9)     /* input
  2 TRANSACTION-TIMN (P7)     /* input
  2 TXN-CODE (A4)             /* Input
  2 SEQUENCE-NUM (N1)         /* hard coded
  2 NAME (A25)                /* Contact source - use standard function
  2 TXN-ACCT-NUMBER (N3)      /* Input
  2 ACCT-DATE (N8)            /* Transaction date
  2 DATE-LAST-ACCT-UPDATE (N8)/* Status
  2 DEBIT-AMOUNT (P7.2)       /* Input - reverse
  2 CREDIT-AMOUNT (P7.2)      /* Input - apply
  2 DESCRIPTION (A20)         /* Hard coded
  2 MESSAGE-CODE (A1)         /* NA
  2 AALP-FLAG (A1)            /* NA
  2 CLERK-ID (A3)             /* Input
  2 TERMINAL-ID (A8)          /* Hard coded
  2 C#SUNGARD-INFO (I4)       /* Hard coded
  2 SG-CATEGORY-1 (A2/1:15)   /* Hard coded
  2 SG-CATEGORY-2 (A2/1:15)   /* Hard coded
  2 SG-AMOUNT (N6.2/1:15)     /* Transaction amount
  2 CASH-CODE (A1)            /* Input
  2 PROCESS-IND (A1)          /* Status
  2 MONTH-END (A1)            /* Input
  2 POLICY-NUMBER (A16)       /* NA
  2 USER-COMPANY (A1)         /* Input
  2 ACTIVITY-TYPE (A3)        /* NA
  2 STATUS-TYPE (A2)          /* NA
PARAMETER
1 #MSG               (A) DYNAMIC
LOCAL /* USING OBJLACRG
1 ACCT-REG-V VIEW OF A-ACCOUNTING-REGISTER
  2 ID-NUMBER (N6)
  2 TRANSACTION-DATN (P9)
  2 TRANSACTION-TIMN (P7)
  2 TXN-CODE (A4)
  2 SEQUENCE-NUM (N1)
  2 NAME (A25)
  2 TXN-ACCT-NUMBER (N3)
  2 ACCT-DATE (N8)
  2 DATE-LAST-ACCT-UPDATE (N8)
  2 DEBIT-AMOUNT (P7.2)
  2 CREDIT-AMOUNT (P7.2)
  2 DESCRIPTION (A20)
  2 MESSAGE-CODE (A1)
  2 AALP-FLAG (A1)
  2 CLERK-ID (A3)
  2 TERMINAL-ID (A8)
  2 CASH-CODE (A1)
  2 PROCESS-IND (A1)
  2 USER-COMPANY (A1)
  2 MONTH-END (A1)
  2 POLICY-NUMBER (A16)
  2 ACTIVITY-TYPE (A3)
  2 STATUS-TYPE (A2)
  2 C*SUNGARD-INFO
  2 SUNGARD-INFO (1:15) /* PE
    3 SG-CATEGORY-1 (A2)
    3 SG-CATEGORY-2 (A2)
    3 SG-AMOUNT (N6.2)
*
1 BLANK     (A1) CONST <' '>
1 #INIT-ID  (A8)
END-DEFINE
*  INPUTS
IF ACCT-REG.ID-NUMBER = 0
  COMPRESS *PROGRAM 'CN required' INTO #MSG
  ESCAPE ROUTINE
END-IF
IF ACCT-REG.TRANSACTION-DATN = 0
  MOVE *DATN TO ACCT-REG.TRANSACTION-DATN
END-IF
IF ACCT-REG.TRANSACTION-TIMN = 0
  MOVE *TIMN TO ACCT-REG.TRANSACTION-TIMN
END-IF
IF ACCT-REG.CASH-CODE = BLANK
  ACCT-REG.CASH-CODE := '$'
END-IF
IF ACCT-REG.MONTH-END = BLANK
  ACCT-REG.MONTH-END := 'N'
END-IF
* IF ACCT-REG.USER-COMPANY = BLANK  ACCT-REG.USER-COMPANY :='I'END-IF
IF ACCT-REG.CREDIT-AMOUNT = 0
    AND ACCT-REG.DEBIT-AMOUNT = 0
  COMPRESS *PROGRAM 'Transaction amount required' INTO #MSG
  ESCAPE ROUTINE
END-IF
IF ACCT-REG.TXN-CODE = BLANK
  ACCT-REG.TXN-CODE := 'DUEP'
END-IF
IF ACCT-REG.TXN-ACCT-NUMBER = 0
  ACCT-REG.TXN-ACCT-NUMBER := 422
END-IF
IF ACCT-REG.POLICY-NUMBER = BLANK
  ACCT-REG.POLICY-NUMBER     := 'Services'
END-IF
IF ACCT-REG.DESCRIPTION = BLANK
  ACCT-REG.DESCRIPTION     := 'Service Plan Dues'
END-IF
ACCT-REG.TERMINAL-ID     := *INIT-ID
IF ACCT-REG.CLERK-ID = BLANK
  MOVE *INIT-ID TO #INIT-ID
  ACCT-REG.CLERK-ID := FUNCTION-CLERK (< #INIT-ID >)
END-IF
IF ACCT-REG.SG-CATEGORY-1 (1) = BLANK
  ACCT-REG.SG-CATEGORY-1 (1) := 'PS'
END-IF
*  HARD CODED
ACCT-REG.SG-CATEGORY-2 (1) := '**'
* ACCT-REG.SEQUENCE-NUM      := 1
* Calculation
IF ACCT-REG.CREDIT-AMOUNT > 0
  ACCT-REG.SG-AMOUNT (1) := ACCT-REG.CREDIT-AMOUNT
ELSE
  ACCT-REG.SG-AMOUNT (1) := ACCT-REG.DEBIT-AMOUNT
END-IF
ACCT-REG.ACCT-DATE := ACCT-REG.TRANSACTION-DATN
ACCT-REG.NAME      := FUNCTION-MEMBER-NAME-2 (< ACCT-REG.ID-NUMBER >)    /* vt1 was function-member-name
*
RESET ACCT-REG-V
MOVE BY NAME ACCT-REG TO ACCT-REG-V
IF ACCT-REG.TXN-CODE = 'ADCR' OR= 'RDCR'
  RESET ACCT-REG-V.SG-CATEGORY-1 (1)
    ACCT-REG-V.SG-CATEGORY-2 (1)
    ACCT-REG-V.SG-AMOUNT (1)
END-IF
*
STORE ACCT-REG-V
*
ON ERROR
  COMPRESS *PROGRAM *ERROR-NR *ERROR-LINE INTO #MSG
  ESCAPE ROUTINE
END-ERROR
END
