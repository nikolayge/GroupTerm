* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNMSP1'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   null
*   using PARSE XML statement and datastructure 'AUCAMS01'
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
1 #XML_OUTPUT            (A) DYNAMIC        /* Out
LOCAL USING AUCAMS01
LOCAL USING AUCAER01
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY (L)
*
LOCAL
1 #LEN              (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 #GET              (I4) CONST <0>
1 #TRUE             (A4) CONST <'TRUE'>
1 #FALSE            (A5) CONST <'FALSE'>
1 #CONTACT-SYNCH    (I4) CONST <2>
1 #STATUS-ISN       (P8) CONST <0>
*
END-DEFINE
*
#AUCerror.ErrorTag := 'MembershipInfo'
RESET MembershipInfo
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  MembershipInfo.ErrorCode := #PARSE-ERROR
  MembershipInfo.ErrorDescription := 'Empty search data XML'
  CALLNAT 'AUCNMSS1' #XML_OUTPUT MembershipInfo
  ESCAPE ROUTINE
END-IF
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
MembershipInfo.ErrorCode := #PARSE-ERROR
MembershipInfo.ErrorDescription := XML_PARSER_ERROR_TEXT
CALLNAT 'AUCNMSS1' #XML_OUTPUT MembershipInfo
END-SUBROUTINE
*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE
*
CALLNAT 'AUCNMSM1' MembershipInfo                 /* Manage MembershipInfo
IF MembershipInfo.ErrorCode = 0
  END TRANSACTION
  CALLNAT 'MBRDATA'
    #STATUS-ISN
    #XML_OUTPUT
    #XML_PATH     /* Only output
    #XML_VALUE    /* Queue response
    #CONTACT-SYNCH
    MembershipInfo.ContactID
  MembershipInfo.ActionType := #GET
  CALLNAT 'AUCNMSM1' MembershipInfo               /* Get MembershipInfo
  CALLNAT 'AUCNMSS1' #XML_OUTPUT MembershipInfo   /* Send back manage MembershipInfo result
ELSE
  BACKOUT TRANSACTION
  #AUCerror.ErrorCode := MembershipInfo.ErrorCode
  #AUCerror.ErrorDescription := MembershipInfo.ErrorDescription
  CALLNAT 'AUCNERS1' #XML_OUTPUT #AUCerror
END-IF
* ------------------------------------------------- CALL THE PARSER
* PARSE XML #XML_INPUT INTO PATH #XML_PATH NAME #XML_NAME VALUE #XML_VALUE
*
DEFINE PARSE-DOCUMENT
/*     ==============
DECIDE ON FIRST #XML_PATH
  VALUE 'MembershipInfo//'
    IGNORE
  VALUE 'MembershipInfo'
    RESET INITIAL MembershipInfo
  VALUE 'MembershipInfo/ActionType//'
    IGNORE
  VALUE 'MembershipInfo/ActionType'
    IGNORE
  VALUE 'MembershipInfo/ActionType/$'
    MembershipInfo.ActionType := VAL(#XML_VALUE)
  VALUE 'MembershipInfo/ErrorCode//'
    IGNORE
  VALUE 'MembershipInfo/ErrorCode'
    IGNORE
  VALUE 'MembershipInfo/ErrorCode/$'
    MembershipInfo.ErrorCode := VAL(#XML_VALUE)
  VALUE 'MembershipInfo/ErrorDescription//'
    IGNORE
  VALUE 'MembershipInfo/ErrorDescription'
    IGNORE
  VALUE 'MembershipInfo/ErrorDescription/$'
    MembershipInfo.ErrorDescription := #XML_VALUE
  VALUE 'MembershipInfo/ContactID//'
    IGNORE
  VALUE 'MembershipInfo/ContactID'
    IGNORE
  VALUE 'MembershipInfo/ContactID/$'
    MembershipInfo.ContactID := VAL(#XML_VALUE)
  VALUE 'MembershipInfo/CN//'
    IGNORE
  VALUE 'MembershipInfo/CN'
    IGNORE
  VALUE 'MembershipInfo/CN/$'
    MembershipInfo.CN := VAL(#XML_VALUE)
  VALUE 'MembershipInfo/LastUpdatedDate//'
    IGNORE
  VALUE 'MembershipInfo/LastUpdatedDate'
    IGNORE
  VALUE 'MembershipInfo/LastUpdatedDate/$'
    MembershipInfo.LastUpdatedDate := VAL(#XML_VALUE)
  VALUE 'MembershipInfo/LastUpdatedTime//'
    IGNORE
  VALUE 'MembershipInfo/LastUpdatedTime'
    IGNORE
  VALUE 'MembershipInfo/LastUpdatedTime/$'
    MembershipInfo.LastUpdatedTime := VAL(#XML_VALUE)
  VALUE 'MembershipInfo/SystemSource//'
    IGNORE
  VALUE 'MembershipInfo/SystemSource'
    IGNORE
  VALUE 'MembershipInfo/SystemSource/$'
    MembershipInfo.SystemSource := #XML_VALUE
  VALUE 'MembershipInfo/User//'
    IGNORE
  VALUE 'MembershipInfo/User'
    IGNORE
  VALUE 'MembershipInfo/User/$'
    MembershipInfo.User := FUNCTION-WEB-USER(<#XML_VALUE>)(2)
  VALUE 'MembershipInfo/AAFMAAAccess//'
    IGNORE
  VALUE 'MembershipInfo/AAFMAAAccess'
    IGNORE
  VALUE 'MembershipInfo/AAFMAAAccess/$'
    IF #XML_VALUE = #TRUE
      MembershipInfo.AAFMAAAccess := 'Y'
    ELSE
      MembershipInfo.AAFMAAAccess := 'N'
    END-IF
  VALUE 'MembershipInfo/SpecialCode//'
    IGNORE
  VALUE 'MembershipInfo/SpecialCode'
    IGNORE
  VALUE 'MembershipInfo/SpecialCode/$'
    MembershipInfo.SpecialCode := #XML_VALUE
  VALUE 'MembershipInfo/MailSpecial//'
    IGNORE
  VALUE 'MembershipInfo/MailSpecial'
    IGNORE
  VALUE 'MembershipInfo/MailSpecial/$'
    MembershipInfo.MailSpecial := #XML_VALUE
  VALUE 'MembershipInfo/Newsletter//'
    IGNORE
  VALUE 'MembershipInfo/Newsletter'
    IGNORE
  VALUE 'MembershipInfo/Newsletter/$'
    MembershipInfo.Newsletter := #XML_VALUE
  VALUE 'MembershipInfo/Underwriting//'
    IGNORE
  VALUE 'MembershipInfo/Underwriting'
    IGNORE
  VALUE 'MembershipInfo/Underwriting/$'
    MembershipInfo.Underwriting := #XML_VALUE
  VALUE 'MembershipInfo/ApplSource//'
    IGNORE
  VALUE 'MembershipInfo/ApplSource'
    IGNORE
  VALUE 'MembershipInfo/ApplSource/$'
    MembershipInfo.ApplSource := #XML_VALUE
  VALUE 'MembershipInfo/AnnualMeeting//'
    IGNORE
  VALUE 'MembershipInfo/AnnualMeeting'
    IGNORE
  VALUE 'MembershipInfo/AnnualMeeting/$'
    MembershipInfo.AnnualMeeting := #XML_VALUE
  VALUE 'MembershipInfo/AnnualReport//'
    IGNORE
  VALUE 'MembershipInfo/AnnualReport'
    IGNORE
  VALUE 'MembershipInfo/AnnualReport/$'
    MembershipInfo.AnnualReport := #XML_VALUE
  VALUE 'MembershipInfo/BridgerVerify//'
    IGNORE
  VALUE 'MembershipInfo/BridgerVerify'
    IGNORE
  VALUE 'MembershipInfo/BridgerVerify/$'
    IF #XML_VALUE = #TRUE
      MembershipInfo.BridgerVerify := 'Y'
    ELSE
      MembershipInfo.BridgerVerify := 'N'
    END-IF
  VALUE 'MembershipInfo/ProcessInd//'
    IGNORE
  VALUE 'MembershipInfo/ProcessInd'
    IGNORE
  VALUE 'MembershipInfo/ProcessInd/$'
    MembershipInfo.ProcessInd := #XML_VALUE
  VALUE 'MembershipInfo/IntroFlag//'
    IGNORE
  VALUE 'MembershipInfo/IntroFlag'
    IGNORE
  VALUE 'MembershipInfo/IntroFlag/$'
    MembershipInfo.IntroFlag := #XML_VALUE
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
