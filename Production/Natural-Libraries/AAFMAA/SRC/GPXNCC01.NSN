* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
****************************************************************
* GPXNCC01 - Credit Card Information Add/Update
****************************************************************
* MODIFICATION LOG
*
* USER   DATE      TAG  REASON
* YAK    05122009  YAK  Initial Creation
****************************************************************
* YAK    07222009  YK1  Add transaction log for DELETE function.
*                       Write Member name to transaction log.
* vxt    08272014  vt1  /Ticket 3024/
* YAK    04012015  YK2  Use new PDA, delete unused fields (MC2)
* YAK    04012016  YK3  EB&P Phase 1,
*                       Add logic to determine type of update
*                       Move Transaction logic to generic module
*                       Add Update successful flag (for FPF process)
* YAK    05018016  YK4  EB&P Phase 2
*                       Pass USER-ID for delete function (for log file)
* YAK    05018016  YK5  Update Exp Date for eligible records with the same card
* YAK    09018016  YK6  Sync all Credit Card Information for eligible records
*                       with the same card number
* YAK    09018016  YK7  Allow multiple cards for CN, add default flag
* YAK    09272016  YK8  Fix 'Update successful' logic (AI with existing CC issue)
* YAK    10182016  YK9  Add 'Used for recurring payments' message
* YAK    05082017  YK9  Change CC-START-DATE to LAST-TIME-UPDATE
****************************************************************
*
DEFINE DATA
PARAMETER
1 #CC-ID-NUMBER             (N6)
1 #AT-CC-NUMBER             (A16) OPTIONAL
1 #AT-CC-EXP-DATE           (N6)  OPTIONAL
1 #UPDATE-SUCCESSFUL        (L)   OPTIONAL     /* YK3
LOCAL USING OBJACC01                           /* YK2
LOCAL USING GPRATR06                           /* YK3
LOCAL
1 MAP-FIELDS
  2 #ID-NUMBER               (N6)
  2 #ADDR-FORMAT-TYPE        (A20)
  2 #ADDR-FORMAT-CODE        (A1)
  2 #CC-ADDR-VALIDATION-CODE (A1)
  2 #NAME                    (A50)
  2 #ADDRESS-LINE-1          (A50)
  2 #ADDRESS-LINE-2          (A50)
  2 #CC-NUMBER               (A16)
  2 #CC-DEFAULT-IND          (A1)       /* YK7
  2 #RECURRING-MESSAGE       (A25)      /* YK9
  2 #CC-EXP-MONTH            (A2)
  2 #CC-EXP-YEAR             (A4)
  2 REDEFINE #CC-EXP-YEAR
    3 #CC-EXP-YEAR1          (N2)
    3 #CC-EXP-YEAR2          (A2)
  2 #CITY                    (A50)
  2 #STATE                   (A25)
  2 #STATE-CD                (A2)
  2 #ZIP-CODE                (N5)
  2 #POSTAL-CODE             (A10)
  2 #COUNTRY                 (A50)
  2 #START-DATE              (N8)
  2 #LAST-USER-UPDATE        (A3)
  2 #LAST-DATE-UPDATE        (N8)
*
1 #CV-PROTECT-FIELDS (C/8)
1 REDEFINE #CV-PROTECT-FIELDS
  2 #CV-ADDR         (C)
  2 #CV-CC-INFO      (C)
  2 #CV-DEF-IND      (C)       /* YK7
  2 #CV-EXP-DATE     (C)       /* YK3
  2 #CV-NAME         (C)
  2 #CV-DOM          (C)
  2 #CV-INT          (C)
  2 #CV-ADDR-TYPE    (C)
*
1 #TEXT              (A78)
1 #CC-NUM-CHECK      (A20)
1 #ERR-MSG           (A60)
1 #WORK-FIELD        (A) DYNAMIC
1 #ADMIN-ACCESS      (L)
1 #FULL-ACCESS       (L)
1 #SECURITY-CODE     (N2)
1 #RESPONSE          (A1)
* YK5 >
1 #BEFORE-CC-NUMBER  (A16)
1 #BEFORE-CC-ZIP     (N5)
1 #BEFORE-CC-POSTAL-CODE (A10)
1 #CC-GUID           (A32)
* < YK5
*
1 #FIELDS-MODIFIED
  2 #CV-NAME-MODIFIED     (L)
  2 #CV-ADDR-MODIFIED     (L)
  2 #CV-CC-INFO-MODIFIED  (L)
  2 #CV-DEF-IND-MODIFIED  (L)    /* YK7
  2 #CV-EXP-DATE-MODIFIED (L)    /* YK3
* 2 #CV-DOM-MODIFIED      (L)
* 2 #CV-INT-MODIFIED      (L)
*
1 FUNCTION_CODE    (A) DYNAMIC CONST <'CreditCardInfo'>    /* YK3
1 #CC-MODE         (A1/4) CONST <'0','1','2','4'>          /* YK7
1 #SERV-PAYABLE    (A3/2) CONST <'PSM','SAS'>              /* YK7
1 #value                      (A) DYNAMIC                  /* YK3
1 #WORK-EXP-DATE              (N6)
1 REDEFINE #WORK-EXP-DATE
  2 #WORK-EXP-MONTH           (A2)
  2 #WORK-EXP-YEAR            (A4)
*
1 #DATN              (N8)
1 REDEFINE #DATN
  2 #YYYY            (N4)
  2 #MM              (N2)
1 #I                 (N2)
1 #II                (N2)
1 #MEMBER-NAME       (A30)         /* YK1
* YK3 >
1 #TRAN-CONTACT-ID   (N8)
1 #USER-ID           (A8)
*
1 #CC-ACTION
  2 #GET-CC          (A) DYNAMIC CONST <'GET-CC'>
  2 #GET-BY-ISN      (A) DYNAMIC CONST <'GET-BY-ISN'>
  2 #GET-NUMBER      (A) DYNAMIC CONST <'HIST'>
  2 #ADD             (A) DYNAMIC CONST <'ADD'>
  2 #UPDATE          (A) DYNAMIC CONST <'UPDATE'>
  2 #UPDATE-DEF-IND  (A) DYNAMIC CONST <'UPDATE-DEF-IND'>     /* YK7
  2 #UPDATE-EXP-DATE (A) DYNAMIC CONST <'UPDATE-EXP-DATE'>
  2 #UPDATE-ADDRESS  (A) DYNAMIC CONST <'UPDATE-ADDRESS'>
  2 #DELETE          (A) DYNAMIC CONST <'DELETE'>
*
1 #ContactMSS        (A30) CONST <'  Please, Contact MSS Analyst'>
1 #MAP-ACTION
  2 #ADD-CARD          (L)
  2 #INIT-READ         (L)
  2 #READ-NEXT         (L)
  2 #READ-PREV         (L)
* < YK3
1 CC-ARRAY             (P9/3)
1 CC-INFO-V VIEW OF A-CC-INFO
  2 CC-NUMBER
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 C*ACTIVE-SEGMENTS
  2 MODE (9)
  2 STATUS (9)
  2 PAY-STATUS (9)                  /* YK9 >
  2 X-ALT-LP-IND (9)
  2 X-LOAN-AMOUNT(9)
  2 X-ALT-LP-IND-2 (9)
  2 X-LOAN-AMOUNT-2 (9)
  2 X-ALT-LP-AMT (9)                /* < YK9
1 SVC-MEMBER-V VIEW OF A-SVC-MEMBER
  2 SVC-ID-NUMBER
  2 SVC-PLAN
  2 SVC-STATUS
  2 SVC-MODE
1 #HOLD-ACTION (A) DYNAMIC
1 #RECURRING (L)
*
END-DEFINE
*
* Main Processing
*
SET KEY PF2  NAMED 'Save'
SET KEY PF11 NAMED 'Del'
SET KEY PF3  NAMED 'Retrn'
SET KEY PF1 = Help
*
DEFINE WINDOW CONFIRMATION
  SIZE 5*43
  BASE 10/20
  TITLE 'Confirmation'
  FRAMED ON
*
DEFINE WINDOW CC-INFO-UPDATE
  SIZE 20*80
  BASE 5/1
*
* Check security for Credit Card Information Update
* Credit card Process Security Code set to 13 on GEN-TABLE
RESET #ADMIN-ACCESS #FULL-ACCESS
#SECURITY-CODE := 13
IF FUNCTION-ACCESS(<*USER,#SECURITY-CODE>) = 'A'
  #ADMIN-ACCESS := #FULL-ACCESS := TRUE
ELSE
  IF FUNCTION-ACCESS(<*USER,#SECURITY-CODE>) = 'U'
    #FULL-ACCESS := TRUE
  ELSE
    #CV-PROTECT-FIELDS(*) := (AD=P)
    SET KEY PF2=OFF
    SET KEY PF11=OFF
    SET KEY PF1=OFF
  END-IF
END-IF
*
#DATN   := *DATN
#INIT-READ := TRUE
* YK8 >
IF #UPDATE-SUCCESSFUL SPECIFIED
  #UPDATE-SUCCESSFUL := true
END-IF
* < YK8
PERFORM POPULATE-MAP-FIELDS
SET WINDOW 'CC-INFO-UPDATE'
REPEAT
*
  RESET #TEXT
  SET WINDOW 'CC-INFO-UPDATE'
  INPUT TEXT #TEXT USING MAP 'GPXMCC01'
  DECIDE FOR EVERY CONDITION
    WHEN #CV-NAME MODIFIED
      #CV-NAME-MODIFIED := TRUE
    WHEN #CV-ADDR MODIFIED OR #CV-DOM MODIFIED OR #CV-INT MODIFIED
      #CV-ADDR-MODIFIED := TRUE
    WHEN #CV-CC-INFO MODIFIED
      #CV-CC-INFO-MODIFIED := TRUE
    WHEN #CV-DEF-IND MODIFIED              /* YK7
      #CV-DEF-IND-MODIFIED := TRUE         /* YK7
    WHEN #CV-EXP-DATE MODIFIED             /* YK3
      #CV-EXP-DATE-MODIFIED := TRUE        /* YK3
*     WHEN #CV-DOM MODIFIED
*       #CV-DOM-MODIFIED := TRUE
*     WHEN #CV-INT MODIFIED
*       #CV-INT-MODIFIED := TRUE
    WHEN #CV-ADDR-TYPE MODIFIED
      DECIDE ON FIRST VALUE #ADDR-FORMAT-CODE
        VALUE '1'
          #CV-INT           := (AD=P)
          #CV-DOM           := (AD=D)
          RESET #POSTAL-CODE
          #COUNTRY := 'US'                     /* YK2
        VALUE '2'
          #CV-DOM           := (AD=P)
          #CV-INT           := (AD=D)
          RESET #STATE-CD #ZIP-CODE #COUNTRY   /* YK2
        NONE VALUE
          IGNORE
      END-DECIDE
    WHEN NONE
      IGNORE
  END-DECIDE
  RESET #TEXT
  DECIDE ON FIRST VALUE *PF-KEY
    VALUE 'PF3'
      IF #CV-NAME-MODIFIED OR #CV-ADDR-MODIFIED
          OR #CV-CC-INFO-MODIFIED OR #CV-EXP-DATE-MODIFIED OR #CV-DEF-IND-MODIFIED     /* YK3
*         OR #CV-DOM-MODIFIED OR #CV-INT-MODIFIED
        #RESPONSE := 'N'
        INPUT WINDOW = 'CONFIRMATION'
          '  Your changes have not been saved.' /
          '  Do you want to save them? ' #RESPONSE (AD=UMT)
        IF #RESPONSE = 'N'
          SET WINDOW OFF
          ESCAPE ROUTINE
        ELSE
          PERFORM SAVE-CHANGES
          SET WINDOW OFF
          ESCAPE ROUTINE
        END-IF
      ELSE
        SET WINDOW OFF
        ESCAPE ROUTINE
      END-IF
    VALUE 'PF2'
      PERFORM SAVE-CHANGES
      SET WINDOW OFF
      ESCAPE ROUTINE
    VALUE 'PF4'
      #ADD-CARD := true
      PERFORM POPULATE-MAP-FIELDS
* YK7
    VALUE 'PF7'
      #READ-PREV := TRUE
      PERFORM POPULATE-MAP-FIELDS
    VALUE 'PF8'
      #READ-NEXT := TRUE
      PERFORM POPULATE-MAP-FIELDS
* YK7
    VALUE 'ENTR'
      PERFORM EDIT-CHECK
    VALUE 'PF11'
      PERFORM DELETE-RECORD
      ESCAPE ROUTINE
    NONE VALUE
      IGNORE
  END-DECIDE
END-REPEAT
*
******************************
DEFINE SUBROUTINE SAVE-CHANGES
******************************
*
PERFORM EDIT-CHECK
#RESPONSE := 'Y'
INPUT WINDOW = 'CONFIRMATION'
  '      Address/Name Confirmed? ' #RESPONSE (AD=UMT)
#CC-ADDR-VALIDATION-CODE := #RESPONSE
SET WINDOW OFF
PERFORM UPDATE-RECORD
* YK7 >
* Check if transaction log needed for default ind reset
IF #NUMBER-OF-RECORDS > 1 AND #ISN <> 0 AND
    (BEFORE_IMAGE.CC-DEFAULT-IND = 'N' OR BEFORE_IMAGE.CC-DEFAULT-IND = ' ')
    AND AFTER_IMAGE.CC-DEFAULT-IND  = 'Y'
  #HOLD-ACTION := PARM-CC-DATA.#ACTION
  PERFORM TR-LOG-RESET-DEFAULT-IND
  PARM-CC-DATA.#ACTION := #HOLD-ACTION
END-IF
* < YK7
* YK5 >
IF #ACTION = #UPDATE-EXP-DATE OR #ACTION = #UPDATE OR #ACTION = #UPDATE-ADDRESS
  FIND NUMBER CC-INFO-V WITH CC-NUMBER = #BEFORE-CC-NUMBER
  IF (#ACTION = #UPDATE-EXP-DATE AND *NUMBER > 1) OR (#ACTION = #UPDATE AND *NUMBER > 0)
      OR (#ACTION = #UPDATE-ADDRESS AND *NUMBER > 1)
    CALLNAT 'GPXNCC03' PARM-CC-DATA.#ACTION PARM-CC-DATA.#PARM-ID-NUMBER #CC-GUID #CC-NUMBER
      #BEFORE-CC-NUMBER #BEFORE-CC-ZIP #BEFORE-CC-POSTAL-CODE
  END-IF
END-IF
* > YK5
END-SUBROUTINE
*
****************************
DEFINE SUBROUTINE EDIT-CHECK
****************************
*
RESET #ERR-MSG
IF #CC-NUMBER = ' '
  #TEXT := 'CC Number cannot be blank'
  REINPUT FULL WITH TEXT #TEXT MARK *#CC-NUMBER
END-IF
IF #CV-CC-INFO-MODIFIED                            /* YK3
  RESET #CC-NUM-CHECK #ERR-MSG
  #CC-NUM-CHECK := #CC-NUMBER
  CALLNAT 'GCKDGSXX' #CC-NUM-CHECK #ERR-MSG
END-IF
IF #ERR-MSG NE ' '
  #TEXT := #ERR-MSG
  REINPUT FULL WITH TEXT #TEXT MARK *#CC-NUMBER
END-IF
* YK7 >
* IF #CV-CC-INFO-MODIFIED                            /* YK3
*   FIND CC-INFO-V WITH ID-NUMBER = #ID-NUMBER
*     IF CC-INFO-V.CC-NUMBER = FUNCTION-MASK(<#CC-NUMBER,'*'>)
*       #TEXT := 'You already have this card on file...'
*       REINPUT FULL WITH TEXT #TEXT MARK *#CC-NUMBER
*     END-IF
*   END-FIND
* END-IF
* < YK7
IF #CC-EXP-MONTH NE MASK(NN)
  #TEXT := 'Month value has to be two digits - 01,02,...'
  REINPUT FULL WITH TEXT #TEXT MARK *#CC-EXP-MONTH
ELSE
  IF VAL(#CC-EXP-MONTH) < 1 OR VAL(#CC-EXP-MONTH) > 12
    #TEXT := 'Month value has to be between 1 and 12'
    REINPUT WITH TEXT #TEXT MARK *#CC-EXP-MONTH
  END-IF
END-IF
IF #CC-EXP-YEAR = MASK(NNNN)
  IF VAL(#CC-EXP-YEAR) < #YYYY
    #TEXT := 'Expiration Year has to be in future'
    REINPUT FULL WITH TEXT #TEXT MARK *#CC-EXP-YEAR
  END-IF
ELSE
  #TEXT := 'Expiration Year has to be Numeric'
  REINPUT FULL WITH TEXT #TEXT MARK *#CC-EXP-MONTH
END-IF
IF VAL(#CC-EXP-YEAR) = #YYYY AND VAL(#CC-EXP-MONTH) < #MM      /* vt1 was '<='
  #TEXT := 'Expiration Year/Month has to be in future'
  REINPUT FULL WITH TEXT #TEXT MARK *#CC-EXP-MONTH
END-IF
IF #ADDR-FORMAT-CODE = '1'
  IF #CITY = ' '
    #TEXT := 'Please, enter City for Domestic Address'
    REINPUT FULL WITH TEXT #TEXT MARK *#CITY
  END-IF
  IF #STATE-CD <> ' '
    #WORK-FIELD := #STATE-CD
    #TEXT := FUNCTION-STATE-CODE(<#WORK-FIELD,'V'>)
  END-IF
  IF #STATE-CD = ' ' OR #TEXT = ' '
    #TEXT := 'Please, enter State Code or select State using PF1'
    REINPUT FULL WITH TEXT #TEXT MARK *#STATE-CD
  END-IF
  IF #ZIP-CODE = 0
    #TEXT := 'Please, enter ZIP Code for Domestic Address'
    REINPUT FULL WITH TEXT #TEXT MARK *#ZIP-CODE
  END-IF
ELSE
  IF #ADDR-FORMAT-CODE = '2' AND #COUNTRY = ' '
    #TEXT := 'Please, enter Country for International Address'
    REINPUT FULL WITH TEXT #TEXT MARK *#COUNTRY
  END-IF
END-IF
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE UPDATE-RECORD
*******************************
*
IF #ISN = 0
  #ACTION := #ADD
  RESET BEFORE_IMAGE                /* YK3
ELSE
  PERFORM POPULATE-BEFORE-IMAGE
* YK3 >
  DECIDE FOR FIRST CONDITION
    WHEN #CV-CC-INFO-MODIFIED
      #ACTION := #UPDATE
    WHEN #CV-EXP-DATE-MODIFIED
      #ACTION := #UPDATE-EXP-DATE
    WHEN #CV-ADDR-MODIFIED OR #CV-NAME-MODIFIED
      #ACTION := #UPDATE-ADDRESS
    WHEN #CV-DEF-IND-MODIFIED
      #ACTION := #UPDATE-DEF-IND
    WHEN NONE
      ESCAPE ROUTINE
  END-DECIDE
END-IF
* > YK3
PERFORM POPULATE-PARAMETER-FIELDS
CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
* YK3 >
IF PARM-CC-DATA.#RESULT-CODE = ' '
  PERFORM POPULATE-AFTER-IMAGE
  PERFORM WRITE-TRANSACTION-LOG
  RESET #FIELDS-MODIFIED
  IF #ACTION = #ADD
    #Text := '  Credit Card Added successfully'
  ELSE
    #Text := '  Credit Card Info Updated successfully'
  END-IF
  INPUT WINDOW = 'CONFIRMATION' (IP=OFF)
    #Text (AD=O)
ELSE
  IF #UPDATE-SUCCESSFUL SPECIFIED                     /* YK8
    #UPDATE-SUCCESSFUL := false                       /* YK8
  END-IF                                              /* YK8
  #Text := F-ERROR-DESCRIPTION(<PARM-CC-DATA.#RESULT-CODE>)
  INPUT WINDOW = 'CONFIRMATION'  (IP=OFF)
    #Text  (AD=O) /
    #ContactMSS (AD=O)
END-IF
SET WINDOW OFF
* > YK3
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE DELETE-RECORD
*******************************
* YK7 >
PERFORM VALIDATE-RECURRING
IF #RECURRING
  DECIDE FOR FIRST CONDITION
    WHEN #CC-DEFAULT-IND = 'Y' AND PARM-CC-DATA.#NUMBER-OF-RECORDS > 1
      #Text := 'Please, select other card as default first'
    WHEN #CC-DEFAULT-IND = 'Y' AND PARM-CC-DATA.#NUMBER-OF-RECORDS = 1
      #Text := 'Cannot delete - you have recurring CC payment'
    WHEN ANY
      REINPUT FULL WITH TEXT #TEXT
    WHEN NONE
      IGNORE
  END-DECIDE
END-IF
* < YK7
#RESPONSE := 'Y'                                 /* YK1
INPUT WINDOW = 'CONFIRMATION'
  'Do you really want to delete Credit Card' /
  '   Information for this member? ' #RESPONSE (AD=UMT)
SET WINDOW OFF                                   /* YK1
IF #RESPONSE = 'Y'                               /* YK1
  IF #ISN NE 0
    #CV-ADDR-MODIFIED := #CV-NAME-MODIFIED := TRUE
    #CV-CC-INFO-MODIFIED := #CC-ADDR-VALIDATION-CODE := TRUE
    RESET #NAME #CC-NUMBER #CC-EXP-MONTH #CC-EXP-YEAR
      #ADDRESS-LINE-1 #ADDRESS-LINE-2 #CITY
      #STATE-CD #ZIP-CODE #POSTAL-CODE #COUNTRY    /* YK2
      #CC-ADDR-VALIDATION-CODE
    PERFORM POPULATE-BEFORE-IMAGE                  /* YK3
    RESET AFTER_IMAGE                              /* YK3
    #ACTION := #DELETE
    PARM-CC-INFO.LAST-USER-UPDATE := *USER         /* YK4
    CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
* YK3 >
    IF PARM-CC-DATA.#RESULT-CODE = ' '
      PERFORM WRITE-TRANSACTION-LOG
      INPUT WINDOW = 'CONFIRMATION'
        '  Credit Card Info Deleted successfully'
    ELSE
      IF #UPDATE-SUCCESSFUL SPECIFIED                /* YK8
        #UPDATE-SUCCESSFUL := false                  /* YK8
      END-IF                                         /* YK8
      #Text := F-ERROR-DESCRIPTION(<PARM-CC-DATA.#RESULT-CODE>)
      INPUT WINDOW = 'CONFIRMATION' (IP=OFF)
        #Text (AD=O) /
        #ContactMSS (AD=O)
    END-IF
    SET WINDOW OFF
* < YK3
  END-IF
END-IF
* YK7 >
* Check if transaction log needed for default ind set
IF #NUMBER-OF-RECORDS > 0 AND #ISN <> 0 AND BEFORE_IMAGE.CC-DEFAULT-IND = 'Y'
  #HOLD-ACTION := PARM-CC-DATA.#ACTION
  PERFORM TR-LOG-RESET-DEFAULT-IND
END-IF
* < YK7
*
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE VALIDATE-RECURRING
************************************
*
RESET #Text #RECURRING
FIND(1) ST-V WITH ID-NUMBER = PARM-CC-DATA.#PARM-ID-NUMBER
  FOR #II = 1 TO C*ACTIVE-SEGMENTS
    IF (MODE(#II) = #CC-MODE(*) AND STATUS(#II) = 'D' AND PAY-STATUS(#II) < '40')
        OR  (X-ALT-LP-IND(#II) = '8' AND X-LOAN-AMOUNT(#II) NE 0)                     /* YK9 >
        OR  (X-ALT-LP-IND-2(#II) = '8' AND X-LOAN-AMOUNT-2(#II) NE 0)
        OR  (X-ALT-LP-IND (#II) = 'C') AND (X-ALT-LP-AMT(#II) NE 0)                   /* < YK9
      #RECURRING := true
      ESCAPE ROUTINE
    END-IF
  END-FOR
END-FIND

FIND SVC-MEMBER-V WITH SVC-ID-NUMBER = PARM-CC-DATA.#PARM-ID-NUMBER
  ACCEPT IF SVC-MEMBER-V.SVC-PLAN = #SERV-PAYABLE(*)
  IF (SVC-STATUS = 'A' OR SVC-PLAN = 'SAS' AND SVC-STATUS = 'P')
      AND SVC-MEMBER-V.SVC-MODE = #CC-MODE(*)
    #RECURRING := true
    ESCAPE BOTTOM
  END-IF
END-FIND

END-SUBROUTINE
*
*************************************
DEFINE SUBROUTINE POPULATE-MAP-FIELDS
*************************************
*
RESET MAP-FIELDS PARM-CC-INFO #CV-DEF-IND
* Assign conditional PF-KEYs
#PARM-ID-NUMBER := #ID-NUMBER := #CC-ID-NUMBER
DECIDE FOR FIRST CONDITION
  WHEN #ADD-CARD
    RESET PARM-CC-DATA.#ISN
    SET KEY PF4=OFF
  WHEN #INIT-READ
    #ACTION := #GET-CC
    CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO CC-ARRAY(*)
    #I := 1
    DECIDE FOR EVERY CONDITION
      WHEN #NUMBER-OF-RECORDS > 0 AND #NUMBER-OF-RECORDS < 3
        SET KEY PF4  NAMED 'Add'
      WHEN #NUMBER-OF-RECORDS > 1
        SET KEY PF8  NAMED 'Next'
      WHEN NONE
        IGNORE
    END-DECIDE
  WHEN #READ-NEXT
    #I := #I + 1
    PARM-CC-DATA.#ISN := CC-ARRAY(#I)
    #ACTION := #GET-BY-ISN
    CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
    SET KEY PF7  NAMED 'Prev'
    IF #I = #NUMBER-OF-RECORDS
      SET KEY PF8=OFF
    END-IF
  WHEN #READ-PREV
    #I := #I - 1
    PARM-CC-DATA.#ISN := CC-ARRAY(#I)
    #ACTION := #GET-BY-ISN
    CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
    SET KEY PF8  NAMED 'Next'
    IF #I = 1
      SET KEY PF7=OFF
    END-IF
  WHEN NONE
    IGNORE
END-DECIDE
*
IF #NUMBER-OF-RECORDS = 0 OR #ADD-CARD
  CALLNAT 'GPXNCC02' PARM-CC-DATA PARM-CC-INFO
END-IF
#NAME           := PARM-CC-INFO.CCHOLDER-NAME
#ADDRESS-LINE-1 := PARM-CC-INFO.CCHOLDER-STREET-ADDR
#ADDRESS-LINE-2 := PARM-CC-INFO.CCHOLDER-ADDL-ADDR
#CITY           := PARM-CC-INFO.CCHOLDER-CITY
#WORK-FIELD     := PARM-CC-INFO.CCHOLDER-STATE-CD
#STATE          := FUNCTION-STATE-CODE(<#WORK-FIELD,'S'>)
#STATE-CD       := PARM-CC-INFO.CCHOLDER-STATE-CD
#ZIP-CODE       := PARM-CC-INFO.CCHOLDER-ZIP-CODE
#COUNTRY        := PARM-CC-INFO.CCHOLDER-COUNTRY
#POSTAL-CODE    := PARM-CC-INFO.CCHOLDER-POSTAL-CODE
#CC-ADDR-VALIDATION-CODE := PARM-CC-INFO.CC-ADDR-VALIDATION-CODE
#CC-NUMBER      := PARM-CC-INFO.CC-NUMBER
* YK7 >
#CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND
IF #CC-DEFAULT-IND <> 'Y'
  #CC-DEFAULT-IND := 'N'
ELSE
  #CV-DEF-IND := (AD=P)
END-IF
* < YK7
#CC-EXP-MONTH   := PARM-CC-INFO.CC-EXPIRATION-MONTH
#CC-EXP-YEAR    := PARM-CC-INFO.CC-EXPIRATION-YEAR
#ADDR-FORMAT-CODE := PARM-CC-INFO.CC-ADDR-FORMAT-CODE
#LAST-DATE-UPDATE := PARM-CC-INFO.LAST-DATE-UPDATE
#LAST-USER-UPDATE := FUNCTION-CLERK(<PARM-CC-INFO.LAST-USER-UPDATE>)
DECIDE ON FIRST VALUE #ADDR-FORMAT-CODE
  VALUE '1'
    #ADDR-FORMAT-TYPE := 'Domestic'
    #CV-INT           := (AD=P)
  VALUE '2'
    #ADDR-FORMAT-TYPE := 'International'
    #CV-DOM           := (AD=P)
  NONE VALUE
    IGNORE
END-DECIDE
IF #AT-CC-NUMBER SPECIFIED AND #AT-CC-EXP-DATE SPECIFIED
  IF #AT-CC-NUMBER NE ' ' AND #AT-CC-EXP-DATE NE 0
    #CC-NUMBER      := #AT-CC-NUMBER
    #WORK-EXP-DATE  := #AT-CC-EXP-DATE
    #CC-EXP-MONTH   := #WORK-EXP-MONTH
    #CC-EXP-YEAR    := #WORK-EXP-YEAR
    IF #AT-CC-NUMBER NE PARM-CC-INFO.CC-NUMBER OR
        #WORK-EXP-YEAR  NE PARM-CC-INFO.CC-EXPIRATION-YEAR OR
        #WORK-EXP-MONTH NE PARM-CC-INFO.CC-EXPIRATION-MONTH
      #CV-CC-INFO-MODIFIED := TRUE
    END-IF
  END-IF
END-IF
* YK9 >
PERFORM VALIDATE-RECURRING
IF #CC-DEFAULT-IND = 'Y'
  IF #RECURRING
    #RECURRING-MESSAGE := 'Has recurring payments'
  ELSE
    #RECURRING-MESSAGE := 'No recurring payments'
  END-IF
END-IF
* < YK9
RESET #MAP-ACTION
*
END-SUBROUTINE
*
*******************************************
DEFINE SUBROUTINE POPULATE-PARAMETER-FIELDS
*******************************************
*
PARM-CC-DATA.#PARM-ID-NUMBER      := #ID-NUMBER
PARM-CC-INFO.CCHOLDER-NAME        := #NAME
PARM-CC-INFO.CCHOLDER-STREET-ADDR := #ADDRESS-LINE-1
PARM-CC-INFO.CCHOLDER-ADDL-ADDR   := #ADDRESS-LINE-2
PARM-CC-INFO.CCHOLDER-CITY        := #CITY
IF #STATE <> ' '                                                          /* YK2
  #WORK-FIELD                := #STATE
  PARM-CC-INFO.CCHOLDER-STATE-CD          := FUNCTION-STATE-CODE(<#WORK-FIELD,'C'>)
  PARM-CC-INFO.CCHOLDER-STATE-CD          := #STATE-CD
END-IF
PARM-CC-INFO.CCHOLDER-ZIP-CODE          := #ZIP-CODE
PARM-CC-INFO.CCHOLDER-POSTAL-CODE       := #POSTAL-CODE
PARM-CC-INFO.CCHOLDER-COUNTRY           := #COUNTRY
PARM-CC-INFO.CC-NUMBER                  := #CC-NUMBER
* YK7 >
PARM-CC-INFO.CC-DEFAULT-IND             := #CC-DEFAULT-IND
IF PARM-CC-INFO.CC-DEFAULT-IND = 'N'
  RESET PARM-CC-INFO.CC-DEFAULT-IND
END-IF
* < YK7
PARM-CC-INFO.CC-EXPIRATION-MONTH        := #CC-EXP-MONTH
PARM-CC-INFO.CC-EXPIRATION-YEAR         := #CC-EXP-YEAR
PARM-CC-INFO.CC-ADDR-FORMAT-CODE        := #ADDR-FORMAT-CODE
PARM-CC-INFO.CC-ADDR-VALIDATION-CODE    := #CC-ADDR-VALIDATION-CODE
IF PARM-CC-INFO.CC-ADDR-FORMAT-CODE = '1'
  RESET PARM-CC-INFO.CCHOLDER-POSTAL-CODE
  PARM-CC-INFO.CCHOLDER-COUNTRY := 'US'                                                   /* YK2
ELSE
  RESET PARM-CC-INFO.CCHOLDER-STATE-CD PARM-CC-INFO.CCHOLDER-ZIP-CODE
END-IF
*
PARM-CC-INFO.LAST-DATE-UPDATE := *DATN
PARM-CC-INFO.LAST-TIME-UPDATE := *TIMN                  /* YK10
PARM-CC-INFO.LAST-USER-UPDATE := *USER
END-SUBROUTINE
* YK3 >
******************************************
DEFINE SUBROUTINE TR-LOG-RESET-DEFAULT-IND
******************************************
*
PARM-CC-DATA.#ACTION := 'GET-BY-ISN'
CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
RESET BEFORE_IMAGE AFTER_IMAGE
BEFORE_IMAGE.DATE-LAST-UPDATE := PARM-CC-INFO.LAST-DATE-UPDATE
BEFORE_IMAGE.CC-NUMBER := AFTER_IMAGE.CC-NUMBER := PARM-CC-INFO.CC-NUMBER
BEFORE_IMAGE.CC-GUID := AFTER_IMAGE.CC-GUID := PARM-CC-INFO.CC-GUID
COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH PARM-CC-INFO.CC-EXPIRATION-YEAR INTO BEFORE_IMAGE.CC-EXPIRATION-DATE
AFTER_IMAGE.CC-EXPIRATION-DATE := BEFORE_IMAGE.CC-EXPIRATION-DATE
IF #HOLD-ACTION = #DELETE
* log tran to set new default ind when default deleted
  BEFORE_IMAGE.CC-DEFAULT-IND := 'N'
  AFTER_IMAGE.CC-DEFAULT-IND  := 'Y'
ELSE
* log tran to reset old default ind when new default selected
  BEFORE_IMAGE.CC-DEFAULT-IND := 'Y'
  AFTER_IMAGE.CC-DEFAULT-IND  := 'N'
END-IF
PERFORM WRITE-TRANSACTION-LOG
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE POPULATE-BEFORE-IMAGE
***************************************
*
#ACTION := #GET-BY-ISN
PARM-CC-INFO.ID-NUMBER               := #PARM-ID-NUMBER
CALLNAT 'OBJNCC01' PARM-CC-DATA PARM-CC-INFO
BEFORE_IMAGE.DATE-LAST-UPDATE        := PARM-CC-INFO.LAST-DATE-UPDATE
BEFORE_IMAGE.CC-NUMBER := #BEFORE-CC-NUMBER := PARM-CC-INFO.CC-NUMBER
BEFORE_IMAGE.CC-GUID   := #CC-GUID          := PARM-CC-INFO.CC-GUID
COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH PARM-CC-INFO.CC-EXPIRATION-YEAR
  INTO BEFORE_IMAGE.CC-EXPIRATION-DATE
BEFORE_IMAGE.CCHOLDER-NAME           := PARM-CC-INFO.CCHOLDER-NAME
BEFORE_IMAGE.CCHOLDER-ADDRESS-1      := PARM-CC-INFO.CCHOLDER-STREET-ADDR
BEFORE_IMAGE.CCHOLDER-ADDRESS-2      := PARM-CC-INFO.CCHOLDER-ADDL-ADDR
IF PARM-CC-INFO.CC-ADDR-FORMAT-CODE = '1'
  BEFORE_IMAGE.CCHOLDER-ADDRESS-3    := PARM-CC-INFO.CCHOLDER-ZIP-CODE
  #BEFORE-CC-ZIP                     := PARM-CC-INFO.CCHOLDER-ZIP-CODE               /* YK5
ELSE
  COMPRESS PARM-CC-INFO.CCHOLDER-POSTAL-CODE PARM-CC-INFO.CCHOLDER-COUNTRY
    INTO BEFORE_IMAGE.CCHOLDER-ADDRESS-3
  #BEFORE-CC-POSTAL-CODE := PARM-CC-INFO.CCHOLDER-POSTAL-CODE                        /* YK5
END-IF
COMPRESS PARM-CC-INFO.CCHOLDER-CITY PARM-CC-INFO.CCHOLDER-STATE-CD BEFORE_IMAGE.CCHOLDER-ADDRESS-3
  INTO BEFORE_IMAGE.CCHOLDER-ADDRESS-3
BEFORE_IMAGE.CC-ADDR-VALIDATION-CODE := PARM-CC-INFO.CC-ADDR-VALIDATION-CODE
BEFORE_IMAGE.CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND
IF BEFORE_IMAGE.CC-DEFAULT-IND = ' '
  BEFORE_IMAGE.CC-DEFAULT-IND := 'N'
END-IF
END-SUBROUTINE
*
**************************************
DEFINE SUBROUTINE POPULATE-AFTER-IMAGE
**************************************
*
AFTER_IMAGE.CC-NUMBER               := FUNCTION-MASK(<PARM-CC-INFO.CC-NUMBER,'*'>)
AFTER_IMAGE.CC-GUID                 := PARM-CC-INFO.CC-GUID
COMPRESS PARM-CC-INFO.CC-EXPIRATION-MONTH PARM-CC-INFO.CC-EXPIRATION-YEAR
  INTO AFTER_IMAGE.CC-EXPIRATION-DATE
AFTER_IMAGE.CCHOLDER-NAME           := PARM-CC-INFO.CCHOLDER-NAME
AFTER_IMAGE.CCHOLDER-ADDRESS-1      := PARM-CC-INFO.CCHOLDER-STREET-ADDR
AFTER_IMAGE.CCHOLDER-ADDRESS-2      := PARM-CC-INFO.CCHOLDER-ADDL-ADDR
IF CC-ADDR-FORMAT-CODE = '1'
  AFTER_IMAGE.CCHOLDER-ADDRESS-3    := PARM-CC-INFO.CCHOLDER-ZIP-CODE
ELSE
  COMPRESS PARM-CC-INFO.CCHOLDER-POSTAL-CODE PARM-CC-INFO.CCHOLDER-COUNTRY
    INTO AFTER_IMAGE.CCHOLDER-ADDRESS-3
END-IF
COMPRESS PARM-CC-INFO.CCHOLDER-CITY PARM-CC-INFO.CCHOLDER-STATE-CD AFTER_IMAGE.CCHOLDER-ADDRESS-3
  INTO AFTER_IMAGE.CCHOLDER-ADDRESS-3
AFTER_IMAGE.CC-ADDR-VALIDATION-CODE := PARM-CC-INFO.CC-ADDR-VALIDATION-CODE
AFTER_IMAGE.CC-DEFAULT-IND := PARM-CC-INFO.CC-DEFAULT-IND
IF AFTER_IMAGE.CC-DEFAULT-IND = ' '
  AFTER_IMAGE.CC-DEFAULT-IND := 'N'
END-IF
END-SUBROUTINE
*
***************************************
DEFINE SUBROUTINE WRITE-TRANSACTION-LOG
***************************************
*
#TRAN-CONTACT-ID := F-GET-CONTACT-ID(<#PARM-ID-NUMBER>)
#USER-ID := *USER
#USER-ID := *TRANSLATE(#USER-ID,UPPER)
TR_ID_NUMBER  := #PARM-ID-NUMBER
TR_NAME       := FUNCTION-CONTACT-NAME(<#TRAN-CONTACT-ID>)
TR_CLERK      := FUNCTION-CLERK(< #USER-ID >)
CALLNAT 'GPRNTR06' FUNCTION_CODE TRAN_LOG_HEADER BEFORE_IMAGE AFTER_IMAGE
END-SUBROUTINE
* < YK3
END
