* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: ZACTPPUP
*  THIS PROGRAM LISTS THE MILITARY ACTIVE PAY TABLES
*******************************************
*                       MODIFICATION LOG
* USER DATE     TAG  REASON
* DRW  11112006 DW1  Incr # of Pay Tbl Year entries from 15 to 22
* DRW  11122006 DW2  Add Desc to Rank #
*******************************************
DEFINE DATA
LOCAL
1 MIL-PAY-V      VIEW OF A-MILITARY-PAY
 2 EFF-DATE            (P9)
 2 END-DATE            (P9)
 2 PAYS-BY-RANK        (30)
   3 PAY               (P7/22)   /* DW1
*
1 NU-MIL-PAY-V      VIEW OF A-MILITARY-PAY
 2 EFF-DATE           (P9)
 2 END-DATE           (P9)
 2 PAYS-BY-RANK          (30)
  3 PAY                 (P7/22)    /* Dw1
*
1 #RANK-DESCRIPTION                /* DW2
 2 #R-1    (A10) INIT <'O-11'>
 2 #R-2    (A10) INIT <'O-10'>
 2 #R-3    (A10) INIT <'O-9'>
 2 #R-4    (A10) INIT <'O-8'>
 2 #R-5    (A10) INIT <'O-7'>
 2 #R-6    (A10) INIT <'O-6'>
 2 #R-7    (A10) INIT <'O-5'>
 2 #R-8    (A10) INIT <'O-4'>
 2 #R-9    (A10) INIT <'O-3'>
 2 #R-10   (A10) INIT <'O-2'>
 2 #R-11   (A10) INIT <'O-1'>
 2 #R-12   (A10) INIT <'O-3E'>
 2 #R-13   (A10) INIT <'O-2E'>
 2 #R-14   (A10) INIT <'O-1E'>
 2 #R-15   (A10) INIT <'W-5'>
 2 #R-16   (A10) INIT <'W-4'>
 2 #R-17   (A10) INIT <'W-3'>
 2 #R-18   (A10) INIT <'W-2'>
 2 #R-19   (A10) INIT <'W-1'>
 2 #R-20   (A10) INIT <'E-9'>
 2 #R-21   (A10) INIT <'E-8'>
 2 #R-22   (A10) INIT <'E-7'>
 2 #R-23   (A10) INIT <'E-6'>
 2 #R-24   (A10) INIT <'E-5'>
 2 #R-25   (A10) INIT <'E-4'>
 2 #R-26   (A10) INIT <'E-3'>
 2 #R-27   (A10) INIT <'E-2'>
 2 #R-28   (A10) INIT <'E-1'>
 2 #R-29   (A10) INIT <'E1-Under 4'>
 2 #R-30   (A10) INIT <'E-10'>
1 REDEFINE #RANK-DESCRIPTION
 2 #RANK-DESC  (A10/30)
*
1 #SCR-RANK-DESC   (A10)   /* DW2
*
1 #STOP   (A1)
1 #I1              (I2)
1 #I2              (I2)
1 #EFF-DATE        (N8)
1 #EFF-DATE-P      (P9)
1 #NU-EFF-DATE     (N8)
1 #NU-EFF-DATE-P   (P9)
1 #NU-END-DATE     (N8)
1 #NU-END-DATE-P   (P9)
 1 #CPI-INCR        (P1.3)
1 #WORK-CALC-PAY-A (P7.5)
1 #WORK-CALC-PAY-B (P7.2)
1 #CODE            (A1)
1 #MIL-PAY-ISN     (P8)
*
1 #WORK-PAY        (P7.2)
1 #SCR-CODE        (A6)
1 #SCR-RANK-INDEX  (I2)
1 #SCR-PAY         (P6/22)   /* DW1
1 REDEFINE #SCR-PAY
 2 #SCR-PAY-2       (P6/22)   /* DW1
1 REDEFINE #SCR-PAY
 2 #SCR-PAY-3       (P6/22)   /* DW1
*
1 #SCR-NU-PAY         (P6/22)   /* DW1
1 REDEFINE #SCR-NU-PAY
 2 #SCR-NU-PAY-2       (P6/22)    /* DW1
1 REDEFINE #SCR-NU-PAY
 2 #SCR-NU-PAY-3       (P6/22)    /* DW1
*
END-DEFINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* READ MIL-PAY-V BY EFF-DATE STARTING FROM 19700101
*   DISPLAY EFF-DATE END-DATE
* END-READ
*
INPUT ///// 'ENTER CODE TO PROCESS ACTIVE PAY TABLE'
      //    '  A = ADD A NEW PAY TABLE'
      /     '  U = UPDATE AN EXISTING TABLE'
      /     '  D = DELETE A TABLE'
      /     '  L = LIST A TABLE'
      /     '  M = MULTIPLY ALL ENTRIES BY 10'
      //       #CODE
*
IF #CODE = 'M'
  WRITE 'WHY ARE YOU DOING THIS?'
* READ MIL-PAY-V BY EFF-DATE
*   FOR #I1 1 TO 30
*     FOR #I2 1 TO 22    /* DW1
*       DISPLAY PAY (#I1, #I2)
*       MULTIPLY PAY (#I1, #I2) BY 10
*       DISPLAY PAY (#I1, #I2)
*     END-FOR
*   END-FOR
*
*   UPDATE
*   END TRANSACTION
*   DISPLAY EFF-DATE
* END-READ
END-IF
*
IF #CODE = 'A'
*
  INPUT ///// 'ENTER EFF DATE OF CURRENT PAY TABLE TO USE AS SKELETON'
        //       #EFF-DATE
  IF #EFF-DATE NE MASK (YYYYMMDD)
    PERFORM BAD-DATE
  END-IF
  MOVE #EFF-DATE TO #EFF-DATE-P
*
  INPUT ///// 'ENTER NEW EFFECTIVE DATE'
        //       #NU-EFF-DATE
  IF #NU-EFF-DATE NE MASK (YYYYMMDD)
    PERFORM BAD-DATE
  END-IF
  MOVE #NU-EFF-DATE TO #NU-EFF-DATE-P
*
  FIND (1) NU-MIL-PAY-V WITH EFF-DATE = #NU-EFF-DATE
    IF NO RECORDS FOUND
      ESCAPE BOTTOM
    END-NOREC
*
    WRITE 'THIS EFFECTIVE DATE ALREADY EXISTS'
    STOP
  END-FIND
*
  INPUT ///// 'ENTER NEW END DATE'
        //       #NU-END-DATE
  IF #NU-END-DATE NE MASK (YYYYMMDD)
    PERFORM BAD-DATE
  END-IF
  MOVE #NU-END-DATE TO #NU-END-DATE-P
*
  INPUT ///// 'ENTER CPI INCREASE (AS 1.041) '
        //       #CPI-INCR
ELSE
  INPUT ///// 'ENTER EFFECTIVE DATE OF PAY TABLE TO DELETE/UPDATE/LIST'
        //       #EFF-DATE
  IF #EFF-DATE NE MASK (YYYYMMDD)
    PERFORM BAD-DATE
  END-IF
  MOVE #EFF-DATE TO #EFF-DATE-P
*
END-IF
*
FIND (1) MIL-PAY-V WITH EFF-DATE = #EFF-DATE-P
  IF NO RECORDS FOUND
    WRITE 'NO TABLE FOUND FOR THIS EFFECTIVE DATE'
    ESCAPE BOTTOM
  END-NOREC
*
  MOVE *ISN TO #MIL-PAY-ISN
  GET MIL-PAY-V #MIL-PAY-ISN
*
  FOR #SCR-RANK-INDEX 1 TO 30
    MOVE #RANK-DESC (#SCR-RANK-INDEX) TO #SCR-RANK-DESC  /* DW2
    MOVE MIL-PAY-V.PAY (#SCR-RANK-INDEX, *) TO #SCR-PAY (*)
*
    IF #CODE = 'A'
      FOR #I1 1 TO 22     /* INCREASE TO MULTIPLES OF    /* DW1
        COMPUTE ROUNDED #WORK-CALC-PAY-A =
          MIL-PAY-V.PAY (#SCR-RANK-INDEX, #I1) * #CPI-INCR
        COMPUTE ROUNDED #WORK-CALC-PAY-B = (#WORK-CALC-PAY-A / 10) / 30
        COMPUTE ROUNDED #SCR-NU-PAY(#I1) = (#WORK-CALC-PAY-B * 30) * 10
      END-FOR
    END-IF
*
    IF #CODE = 'A'
      MOVE 'ADD' TO #SCR-CODE
    ELSE
      IF #CODE = 'U'
        MOVE 'UPDATE' TO #SCR-CODE
      ELSE
        IF #CODE = 'D'
          MOVE 'DELETE' TO #SCR-CODE
*
          IF #SCR-RANK-INDEX = 2    /* ONLY SHOW 1 TABLE
            ESCAPE BOTTOM
          END-IF
*
        ELSE
          MOVE 'LIST' TO #SCR-CODE
        END-IF
      END-IF
    END-IF
*
    INPUT USING MAP 'ZACTPMUP'
*
    IF   (#STOP = 'Y')
     AND (#CODE NE 'A')
      ESCAPE BOTTOM
    END-IF
*
    IF #CODE = 'A'
      MOVE #SCR-NU-PAY (*) TO NU-MIL-PAY-V.PAY (#SCR-RANK-INDEX, *)
    ELSE
      MOVE #SCR-PAY (*) TO MIL-PAY-V.PAY (#SCR-RANK-INDEX, *)
    END-IF
*
  END-FOR
*
  IF #CODE = 'A'
    MOVE #NU-EFF-DATE-P TO NU-MIL-PAY-V.EFF-DATE
    MOVE #NU-END-DATE-P TO NU-MIL-PAY-V.END-DATE
    STORE NU-MIL-PAY-V
  ELSE
    IF #CODE = 'D'
      DELETE (0177)
    ELSE
      IF #CODE = 'U'
        UPDATE (0177)
      END-IF
    END-IF
  END-IF
*
  END TRANSACTION
*
END-FIND
* * * * * * * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE BAD-DATE
* * * * * * * * * * * * * * * * * * * * * * * * * *
*
WRITE 'DATE MUST BE YYYYMMDD'
STOP
*
END-SUBROUTINE
*
END
