* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
************************************************************************
* GPRP0002 - Automated E-mail Processing Driver
* DESCRIPTION
* This program is reading input files from different processes and
* creates XML file for automated e-mail submission.
* File with email information is being FTP to the Windows server
* Windows application reads the data and sends e-mails.
* 1. Daily File
* 2. Monthly File
* 3. By Request File
*
************************************************************************
*        MODIFICATION LOG                                              *
************************************************************************
* USER   DATE        TAG     REASON                                    *
* YAK    01/07/2010  None    Program Written                           *
* YAK    02/10/2010  YK1     Fix check for duplicates - compare policy *
*                            number and e-mail template requested      *
* YAK    04/03/2011  YK2     Add file name suffix to avoid DAL errors  *
* vxt    05/03/2011  VT1     Add DraftedAmount field                   *
* VXT    07/11/2011  VT2     Fix the problem with double Dear in the   *
*                            owner-name.                               *
* vxt    08/18/2011  VT3     Add new text fields to the e-mails        *
* YAK    11/04/2011  YK3     For daily Credit Card emails run for the  *
*                            previous day (OI 502)                     *
* YAK    09/20/2011  YK4     Add Premier Services templates            *
* YAK    07/23/2012  YK5     Add new Templates to use MEMBER-NAME      *
*                            already formatted in the program          *
*                            Changed - code to create index file       *
* YAK    08/06/2012  YK6     Do not send approval email if CC was rej. *
* VXT    10/05/2012  vt4     ADD CAP DEfault e-mail /OI-1348/          *
* YAK    11/09/2012  YK7     Allocate Rej.CC array for DAILY_CC process*
*                            in case Daily job failed/did not run and  *
*                            emails for rej. CC (WCD) are in the queue *
* YAK    11/08/2013  YK8     Add Uncashed Checks email                 *
*                            Change rename processed file from script  *  
*                            to command (to avoid permission problems) *
* YAK    02/25/2014  YK9     Add Electronic Billing Notification       * 
* TMT    04/11/2014  TT1     Added SAS email templates                 *
* YAK    07/25/2014  YK10    Changes in Email PDA (add clerk fields,   *
*                            rename CC-CHARGE to E-CHARGE )            *
* YAK    06/10/2015  YK11    Add new templates                         *  
* YAK    02/25/2016  YK12    Split daily CC and other daily emails /Ticket 4263/    * 
* vxt    03/14/2016  vt4     /Ticket 4323 use bigger mask for the amount / 
* vxt    03/22/2016  vt5     /Ticket 4258/                             *
* YAK    03/08/2017  YK13    Change index file structure/destination   *
*                            for to DALe upload                        * 
************************************************************************
*
DEFINE DATA
LOCAL USING GPRL0001      /* General Processes Property
LOCAL USING GPRL0002      /* Index File XML Structure
LOCAL USING GPRA0005      /* Data to extract for e-mail (EMAIL-INFORMATION)
LOCAL USING GPRL0005      /* E-mail XML file structure  (EmailRecipients)
LOCAL USING GPRL0006      /* E-mail Application Property
LOCAL USING GPRA0003      /* Error Log
LOCAL
1 XML             (A) DYNAMIC
1 XML-END         (A) DYNAMIC
1 #OUTPUT-RECORD  (A1500)
1 #UNIX-FILE-NAME (A) DYNAMIC
1 #WIN-FILE-NAME  (A) DYNAMIC
1 #HEADER         (L)
1 #REC-OUT        (N4)
1 #MAX-REC        (N5)  INIT <100>
1 #NAME           (A) DYNAMIC
1 #TEMPLATE-DESCRIPTION (A50)
1 #PROCESS-NAME   (A8)
1 #REQUEST-FILE-NAME (A) DYNAMIC
1 #FILE-NAME-SUFFIX  (A) DYNAMIC                 /* YK2
1 #DATN-A            (A) DYNAMIC                 /* YK3
*
1 OUT             (A500)
1 #DATN           (N8)
1 OUTDYN (A) DYNAMIC
1 OBJLEN (I4)
1 OBJEND (I4)
1 OBJSTART (I4)
1 OBJLINE (I4)
*
1 #CX             (I4)
1 #CY             (I4)
1 #CZ             (I4)
1 #I              (I2)
1 #REJ-CC-CN                     (A/*) DYNAMIC                        /* YK6
1 #POLICY-ISSUE-TEMPLATE         (A3/3) CONST <'NM ','ANP','ENP'>     /* YK6
1  v_sch          (A) DYNAMIC  INIT <'cp @NAME @NEW_NAME; > @NAME'>   /* YK8
*
END-DEFINE
*
#DATN := *DATN
*  #datn := 20160316  /* vt
*
* Input file from Daily processes
INPUT #PROCESS-NAME
DECIDE ON FIRST VALUE #PROCESS-NAME
  VALUE 'DAILY'
    EXPAND ARRAY #REJ-CC-CN TO (*:1)
    CALLNAT 'WCCNREJ' #REJ-CC-CN(*)
    #REQUEST-FILE-NAME := #EMAIL-DAILY-FILE
  VALUE 'DAILY_CC'
* Need to allocate array in case Daily Email job did not run/failed
* and there are Declined Credit card emails in the queue       
    EXPAND ARRAY #REJ-CC-CN TO (*:1)              /* YK7       
    CALLNAT 'WCCNREJ' #REJ-CC-CN(*)               /* YK7
    #REQUEST-FILE-NAME := #EMAIL-CC-DAILY-FILE    /* YK12
    IF *TIMN < 1200000                            /* YK3
      #DATN-A := FUNCTION-CALENDAR(<#DATN,'H'>)   /* YK3
      #DATN   := VAL(#DATN-A)                     /* YK3
    END-IF                                        /* YK3
  VALUE 'MONTHLY'
    #REQUEST-FILE-NAME := #EMAIL-MONTHLY-FILE
  VALUE 'TMRF'
    #REQUEST-FILE-NAME := #EMAIL-REQUEST-FILE
  VALUE 'UNDV'
    #REQUEST-FILE-NAME := #EMAIL-REQUEST-FILE
  VALUE 'CCARD'
    #REQUEST-FILE-NAME := #EMAIL-CC-MONTHLY-FILE
  VALUE 'SKIP'
    ESCAPE ROUTINE
  NONE VALUE
    IGNORE
END-DECIDE
COMPRESS #EMAIL-WINDOWS-DIR #PROCESS-NAME '/' INTO #EMAIL-WINDOWS-DIR LEAVING NO
COMPRESS #EMAIL-WINDOWS-BACKUP-DIR #PROCESS-NAME '/' INTO #EMAIL-WINDOWS-BACKUP-DIR
  LEAVING NO
* Check on which server process is running (Test/Prod)
IF F-IS-DEV(<>)
  #EMAIL-WINDOWS-DIR := #EMAIL-WINDOWS-BACKUP-DIR
END-IF
*
DEFINE WORK FILE 1 #REQUEST-FILE-NAME
* Output Email XML file
COMPRESS #UNIX-DIR #EMAIL-FILE INTO #UNIX-FILE-NAME leaving no
* Remove file from previous run
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #EMAIL-FILE
DEFINE WORK FILE 2 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
* E-mail index file for DAL upload
COMPRESS #UNIX-DIR #EMAIL-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
* Remove file from previous run
CALLNAT 'GPRN0002' #RM-SCRIPT-NAME #UNIX-DIR #EMAIL-INDEX-FILE
DEFINE WORK FILE 3 #UNIX-FILE-NAME TYPE 'ASCII-COMPRESSED'
DEFINE WORK FILE 23 #EXCEPTION-FILE-NAME  TYPE 'ASCII-COMPRESSED'
*
WRITE 'begin process...'
*
RESET DOCUMENTS
EXPAND ARRAY DOCUMENT TO (*:#MAX-REC)
*
RESET EMAIL-INFORMATION EmailRecipient
READ WORK FILE 1 EMAIL-INFORMATION
* YK6 start
  RESET #I
  EXAMINE #POLICY-ISSUE-TEMPLATE(*) FOR EMAIL-INFORMATION.TEMPLATE-TYPE INDEX #I
  IF #I <> 0
* Check if CC was rejected for this ID-NUMBER
    RESET #I
    EXAMINE #REJ-CC-CN(*) FOR EMAIL-INFORMATION.DAL-CN INDEX #I
    IF #I <> 0                   
      ESCAPE TOP             /* Skip email - do not send
    END-IF
  END-IF
* YK6 end
*  
  PERFORM CREATE-XML
*
  RESET EMAIL-INFORMATION EmailRecipient
END-WORK
*
IF #REC-OUT NE 0
  #HEADER := FALSE
  PERFORM WRITE-HEADER
*
  C@DOCUMENT := #REC-OUT
  RESIZE ARRAY DOCUMENT TO (*:C@DOCUMENT)
  RESET #OUTPUT-RECORD XML
* INCLUDE GPRCS002 "XML" "#CX" "#CY" "#CZ"
  PERFORM WRITE-INDEX-XML
  CLOSE WORK FILE 3
*
  COMPRESS #UNIX-DIR #EMAIL-FILE INTO #UNIX-FILE-NAME leaving no
  COMPRESS #EMAIL-WINDOWS-DIR #EMAIL-FILE INTO #WIN-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
  COMPRESS #UNIX-DIR #EMAIL-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
  COMPRESS #EMAIL-WINDOWS-DIR #EMAIL-INDEX-FILE INTO #WIN-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
  COMPRESS #UNIX-DIR #EMAIL-FILE INTO #UNIX-FILE-NAME leaving no
  COMPRESS #EMAIL-WINDOWS-BACKUP-DIR #EMAIL-FILE '_' #DATN
    INTO #WIN-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
  COMPRESS #UNIX-DIR #EMAIL-INDEX-FILE INTO #UNIX-FILE-NAME leaving no
  COMPRESS #EMAIL-WINDOWS-BACKUP-DIR #EMAIL-INDEX-FILE '_' #DATN
    INTO #WIN-FILE-NAME leaving no
  CALLNAT 'GPRN0002' #FTP-SCRIPT-NAME #UNIX-FILE-NAME #WIN-FILE-NAME
*
END-IF
*
CLOSE WORK FILE 22
CALLNAT 'GPRN0002' #EMAIL-SCRIPT-NAME #ERROR-LOG-FILE
*
CLOSE WORK FILE 1
* YK8 Start
EXAMINE v_sch  FOR '@NAME' REPLACE #REQUEST-FILE-NAME
EXAMINE v_sch  FOR '@NAME' REPLACE #REQUEST-FILE-NAME
COMPRESS #REQUEST-FILE-NAME #DATN INTO #REQUEST-FILE-NAME WITH '.'
EXAMINE v_sch  FOR '@NEW_NAME' REPLACE #REQUEST-FILE-NAME
call 'shcmd' v_sch
* YK8 end
CLOSE WORK FILE 23
COMPRESS #UNIX-DIR #EXCEPTION-FILE-NAME INTO #UNIX-FILE-NAME leaving no
CALLNAT 'GPRN0002' #EMAIL-USER-SCRIPT-NAME #EXCEPTION-FILE-NAME
WRITE 'process ended'
*
****************************
DEFINE SUBROUTINE CREATE-XML
****************************
*
RESET #FILE-NAME-SUFFIX                                                /* YK2
EXAMINE DOCUMENTS.POL-NUM(*) FOR EMAIL-INFORMATION.POLICY-NUMBER INDEX #I
IF #I NE 0 AND EMAIL-INFORMATION.POLICY-NUMBER = DOCUMENTS.POL-NUM(#I) /* YK1
  #TEMPLATE-DESCRIPTION :=
    FUNCTION-EMAIL-TEMPLATE(<EMAIL-INFORMATION.TEMPLATE-TYPE>)(2)
  IF DOCUMENTS.DESCRIPTION(#I) = #TEMPLATE-DESCRIPTION              /* YK1
    COMPRESS 'Duplicate Policy Number' EMAIL-INFORMATION.POLICY-NUMBER
      'for email template' #TEMPLATE-DESCRIPTION INTO ERROR-MESSAGE
    ERROR-PROGRAM := *PROGRAM
    CALLNAT 'GPRN0003' ERROR-LOG
    ESCAPE ROUTINE
  else
    #FILE-NAME-SUFFIX := '_01'
  END-IF
END-IF
*
IF OWNER-EMAIL = ' ' OR = '?' OR = '999'
  COMPRESS 'Member does not have an Email Address on file ' EMAIL-INFORMATION.DAL-CN INTO ERROR-MESSAGE
  ERROR-PROGRAM := *PROGRAM
  CALLNAT 'GPRN0003' ERROR-LOG
  ESCAPE ROUTINE
END-IF
*
IF OWNER-EMAIL = 'XXX'
  COMPRESS 'Member has mail code "E" ' EMAIL-INFORMATION.DAL-CN INTO ERROR-MESSAGE
  ERROR-PROGRAM := *PROGRAM
  CALLNAT 'GPRN0003' ERROR-LOG
  ESCAPE ROUTINE
END-IF
*
#REC-OUT := #REC-OUT + 1
IF #REC-OUT = 1
  #HEADER := TRUE
  PERFORM WRITE-HEADER
END-IF
IF #REC-OUT > #MAX-REC
  #MAX-REC := #MAX-REC + 100
  RESIZE ARRAY DOCUMENT TO (*:#MAX-REC)
END-IF
*
EmailRecipient.TemplateName := FUNCTION-EMAIL-TEMPLATE(<TEMPLATE-TYPE>)(1)

PendingCN        := PENDING-CN

PolicyNumber     := POLICY-NUMBER
* Format Owner name
*                                                /* vt1  \/
TotalAmountDue := TOTAL-AMOUNT-DUE               /* YK4
if EMAIL-INFORMATION.TEMPLATE-TYPE = 'ALO' or = 'ELO' or = 'CAN' or = 'LOF'
    or = 'ANP' or = 'ENP' or ='CPD'
    or = 'NM' or = 'NMC'                /* vt2
    or = 'DEF'                          /* vt4
  OwnerName := OWNER-NAME
else                                              /* vt1 /\
  IF OWNER-NAME NE ' '
    #NAME := OWNER-NAME
    COMPRESS 'Dear' OWNER-RANK FUNCTION-FORM-NAME(<#NAME,'L'>)
      INTO OwnerName
  END-IF
end-if                                             /* vt1
*
IF EMAIL-INFORMATION.TEMPLATE-TYPE = 'DSV' OR = 'TSV' OR = 'SDT' OR = 'STT' /* YK4   /* TT1
    OR = 'UAD' OR = 'VAD' OR = 'TRU' OR = 'UCH' OR = 'EBI'          /* YK5  YK8 YK9
    OR = 'WES' OR = 'WSS' OR = 'WER'                                /* YK11
  EmailRecipient.MemberName := EMAIL-INFORMATION.MEMBER-NAME        /* YK4
  EmailRecipient.Salutation := EMAIL-INFORMATION.SALUTATION         /* YK4
ELSE                                                                /* YK4
  IF MEMBER-NAME NE ' '                    /* CMB5/LAPC
    #NAME := MEMBER-NAME
    COMPRESS 'Dear' MEMBER-RANK FUNCTION-FORM-NAME(<#NAME,'L'>)
      INTO MemberName
  END-IF
END-IF                                                              /* YK4
*
   OwnerEmail       := OWNER-EMAIL
* OwnerEmail       := 'kcalhoun@aafmaa.com'
* OwnerEmail       := 'ykegeles@aafmaa.com'
*  OwnerEmail       := 'vtokmakova@aafmaa.com'
* Format Insured name
IF INSURED-NAME NE ' '
  #NAME := INSURED-NAME
  InsuredName := FUNCTION-FORM-NAME(<#NAME,' '>)
END-IF
IF ISSUE-DATE NE 0
  IssueDate      := FUNCTION-CALENDAR(<ISSUE-DATE,'S'>)
END-IF
StreetAddress    := STREET-ADDRESS
CityStateZip     := CITY-STATE-ZIP
*
if EMAIL-INFORMATION.TEMPLATE-TYPE = 'ALO' or = 'ELO' or = 'CAN' or = 'LOF'   /* vt2 \/
    or = 'ANP' or = 'ENP' or ='CPD'
    or = 'NM' or = 'NMC'
    or = 'DEF'                                                               /* vt4
  ignore
else                                                                          /* vt2 /\
  IF EMAIL-INFORMATION.ADDRESS-LINE-3 NE ' '
    COMPRESS ADDRESS-LINE-3 ZIP-CODE INTO ADDRESS-LINE-3
  ELSE
    COMPRESS ADDRESS-LINE-2 ZIP-CODE INTO ADDRESS-LINE-2
  END-IF
end-if                                                                        /* vt2
AddressLine1     := ADDRESS-LINE-1                /* for all new templates
AddressLine2     := ADDRESS-LINE-2                /* use three lines address
AddressLine3     := ADDRESS-LINE-3                /*
IF STATUS-DATE NE 0
  STSDate          := FUNCTION-CALENDAR(<STATUS-DATE,'S'>)
END-IF
IF E-CHARGE-AMOUNT NE 0
  MOVE EDITED E-CHARGE-AMOUNT (EM=Z,ZZZ,ZZ9.99) TO AmountOfCCCharge                    /* vt4 was EM=ZZZZ9.99
  COMPRESS '$' *TRIM(AmountOfCCCharge) INTO AmountOfCCCharge LEAVING NO
END-IF
IF PREMIUM-AMOUNT NE 0
  MOVE EDITED PREMIUM-AMOUNT (EM=ZZZZ9.99) TO AmountOfPremium
  COMPRESS '$' *TRIM(AmountOfPremium) INTO AmountOfPremium LEAVING NO
END-IF
*  Credit card charge - last business day of the month
IF INSERT-CC-PROC-DATE NE 0
  InsertCCProcessingDate := FUNCTION-CALENDAR(<INSERT-CC-PROC-DATE,'Y'>)
END-IF
IF INSERT-MONTH-PLUS-ONE NE 0
  InsertMonthPlusOne      := FUNCTION-CALENDAR(<INSERT-MONTH-PLUS-ONE,'M'>)
END-IF
IF FIRST-BUSINESS-DAY-OF-MONTH NE 0
  FirstBusinessdayOfMonth := FUNCTION-CALENDAR(<FIRST-BUSINESS-DAY-OF-MONTH,'X'>)
END-IF
IF DUE-DATE NE 0                                  /* YK4
  DueDate := FUNCTION-CALENDAR(<DUE-DATE,'S'>)    /* YK4
END-IF                                            /* YK4
Loan                    := CAP-LOAN-AMOUNT
CapBalanceInterest      := CAP-BALANCE-INTEREST    /* CMB5/LAPC
Year                    := REFUND-YEAR             /* Term refund
MonthPlusTwo            := MONTH-PLUS-TWO                         /* vt1
NextMonth               := NEXT-MONTH                             /* vt1
*
ClerkName               := CLERK-NAME                             /* YK10
ClerkPhoneExt           := CLERK-PHONE-EXT                        /* YK10
LineText-1              := TEXT-1                                 /* vt3
LineText-2              := TEXT-2                                 /* vt3
LineText-3              := TEXT-3                                 /* vt3
LineText-4              := TEXT-4                                 /* vt3
LineText-5              := TEXT-5                                 /* vt3
LineText-6              := TEXT-6                                 /* vt3
LineText-7              := TEXT-7                                 /* vt3
LineText-8              := TEXT-8                                 /* vt3
LineText-9              := TEXT-9
NEXTMONTHNODAY          := NEXT-MONTH-NO-DAY                      /* vt5
RESET #OUTPUT-RECORD XML
INCLUDE GPRCS005 "XML" "#CX" "#CY" "#CZ"
#OUTPUT-RECORD := XML
WRITE WORK FILE 2 #OUTPUT-RECORD
*
DOCUMENTS.CN(#REC-OUT) := EMAIL-INFORMATION.DAL-CN
DOCUMENTS.POL-NUM(#REC-OUT) := EMAIL-INFORMATION.POLICY-NUMBER
DOCUMENTS.DOCTYPE(#REC-OUT) := #EMAIL-DOCTYPE
DOCUMENTS.SUBMITDATE(#REC-OUT) := FUNCTION-CALENDAR(<#DATN,'D'>)
DOCUMENTS.TEMPLATENAME(#REC-OUT) := EmailRecipient.TemplateName
COMPRESS DOCUMENTS.POL-NUM(#REC-OUT) #FILE-NAME-SUFFIX #EMAIL-NAME-SUFFIX   /* YK2
  INTO DOCUMENTS.FILENAME(#REC-OUT) LEAVING NO
DOCUMENTS.DESCRIPTION(#REC-OUT) := FUNCTION-EMAIL-TEMPLATE(<TEMPLATE-TYPE>)(2)
DOCUMENTS.ORGANIZATION(#REC-OUT)      := 'AAFMAA'                           /* YK13
DOCUMENTS.MEMBER-ACCESSIBLE(#REC-OUT) := 'FALSE'                            /* YK13
*
END-SUBROUTINE
*
DEFINE SUBROUTINE WRITE-HEADER
******************************
*
IF #HEADER
  RESET #OUTPUT-RECORD XML
  #OUTPUT-RECORD := '<?xml version="1.0" encoding="utf-8" ?>'
  WRITE WORK FILE 2 #OUTPUT-RECORD
  #OUTPUT-RECORD := '<EmailRecipients>'
  WRITE WORK FILE 2 #OUTPUT-RECORD
ELSE
  #OUTPUT-RECORD := '</EmailRecipients>'
  WRITE WORK FILE 2 #OUTPUT-RECORD
  CLOSE WORK FILE 2
END-IF
END-SUBROUTINE
*********************************
DEFINE SUBROUTINE WRITE-INDEX-XML
*********************************
* YK5 start
#OUTPUT-RECORD := '<?xml version="1.0" encoding="utf-8" ?>'
WRITE WORK FILE 3 #OUTPUT-RECORD
#OUTPUT-RECORD := '<DOCUMENTS>'
WRITE WORK FILE 3 #OUTPUT-RECORD
FOR #I = 1 TO DOCUMENTS.C@DOCUMENT
  COMPRESS     '<DOCUMENT>'
*   '<DOCTYPE>' DOCUMENTS.DOCTYPE(#I) '</DOCTYPE>'
    '<DOCTYPE/>'                                                      /* YK13  
    '<DOCTITLE>' DOCUMENTS.DOCTYPE(#I) '</DOCTITLE>'                  /* YK13
    '<CN>' DOCUMENTS.CN(#I) '</CN>'
    '<POL-NUM>' DOCUMENTS.POL-NUM(#I) '</POL-NUM>'
    '<SUBMITDATE>' DOCUMENTS.SUBMITDATE(#I) '</SUBMITDATE>'
    '<TEMPLATENAME>' DOCUMENTS.TEMPLATENAME(#I) '</TEMPLATENAME>'
    '<FILENAME>' DOCUMENTS.FILENAME(#I) '</FILENAME>'
    '<DESCRIPTION>' DOCUMENTS.DESCRIPTION(#I) '</DESCRIPTION>'
    '<MEMBERACCESSIBLE>' DOCUMENTS.MEMBER-ACCESSIBLE(#I) '</MEMBERACCESSIBLE>'     /* YK13
    '<ORGANIZATION>' DOCUMENTS.ORGANIZATION(#I) '</ORGANIZATION>'     /* YK13
    '<CUSTOM id="OwnerCN">' DOCUMENTS.OWNER-CN(#I)  '</CUSTOM>'
    '</DOCUMENT>' INTO #OUTPUT-RECORD LEAVING NO
  WRITE WORK FILE 3 #OUTPUT-RECORD
END-FOR
#OUTPUT-RECORD := '</DOCUMENTS>'
WRITE WORK FILE 3 #OUTPUT-RECORD
END-SUBROUTINE
* YK5 end
END
