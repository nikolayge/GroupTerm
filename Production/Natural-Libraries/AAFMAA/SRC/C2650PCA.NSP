* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 5
* <Natural Source Header
************************************************************************
* PGM-ID: C2650PCA                                                     *
* PURPOSE: TO PROCESS 'CA' COMMAND OR CHANGE ACCOUNTING DATA           *
************************************************************************
*                       MODIFICATION LOG                               *
* USER   DATE      TAG     REASON                                      *
* DRW    09282004  DW1     add CREDIT CARD processing                  *
* DRW    11062004  DW2     add alot-chg-date                           *
* DRW    01212005  DW3     add alp 8 (CIP) edits                       *
* DRW    07142005  DW4     DB-CR Adjust is 99,999.99                   *
* DRW    08222005  DW5     SYNC UP FIRS With STATUS when Inactive Pol  *
* DRW    11022005  DW6     add ACN/EAC to be accessable to CAP pol strt*
* DRW    03312006  DW7     add AAFM/AFSC Sync processing               *
* DRW    04102006  DW8     bypass termed pols on CC test               *
* DRW 04222006 DW9  Build Nx's on sync'd fields of TRLOG               *
* DRW 04262006 DW10 Allow KA to chg from pad code P to V               *
* DRW 08162006 DW11 Allow RDR to chg from pad code P to V & Remov KA/IM*
* DRW 11062006 DW12 Add editing when making a CAP Policy               *
* TDM 01022007 TM1  REPLACED JMJ WITH MAS FOR NX'S                     *
* DRW 02192007 DW13 Allow Retired's to use ALOT-CHG-AUTH               *
* PAM 03172007 PM14 Add Pad-Code access for BHL and AJT                *
* DRW 03222007 DW15 Fix Index err on #I3                               *
* DRW 04062007 DW16 Do not Alot-Auth-Code to be changed to 'S' if no   *
*                   Alot-Amt                                           *
* DRW 05112007 DW17 Protect all fields except alot-auth ifAT Pending   *
* DRW 05293007 DW18 Fix Issue-date index problem with Inactivew pols   *
* YAK 08312007 YK1  Change EZPay STOP logic for CAP policy when Cap    *
*                   loan payment rejected.                             *
* YAK 09102007 YK2  Populate ALOT-CHG-AUTH-DATE when changing          *
*                   ALOT-CHG-AUTH                                      *
* DRW 10022007 DW19 Create ST Termed pol segments if DP pol exists and *
*                   ST does not                                        *
* DRW 10202007 DW20 If PAD stops Make a MIP even tho Mod is not M &    *
*                   clear CAP-BILL-DT                                  *
* DRW 11/30/2007 DW21 Further changes when a PAD stops                 *
* DRW 02/08/2008 DW22 Move St file update logic to insure Update       *
* DRW 05/07/2008 DW23 Add Alot-auth-code 'B' Bypass                    *
* DRW 05/14/2008 DW24 Do not allow Current Month in ALOT-AUTH-CODE stop*
*                     date                                             *
* DRW 05/14/2008 DW25 Add Alot-Auth-COde 'A' AAFMAA initiated authority*
* DRW 06/06/2008 DW26 Add ALOT-CHG-AUTH "A" checking                   *
* DRW 06/10/2008 DW27 Allow ALOT-CHG-AUTH B/S even if alot amt is ZERO *
* DRW 06/11/2008 DW28 Chk for AUTH A Chg if Process-Inf Changed        *
* PAM 03/01/2009 PM29 Removed Verified EZPay - V/X/Z                   *
* PAM 03/17/2009 PM30 Removed PAY-NOW-SWITCH                           *
* YAK 05/13/2009 YK3  Add call Credit Card Information screen/subprogram
*                     to modify credit card information                *
*                     comment out all edit checks for cc info          *
* PAM 07/29/2009 PM31 Remove extra ADD line                            *
* PAM 08/13/2009 PM32 Added CEB to CAP turn on/off section             *
* DRW 09/15/2009 DW33 Protect AAFM Fields for AFSC                     *
* DRW 09/17/2009 DW34 PROCESS-IND Changes                              *
* PAM 11/16/2009 PM33 Verify active policy when switching pad code     *
* PAM 05/14/2010 PM34 Added additional ABA edit                        *
* NGG 05/24/2010 NG2  Synchronize member data with CRM                 *
* PAM 07/12/2010 PM35 Added refund-to-cap processing                   *
* PAM 08/19/2010 PM36 Added DATE parameter to death benefit interest   *
* RSE 08/09/2011 RE4  Grant access to Process Ind and Intro Flag       *
*                     to Brady and support team                        *
* PAM 09/30/2011 PM37 Allow Emy Cox to edit CAP status                 *
* VXT 08/23/2012 vt1  Replaced PAM with VXT                            *
* NGG 20121121   NG5  Ticket 1618                                      *
* vxt 06/20/2014 vt2  Removed BHL user                                 *
* vxt 02/06/2015 vt3  Add new user /Ticket 3335/                       *
* vxt 03/19/2015 vt4  Fix 1305 error /Ticket 3418/                     *
* YAK 03/16/2016 YK4  F-MASK not required, CC value already masked     *
*                     Fix REINPUT issue when coming back from CC screen*
* YAK 09/06/2016 YK5  Display default credit card on CA screen         *
* vxt 03/08/2017 vt5  /Ticket 3043/ - add access for Charline Wilde    *
* YAK 06/26/2017 YK6  Comment out error message                        *
* vxt 10/17/2017 vt6  /Ticket 6074/                                    *
* YAK 01/10/2018 YK7  Block changes for PAD-CODE from CA screen        *
************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL  USING GONERLXX    /* WORK FIELDS FOR GONERCXX - ERROR ROUTINE
LOCAL  USING C2650LCA
LOCAL  USING OBJLCC01    /* YK3
LOCAL
1 FR-V VIEW OF A-FIRS
  2 POL-TYPE        (9)    /* DW19
*
  2 DEAD-GROSS-DB  (9)
  2 DEAD-LOAN-PRIN (9)
  2 DEAD-LOAN-INT  (9)
  2 DEAD-PREM-ADJ  (9)
  2 DEAD-DB-CR     (9)
  2 DEAD-CAP-INT   (9)
  2 POL-DATE       (9)
  2 POL-NAME        (9)
  2 POL-AMT-PAID   (9)
*
1 #SFX   (I2) /* DW7
1 #IS-A-PAYEE     (L)
* 1 #HAS-CC       (L)          /* YK6
1 #CC-20          (A20)
1 #SCN-CC-EXP-DT  (A6)
1 REDEFINE #SCN-CC-EXP-DT
  2 #SCN-CC-EXP-MM   (A2)
  2 #SCN-CC-EXP-YYYY (A4)
1 #ELP-MSG   (A30)
1 #INFO-ENTERED  (L)
1 #SUBTYPE     (A1)
1 #FR-ISN    (P8)
1 #FOUND-FIR  (L)
1 #SCR-DEAD-GROSS-CV(C)    /* used in total lines gross-db
1 #SCR-DEAD-CV      (C)    /* used in total lines except for gross-db
1 #SCR-DEAD-FIR-CV  (C/9)  /* used in 9 lines
1 #SCR-ISS-DT    (A10/9)
1 #HOLD-DEAD-GROSS-DB  (P7.2/9)
1 #HOLD-DEAD-LOAN-PRIN (P7.2/9)      /* vt4 was  P5.2/9
1 #HOLD-DEAD-LOAN-INT  (P5.2/9)
1 #HOLD-DEAD-PREM-ADJ  (P5.2/9)
1 #HOLD-DEAD-DB-CR     (P5.2/9)
1 #HOLD-DEAD-CAP-INT   (P5.2/9)
1 #TOT-GROSS-DB  (N9.2)
1 #TOT-LOAN-PRIN (N7.2)             /* vt4 was n5.2
1 #tot-loan-prin-abs (n7.2)         /* vt4
1 #TOT-LOAN-INT  (N5.2)
1 #TOT-DB-CR     (N5.2)
1 #TOT-PREM-ADJ  (N5.2)
1 #TOT-CHK-AMT   (N9.2)
*
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER    (N6)
  2 NOTE-TEXT    (A60/60)
  2 REDEFINE NOTE-TEXT
    3 SUNGARD-AP-OCC    (500)
      4 SUNGARD-CHECK-TYPE (A1)
      4 SUNGARD-CN         (N6)
1 #NOTE-TEXT (A60/10)
1 #INT   (I2)
1 #TO-INIT (A3)
1 #SEG-I  (I2)
*
1 #NT-UPDATE     (L)
1 #SCR-CAP-POL-Y-N   (A1)
1 #SCR-CAP-ISS-DATE  (N8)
1 #SCR-CAP-CV        (C)
1 #SCR-PROC-IND-CV   (C)
1 #SCR-ALOT-AUTH-CV  (C)    /* DW17
*
1 #SCR-CV           (C)
1 #SCR-CV-PAD       (C)
1 #SCR-CV-ABA       (C)
1 #SCR-CV-A         (C)
1 #SCR-CV-2         (C)
1 #SCR-CSV-DB       (P7.2)
1 #SCR-CSV-DB-LBL   (A10)
1 #SCR-TOT-PREM-DUE-SIGN  (A1)
1 #SCR-CHECK-AMT-N        (N7.2)
1 #SCR-CHECK-AMT-BY-POL   (N7.2/9)
1 #SCR-CHECK-AMT          (A10)
1 #SCR-DATE               (A10)
*
1 #LOAN-PRIN-5    (P7.2)        /* vt4 was p5.2
1 #DEATH-BENEFIT  (P9.2)
1 #NET-DB         (P9.2)
1 #EARNED-INT     (P9.2)
1 #EARNED-INT-BY-POL (P9.2/9)
1 #FINAL-DB       (P9.2)
*
1 #OWNER-POLS-EXIST     (L)
1 #NON-OWNER-POLS-EXIST (L)
1 #D-POLS-EXIST         (L)
1 #INVALID        (L)
1 #ERR-MSG        (A60)
1 #TEXT           (A75)
1 #FIELD-CHANGED  (L)
1 #WRITE-TRLOG    (L)
1 #UPDATE-DATE    (L)
1 #I1                   (I2)
1 #I2                   (I2)
1 #I3                   (I2)
1 #I4                   (I2)
*
1 #HOLD-SUFFIX   (A3)
*
1 #TERM-DEBIT-CREDIT  (P7.2)
1 #HOLD-TERM-PREM-REF-DUE  (P5.2)
1 #HOLD-TERM-DEBIT-CREDIT  (P7.2)
1 #HOLD-TERM-LOAN-PRIN     (P7.2)                   /* vt4 was p5.2
1 #HOLD-TERM-ACC-INT       (P5.2)
1 #HOLD-TERM-CAP-INT       (P5.2)
1 #HOLD-TERM-PREM-PAID     (P6.2)
1 #HOLD-TERM-CASH-VALUE    (P6.2)
1 #HOLD-PAD-CODE           (A1)
1 #HOLD-PAD-CHECK-SAV      (A1)
1 #HOLD-PAD-ABA-NBR        (A9)
1 #HOLD-PAD-ACCT-NUM       (A17)
1 #HOLD-CAP-CONV-ACV       (P5.2)
1 #HOLD-INTRO-FLAG         (A1)
1 #HOLD-PROCESS-IND        (A1)
1 #HOLD-PAY-NOW-SWITCH     (A1)
1 #HOLD-LAST-DB-CR-CHECK   (P7.2)
1 #HOLD-LAST-LOAN-CHECK    (P7.2)
1 #HOLD-MBR-SINCE          (N6)
1 #HOLD-ALOT-CHG-AUTH      (A1)
1 #HOLD-ALOT-CHG-DATE      (N8)
1 #HOLD-REFUND-TO-CAP      (A1)     /* PM35
1 #CHK-DIGIT               (P1)
1 #DIGIT-SUM               (N3)
1 REDEFINE #DIGIT-SUM
  2 #DIG-SUM-2              (N2)
  2 #DIG-SUM-1              (N1)
*
1 #DATE-DISP   (A10)
1 #YYYYMMDD    (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A   (A4)
  2 #MM-A     (A2)
  2 #DD-A     (A2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-N   (N4)
  2 #MM-N     (N2)
  2 #DD-N     (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM (N6)
  2 #DD-R   (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM-A (A6)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A (A8)
1 #WYYYYMMDD
  2 #WYYYY    (N4)
  2 #WMM      (N2)
  2 #WDD      (N2)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-N (N8)
1 #TODAY-YYYYMMDD  (N8)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYY     (N4)
  2 #TODAY-MM       (N2)
  2 #TODAY-DD       (N2)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYYMM   (N6)
  2 #TODAY-DD-R     (N2)
*
1 TRLOG VIEW OF A-TRANSACTION-REGISTER
  2 ID-NUMBER        (N6)
  2 PROCESS-IND      (A1)  /* PM - 06/2000 - SPLIT COMPANIES
  2 NAME             (A25)
  2 DATE-LAST-UPDATE (N8)
  2 TERMINAL-ID      (A8)
  2 CLERK-ID         (A3)
  2 TRANSACTION-DATN (P9)
  2 TRANSACTION-TIMN (P7)
  2 OLD-DATA         (A125/32)
  2 NEW-DATA         (A125/32)
  2 REDEFINE NEW-DATA
    3 NEW-DATA-OCC     (32)
      4 NEW-DATA-CA      (A3)
      4 NEW-DATA-REST    (A22)
  2 SYNC-FLD-NUM        (60)  /* DW7
  2 SYNC-FLD-OLD-DATA   (60)
  2 SYNC-FLD-NEW-DATA   (60)
*
1 CNT-V VIEW OF A-CONTACTS
  2 DATE-OF-BIRTH
  2 REDEFINE DATE-OF-BIRTH
    3 #DOB-YYYY (A4)
    3 #DOB-MM   (A2)
    3 #DOB-DD   (A2)
*
1 #INDEXT         (I2)
1 #W-OLD-NEW-DATA  (A125)
1 REDEFINE #W-OLD-NEW-DATA
  2 #W-DESCRIPTION   (A10)
  2 #W-DATA          (A115)
1 #CHANGED-TO-M     (L)     /* YK1
1 #FOUND-ST-POL     (L)     /* DW19
1 #ISN-FR           (P8)
1 #Y-N              (A1)
1 #POL-PREFIX       (A4)
1 REDEFINE #POL-PREFIX
  2 #POL-PREFIX-X (A1/4)
1 #POL-SUFFIX       (A5)
1 REDEFINE #POL-SUFFIX
  2 #POL-SUFFIX-X  (A1/5)
*
1 #POL-SUFFIX-NUM   (N1)
1 #QUESTION-LN1     (A40)
1 #QUESTION-LN2     (A40)
1 #CALC-POL-NUM     (A16)
1 #POL-NUM          (A16)
1 REDEFINE #POL-NUM
  2 #POL-NUM-X    (A1/16)
1 REDEFINE #POL-NUM
  2 #POL-NUM-XN   (N1/16)
1 #DONE           (L)
1 #ST-UPDATE      (L)
1 #FORCE-A     (L)                    /* DW28
1 #CV-MOD           (C)               /* YK3
1 #VIEW-MOD-FLAG    (A1) INIT <'N'>   /* YK3
1 #CC-NUM           (A)  DYNAMIC      /* YK3
1 #WORK-ABA-NUM           (A9)        /* PM34
1 REDEFINE #WORK-ABA-NUM              /* PM34
  2 #ABA-NUM-1             (A1)        /* PM34
  2 #ABA-NUM-REST          (A8)        /* PM34
*
1 #DATE                     (N8)                  /* PM36
1 #SET                      (I2) CONST <1>          /* NG5
1 #RESET                    (I2) CONST <0>          /* NG5
*
1 #PAD-ACCT-NUM-2           (A17)
1 #TEMP-ABA-HOLD            (A9)
1 #TEMP-ACCT-HOLD           (A17)
*
1 p_ABA_Name     (A)  DYNAMIC                                 /*  bz
1 p_ABA_RC       (I4)                                         /*  bz
1 v_Name         (A36)                                        /*  bz
1 l_ABA_Error    (L)                                          /*  bz
1 l_ACCT_Error   (L)                                          /*  bz
1 v_MARK         (I4)
1 A17            (A17)
END-DEFINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
INCLUDE GONERCXX       /* NATURAL ERROR ROUTINE
SET KEY PF3
DEFINE WINDOW CREATE-SEGMENT                      /* DW19
  SIZE 10 * 50
  BASE BOTTOM LEFT
  FRAMED ON POSITION SYMBOL AUTO
#DATE := *DATN                                    /* PM36
GST-V.
GET CA-V #CGA-ISN
#TEMP-ABA-HOLD    := CA-V.PAD-ABA-NBR
#TEMP-ACCT-HOLD   := CA-V.PAD-ACCT-NUM
#SCR-CV-2 := (AD=NP)
*
MOVE (AD=P) TO #SCR-CV-PAD
*
IF   (#CGA-CLERK = 'KHB' OR = 'SKS' OR = 'VXT' or = 'CGW')   /* DW19              /* vt5
    AND (DATE-OF-DEATH NE 0)
    AND (#CGA-USER-COMPANY = 'I')                 /* DW33
  MOVE TRUE TO #FOUND-FIR
  FIND (1) FR-V WITH WIDOW-KEY = CA-V.ID-NUMBER-A
    IF NO RECORDS FOUND
      RESET #FOUND-FIR
      WRITE 'No FIRS record found ON "KHB FIRS" check'
    END-NOREC
    MOVE *ISN TO #ISN-FR
  END-FIND
*
  GFIR-V.
  GET FR-V #ISN-FR
  SET WINDOW 'create-segment'
*
  FOR #I1 1 TO 9
    IF NOT #FOUND-FIR
      ESCAPE BOTTOM
    END-IF
    IF FR-V.POL-NAME (#I1) = 'AMAA' OR = 'AAFMAA'
      RESET #FOUND-ST-POL #POL-NUM #POL-PREFIX #POL-SUFFIX
      RESET #POL-SUFFIX-NUM
*
      FOR #I2 1 TO 9
        IF   (CA-V.ISSUE-DATE (#I2) = FR-V.POL-DATE  (#I1))
          MOVE TRUE TO #FOUND-ST-POL
          ESCAPE BOTTOM
        END-IF
      END-FOR
*
      IF NOT #FOUND-ST-POL
        MOVE     'Do you wish to  Build a Terminated' TO #QUESTION-LN1
        COMPRESS 'Policy with Iss-Date' FR-V.POL-DATE (#I1) '?' INTO #QUESTION-LN2
        INPUT MARK *#Y-N USING MAP 'C2652MCA'                     /* DW19
*
        IF NOT #Y-N = 'Y' OR = 'N'
          REINPUT 'Must be "Y" or "N"'
            MARK *#Y-N
        END-IF
*
        IF #Y-N NE 'Y'
          SET WINDOW OFF
          ESCAPE ROUTINE
        END-IF
*
        MOVE     'Enter the Full Policy Number of the' TO #QUESTION-LN1
        COMPRESS 'Policy with Iss-Date' FR-V.POL-DATE (#I1) '?' INTO #QUESTION-LN2
        INPUT MARK *#POL-NUM USING MAP 'C2652MCA'                     /* DW19
        IF #POL-NUM = ' '
          REINPUT 'Policy must be entered'
            MARK *#POL-NUM
        END-IF
*
        IF FR-V.POL-DATE (#I1) GE 19941201
          FOR #I3 1 TO 16
            IF  #POL-NUM-X (#I3) NE MASK (N) /* Find end of CN Number
              FOR #I3 #I3 TO 16
                IF #POL-NUM-X (#I3) = MASK (N)
                  ADD 1 TO #I4
                  MOVE #POL-NUM-XN (#I3) TO #POL-SUFFIX-NUM
                  ESCAPE BOTTOM
                END-IF
              END-FOR
            END-IF
          END-FOR
        ELSE
          FOR #I3 1 TO 16
            IF #DONE
              ESCAPE BOTTOM
            END-IF
*
            IF #POL-NUM-X (#I3) NE MASK (N) /* Find beginning of Pol Number
              IF #I3 GT 4
                REINPUT 'Invalid Policy Number - Only 4 Chars in Prefix'
                  MARK *#POL-NUM
              END-IF
              MOVE #POL-NUM-X (#I3) TO #POL-PREFIX-X (#I3)
            ELSE
              FOR #I3 #I3 TO 16
                IF #DONE
                  ESCAPE BOTTOM
                END-IF
*
                IF  #POL-NUM-X (#I3) NE MASK (N) /* Find end of CN Number
                  RESET #I4
                  FOR #I3 #I3 TO 16
                    IF #DONE
                      ESCAPE BOTTOM
                    END-IF
*
                    IF #POL-NUM-X (#I3) = ' '
                      ESCAPE BOTTOM
                    END-IF
*
                    ADD 1 TO #I4
                    IF #I4 GT 5
                      REINPUT 'Invalid Policy Number - Only 5 Chars in Suffix'
                        MARK *#POL-NUM
                    END-IF
*
                    MOVE #POL-NUM-X (#I3) TO #POL-SUFFIX-X (#I4)
                  END-FOR
                  MOVE TRUE TO #DONE
                END-IF
              END-FOR
            END-IF
          END-FOR
*
        END-IF
*
        FOR #I2 1 TO 9
          IF ISSUE-DATE (#I2) = 0  /* 1st seg available
            ESCAPE BOTTOM
          END-IF
        END-FOR
*
        IF #I2 LE 9
          MOVE TRUE TO #ST-UPDATE
          MOVE 'F'                     TO CA-V.STATUS        (#I2)
          MOVE #I2                     TO CA-V.NUM-MBRSHIPS  (#I2)
          MOVE FR-V.POL-DATE     (#I1) TO CA-V.ISSUE-DATE    (#I2)
          MOVE FR-V.POL-TYPE     (#I1) TO CA-V.PLAN          (#I2)
          MOVE FR-V.POL-AMT-PAID (#I1) TO FR-V.DEAD-GROSS-DB (#I1)
          IF CA-V.ISSUE-DATE (#I2) GE 19941201
            MOVE #POL-SUFFIX-NUM TO CA-V.NUM-MBRSHIPS (#I2)
          ELSE
            MOVE #POL-PREFIX TO POL-NUM-PRE (#I2)
            MOVE #POL-SUFFIX TO POL-NUM-SUF (#I2)
          END-IF
        END-IF
      END-IF
    END-IF
  END-FOR
*
  IF #ST-UPDATE
    UPDATE (GST-V.)   /* STATUS
    UPDATE (GFIR-V.)   /* FIRS
    END TRANSACTION
*
    FOR #I1 1 TO 9
      IF ISSUE-DATE (#I1) = 0
        ESCAPE BOTTOM
      END-IF
*
      CALLNAT 'GPLNMSXX' #CALC-POL-NUM ID-NUMBER #I2 /* build POL-#
      MOVE #CALC-POL-NUM TO #POL-NUM
*
      MOVE     'Is the Correct Policy Number for Pol' TO #QUESTION-LN1
      COMPRESS 'issued' ISSUE-DATE (#I1)'? If not Call EDS' TO #QUESTION-LN2
      INPUT MARK *#Y-N USING MAP 'C2652MCA'                     /* DW19
    END-FOR
  END-IF
  SET WINDOW OFF
END-IF
*
GCA-V.
GET CA-V #CGA-ISN
IF ALOT-CHG-AUTH = ' '     /* DW2
  MOVE 'N' TO ALOT-CHG-AUTH
END-IF
*
MOVE *DATN TO #TODAY-YYYYMMDD #YYYYMMDD
COMPRESS #MM-A #DD-A #YYYY-A INTO #SCR-DATE WITH '/'
*
MOVE (AD=P) TO #SCR-DEAD-FIR-CV (*) #SCR-DEAD-GROSS-CV
MOVE TRUE TO #FOUND-FIR
IF DATE-OF-DEATH NE 0
  FIND (1) FR-V WITH WIDOW-KEY = CA-V.ID-NUMBER-A
    IF NO RECORDS FOUND
      RESET #FOUND-FIR
      WRITE 'No FIRS record found'
    END-NOREC
    MOVE *ISN TO #FR-ISN
    RESET #I2
    FOR #I1 1 TO 9
      IF POL-NAME (#I1) = 'AMAA' OR = 'AAFMAA'
        ADD 1 TO #I2                                     /* DW5
*
        FOR #I3 1 TO 9   /* Try 9 pols                   /* DW5
          IF  (CA-V.ISSUE-DATE (#I3) = POL-DATE (#I1))   /* DW18
            MOVE #I3 TO #I2
          END-IF
          IF  (CA-V.ISSUE-DATE (#I3) = POL-DATE (#I1))   /* DW15
              OR (#I2 GE 9)                              /* DW15
            ESCAPE BOTTOM
          END-IF
        END-FOR
        IF  (#I2 = 0)                                     /* DW15
            OR (#I2 GT 9)
          MOVE 1 TO #I2
        END-IF
        MOVE CA-V.ISSUE-DATE (#I2) TO #YYYYMMDD          /* DW15
        COMPRESS #MM-A #DD-A #YYYY-A INTO #SCR-ISS-DT (#I1) WITH '/'
        MOVE DEAD-GROSS-DB  (#I1)  TO #HOLD-DEAD-GROSS-DB  (#I1)
        MOVE DEAD-LOAN-PRIN (#I1)  TO #HOLD-DEAD-LOAN-PRIN (#I1)
        MOVE DEAD-LOAN-INT  (#I1)  TO #HOLD-DEAD-LOAN-INT  (#I1)
        MOVE DEAD-PREM-ADJ  (#I1)  TO #HOLD-DEAD-PREM-ADJ  (#I1)
        MOVE DEAD-DB-CR     (#I1)  TO #HOLD-DEAD-DB-CR     (#I1)
        MOVE DEAD-CAP-INT   (#I1)  TO #HOLD-DEAD-CAP-INT   (#I1)
*
        RESET #SCR-DEAD-FIR-CV (#I1)
        MOVE (AD=P) TO #SCR-DEAD-CV #SCR-DEAD-GROSS-CV
        IF DEAD-GROSS-DB (#I1) NE 0
          MOVE TRUE TO #INFO-ENTERED
*
          IF POL-AMT-PAID (#I1) NE DEAD-GROSS-DB (#I1)
            WRITE ISSUE-DATE (#I1) 'GROSS DB Mismatch' POL-AMT-PAID(#I1)
              DEAD-GROSS-DB (#I1)
          END-IF
        END-IF
      END-IF
    END-FOR
  END-FIND
*
  IF #FOUND-FIR
    GFR-V.
    GET FR-V #FR-ISN
  END-IF
*
  MOVE 'DEATH-BENE' TO #SCR-CSV-DB-LBL
  IF #INFO-ENTERED
    PERFORM CALC-DEATH-BENE-INT-BY-POL
    PERFORM CALC-CHECK-AMT-BY-POL
  ELSE
    PERFORM CALC-DEATH-BENE-INT
    MOVE #DEATH-BENEFIT TO #SCR-CSV-DB
  END-IF
ELSE
  IF #CGA-USER-COMPANY = 'I'                     /* DW33
      or #cga-clerk = 'CGW '                                            /* vt5
    RESET #SCR-DEAD-GROSS-CV
  END-IF
*
  MOVE 'CASH-VALUE' TO #SCR-CSV-DB-LBL
  MOVE TERM-CASH-VALUE TO #SCR-CSV-DB
END-IF
*
* Populate CC info if exists                          /* YK3
* Populate with default CC                            /* YK5
FIND CC-INFO-V WITH ID-NUMBER = CA-V.ID-NUMBER        /* YK3  YK5
    WHERE CC-DEFAULT-IND = 'Y'                          /* YK5
  #CC-NUM       := CC-INFO-V.CC-NUMBER                /* YK3
* #CC-NUM       := FUNCTION-MASK(<#CC-NUM,'*'>)       /* YK3 YK4
  COMPRESS CC-EXPIRATION-MONTH CC-EXPIRATION-YEAR INTO
    #SCN-CC-EXP-DT LEAVING NO                         /* YK3
END-FIND                                              /* YK3

MOVE TERM-CASH-VALUE    TO #HOLD-TERM-CASH-VALUE
MOVE TERM-PREM-REF-DUE  TO #HOLD-TERM-PREM-REF-DUE
MOVE TERM-DEBIT-CREDIT  TO #HOLD-TERM-DEBIT-CREDIT
MOVE TERM-LOAN-PRIN     TO #HOLD-TERM-LOAN-PRIN
MOVE TERM-ACC-INT       TO #HOLD-TERM-ACC-INT
MOVE TERM-CAP-INT       TO #HOLD-TERM-CAP-INT
MOVE TERM-PREM-PAID     TO #HOLD-TERM-PREM-PAID
MOVE PAD-CODE           TO #HOLD-PAD-CODE
MOVE PAD-CHECK-SAV      TO #HOLD-PAD-CHECK-SAV
MOVE PAD-ABA-NBR        TO #HOLD-PAD-ABA-NBR
MOVE PAD-ACCT-NUM       TO #HOLD-PAD-ACCT-NUM
MOVE INTRO-FLAG         TO #HOLD-INTRO-FLAG
MOVE PROCESS-IND        TO #HOLD-PROCESS-IND
MOVE CAP-CONV-ACV       TO #HOLD-CAP-CONV-ACV
MOVE PAY-NOW-SWITCH     TO #HOLD-PAY-NOW-SWITCH
MOVE LAST-DB-CR-CHECK   TO #HOLD-LAST-DB-CR-CHECK
MOVE LAST-LOAN-CHECK    TO #HOLD-LAST-LOAN-CHECK
* MOVE MBR-SINCE          TO #HOLD-MBR-SINCE
MOVE ALOT-CHG-AUTH      TO #HOLD-ALOT-CHG-AUTH
MOVE ALOT-CHG-DATE      TO #HOLD-ALOT-CHG-DATE     /* DW2
IF REFUND-TO-CAP = ' '                             /* PM35
  REFUND-TO-CAP := 'N'                             /* PM35
END-IF                                             /* PM35
MOVE REFUND-TO-CAP      TO #HOLD-REFUND-TO-CAP     /* PM35
PERFORM SET-SIGNS              /* SHOW "-" IF AMOUNT IS NEGATIVE
FIND (1) CNT-V WITH CONTACT-ID = CA-V.MEMBER-CONTACT-ID END-FIND
COMPRESS #DOB-MM #DOB-DD #DOB-YYYY INTO #SCN-DOB-A LEAVING  NO SPACE
COMPRESS MBR-SINCE-DD MBR-SINCE-YYYY INTO #SCN-MBR-SINCE-A  LEAVING NO SPACE
*
IF ALOT-CHG-DATE = 0                      /* DW2
  RESET #SCN-ALOT-CHG-DATE-A
ELSE
  MOVE ALOT-CHG-DATE TO #YYYYMMDD          /* DW2
  COMPRESS #MM-A #YYYY-A INTO #SCN-ALOT-CHG-DATE-A LEAVING NO
END-IF
IF #CGA-CLERK = 'BMG' OR = 'TDM' OR = 'CEB' OR = 'EAC'   /* PM37
    OR FUNCTION-AUTHORIZED(<*INIT-USER>)
  IGNORE
ELSE                                                                  /* RE4 END
  MOVE (AD=P) TO #SCR-PROC-IND-CV
END-IF
*
IF NOT #CGA-CLERK = 'TDM' OR = 'VXT'             /* vt1
    OR = 'CEB' OR = 'RLB' OR = 'KHB' OR = 'EAC' OR = 'ACN'  /* DW6
    OR = 'BMG'                                              /* RE4
    or = 'CGW'                                           /* vt5
    or = 'SKS'                                                         /* vt6
  MOVE (AD=P) TO #SCR-CAP-CV
END-IF
*
IF   (PROCESS-IND = 'C')     /* DW17
    AND (CA-V.INTRO-FLAG = 'A')
  MOVE (AD=P) TO #SCR-CV #SCR-CV-PAD #SCR-CV-A #SCR-DEAD-CV #SCR-DEAD-FIR-CV(*)
  MOVE (AD=P) TO #SCR-CAP-CV #SCR-PROC-IND-CV #SCR-DEAD-GROSS-CV
END-IF
*
IF ( #CGA-USER-COMPANY = 'S'  )                   /* DW33
    and (#cga-clerk ne 'CGW' )                                                   /* vt5
  MOVE (AD=P) TO #SCR-DEAD-FIR-CV  (*)
    #SCR-DEAD-GROSS-CV
    #SCR-CAP-CV
    #SCR-DEAD-CV
    #SCR-ALOT-AUTH-CV
END-IF
*
MOVE '*' TO #CGA-SCR-COMMAND

RESET #D-POLS-EXIST #OWNER-POLS-EXIST
FOR #I1 1 TO 9
  IF CA-V.STATUS (#I1) = 'D'
    IF CA-V.OWNERSHIP-FLAG (#I1) = 'D'
      MOVE TRUE TO #D-POLS-EXIST
    END-IF
    IF CA-V.OWNERSHIP-FLAG (#I1) = ' ' OR = 'N'
        AND CA-V.PAY-STATUS (#I1) LT '41'                         /* PM33
      MOVE TRUE TO #OWNER-POLS-EXIST
    END-IF
  END-IF
END-FOR
IF CA-V.PAD-ABA-NBR <> ' '
  RESET  p_ABA_Name p_ABA_RC
  CALLNAT 'GPRN0ABA' CA-V.PAD-ABA-NBR p_ABA_Name p_ABA_RC
  IF p_ABA_RC <> 0
    v_Name := 'Incorrect ABA'
  ELSE
    v_Name := p_ABA_Name
  END-IF
END-IF


IF #CGA-SCR-SUFFIX = 'CC'                   /* YK3
  RESET #CGA-SCR-SUFFIX                     /* YK3
  CALLNAT 'GPXNCC01' CA-V.ID-NUMBER         /* YK3
  #CGA-SCR-COMMAND := 'CA'                  /* YK3
* FETCH 'G1000PXX'                          /* YK4
ELSE
  INPUT WITH TEXT ' ' USING MAP 'C2650MCA'
  IF #CGA-SCR-COMMAND NE '*'
    END TRANSACTION
    FETCH 'G1000PXX'
  END-IF
  IF    #SCR-CV-PAD MODIFIED
      OR #SCR-CV-ABA MODIFIED
      OR #SCR-CV-A MODIFIED
      OR l_ABA_Error
      OR l_ACCT_Error
    #PAD-ACCT-NUM-2 := ' '
* YK7 >
    IF CA-V.PAD-ABA-NBR = ' ' AND CA-V.PAD-ACCT-NUM = ' '
      RESET CA-V.PAD-CODE
    ELSE
      CA-V.PAD-CODE := 'E'
    END-IF
* < YK7
    PERFORM sbr_ACCOUNT
    INPUT WITH TEXT 'Bank account changes has been validated' USING MAP 'C2650MCA'
  END-IF
END-IF
* END-IF
*
IF #CV-MOD MODIFIED AND #VIEW-MOD-FLAG = 'Y'
  CALLNAT 'GPXNCC01' CA-V.ID-NUMBER            /* YK3
  #CGA-SCR-COMMAND := 'CA'                     /* YK3
END-IF                                         /* YK3
*
PERFORM DO-EDITS
PERFORM UPDATE-RECORD
PERFORM DO-TRLOG
*
PERFORM SET-SIGNS              /* SHOW "-" IF AMOUNT IS NEGATIVE
IF DATE-OF-DEATH NE 0
  PERFORM CALC-CHECK-AMT-BY-POL    /* Updates St File
END-IF

IF #FIELD-CHANGED
  IF ALOT-CHG-AUTH = 'N'     /* DW2
    RESET  ALOT-CHG-AUTH
  END-IF
*
  UPDATE (GCA-V.)
  IF  (DATE-OF-DEATH NE 0)
      AND #FOUND-FIR
    UPDATE (GFR-V.)
  END-IF
END-IF
*
IF #WRITE-TRLOG
  MOVE 'CA-' TO NEW-DATA-CA (1)
  STORE TRLOG
END-IF
END TRANSACTION
*
IF PROCESS-IND NE #HOLD-PROCESS-IND   /* Check for AUTH CHG    DW28
  RESET #FORCE-A
  CALLNAT 'GAUTHSXX' CA-V.ID-NUMBER      /*Set ALOT-CHG-AUTH to A
    #CGA-CLERK #FORCE-A               /* If FA indicates
END-IF
*
MOVE (AD=P) TO #SCR-CV #SCR-CV-PAD #SCR-CV-A #SCR-DEAD-CV #SCR-DEAD-FIR-CV(*)
MOVE (AD=P) TO #SCR-CAP-CV #SCR-PROC-IND-CV #SCR-DEAD-GROSS-CV
*
IF #FIELD-CHANGED
  RESET #TEXT
  IF   (#HOLD-PAD-CODE = 'E')
      AND (PAD-CODE = 'S' OR = 'R')                             /* PM29
    IF #CHANGED-TO-M
      MOVE '- MODE(s) have been changed to "M"' TO #TEXT
    ELSE
      MOVE '- MODE(s) have been changed to "Q"' TO #TEXT
    END-IF
  END-IF
  PRINT NOTITLE 3x 'Transaction completed, press ENTER for LOAN info'(I)
  EJECT
END-IF
IF   (#CGA-USER-COMPANY = 'S')                     /* DW33
    AND (#CGA-SCR-COMMAND = '*')   /* DO not go on the the 2nd screen
  MOVE 'GM' TO #CGA-SCR-COMMAND
  FETCH 'G1000PXX'
END-IF
IF #CGA-SCR-COMMAND = '*'
  FETCH 'C2655PCA'
END-IF
FETCH 'G1000PXX'
* -----------------------------------------------------------------------------
DEFINE SUBROUTINE DO-EDITS
* * * * * * * * * * * * * *
IF NOT INTRO-FLAG = ' ' OR = 'I' OR = 'C' OR = 'B' /* intro/cap/both
    OR = 'S' OR = 'K' OR = 'G' /* sps-gen
    OR = 'O' OR = 'P' OR = 'Q' /* INS-ONLY/ no INS
    OR = 'F'                  /* Free SO
    OR = 'A'                  /* At Pending
  REINPUT USING HELP
    MARK *INTRO-FLAG
END-IF
*
IF NOT PROCESS-IND = 'I' OR = 'S' OR = 'G' OR = 'O' OR = 'D'
    OR = 'C'
  REINPUT USING HELP
    MARK *PROCESS-IND
END-IF
*
IF #SCR-CAP-POL-Y-N NE ' '
  IF #SCR-CAP-ISS-DATE = 0
    REINPUT 'Issue-date must be entered'
      MARK *#SCR-CAP-ISS-DATE
  END-IF
*
  IF NOT #SCR-CAP-POL-Y-N = 'Y' OR = 'N'
    REINPUT 'Must be "Y" or "N"'
      MARK *#SCR-CAP-POL-Y-N
  END-IF
*
  IF   (NOT #CGA-CLERK  = 'TDM' OR = 'VXT' OR = 'CEB' OR = 'EAC' OR = 'KHB' or = 'CGW' )    /* PM32 PM37 vt1 04/08/2015 per KHB request  /vt5
      AND (#SCR-CAP-POL-Y-N = 'N')
    REINPUT 'Only EDS can Uncap a member'
      MARK *#SCR-CAP-POL-Y-N
  END-IF
*
  FOR #I1 1 TO 9
    IF   (ISSUE-DATE (#I1) = #SCR-CAP-ISS-DATE)
        AND (STATUS (#I1) = 'D')                   /* DW12
      IF #SCR-CAP-POL-Y-N = 'Y'
        IF FACE-AMOUNT (#I1) LT 10000.00
          REINPUT 'Face amt must be at least $10,000'
            MARK *#SCR-CAP-ISS-DATE
        END-IF
*
        IF CONV-DURATION (#I1) = 0 OR = 661 OR = 662
          IGNORE
        ELSE
          IF CONV-DURATION (#I1) = 999  /* cap ind
            REINPUT 'Policy is flagged as a previous CAP'
              MARK *#SCR-CAP-ISS-DATE
          ELSE
            REINPUT 'Conv-Duration must currently be 0'
              MARK *#SCR-CAP-ISS-DATE
          END-IF
        END-IF
      ELSE
        IF CONV-DURATION (#I1) NOT = 999
          REINPUT 'Conv-Duration must currently be 999'
            MARK *#SCR-CAP-ISS-DATE
        END-IF
      END-IF
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  IF #I1 = 10
    REINPUT 'Issue-date not found'
      MARK *#SCR-CAP-ISS-DATE
  END-IF
END-IF
*
IF   (#SCN-ALOT-CHG-DATE-A NE MASK(MMYYYY))
    AND (NOT #SCN-ALOT-CHG-DATE-A = ' ' OR = '000000')
  REINPUT 'Invalid Date; Format must be MMYYYY'
    MARK *#SCN-ALOT-CHG-DATE-A
END-IF
*
IF ALOT-CHG-AUTH = 'Y' OR = 'S' OR = 'A'              /* DW2 DW26
  RESET #IS-A-PAYEE
  FIND NT-V WITH ID-NUMBER = CA-V.ID-NUMBER
    FOR #I1 1 TO 60
      IF NT-V.NOTE-TEXT (#I1) = MASK ('*#ALOT:PAID BY')
        MOVE TRUE TO #IS-A-PAYEE
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
*
  IF #IS-A-PAYEE
    REINPUT 'Alot Chg cannot be used on an Allotment Payee'
      MARK *ALOT-CHG-AUTH
  END-IF
*
  IF NOT CA-V.MILITARY-STATUS = 'A' OR = 'R'                /* DW13
    REINPUT 'Civilians cannot use Auto Allotment Change Processing'
      MARK *ALOT-CHG-AUTH
  END-IF
END-IF
*
IF ALOT-CHG-AUTH = 'Y' OR = 'N' OR = 'S' OR = 'B' OR = 'A' /* DW2/DW23/DW25
  IF   (ALOT-CHG-AUTH = 'B')                              /*       DW23
      AND (#HOLD-ALOT-CHG-AUTH = 'Y' OR = 'S')
    REINPUT 'Alot-Chg-Auth can"t be changed from "Y" to "B"'
      MARK *ALOT-CHG-AUTH
  END-IF
*
  IF ALOT-CHG-AUTH = 'S' OR = 'B'                       /* DW2    DW23
    IF  (NOT #SCN-ALOT-CHG-DATE-A = ' ' OR = '000000')
        OR (ALOT-CHG-AUTH = 'B')     /* date required for B  /* DW23
      COMPRESS #SACD-YYYY #SACD-MM INTO #YYYYMM-A LEAVING NO
      IF ALOT-CHG-AUTH = 'B'                                 /* DW24
        IF #YYYYMM LE #TODAY-YYYYMM
          REINPUT 'Stop Date must be in a Future Month'      /* DW24
            MARK *#SCN-ALOT-CHG-DATE-A
        END-IF
      ELSE
        IF #YYYYMM LT #TODAY-YYYYMM
          REINPUT 'Stop Date must be current or future'
            MARK *#SCN-ALOT-CHG-DATE-A
        END-IF
      END-IF
    END-IF
  ELSE
    IF NOT #SCN-ALOT-CHG-DATE-A = ' ' OR = '000000'        /* DW2
      REINPUT 'Date not allowed with this AUTH Code'
        MARK *#SCN-ALOT-CHG-DATE-A
    END-IF
  END-IF
ELSE
  REINPUT USING HELP                                       /* DW2
    MARK *ALOT-CHG-AUTH
END-IF                                                     /* DW2
IF NOT REFUND-TO-CAP = 'Y' OR = 'N'                        /* PM35
  REINPUT USING HELP                                       /* PM35
    MARK *REFUND-TO-CAP                                    /* PM35
END-IF
/* PM35 YK6 >
* RESET #HAS-CC                                             /* DW1
* FOR #I1 1 TO 9                                            /* DW1
*   IF ((MODE (#I1)= '1' OR = '2' OR = '4' OR = '0')        /* DW1
*       OR (X-ALT-LP-IND   (#I1) = '8')                     /* DW3
*       OR (X-ALT-LP-IND-2 (#I1) = '8'))                    /* DW3
*       AND (STATUS (#I1 ) = 'D')                           /* DW8
*     MOVE TRUE TO #HAS-CC                                  /* DW1
*     ESCAPE BOTTOM                                         /* DW1
*   END-IF                                                  /* DW1
* END-FOR                                                   /* DW1
* < YK6
FOR #I1 1 TO 9
  IF  (DEAD-DB-CR (#I1) GT  99999.99)                              /* DW4
      OR (DEAD-DB-CR (#I1) LT -99999.99)
    REINPUT 'MAX DB-CR ADJUST is 99,999.99'
      MARK *DEAD-DB-CR (#I1)
  END-IF
END-FOR
* YK6
* IF #HAS-CC                                              /* DW1
*     AND ((#CC-NUM = ' ') OR (#SCN-CC-EXP-DT = ' ' OR = '000000')) /* DW1 /* YK3
* *     REINPUT 'CC Info required if Mode or Loan Pmt is Cred-Crd'      /* DW3
* *     MARK *#CC-NUM                                                 /* DW1  /* YK3
*   INPUT WITH TEXT 'CC Info required if Mode or Loan Pmt is Cred-Crd' USING MAP 'C2650MCA'     /* YK4
* END-IF
* YK6
END-SUBROUTINE
* =====================================================================
DEFINE sbr_ACCOUNT
REPEAT
  #TEXT := ' '
  MOVE  CA-V.PAD-ACCT-NUM TO A17
  EXAMINE FULL A17 FOR  ' ' REPLACE FULL '0'
  DECIDE FOR EVERY CONDITION
    WHEN  (#TEXT <> ' ') AND NOT CA-V.PAD-CHECK-SAV = ' ' OR = 'S'
      #TEXT  := 'Debit account types: S - saving; BLANK - Checking. PF3 to exit'
      V_MARK := POS(CA-V.PAD-CHECK-SAV)
    WHEN (#TEXT = ' ')
        AND
        ( CA-V.PAD-CODE = ' ') AND ((CA-V.PAD-ABA-NBR  NE ' ') OR (CA-V.PAD-ACCT-NUM NE ' '))
      #TEXT :=  'PRE-AUTH CODE must be entered if ABA-NBR OR ACCT-NBR exists. PF3 to exit'
      v_MARK := POS(CA-V.PAD-CODE)
    WHEN (#TEXT = ' ') AND CA-V.PAD-CODE NE ' '
      CALLNAT 'GPADCSXX' CA-V.PAD-CODE #INVALID #ERR-MSG
      IF #INVALID
        #TEXT  := 'Incorrect PAD Code: Enter ? for help'
        v_MARK := POS(CA-V.PAD-CODE)
      END-IF
    WHEN  (#TEXT <> ' ') AND (CA-V.PAD-ABA-NBR NE MASK (NNNNNNNNN))
      #TEXT := 'ABA NBR must be 9 numeric digits'
      v_MARK := POS(CA-V.PAD-ABA-NBR)
    WHEN  (#TEXT <> ' ') AND NOT A17 NE MASK (NNNNNNNNNNNNNNNNN)
      #TEXT := 'ABA NBR must be numeric'
      v_MARK := POS(CA-V.PAD-ACCT-NUM)
* YK7 >
*     WHEN (#TEXT = ' ')
*         AND
*         ( (#HOLD-PAD-CODE NE CA-V.PAD-CODE)
*         AND (CA-V.PAD-CODE   = 'V' OR = 'X' OR = 'Z' OR = 'E'))
*         AND (NOT #CGA-CLERK  = 'KHB' OR = 'VXT'
*         OR = 'SKS' OR = 'CEJ' OR = 'RDR'  OR = 'AJT' or = 'OAH' or = 'CGW') )             /* vt3  vt5
*       #TEXT  := 'PRE-AUTH Code cannot be changed to "E". PF3 to Exit '
*       v_MARK := POS(CA-V.PAD-CODE)
* < YK7
    WHEN  (#TEXT = ' ')
        AND
        ( (CA-V.PAD-CODE   = 'D' OR = 'X') AND ( NOT #D-POLS-EXIST ) )
      #TEXT  := 'Policy code "D" must exist for PAD-CODE D/X. PF3 to exit '
      v_MARK := POS(CA-V.PAD-CODE)
    WHEN  (#TEXT = ' ')
        AND
        ( (CA-V.PAD-CODE   = 'P' OR = 'V') AND ( NOT #OWNER-POLS-EXIST ) )
      #TEXT  := 'Member policy(ies) must exist for PAD-CODE P. PF3 to exit'
      v_MARK := POS(CA-V.PAD-CODE)
    WHEN   (#TEXT = ' ')
        AND
        ((CA-V.PAD-CODE NE ' ')  AND ((CA-V.PAD-ABA-NBR  = ' ')
        OR (CA-V.PAD-ACCT-NUM = ' ')) )
      #TEXT := 'ABA-NBR and ACCT-NBR must be entered if PRE-AUTH code exists. PF3 to exit'
      v_MARK := POS(CA-V.PAD-ABA-NBR)
    WHEN  (#TEXT = ' ')
        AND
        (l_ABA_Error AND (NOT #SCR-CV-ABA  MODIFIED))
      #TEXT := 'Routing number you entered is incorrect. Reenter or PF3 to exit'    /*  bz
      v_MARK := POS(CA-V.PAD-ABA-NBR)
    WHEN  (#TEXT = ' ')
        AND
*       ( (CA-V.PAD-CODE NE ' ')  AND ( #SCR-CV-ABA  MODIFIED)                                          /*  bz
        ( #SCR-CV-ABA  MODIFIED  AND (CA-V.PAD-ABA-NBR <> ' ' )                                         /*  YK7
*          OR ( (#HOLD-PAD-CODE = 'S')
*          AND (CA-V.PAD-CODE = 'P' OR ='D' OR = 'L')
*          AND (NOT #SCR-CV-ABA  MODIFIED )
*          AND (CA-V.PAD-ABA-NBR <> ' ' ) )
        )
      RESET v_Name
      RESET  p_ABA_Name p_ABA_RC
      CALLNAT 'GPRN0ABA' CA-V.PAD-ABA-NBR p_ABA_Name p_ABA_RC
      IF p_ABA_RC <> 0
        l_ABA_Error := TRUE
        #TEXT := 'Routing number you entered is incorrect. Reenter or PF3 to exit'
        v_MARK := POS(CA-V.PAD-ABA-NBR)
      ELSE
        l_ABA_Error := FALSE
      END-IF
      v_Name := p_ABA_Name
    WHEN (#TEXT = ' ')
        AND
        ( ( #SCR-CV-A MODIFIED OR #SCR-CV-ABA MODIFIED OR l_ACCT_Error )
        AND ((CA-V.PAD-ABA-NBR <> ' ') AND (CA-V.PAD-ACCT-NUM <> ' ') AND (CA-V.PAD-CODE <> ' ')) )
      IF #SCR-CV-ABA MODIFIED
        #SCR-CV-A   := (AD=NP)
        #SCR-CV-2   := (AD=U)
        l_ACCT_Error := TRUE
        #TEXT:= 'Verify Bank Name and Confirm  ACCT NBR. PF3 to exit'              /* bz
        v_MARK := POS(#PAD-ACCT-NUM-2)
      END-IF
      IF( CA-V.PAD-ACCT-NUM = #PAD-ACCT-NUM-2)
        #SCR-CV-A     := (AD=P)
        l_ACCT_Error := FALSE
      ELSE
        l_ACCT_Error := TRUE
        #SCR-CV-A     := (AD=NP)
        #SCR-CV-2     := (AD=U)
        #TEXT := 'ACCT NBR Doesnt match. Reenter or PF3 to exit'
        v_MARK := POS(#PAD-ACCT-NUM-2)
      END-IF
    WHEN ANY
      IF #TEXT <> ' '
        INPUT WITH TEXT  #TEXT MARK v_MARK USING MAP 'C2650MCA'
*              ESCAPE BOTTOM
        IF *PF-KEY = 'PF3'
          BACKOUT
          MOVE 'GM' TO #CGA-SCR-COMMAND
          FETCH 'G1000PXX'
        END-IF
      ELSE
        #SCR-CV-PAD   := (AD=P)
        #SCR-CV-ABA   := (AD=P)
        #SCR-CV-A     := (AD=P)
        #SCR-CV-2     := (AD=NP)
        ESCAPE BOTTOM
      END-IF
    WHEN NONE
      #SCR-CV-PAD   := (AD=P)
      #SCR-CV-ABA   := (AD=P)
      #SCR-CV-A     := (AD=P)
      #SCR-CV-2     := (AD=NP)
      ESCAPE BOTTOM
  END-DECIDE
END-REPEAT
END-SUBROUTINE

* * * * * * * * * * * * * *
DEFINE SUBROUTINE DO-TRLOG
* * * * * * * * * * * * * *
*
ASSIGN #INDEXT = 1
RESET #SFX    /* DW7
*
IF #HOLD-INTRO-FLAG NE INTRO-FLAG
  IF   (INTRO-FLAG = 'O' OR = 'P' OR = 'Q')    /* ins-only
      AND (NOT PROCESS-IND = 'S' OR = 'I' OR = 'D' OR = 'O')
    ADD 1 TO #SFX                                   /* DW9
    MOVE 403          TO SYNC-FLD-NUM (#SFX)
    MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
*
    MOVE 'I' TO PROCESS-IND
    RESET #NOTE-TEXT (*)
    MOVE #CGA-SCR-SUFFIX TO #HOLD-SUFFIX
    MOVE '*NX' TO #CGA-SCR-SUFFIX
    COMPRESS 'CN' #CGA-ID ' has been de Grandfathered'
      INTO #NOTE-TEXT (1)
    MOVE 'KRM' TO #TO-INIT
    FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
    MOVE 'MAS' TO #TO-INIT                                      /* TM1
    FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
    MOVE #HOLD-SUFFIX TO #CGA-SCR-SUFFIX
  END-IF
*
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'INTRO-FL' TO #W-DESCRIPTION
  ADD 1 TO #SFX                                         /* DW7
  MOVE 21 TO SYNC-FLD-NUM(#SFX)
  MOVE #HOLD-INTRO-FLAG TO #W-DATA SYNC-FLD-OLD-DATA(#SFX)  /* DW7
  MOVE #W-OLD-NEW-DATA TO TRLOG.OLD-DATA (#INDEXT)
  MOVE INTRO-FLAG TO #W-DATA SYNC-FLD-NEW-DATA(#SFX)        /* DW7
  MOVE #W-OLD-NEW-DATA TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-PROCESS-IND NE PROCESS-IND
  IF   (NOT #HOLD-PROCESS-IND = 'I' OR = 'D')
      AND (PROCESS-IND = 'I' OR = 'D')
    IF PROCESS-IND = 'D'
      RESET #NOTE-TEXT (*)
      MOVE *DATN TO #YYYYMMDD
      COMPRESS #MM-A #DD-A #YYYY-A INTO #DATE-DISP WITH '/'
      MOVE 1 TO #INT
      COMPRESS '*#DE-GF ON' #DATE-DISP INTO #NOTE-TEXT (1)
*
      IF CA-V.ID-NUMBER GE 106030
        COMPRESS #NOTE-TEXT (#I1) '- Orig a pipelined mbr'
          INTO #NOTE-TEXT(1)
      END-IF
*
      CALLNAT 'E4205SDM' #CGA-ID #INT #CGA-CLERK #NOTE-TEXT (1:10)
    END-IF
*
    RESET #NOTE-TEXT (*)
    MOVE #CGA-SCR-SUFFIX TO #HOLD-SUFFIX
    MOVE '*NX' TO #CGA-SCR-SUFFIX
    COMPRESS 'CN' #CGA-ID ' has been de Grandfathered'
      INTO #NOTE-TEXT (1)
    MOVE 'KRM' TO #TO-INIT
    FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
    MOVE 'MAS' TO #TO-INIT                                      /* TM1
    FETCH RETURN 'G4090PNX' #CGA-CLERK #TO-INIT #NOTE-TEXT (1:5)
    MOVE #HOLD-SUFFIX TO #CGA-SCR-SUFFIX
  END-IF
*
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'PROC-IND' TO #W-DESCRIPTION
  ADD 1 TO #SFX                                         /* DW7
  MOVE 20 TO SYNC-FLD-NUM(#SFX)
  MOVE #HOLD-PROCESS-IND TO #W-DATA SYNC-FLD-OLD-DATA(#SFX)  /* DW7
  MOVE #W-OLD-NEW-DATA TO TRLOG.OLD-DATA (#INDEXT)
  MOVE PROCESS-IND TO #W-DATA SYNC-FLD-NEW-DATA(#SFX)  /* DW7
  MOVE #W-OLD-NEW-DATA TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-CAP-CONV-ACV NE CAP-CONV-ACV
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'CP-CV-ACV' TO #W-DESCRIPTION
  MOVE EDITED #HOLD-CAP-CONV-ACV(EM=ZZ,ZZ9.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED CAP-CONV-ACV(EM=ZZ,ZZ9.99)  TO #W-DATA
  MOVE #W-OLD-NEW-DATA TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #SCR-CAP-POL-Y-N NE ' '
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
*
  IF #SCR-CAP-POL-Y-N = 'Y'
    COMPRESS 'Pol issued' #SCR-CAP-ISS-DATE ' made a CAP policy'
      INTO OLD-DATA (#INDEXT)
  ELSE
    COMPRESS 'Pol issued' #SCR-CAP-ISS-DATE ' removed as a CAP policy'
      INTO OLD-DATA (#INDEXT)
  END-IF
  MOVE OLD-DATA (#INDEXT) TO NEW-DATA (#INDEXT)
*
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-TERM-PREM-REF-DUE NE TERM-PREM-REF-DUE
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-PR-DU'         TO #W-DESCRIPTION
  MOVE EDITED #HOLD-TERM-PREM-REF-DUE (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-PREM-REF-DUE (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-TERM-DEBIT-CREDIT NE TERM-DEBIT-CREDIT
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-DB-CR'         TO #W-DESCRIPTION
  MOVE EDITED #HOLD-TERM-DEBIT-CREDIT (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-DEBIT-CREDIT (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-TERM-LOAN-PRIN NE TERM-LOAN-PRIN
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-LN-PR'         TO #W-DESCRIPTION
  MOVE EDITED #HOLD-TERM-LOAN-PRIN (EM=Z,ZZZ,ZZZ.99) TO #W-DATA                /* vt4
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-LOAN-PRIN (EM=Z,ZZZ,ZZZ.99) TO #W-DATA                      /* vt4
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-TERM-ACC-INT NE TERM-ACC-INT
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-AC-IN'         TO #W-DESCRIPTION
  MOVE EDITED #HOLD-TERM-ACC-INT (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-ACC-INT (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-TERM-CAP-INT NE TERM-CAP-INT
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-CAP-I'         TO #W-DESCRIPTION
  MOVE EDITED #HOLD-TERM-CAP-INT (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-CAP-INT (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-TERM-PREM-PAID NE TERM-PREM-PAID
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-PR-PD'         TO #W-DESCRIPTION
  MOVE EDITED #HOLD-TERM-PREM-PAID (EM=ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-PREM-PAID (EM=ZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF   (#HOLD-TERM-CASH-VALUE NE #SCR-CSV-DB)
    AND (DATE-OF-DEATH = 0)    /* ONLY UPDATE IN A NON DEATH MBR
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'TRM-CSV  '         TO #W-DESCRIPTION
  MOVE #SCR-CSV-DB TO TERM-CASH-VALUE
  MOVE EDITED #HOLD-TERM-CASH-VALUE (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED TERM-CASH-VALUE (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
FOR #I1 1 TO 9
  IF   (#HOLD-DEAD-GROSS-DB (#I1) NE DEAD-GROSS-DB (#I1))
    MOVE TRUE TO #FIELD-CHANGED
    MOVE TRUE TO #WRITE-TRLOG
    MOVE 'Gross-DB '         TO #W-DESCRIPTION
    MOVE EDITED #HOLD-DEAD-GROSS-DB (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
    MOVE EDITED DEAD-GROSS-DB (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
    ADD 1 TO #INDEXT
  END-IF
*
  IF   (#HOLD-DEAD-LOAN-PRIN (#I1) NE DEAD-LOAN-PRIN (#I1))
    MOVE TRUE TO #FIELD-CHANGED
    MOVE TRUE TO #WRITE-TRLOG
    MOVE 'Loan Prin '         TO #W-DESCRIPTION
    MOVE EDITED #HOLD-DEAD-LOAN-PRIN (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
    MOVE EDITED DEAD-LOAN-PRIN (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
    ADD 1 TO #INDEXT
  END-IF
*
  IF   (#HOLD-DEAD-LOAN-INT (#I1) NE DEAD-LOAN-INT (#I1))
    MOVE TRUE TO #FIELD-CHANGED
    MOVE TRUE TO #WRITE-TRLOG
    MOVE 'Loan Int '         TO #W-DESCRIPTION
    MOVE EDITED #HOLD-DEAD-LOAN-INT (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
    MOVE EDITED DEAD-LOAN-INT (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
    ADD 1 TO #INDEXT
  END-IF
*
  IF   (#HOLD-DEAD-PREM-ADJ (#I1) NE DEAD-PREM-ADJ (#I1))
    MOVE TRUE TO #FIELD-CHANGED
    MOVE TRUE TO #WRITE-TRLOG
    MOVE 'Prem-Adj '         TO #W-DESCRIPTION
    MOVE EDITED #HOLD-DEAD-PREM-ADJ (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
    MOVE EDITED DEAD-PREM-ADJ (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
    ADD 1 TO #INDEXT
  END-IF
*
  IF   (#HOLD-DEAD-DB-CR (#I1) NE DEAD-DB-CR (#I1))
    MOVE TRUE TO #FIELD-CHANGED
    MOVE TRUE TO #WRITE-TRLOG
    MOVE 'DB/CR'      TO #W-DESCRIPTION
    MOVE EDITED #HOLD-DEAD-DB-CR (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
    MOVE EDITED DEAD-DB-CR (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
    ADD 1 TO #INDEXT
  END-IF
*
  IF   (#HOLD-DEAD-CAP-INT (#I1) NE DEAD-CAP-INT (#I1))
    MOVE TRUE TO #FIELD-CHANGED
    MOVE TRUE TO #WRITE-TRLOG
    MOVE 'CAP-INT'      TO #W-DESCRIPTION
    MOVE EDITED #HOLD-DEAD-CAP-INT (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
    MOVE EDITED DEAD-CAP-INT (#I1) (EM=Z,ZZZ,ZZZ.99) TO #W-DATA
    MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
    ADD 1 TO #INDEXT
  END-IF
END-FOR
*
IF #HOLD-PAD-CODE NE PAD-CODE
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'PAD-CODE'         TO #W-DESCRIPTION
  MOVE #HOLD-PAD-CODE TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE PAD-CODE TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
*
  RESET #NOTE-TEXT (*)
  MOVE 1 TO #INT
  IF CA-V.PAD-CODE = 'P' OR = 'L' OR  = 'D'
    COMPRESS 'EZPAY CODED - PAD CODE = ' PAD-CODE
      INTO #NOTE-TEXT(1)
  ELSE
    IF CA-V.PAD-CODE = 'S'
      COMPRESS 'EZPAY STOPPED - PAD CODE = ' PAD-CODE
        INTO #NOTE-TEXT(1)
    END-IF
  END-IF
  IF #NOTE-TEXT (1) NE ' '
    CALLNAT 'E4205SDM' #CGA-ID #INT #CGA-CLERK #NOTE-TEXT (1:10)
  END-IF
END-IF
*
IF #HOLD-PAD-CHECK-SAV NE PAD-CHECK-SAV
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'PAD-CH-SV'         TO #W-DESCRIPTION
  MOVE #HOLD-PAD-CHECK-SAV TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE PAD-CHECK-SAV TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-PAD-ABA-NBR NE PAD-ABA-NBR
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'PAD-ABA#'         TO #W-DESCRIPTION
  MOVE #HOLD-PAD-ABA-NBR TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE PAD-ABA-NBR TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-PAD-ACCT-NUM NE PAD-ACCT-NUM
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'PAD-ACCT#'      TO #W-DESCRIPTION
  MOVE #HOLD-PAD-ACCT-NUM TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE PAD-ACCT-NUM TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-PAY-NOW-SWITCH NE PAY-NOW-SWITCH  /* SUNGARD DETH/CSV CHECK
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE TRUE TO #NT-UPDATE
  MOVE 'PAY-NOW'   TO #W-DESCRIPTION
  MOVE #HOLD-PAY-NOW-SWITCH TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE PAY-NOW-SWITCH TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-LAST-DB-CR-CHECK NE LAST-DB-CR-CHECK
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE TRUE TO #NT-UPDATE
  MOVE 'DB-CR-CHK'   TO #W-DESCRIPTION
  MOVE EDITED #HOLD-LAST-DB-CR-CHECK (EM=ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED LAST-DB-CR-CHECK (EM=ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-LAST-LOAN-CHECK NE LAST-LOAN-CHECK
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE TRUE TO #NT-UPDATE
  MOVE 'LOAN-CHK'   TO #W-DESCRIPTION
  MOVE EDITED #HOLD-LAST-LOAN-CHECK (EM=ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE EDITED LAST-LOAN-CHECK (EM=ZZZ,ZZZ.99) TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-ALOT-CHG-AUTH NE ALOT-CHG-AUTH
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  ALOT-CHG-AUTH-DATE := #TODAY-YYYYMMDD              /* YK2
  MOVE 'AL-AUTH'     TO #W-DESCRIPTION
  MOVE #HOLD-ALOT-CHG-AUTH TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE ALOT-CHG-AUTH       TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-ALOT-CHG-DATE NE ALOT-CHG-DATE        /* DW2
  MOVE TRUE TO #FIELD-CHANGED
  MOVE TRUE TO #WRITE-TRLOG
  MOVE 'AL-ATH-DT'     TO #W-DESCRIPTION
  MOVE #HOLD-ALOT-CHG-DATE TO #YYYYMMDD
  MOVE #YYYYMM TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT)
  MOVE ALOT-CHG-DATE       TO #YYYYMMDD
  MOVE #YYYYMM             TO #W-DATA
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT)
  ADD 1 TO #INDEXT
END-IF
*
IF #HOLD-REFUND-TO-CAP NE REFUND-TO-CAP                /* PM35
  MOVE TRUE                TO #FIELD-CHANGED           /* PM35
  MOVE TRUE                TO #WRITE-TRLOG             /* PM35
  MOVE 'CA-RCAP'           TO #W-DESCRIPTION           /* PM35
  MOVE #HOLD-REFUND-TO-CAP TO #W-DATA                  /* PM35
  MOVE #W-OLD-NEW-DATA     TO TRLOG.OLD-DATA (#INDEXT) /* PM35
  MOVE REFUND-TO-CAP       TO #W-DATA                  /* PM35
  MOVE #W-OLD-NEW-DATA     TO TRLOG.NEW-DATA (#INDEXT) /* PM35
  ADD 1 TO #INDEXT                                     /* PM35
END-IF                                                 /* PM35
*
IF #WRITE-TRLOG
  MOVE CA-V.ID-NUMBER TO TRLOG.ID-NUMBER
  MOVE CA-V.PROCESS-IND TO TRLOG.PROCESS-IND /* PM - 06/2000
  MOVE NAME TO TRLOG.NAME
  MOVE DATE-OTHER-UPDATE TO TRLOG.DATE-LAST-UPDATE
  MOVE #CGA-CLERK TO TRLOG.CLERK-ID
  MOVE *INIT-ID TO TRLOG.TERMINAL-ID
  MOVE *DATN TO TRLOG.TRANSACTION-DATN
  MOVE *TIMN TO TRLOG.TRANSACTION-TIMN
END-IF
*
END-SUBROUTINE
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE UPDATE-RECORD
* * * * * * * * * * * * * * * *
*
IF #SCR-CAP-POL-Y-N NE ' '
  FOR #I1 1 TO 9
    IF ISSUE-DATE (#I1) = #SCR-CAP-ISS-DATE
      IF #SCR-CAP-POL-Y-N = 'Y'
        MOVE 999 TO CONV-DURATION (#I1)
*
        IF CAP-ENTRY-DATE = 0
          MOVE *DATN TO #YYYYMMDD
          SUBTRACT 1 FROM #MM-N
          IF #MM-N LT 1
            ADD 12 TO #MM-N
            SUBTRACT 1 FROM #YYYY-N
          END-IF
          MOVE #YYYYMM TO CAP-ENTRY-DATE
          CALLNAT 'GCAPN001' CA-V.ID-NUMBER #SET    /* NG5
        END-IF
*
        IF CA-V.PROCESS-IND = 'G' OR = 'S'    /* DW34
          MOVE 'C' TO CA-V.INTRO-FLAG
        ELSE
          MOVE 'P' TO CA-V.INTRO-FLAG
        END-IF
      ELSE
        RESET CONV-DURATION (#I1)
        RESET CAP-ENTRY-DATE
        CALLNAT 'GCAPN001' CA-V.ID-NUMBER #RESET    /* NG5
*
        IF X-LOAN-AMOUNT (#I1) = 0
          RESET X-LOAN-DATE (#I1)
        END-IF
      END-IF
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-IF
*
IF #SCN-ALOT-CHG-DATE-A = ' ' OR = '000000'           /* DW2
  RESET ALOT-CHG-DATE
ELSE
  COMPRESS #SACD-YYYY #SACD-MM '15' INTO #YYYYMMDD-A LEAVING NO
  MOVE #YYYYMMDD TO ALOT-CHG-DATE
END-IF
*
RESET #CHANGED-TO-M
IF CA-V.PAD-CODE = 'S' OR = 'R'                                   /* PM29
  FOR #I1 1 TO 9
    IF MODE (#I1) = 'E'                                           /* DW20
      IF   (CONV-DURATION (#I1) = 999)
          AND (X-LOAN-AMOUNT (#I1) NE 0)
        MOVE 'M' TO MODE (#I1)
        MOVE TRUE TO #CHANGED-TO-M
      ELSE
        MOVE 'Q' TO MODE (#I1)
      END-IF
    END-IF
*
    IF   (X-ALT-LP-IND (#I1) = '3' OR = '4')    /* DW21
      IF (CONV-DURATION (#I1) = 999)            /* DW21
          AND (X-LOAN-AMOUNT (#I1) NE 0)
        MOVE '6' TO X-ALT-LP-IND (#I1)        /* MIP
      ELSE
        RESET X-ALT-LP-IND (#I1)
          X-ALT-LP-AMT (#I1)
      END-IF
      RESET CAP-BILL-DATE
    END-IF
*
    IF X-ALT-LP-IND-2 (#I1) = '3' OR = '4'
      RESET X-ALT-LP-IND-2 (#I1)
        X-ALT-LP-AMT-2 (#I1)
    END-IF                                                       /* END DW20
  END-FOR
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE SET-SIGNS
*
RESET #SCR-TOT-PREM-DUE-SIGN
IF TERM-PREM-PAID LT 0
  MOVE '-' TO #SCR-TOT-PREM-DUE-SIGN
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-DEATH-BENE-INT
* * * * * * * * * * * * * * * * * * *
*
MOVE TERM-DEBIT-CREDIT TO #TERM-DEBIT-CREDIT
RESET #SEG-I
CALLNAT 'C2321SCI' #CGA-ID-G #SEG-I
  DATE-OF-DEATH
  TERM-PREM-REF-DUE
  #TERM-DEBIT-CREDIT  /* to store bigger field
  TERM-LOAN-PRIN
  TERM-ACC-INT
  #DEATH-BENEFIT
  #NET-DB
  #EARNED-INT
  #FINAL-DB
  #DATE              /* PM36
*
END-SUBROUTINE
* * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-DEATH-BENE-INT-BY-POL
* * * * * * * * * * * * * * * * * * *
*
FOR #I1 1 TO 9
  MOVE #I1 TO #SEG-I
  MOVE DEAD-LOAN-PRIN (#I1) TO #LOAN-PRIN-5
  CALLNAT 'C2321SCI' #CGA-ID-G #I1   /* only used here to get earned-int
    DATE-OF-DEATH
    DEAD-PREM-ADJ (#I1)
    DEAD-DB-CR (#I1)
    #LOAN-PRIN-5
    DEAD-LOAN-INT (#I1)
    #DEATH-BENEFIT               /* gross DB
    #NET-DB                      /* Gross DB - above 4 adjustments
    #EARNED-INT-BY-POL (#I1)     /* earned interest
    #FINAL-DB                    /* #NET DB - Earned-int
    #DATE                        /* PM36
END-FOR
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALC-CHECK-AMT-BY-POL
* * * * * * * * * * * * * * * * *
*
RESET #TOT-CHK-AMT #EARNED-INT #TOT-GROSS-DB
  #TOT-LOAN-PRIN #TOT-LOAN-INT #TOT-DB-CR #TOT-PREM-ADJ
FOR #I1 1 TO 9
  COMPUTE #SCR-CHECK-AMT-BY-POL (#I1) = DEAD-GROSS-DB (#I1)
    + DEAD-PREM-ADJ (#I1)
    + DEAD-DB-CR  (#I1)
    + DEAD-LOAN-PRIN (#I1)
    + DEAD-LOAN-INT (#I1)
    + #EARNED-INT-BY-POL (#I1)
  ADD DEAD-GROSS-DB         (#I1) TO #TOT-GROSS-DB
  ADD DEAD-PREM-ADJ         (#I1) TO #TOT-PREM-ADJ
  ADD DEAD-DB-CR            (#I1) TO #TOT-DB-CR
  ADD DEAD-LOAN-PRIN        (#I1) TO #TOT-LOAN-PRIN
  ADD DEAD-LOAN-INT         (#I1) TO #TOT-LOAN-INT
  ADD #EARNED-INT-BY-POL    (#I1) TO #EARNED-INT
  ADD #SCR-CHECK-AMT-BY-POL (#I1) TO #TOT-CHK-AMT
END-FOR
*
IF DEAD-GROSS-DB (1) = 0
  COMPUTE #TOT-CHK-AMT = #DEATH-BENEFIT + TERM-DEBIT-CREDIT
    + TERM-PREM-REF-DUE + TERM-LOAN-PRIN + TERM-ACC-INT
END-IF
MOVE EDITED #TOT-CHK-AMT (EM=ZZZZZZZ.99) TO #SCR-CHECK-AMT
*
IF #INFO-ENTERED
  MOVE #TOT-GROSS-DB   TO #SCR-CSV-DB
*   #tot-loan-prin-abs := #tot-loan-prin * -1           /* vt4 \/
*   if #tot-loan-prin-abs gt 99999.99
*       compute ca-v.term-loan-prin := 99999.99 * -1
*   else                                               /* vt4 /\
  MOVE #TOT-LOAN-PRIN  TO CA-V.TERM-LOAN-PRIN
*  end-if                                              /* vt4
  MOVE #TOT-LOAN-INT   TO CA-V.TERM-ACC-INT
  MOVE #TOT-PREM-ADJ   TO CA-V.TERM-PREM-REF-DUE
  MOVE #TOT-DB-CR      TO CA-V.TERM-DEBIT-CREDIT
END-IF
*
MOVE #TOT-GROSS-DB TO #SCR-CSV-DB
*
END-SUBROUTINE
END
*  - - - - -
* #CGA-ISN := 87716
*  #CGA-SCR-ID  := 55555
*  #CGA-ORIG-COMMAND := 'CA'
*  #CGA-ID := 55555
*  #CGA-USER-COMPANY := 'I'
*  #CGA-CLERK := 'BZ'
* - - - - -

