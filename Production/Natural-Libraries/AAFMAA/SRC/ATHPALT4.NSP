* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 5
* <Natural Source Header
* PROGRAM-ID: ATHPALT4 - ALLOTMENT MISMATCH & DELINQUENT PROCESSING
********************************************************
*                       MODIFICATION LOG
* USER   DATE      TAG  REASON
* DRW    11092004  DW1  chges to mismatch rpt remove lt 1.00 test
* DRW    02282004  DW2  Do not consider Allot with AT-PENDING a mismatch
* DRW    05192005  DW3  Add Cap members to alot Misc file
* DRW    06092005  DW4  Change critirea for paid-up on mismatch Rpt
* DRW    07292005  DW5  Add Mil Status & ID to ALMS file
* DRW    08112005  DW6  Chg Very Delq from 3 to 4 mons (ELB)
* SAG  12012005 RH1  SS - Replaced the HEC constant '05' (Tab position)
*                    EBCDIC to HEX code '09' ASCII
* SAG-AB 20060502    Upsized counters from P5 to N7
* DRW    07022006  DW7  Reset # Mons Delq if FPF exists
* PAM    09142007  PM8  Remove 3 month check from mismatch reports per KHB
* DRW  03/05/2008  DW9 Add new GM AR amounts to NT record
* DRW  06/02/2008  DW10 Process Inactive members properly
* DRW  06/11/2008  DW11 Add File of Auth Code "A" entered this Month
* DRW  09/04/2008  DW12 Add APFP slot
* PAM  11/03/2008  PM13 Added PENDING APPLICATION status
* DRW  03/02/2009  DW14 Increase Note Occurance from 60 to 500
* PAM  03/20/2009  PM15 Add DREV slot
* PAM  05/04/2009  PM16 Added UNDELIVERABLE addresses to file
* RSE  09/18/2009  RE1  Change PROCESS-IND logic for Unification
* DRW 09/22/2009 DW17 SVC-FEE CALC  /  PROCESS-IND / Number-memberships /600000
* DRW 09/30/2009 DW18 Change NOT LINKED total display from (10) to (3)
* PAM 05/01/2010 PM19 Increased CSV and NET-AVAIL size
* NGG 02/21/2012 NG1  Premier services                                
*     Add 1 month of any government allotment (SVC-MODE = G)paying premier   
*     service plan to this total also (#TOT-ALOT-RQD).
* YAK 10/10/2012 YK1  Use function to identify Level Term II plans
* YAK 02/26/2012 YK2  Process $1 discount for EZ Term
* JNT 09/16/2013 JT1  Address normalization 
********************************************************
DEFINE DATA
LOCAL USING SVCA0003                        /* NG1
LOCAL
1 #MSG                (A) DYNAMIC           /* NG1
1 #TAB       (A1) INIT <H'09'>     /* SAG RH1 12012005 SS
1 #JCL-PARM       (A10)
1 REDEFINE #JCL-PARM
  2 #JCL-MM            (N2)   /* DATE PARM 03/01/1999
  2 #JCL-X1            (A1)
  2 #JCL-DD            (N2)
  2 #JCL-X2            (A1)
  2 #JCL-YYYY          (N4)
1 #TOT-DFAS-NON-MATCH   (P7.2)
* 1 #TOT-ALOT-LINKED-NOT-PAID (P7.2)
1 #TOT-ALOT-NOT-LINKED-NOT-PAID (P7.2)
1 #TOT-BAD-ALOT-NOTE      (P7.2)
*
1 #PARM-YYYYMMDD  (N8)
1 REDEFINE #PARM-YYYYMMDD
  2 #PARM-YYYY      (N4)
  2 #PARM-MM        (N2)
*
1 ST-V VIEW OF A-STATUS
  2 ID-NUMBER
  2 REDEFINE ID-NUMBER
    3 ID-NUMBER-A   (A6)
  2 WIDOW-FLAG     (A1)
  2 LINKED-CN      (40)
  2 REDEFINE LINKED-CN
    3 LINKED-CN-A   (A6/40)
  2 PROCESS-IND
  2 SSN
  2 MEMBER-CONTACT-ID                                          /* JT1
*  2 ADDRESS-CHG-CODE                /* PM16                   /* JT1
  2 ALOT-CHG-AUTH                   /* DW11
  2 ALOT-CHG-AUTH-DATE
  2 PAD-CODE
  2 INTRO-FLAG
  2 NAME
  2 MILITARY-SERVICE
  2 MILITARY-STATUS
  2 ALOT-AMT
  2 DUES-ALL-PAID-IND
  2 X-ALT-LP-IND   (9)
  2 X-ALT-LP-IND-2 (9)
  2 X-ALT-LP-AMT   (9)
  2 X-ALT-LP-AMT-2 (9)
  2 X-LOAN-DATE    (9)
  2 X-LOAN-DATE-2  (9)
  2 X-LOAN-AMOUNT   (9)
  2 X-LOAN-AMOUNT-2 (9)
  2 X-ACCUM-INTEREST   (9)
  2 X-ACCUM-INTEREST-2  (9)
  2 DEBIT-CREDIT-AMT
  2 X-BILL-ADJUST    (9)
  2 X-FIRST-PLACE-FEE(9)
  2 NUMBER-MEMBERSHIPS
  2 ISSUE-DATE          (9)
  2 REDEFINE ISSUE-DATE
    3 ISSUE-DATE-OCC (9)
      4 ISS-DT-YYYY  (N4)
      4 ISS-DT-MM    (N2)
      4 ISS-DT-DD    (N2)
  2 STATUS              (9)
  2 PAY-STATUS          (9)
  2 OWNERSHIP-FLAG      (9)
  2 RID-PLAN            (9)
  2 PLAN                (9)
  2 REDEFINE PLAN
    3 PLAN-OCC   (9)
      4 PLAN-A1    (A1)
      4 PLAN-A2    (A2)
  2 MONTH-ALLOC-AMT     (9)
  2 MODE                (9)
  2 DEATH-BENEFIT       (9)
  2 ANNUAL-PREM         (9)
  2 CASH-VALUE         (9)
  2 PAID-TO-DATE        (9)
  2 REDEFINE PAID-TO-DATE
    3 PAID-TO-DATE-OCC   (9)
      4 PAID-TO-DATE-YYYY    (N4)
      4 PAID-TO-DATE-MM      (N2)
      4 PAID-TO-DATE-DD      (N2)
*
1 AT-V VIEW OF A-APPL-TRACKING
  2 SSN
  2 ID-NUMBER
  2 INTRO-FLAG
  2 CAP-IND
  2 CAP-LOAN-AMT
*
1 LK-V VIEW OF A-STATUS
  2 ID-NUMBER      (N6)
  2 INTRO-FLAG
  2 ALOT-AMT
  2 NUMBER-MEMBERSHIPS
  2 STATUS              (9)
  2 PAY-STATUS          (9)
  2 PLAN                (9)
  2 MODE                (9)
  2 ANNUAL-PREM         (9)
  2 ISSUE-DATE          (9)
  2 PAID-TO-DATE        (9)
*
1 NT-V VIEW OF A-NOTES
  2 C*NOTE-TABLE            /* DW14
  2 NOTE-TEXT    (500)     /* DW14
  2 REDEFINE NOTE-TEXT
    3 NOTE-TEXT-OCC  (500)     /* DW14
      4 NOTE-TEXT-60           (A60)
      4 REDEFINE NOTE-TEXT-60
        5 NOTE-TEXT-FILL1        (A14)
        5 NOTE-TEXT-ALOT-PAYS-CN (A6)
        5 NOTE-TEXT-FILL2        (A40)
      4 REDEFINE NOTE-TEXT-60
        5 NOTE-TEXT-FILL3           (A17)
        5 NOTE-TEXT-ALOT-PAID-BY-CN (A6)
        5 NOTE-TEXT-FILL4           (A37)
*
  2 REDEFINE NOTE-TEXT /*loan reg/acct reg tots-also ATHP08P1/G4200PMS
    3 NT-LN-TOT-AVAIL-TODAY        (N13.2)              /* vt 09282012 was n9.2
    3 NT-LN-TOT-MBRS-ELIG-LNS      (N7)
*
    3 NT-LN-PRIN               (N9.2/2)
    3 NT-LN-DISBURSED          (N9.2/2)
    3 NT-LN-REPAID             (N9.2/2)
    3 NT-LN-ACC-INT            (N9.2/2)
    3 NT-LN-BILLED-AMT         (N9.2/2)
    3 NT-LN-INT-RECV           (N9.2/2)
    3 NT-LN-MBRS-W-LNS         (N7/2)
    3 NT-LN-COMP-INT-RT        (N2.5/2)
    3 NT-LN-CAP-INT-TO-DATE    (N9.2/2)
    3 NT-LN-MBRS-W-CAP-INT     (N7/2)
    3 NT-LN-LNS-BY-INT-RT-TBL  (13)
      4 NT-LN-LNS-BY-INT-RT     (N9.2/2)
    3 NT-LN-TOT-COMP-RT        (N2.5)
*
    3 NT-PR-PMT      (P9.2)
    3 NT-PR-NEW-LN   (P9.2)
    3 NT-PR-ADDL-LN  (P9.2)
    3 NT-PR-CAP      (P9.2)
    3 NT-PR-ADJ      (P9.2)
    3 NT-PR-NET-CHG  (P9.2)
    3 NT-IN-PMT      (P9.2)
    3 NT-IN-ADDL-LN  (P9.2)
    3 NT-IN-CAP      (P9.2)
    3 NT-IN-ADJ      (P9.2)
    3 NT-IN-NET-CHG  (P9.2)
    3 NT-ACC-ADJ     (P9.2)
    3 NT-PREM-PMT    (P9.2)
    3 NT-PREM-REV    (P9.2)
    3 NT-FPF-PMT     (P9.2)
    3 NT-FPF-REV     (P9.2)
    3 NT-DUES-PMT    (P9.2)
    3 NT-DUES-REV    (P9.2)
    3 NT-FPF-DU-PMT  (P9.2)
    3 NT-FPF-DU-REV  (P9.2)
    3 NT-ALOT-START  (P9.2)
    3 NT-ALOT-STOP   (P9.2)
    3 NT-EZ-START    (P9.2)
    3 NT-EZ-ADJ      (P9.2)
    3 NT-DR          (P9.2)
    3 NT-CR          (P9.2)
*
    3 NT-RECEIPTS    (P9.2)
    3 NT-INT-TRAN    (P9.2)
    3 NT-DISBURSEMENTS (P9.2)
    3 NT-ADJ-APL     (P9.2)
    3 NT-ADJ-APL-CAP (P9.2)
    3 NT-ADJ-ETI     (P9.2)
    3 NT-ADJ-ALP     (P9.2)
    3 NT-ADJ-AIP     (P9.2)
    3 NT-ADJ-ELP     (P9.2)
    3 NT-ADJ-EIP     (P9.2)
    3 NT-EZ-PREMS    (P9.2)
    3 NT-ADJ-APL-PREM (P9.2)
    3 NT-ADJ-JI      (P9.2)
    3 NT-ADJ-L       (P9.2)
*
    3 NT-PAD-AMT     (P9.2)
*
    3 NT-PR-PMT-CAP  (P9.2)
    3 NT-PR-ADJ-CAP  (P9.2)
    3 NT-IN-PMT-CAP  (P9.2)
    3 NT-IN-ADJ-CAP  (P9.2)
    3 NT-ACC-ADJ-CAP (P9.2)
    3 NT-ADJ-ALP-CAP (P9.2)
    3 NT-ADJ-AIP-CAP (P9.2)
    3 NT-ADJ-ELP-CAP (P9.2)
    3 NT-ADJ-EIP-CAP (P9.2)
    3 NT-EZPAY-DUES  (P9.2)
    3 NT-ALLOT-DUES  (P9.2)
    3 NT-APL-DUES    (P9.2)
    3 NT-EZPAY-DUES-SO (P9.2)
    3 NT-ALLOT-DUES-SO (P9.2)
    3 NT-FPF-DU-PMT-SO (P9.2)
    3 NT-FPF-DU-REV-SO (P9.2)
    3 NT-DUES-PMT-SO  (P9.2)
    3 NT-DUES-REV-SO  (P9.2)
    3 NT-FPF-RID-PMT  (P9.2)    /* BELOW 6 ADDED 11/6/1999
    3 NT-FPF-RID-REV  (P9.2)
    3 NT-RID-PMT      (P9.2)
    3 NT-RID-REV      (P9.2)
    3 NT-RID-ALLOT    (P9.2)
    3 NT-RID-EZPAY    (P9.2)
    3 NT-ALLOT-PREMS  (P9.2)    /* below 2  added 3/26/2002
    3 NT-CTX-DFAS-TOT (P9.2)
*                            /* below 3  added 7/12/2004
    3 NT-ALLOT-UNDER  (P9.2)       /* amt alot-amt less than amt needed
    3 NT-ALLOT-OVER   (P9.2)       /* amt alot-amt gtr than amt needed
    3 NT-DFAS-NON-MATCH (P9.2)  /* amt dfas ssn non-match to AAFMAA
*      <<<<<<< above non-match is loaded by this program
*                            /* below 10 added 3/5/2008     /* DW9
    3 NT-EZPAY-BADJ      (P9.2)
    3 NT-EZPAY-UNDERAGES (P9.2)
    3 NT-EZPAY-OVERAGES  (P9.2)
    3 NT-CC-RIDER           (P9.2)
    3 NT-CC-CAP-LOANS       (P9.2)
    3 NT-CC-POLICY-LOANS    (P9.2)
    3 NT-CC-CAP-INTEREST    (P9.2)
    3 NT-CC-POLICY-INTEREST (P9.2)
    3 NT-CC-BADJ            (P9.2)
    3 NT-CC-TOTAL           (P9.2)
*                            /* below 1 added 9/1/2008     /* DW12
    3 NT-EZPAY-APFP    (N9.2)
*                            /* below 1 added 03/01/2009   /* PM15
    3 NT-CC-DREV            (P9.2)                            /* PM15
*
1 ALOT-REC    (A45)
1 REDEFINE ALOT-REC
  2 AL-SSN-A    (A9)
  2 REDEFINE AL-SSN-A
    3 AL-SSN     (N9)
  2 AL-SERV     (A1)
  2 AL-STATUS   (A1)
  2 AL-AMOUNT-A (A6)
  2 REDEFINE AL-AMOUNT-A
    3 AL-AMOUNT  (N4.2)
  2 AL-NAME     (A22)
  2 AL-EFF-DT   (N06)
*
1 VOUC-REC    (A55)
1 REDEFINE VOUC-REC
  2 V-SSN      (N9)
  2 V-CN       (N6)
  2 V-SERV     (A1)
  2 V-STATUS   (A1)
  2 V-AMOUNT   (N4.2)
  2 V-NAME     (A25)
  2 V-DB-CR    (N5.2)
*
1 #COUNTERS
  2 #RECS-READ        (P7)
  2 #RECS-SELECTED    (P7)
  2 #CNT              (P7)
  2 #CNT-2            (P7)
  2 #CNT-3            (P7)
  2 #CNT-4            (P7)
  2 #CNT-5            (P7)
  2 #CNT-6            (P7)
  2 #CNT-7            (P7)
  2 #CNT-8            (P7)
  2 #CNT-9            (P7)
  2 #CNT-10           (P7)
  2 #CNT-11           (P7)
  2 #I1               (I2)
  2 #I2               (I2)
  2 #I3               (I2)
  2 #I9               (I2)
  2 #LKD-CNS        (N6/20)
*
1 #YYYYMMDD        (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY          (N4)
  2 #MM            (N2)
  2 #DD            (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A        (A4)
  2 #MM-A          (A2)
  2 #DD-A          (A2)

*
1 #LOAN-IND    (A1)
1 #SVC-FEE    (N2.2)
1 #SVC-FEE-2P (N2.2) INIT <18.50>
1 #SVC-FEE-3P (N2.2) INIT <12.50>
1 #SVC-FEE-4P (N1.2) INIT <9.50>
1 #SVC-FEE-5P (N1.2) INIT <7.50>
1 #SVC-FEE-6P (N1.2) INIT <6.50>
1 #SVC-FEE-7P (N1.2) INIT <6.00>
1 #SVC-FEE-10 (N1.2) INIT <4.50>
1 #SVC-FEE-20 (N1.2) INIT <3.00>
1 #SVC-FEE-30 (N1.2) INIT <2.50>
1 #SVC-FEE-OL (N1.2) INIT <2.00>
1 #SVC-FEE-TM (N1.2) INIT <2.00>
*
1 #AMT-8     (A8)
1 #AMT-10    (A10)
*
1 #PP      (L)                        /* DW4
1 #UNDL    (A4)                       /* PM16
1 #TOT-FIX-LOAN    (N5.2)
1 #TOT-VAR-LOAN    (N6.2)
1 #NUM-WL-POLS (N3)
1 #PREM-DUE    (N5.2)
1 #DUES-DUE    (N5.2)
1 #APL-AMT     (N5.2)
1 #LOAN-INT    (N6.2)
1 #CSV         (N7.2)                 /* PM19
1 #NET-AVAIL   (N7.2)                 /* PM19
1 #ALOT-A-REC   (A100)                /* DW11
1 #HAS-PDUP    (A1)
1 #IS-DEAD     (A1)
1 #IS-INACTIVE (A1)
1 #AUTH-DATE-X (A10)
1 #DB-CR-X     (A12)
1 #ALOT-AMT-X  (A12)
*
1 #ALOT-MATCHES           (N7)  /* SAG-AB 20060502
1 #MISMATCH-RESOLVED      (N7)  /* SAG-AB 20060502
1 #TOT-ALOT-DIFF-LT-1-NUM (N7)  /* SAG-AB 20060502
1 #TOT-ALOT-DIFF-LT-1-AMT (P7.2)
1 #TOT-ALOT-RQD      (P5.2)
1 #TOT-MONS-DELQ     (P5)
1 #TOT-STOPS        (N5)
1 #TOT-STARTS       (N5)
1 #DFAS-SSN     (N9)
1 REDEFINE #DFAS-SSN
  2 #DFAS-SSN-A  (A9)
1 #DFAS-IN                (N7)  /* SAG-AB 20060502
1 #AAFMAA-IN              (N7)  /* SAG-AB 20060502
1 #ALOT-DIFF    (P5.2)
1 #TOT-ALOT-DIFF-MIN   (P9.2)
1 #TOT-ALOT-DIFF-PLUS  (P9.2)
1 #TOT-ALOT-DIFF    (P7.2)
1 #LK-ALOT-AMT  (P5.2)
1 #MATCHED-LNK   (P5)
1 #TOT-MODE      (P5.2)
1 #NOTE-TEXT (A60/10)
1 #INT     (I2)
1 #CLERK   (A3)
1 #TOT-ALOT    (P5.2)
1 #PAYOR-CN      (N6)
1 REDEFINE #PAYOR-CN
  2 #PAYOR-CN-A    (A6)
1 #PAYEE-CN   (N6)
1 REDEFINE #PAYEE-CN
  2 #PAYEE-CN-A  (A6)
1 #FOUND-PAID-BY  (L)
1 #FOUND-NT       (L)
1 #LAST-ISS-DT    (N8)
1 #LAST-PD-TO-DT  (N8)
1 #1-MONS-AGO-TODAY (N8)
1 #2-MONS-AGO-TODAY (N8)
1 #1-MONS-AGO     (N8)
1 #2-MONS-AGO     (N8)
1 #3-MONS-AGO     (N8)
1 #1-YR-AGO       (N8)
1 #1ST-POL-X      (I2)
1 #HAS-FBR        (L)
1 #FOUND-AT       (L)
1 #STATUS      (A5)
*
1 #NUM-RECS          (P6)
1 #EXTRACT-125    (A125)
1 #REC-OVERFLOW      (A250)
1 REDEFINE #REC-OVERFLOW
  2 #REC-OVF-1ST-125   (A125)
  2 #REC-OVF-2ND-125   (A125)
*
1 #EXTRACT-300
  2 #EXT-125-1   (A125)
  2 #EXT-125-2   (A125)
  2 #EXT-50      (A50)
*
1 #CITY                 (A22)
*
* below is linkage to GRIDCSXX
1 #ID         (N6)
1 REDEFINE #ID
  2 #ID-A      (A6)
* THE FOLLOWING INPUT IS PASSED ONLY ON AN "AT" FOR A NEW RIDER
1 #AT-RID-ATTACH-FAC-AMT (N6.2) /* Only if attached to the new "AT"
1 #AT-RID-ATTACH-PLAN    (A3)   /*    policy not yet created
1 #AT-RID-PLAN           (A2/5) /* New rider plan
1 #AT-RID-ATTACH-ISS-DT  (N8/5) /* Only if attached to an existing pol
* output below  (ex = existing)
1 #AT-TOT-FBR-PREM        (N3.2)
1 #EX-FBR-PREM-BY-LINE    (N3.2/9)
1 #EX-SPS-DB-BY-LINE      (N6/9)
1 #EX-DEP-DB-BY-LINE      (N6/9)
1 #EX-EACH-DEP-DB-BY-LINE (N6/9)
1 #NUM-ELIG-CHILDREN      (N2)
1 #NUM-ELIG-CHILDREN-UNDER-6-MON (N2)
1 #TOT-CHILD-DB      (N6)
1 #RID-TEXT          (A78)
* above is linkage to GRIDCSXX
1 #EZ-TERM           (A2) CONST <'EZ'> 
*
END-DEFINE
* * * * * * * * * * * * * * * * *
*
READ WORK 1 ONCE RECORD #JCL-PARM
*
MOVE #JCL-YYYY TO #YYYY
MOVE #JCL-MM   TO #MM
MOVE #JCL-DD   TO #DD
MOVE #YYYYMMDD TO #PARM-YYYYMMDD
*
MOVE #PARM-YYYYMMDD TO #YYYYMMDD
SUBTRACT 2 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #2-MONS-AGO
*
MOVE #PARM-YYYYMMDD TO #YYYYMMDD
SUBTRACT 3 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #3-MONS-AGO
*
MOVE #PARM-YYYYMMDD TO #YYYYMMDD
SUBTRACT 1 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #1-MONS-AGO
*
MOVE #PARM-YYYYMMDD TO #YYYYMMDD
SUBTRACT 1 FROM #YYYY
MOVE #YYYYMMDD TO #1-YR-AGO
*
MOVE *DATN TO #YYYYMMDD
SUBTRACT 2 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #2-MONS-AGO-TODAY
*
MOVE *DATN TO #YYYYMMDD
SUBTRACT 1 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMMDD TO #1-MONS-AGO-TODAY
*
FORMAT  LS=133 PS=76
WRITE   TITLE LEFT 'PROGRAM: ' *PROGRAM 5X    /* not now used
  'Allotment Exceptions'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (2) LS=133 PS=76
WRITE  (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X    /* not now used
  'Allotment Ongoing credits'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (3) LS=133 PS=76
WRITE  (3) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 2 -ALLOTMENTS: AAFMAA ALOT but missing DFAS ALLOT'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (4) LS=133 PS=76
WRITE  (4) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 1 - ALLOTMENTS: DFAS ALLOT but missing AAFMAA ALOT'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (5) LS=133 PS=76
WRITE  (5) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 3- DFAS SSN MATCHES AAFMAA ALOT but Amts not equal'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (6) LS=133 PS=76
WRITE (6) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 4 -NON-CAP AAFM ALOT needed not equal to AAFMAA ALOT-AMT'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (7) LS=150 PS=76
WRITE  (7) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'MPL CAN BE MADE'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (8) LS=133 PS=76
WRITE  (8) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 5 - Very Delinquent Policies (PD-TO or FPF)'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (9) LS=133 PS=76
WRITE  (9) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 6 - New Policies with Delq Bill Adjust or FPF'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (10) LS=133 PS=76
WRITE  (10) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'File 10 - RPT 7 - Allot LInkage Exceptions'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
FORMAT (11) LS=133 PS=76
WRITE  (11) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'RPT 8 -CAP AAFM ALOT needed not equal to AAFMAA ALOT-AMT'
  5X 'DATE: ' *DAT4U 5X 'TIME: ' *TIMX
*
COMPRESS
  'SSN'
  #TAB 'CN'
  #TAB 'ISS-DT'
  #TAB 'PD-TO-DT'
  #TAB 'INT-FLAG'
  #TAB 'PAY-STAT'
  #TAB 'MODE'
  #TAB 'PLAN'
  #TAB 'MONS-DELQ'
  #TAB 'DB-CR'
  #TAB 'NAME'
  #TAB 'DEATH-BENE'
  #TAB 'FPF'
  INTO #EXT-125-1 LEAVING NO
*
WRITE WORK FILE 4 #EXTRACT-300
RESET #EXT-125-1
RESET #EXT-125-2
RESET #EXT-50
RESET #REC-OVERFLOW
*
COMPRESS
  'SSN'
  #TAB 'CN'
  #TAB 'NAME'
  #TAB 'MIL-ST'   /* DW5
  #TAB 'MIL-ID'
  #TAB 'STATUS'
  #TAB 'DFAS-AMT'
  #TAB 'AAFM-ALOT'
  #TAB 'AMT-REQD'
  #TAB 'DIFF'
  #TAB 'DB-CR'
  #TAB 'FLAG'
  #TAB 'LOAN'
  #TAB 'LINKED'
  #TAB 'PAY-STAT'
  #TAB 'UNDEL ADDR'            /* PM16
  #TAB 'ALOT-LNK-NOTE'
  INTO #REC-OVERFLOW LEAVING NO
WRITE WORK FILE 5 #REC-OVERFLOW
*
COMPRESS                        /* DW11
  'CN'
  #TAB 'SSN'
  #TAB 'NAME'
  #TAB 'Date became A'
  #TAB 'MIL-ST'
  #TAB 'MIL-ID'
  #TAB 'AAFM-ALOT'
  #TAB 'DB-CR'
  #TAB 'DEAD?'
  #TAB 'Inactive?'
  #TAB 'HAS a PD-UP'
  INTO #ALOT-A-REC LEAVING NO
WRITE WORK FILE 6 #ALOT-A-REC                /* DW11

PERFORM READ-DFAS
*
READ ST-V BY SSN
*  IF  (ST-V.PROCESS-IND = 'S')   /* AFSC
  IF AFFL-ONLY-CLIENT(<ID-NUMBER>) /* RE1
      OR ((ST-V.PROCESS-IND = 'C') AND (ST-V.INTRO-FLAG NE 'A'))  /* DW2
    ESCAPE TOP
  END-IF
*
  PERFORM CHECK-FOR-ALOT-A                        /* DW11
  PERFORM CHECK-ALOT-AMT-AND-DELQ
  ADD 1 TO #AAFMAA-IN
  IF ST-V.SSN LT #DFAS-SSN   /* AAFMAA BUT NO DFAS
    PERFORM MISSING-DFAS-REC
    ESCAPE TOP   /* GET NEXT AAFMAA REC
  END-IF
*
  IF #DFAS-SSN = ST-V.SSN   /* AAFMAA MATCHES DFAS
    PERFORM DFAS-AAFMAA-MATCH
    PERFORM READ-DFAS /* GET NEXT DFAS REC
    ESCAPE TOP        /* GET NEXT AAFMAA REC
  END-IF
*
  REPEAT       /* DFAS BUT NO AAFMAA
    PERFORM MISSING-AAFMAA-REC
*
    PERFORM READ-DFAS    /* GET NEXT DFAS REC
*
    IF ST-V.SSN LT #DFAS-SSN   /* AAFMAA BUT NO DFAS
      PERFORM MISSING-DFAS-REC
      ESCAPE BOTTOM    /* GET NEXT AAFMAA REC
    END-IF
*
    IF #DFAS-SSN = ST-V.SSN   /* AAFMAA MATCHES DFAS
      PERFORM DFAS-AAFMAA-MATCH
      PERFORM READ-DFAS    /* GET NEXT DFAS REC
      ESCAPE BOTTOM        /* GET NEXT AAFMAA REC
    END-IF
*                            /* DFAS BUT NO AAFMAA
    ESCAPE TOP               /* GET NEXT DFAS RECORD
  END-REPEAT
END-READ
*
REPEAT UNTIL #DFAS-SSN = 999999999
  PERFORM MISSING-AAFMAA-REC
  PERFORM READ-DFAS    /* GET NEXT DFAS REC
END-REPEAT
*
WRITE #DFAS-IN     'TOTAL DFAS IN'
WRITE #AAFMAA-IN   'TOTAL AAFMAA IN'
WRITE #ALOT-MATCHES  'TOTAL AAFMAA/DFAS MATCHES with equal amounts'
WRITE #MISMATCH-RESOLVED 'AAFM/DFAS MATCHES w amts resolved by linkage'
WRITE #CNT-3  'AAFMAA ALOT but missing DFAS Allotment'
WRITE (3) 'TOT-alot-NOT-LINKED-NO DFAS=' #TOT-ALOT-NOT-LINKED-NOT-PAID   /* DW18
WRITE     'TOT-alot-NOT-LINKED-NO DFAS=' #TOT-ALOT-NOT-LINKED-NOT-PAID
*
WRITE #CNT-4  'DFAS Allotment but missing AAFMAA ALOT'
WRITE #CNT-6  'DFAS and AAFMAA match but amts not equal'
WRITE #CNT-5  'AAFMAA ALOT amt not = Tot G Mode + Alt Amt'
WRITE (4) 'TOT-DFAS-NON-MATCH  =' #TOT-DFAS-NON-MATCH
WRITE (7) 'MATCH-LNK' #MATCHED-LNK
WRITE (6) 'TOT-NET-ALOT-DIFF   =' #TOT-ALOT-DIFF
WRITE (6) 'TOT-PLUS-ALOT-DIFF  =' #TOT-ALOT-DIFF-PLUS
WRITE (6) 'TOT-MINUS-ALOT-DIFF =' #TOT-ALOT-DIFF-MIN
* ITE (10) 'TOT-Linked-but-payor has no alot=' #TOT-ALOT-LINKED-NOT-PAID
* ITE      'TOT-Linked-but-payor has no alot=' #TOT-ALOT-LINKED-NOT-PAID
WRITE (10) 'TOT-bad-alot-note          =' #TOT-BAD-ALOT-NOTE
WRITE      'TOT-bad-alot-note          =' #TOT-BAD-ALOT-NOTE
WRITE #TOT-ALOT-DIFF-LT-1-NUM 'Num Alot Diff less than $1.00'
WRITE #TOT-ALOT-DIFF-LT-1-AMT 'Amt Alot Diff less than $1.00'
*
FIND (1) NT-V WITH ID-NUMBER = 800105
  IF NO RECORDS FOUND
    WRITE 'no-nx 800105 rec found'
    ESCAPE BOTTOM
  END-NOREC
*
  MOVE #TOT-DFAS-NON-MATCH TO NT-DFAS-NON-MATCH
  WRITE #TOT-DFAS-NON-MATCH 'moved to gm AR record as DFAS non-match'
  UPDATE (0677)
  END TRANSACTION
END-FIND
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-FOR-ALOT-A                        /* DW11
* * * * * * * * * * * * * * * * *
*
IF  (ALOT-CHG-AUTH NE 'A')
    OR (ALOT-CHG-AUTH-DATE LT #1-MONS-AGO)
  ESCAPE ROUTINE
END-IF
*
RESET #HAS-PDUP #IS-DEAD #IS-INACTIVE #AUTH-DATE-X
FOR #I1 1 TO 9
  IF   (ST-V.STATUS (#I1) = 'D')
      AND (ST-V.PAY-STATUS (#I1) GE '40')
    MOVE 'Y' TO #HAS-PDUP
    ESCAPE BOTTOM
  END-IF
END-FOR
*
IF ST-V.NUMBER-MEMBERSHIPS = 0
  MOVE 'Y' TO #IS-INACTIVE
END-IF
*
IF ST-V.WIDOW-FLAG = 'Y'
  MOVE 'Y' TO #IS-DEAD
END-IF
*
MOVE ALOT-CHG-AUTH-DATE TO #YYYYMMDD
COMPRESS #MM-A #DD-A #YYYY-A INTO #AUTH-DATE-X WITH '/'
MOVE EDITED ST-V.ALOT-AMT (EM=ZZ,ZZZ.99) TO #ALOT-AMT-X
MOVE LEFT #ALOT-AMT-X TO #ALOT-AMT-X
MOVE EDITED ST-V.DEBIT-CREDIT-AMT (EM=-ZZZ,ZZZ.99) TO #DB-CR-X
MOVE LEFT #DB-CR-X TO #DB-CR-X
*
COMPRESS ST-V.ID-NUMBER                     /* DW11
  #TAB ST-V.SSN
  #TAB ST-V.NAME
  #TAB #AUTH-DATE-X
  #TAB ST-V.MILITARY-STATUS
  #TAB ST-V.MILITARY-SERVICE
  #TAB #ALOT-AMT-X
  #TAB #DB-CR-X
  #TAB #IS-DEAD
  #TAB #IS-INACTIVE
  #TAB #HAS-PDUP
  INTO #ALOT-A-REC LEAVING NO
WRITE WORK FILE 6 #ALOT-A-REC
*
END-SUBROUTINE                            /* END DW11
*
* * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE MISSING-AAFMAA-REC
* * * * * * * * * * * * * * * * * * *
*
FIND AT-V WITH SSN = #DFAS-SSN
  IF AT-V.INTRO-FLAG NE 'V'
    MOVE TRUE TO #FOUND-AT
  END-IF
END-FIND
*
IF NOT #FOUND-AT
  RESET AT-V
END-IF
*
ADD 1 TO #CNT-4
DISPLAY (4) #CNT-4 #DFAS-SSN-A   /* MISSING AAFMAA RECORD
  AL-AMOUNT AL-SERV AL-STATUS AL-NAME
  'AT-#'            AT-V.ID-NUMBER
  'AT CAP/IND'      AT-V.CAP-IND
  'AT CAP/Loan-Amt' AT-V.CAP-LOAN-AMT
ADD AL-AMOUNT TO #TOT-DFAS-NON-MATCH
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE MISSING-DFAS-REC
* * * * * * * * * * * * * * * * * *
*
IF ST-V.ALOT-AMT NE 0
  FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
    FOR #I1 1 TO C*NOTE-TABLE                          /* DW14
      IF NOTE-TEXT (#I1) = MASK ('*#ALOT:PAID BY')
*       WRITE (3) ST-V.SSN ST-V.ID-NUMBER
*          'Missing DFAS but allot paid by CN'
*                  NOTE-TEXT-ALOT-PAID-BY-CN (#I1)
        MOVE NOTE-TEXT-ALOT-PAID-BY-CN (#I1) TO #PAYOR-CN-A
        MOVE ST-V.ID-NUMBER                  TO #PAYEE-CN
        PERFORM CHECK-ALOT-LINKAGE
        ESCAPE ROUTINE
      END-IF
    END-FOR
  END-FIND
*
  ADD ST-V.ALOT-AMT TO #TOT-ALOT-NOT-LINKED-NOT-PAID
  RESET #LK-ALOT-AMT
  IF ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    FIND (1) LK-V WITH MEMBER-KEY = ST-V.LINKED-CN-A (1)
      MOVE LK-V.ALOT-AMT TO #LK-ALOT-AMT
    END-FIND
  END-IF
*
  ADD 1 TO #CNT-3
  DISPLAY (3) #CNT-3 ST-V.SSN   /* missing dfas recoed
    'CN' ST-V.ID-NUMBER
    'Name' ST-V.NAME (EM=XXXXXXXXXXXXXXX)
    'SRV' ST-V.MILITARY-SERVICE
    'alot/amt' ST-V.ALOT-AMT
    'DB-CR'    ST-V.DEBIT-CREDIT-AMT
    'int/flag'  ST-V.INTRO-FLAG
    'loan/amt' ST-V.X-LOAN-AMOUNT (1)
    'loan/dt' ST-V.X-LOAN-DATE   (1)
    '1st/iss/dt' ST-V.ISSUE-DATE (1)
    'linked/cn'  ST-V.LINKED-CN (1)
    'alot/amt of/lnked/CN' #LK-ALOT-AMT
    '1st/pd-thru'    ST-V.PAID-TO-DATE (1)
*
  RESET VOUC-REC
  MOVE ST-V.SSN       TO V-SSN
  MOVE ST-V.ID-NUMBER TO V-CN
  MOVE ST-V.MILITARY-SERVICE TO V-SERV
  MOVE ST-V.MILITARY-STATUS TO V-STATUS
  MOVE ST-V.ALOT-AMT  TO V-AMOUNT
  MOVE ST-V.NAME      TO V-NAME
  MOVE ST-V.DEBIT-CREDIT-AMT TO V-DB-CR
  WRITE WORK 3 VOUC-REC
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE DFAS-AAFMAA-MATCH
* * * * * * * * * * * * * * * * * *
*
IF ST-V.ALOT-AMT NE AL-AMOUNT
  PERFORM CHECK-LINKAGE-AMT
*
* IF   (#TOT-ALOT - AL-AMOUNT) LE  1.00            /* DW1
*  AND (#TOT-ALOT - AL-AMOUNT) GE -1.00
  IF (#TOT-ALOT - AL-AMOUNT) = 0                   /* DW1
*    WRITE ST-V.ID-NUMBER 'Alot linkage resolves amt mismatch'
    ADD 1 TO #MISMATCH-RESOLVED
    ESCAPE ROUTINE
  END-IF
*
  RESET #LK-ALOT-AMT #TOT-MODE
*
  FOR #I1 1 TO 9
    IF   (ST-V.STATUS (#I1) = 'D')
        AND (ST-V.PAY-STATUS (#I1) LT '40')
        AND (ST-V.MODE (#I1) = 'G')
      COMPUTE #TOT-MODE = #TOT-MODE + (ST-V.ANNUAL-PREM(#I1) / 12)
      IF ST-V.PLAN(#I1) = #EZ-TERM                                   /* YK2
        #TOT-MODE := #TOT-MODE - 1                                   /* YK2
      END-IF                                                         /* YK2  
*
      IF #HAS-FBR
        ADD #EX-FBR-PREM-BY-LINE (#I1) TO #TOT-MODE
      END-IF
    END-IF
  END-FOR
*
  RESET #I9 #LKD-CNS (*)
  IF NOT ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G' OR = 'F'
    FOR #I1 1 TO 30
      IF ST-V.LINKED-CN (#I1) = 0
        ESCAPE BOTTOM
      END-IF
*
      FIND (1) LK-V WITH MEMBER-KEY = ST-V.LINKED-CN-A (#I1)
        IF LK-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
          ADD LK-V.ALOT-AMT TO #LK-ALOT-AMT
*
          FOR #I1 1 TO 9
            IF   (LK-V.STATUS (#I1) = 'D')
                AND (LK-V.PAY-STATUS (#I1) LT '40')
                AND (LK-V.MODE (#I1) = 'G')
              ADD 1 TO #I9
              MOVE LK-V.ID-NUMBER TO #LKD-CNS (#I9)
              COMPUTE #TOT-MODE =
                #TOT-MODE + (LK-V.ANNUAL-PREM(#I1) / 12)
              IF LK-V.PLAN(#I1) = #EZ-TERM                                   /* YK2
                  #TOT-MODE := #TOT-MODE - 1                                 /* YK2
              END-IF                                                         /* YK2  
            END-IF
          END-FOR
        END-IF
      END-FIND
    END-FOR
  END-IF
*
  IF  (AL-AMOUNT = #LK-ALOT-AMT + ST-V.ALOT-AMT)
*  OR  ((((#LK-ALOT-AMT + ST-V.ALOT-AMT) - AL-AMOUNT) LE 1.00)   /* DW1
*  AND  (((#LK-ALOT-AMT + ST-V.ALOT-AMT) - AL-AMOUNT) GE -1.00)) /* DW1
      OR  (((#LK-ALOT-AMT + ST-V.ALOT-AMT) - AL-AMOUNT) = 0)        /* DW1
    IF NOT ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G' OR = 'F'
      FOR #I1 1 TO 30
        IF ST-V.LINKED-CN (#I1) = 0
          ESCAPE BOTTOM
        END-IF
*
        FIND (1) LK-V WITH MEMBER-KEY = ST-V.LINKED-CN-A (#I1)
          IF LK-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
*           WRITE (7) '    LNKED-CN' LK-V.ID-NUMBER LK-V.ALOT-AMT
            ADD 1 TO #MATCHED-LNK
*
            RESET #FOUND-NT
            FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
              FOR #I2 1 TO C*NOTE-TABLE                           /* DW14
                IF (NOTE-TEXT (#I2) = MASK ('*#ALOT:PAYS'))
                    AND (NOTE-TEXT-ALOT-PAYS-CN (#I2)
                    = ST-V.LINKED-CN-A (#I1))
                  MOVE TRUE TO #FOUND-NT
                  ESCAPE BOTTOM
                END-IF
              END-FOR
            END-FIND
*
            IF NOT #FOUND-NT
              COMPRESS '*#ALOT:PAYS CN' ST-V.LINKED-CN-A (#I1)
                INTO #NOTE-TEXT (1) LEAVING NO
              MOVE 1 TO #INT
              MOVE 'EDS' TO #CLERK
              CALLNAT 'E4205SDM' ST-V.ID-NUMBER
                #INT
                #CLERK
                #NOTE-TEXT (1:10)
              WRITE ST-V.ID-NUMBER 'NX msg Created' #NOTE-TEXT (1)
            END-IF
*
            RESET #FOUND-NT
            FIND (1) NT-V WITH ID-NUMBER = ST-V.LINKED-CN (#I1)
              FOR #I2 1 TO C*NOTE-TABLE                            /* DW14
                IF (NOTE-TEXT (#I2) = MASK ('*#ALOT:PAID BY'))
                    AND (NOTE-TEXT-ALOT-PAID-BY-CN(#I2) = ST-V.ID-NUMBER-A)
                  MOVE TRUE TO #FOUND-NT
                  ESCAPE BOTTOM
                END-IF
              END-FOR
            END-FIND
*
            IF NOT #FOUND-NT
              COMPRESS '*#ALOT:PAID BY CN' ST-V.ID-NUMBER-A
                INTO #NOTE-TEXT (1) LEAVING NO
              MOVE 1 TO #INT
              MOVE 'EDS' TO #CLERK
              CALLNAT 'E4205SDM' ST-V.LINKED-CN (#I1)
                #INT
                #CLERK
                #NOTE-TEXT (1:10)
              WRITE ST-V.LINKED-CN(#I1) 'NX msg created' #NOTE-TEXT(1)
            END-IF
*
            END TRANSACTION
          END-IF
        END-FIND
      END-FOR
    END-IF
  ELSE   /* DFAS AMT NOT = TOT-ALLOT
*
*   IF   ((#TOT-MODE - AL-AMOUNT) LE 1.00)             /* DW1
*    AND ((#TOT-MODE - AL-AMOUNT) GE -1.00)
*     MOVE AL-AMOUNT TO #TOT-MODE   /* consider a match
*   END-IF
*
    IF AL-AMOUNT = #TOT-MODE
      WRITE ST-V.SSN ST-V.ID-NUMBER 'CHANGE ALOT-AMT'
        'DFAS amt' AL-AMOUNT
        '= tot-mode but not tot-AAFMAA allot'
        '(' #LK-ALOT-AMT '+' ST-V.ALOT-AMT ')'
      FOR #I2 1 TO #I9
        WRITE 'linked-cns above =' #LKD-CNS  (#I9)
      END-FOR
    END-IF
*
    PERFORM DISPLAY-5
  END-IF
ELSE
  PERFORM CHECK-LINKAGE-AMT
*
  IF   (#TOT-ALOT NE AL-AMOUNT)
      AND (#TOT-ALOT - AL-AMOUNT) LE  1.00
      AND (#TOT-ALOT - AL-AMOUNT) GE -1.00
    COMPUTE #ALOT-DIFF = AL-AMOUNT - #TOT-ALOT
    ADD #ALOT-DIFF TO #ALOT-DIFF
    WRITE AL-SSN ST-V.ID-NUMBER 'Alot diff of less than 1.00'
      AL-AMOUNT #TOT-ALOT
  END-IF
*
* IF   (#TOT-ALOT - AL-AMOUNT) LE  1.00         /* DW1
*  AND (#TOT-ALOT - AL-AMOUNT) GE -1.00
  IF (#TOT-ALOT - AL-AMOUNT) = 0                /* DW1
    ADD 1 TO #ALOT-MATCHES
    ESCAPE ROUTINE    /* all is ok
  END-IF
*
  MOVE #TOT-ALOT TO #LK-ALOT-AMT
  PERFORM DISPLAY-5   /*  mismatched linkage amounts but amts equal
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * *
DEFINE SUBROUTINE DISPLAY-5
* * * * * * * * * * * * * * *
*
ADD 1 TO #CNT-5
DISPLAY (5) #CNT-5 ST-V.SSN ST-V.ID-NUMBER /* MATCH BUT AMTS NOT =
  'Name'            ST-V.NAME (EM=XXXXXXXXXXXXXXX)
  'SRV'             ST-V.MILITARY-SERVICE
  'AAFMAA/Alot/Amt' ST-V.ALOT-AMT
  'DFAS/amt'        AL-AMOUNT
  'DB/CR'           ST-V.DEBIT-CREDIT-AMT
  'lnked/alot/amt'  #LK-ALOT-AMT
  'int/flag'        ST-V.INTRO-FLAG
  '1st/lnked/cn'    ST-V.LINKED-CN (1)
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-LINKAGE-AMT
* * * * * * * * * * * * * * * * * * *
*
MOVE ST-V.ALOT-AMT TO #TOT-ALOT
*
FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
  FOR #I1 1 TO C*NOTE-TABLE                            /* DW14
    IF NOTE-TEXT (#I1) = MASK ('*#ALOT:PAYS')
      MOVE ST-V.ID-NUMBER TO #PAYOR-CN
      RESET                  #PAYEE-CN-A
      PERFORM CHECK-ALOT-LINKAGE
*
      IF   ((#TOT-ALOT - AL-AMOUNT) LE  1.00)
          AND ((#TOT-ALOT - AL-AMOUNT) GE -1.00)
        MOVE AL-AMOUNT TO #TOT-ALOT   /* consider a match
      END-IF
*
      IF #TOT-ALOT NE AL-AMOUNT
        WRITE (10) AL-SSN-A ST-V.ID-NUMBER 'Allotment Linkage error'
          #TOT-ALOT AL-AMOUNT
      END-IF
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-FIND
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE READ-DFAS
* * * * * * * * * * * * * *
*
IF #DFAS-SSN = 999999999
  ESCAPE ROUTINE
END-IF
*
READ WORK 2 ONCE RECORD ALOT-REC
AT END
  MOVE '999999999' TO #DFAS-SSN-A
  ESCAPE ROUTINE
END-ENDFILE
*
IF AL-SSN-A = #DFAS-SSN-A
  WRITE AL-SSN-A 'Duplicate SSN on DFAS file' AL-AMOUNT
  WRITE (10) AL-SSN-A 'Duplicate SSN on DFAS file' AL-AMOUNT
END-IF
*
ADD 1 TO #DFAS-IN
MOVE AL-SSN-A TO #DFAS-SSN-A
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-ALOT-LINKAGE
* * * * * * * * * * * * * * * * * *
*
IF #PAYEE-CN NE 0  /* payee non match check
  RESET #TOT-ALOT
  RESET #FOUND-PAID-BY
*
  FIND (1) LK-V WITH MEMBER-KEY = #PAYOR-CN-A    /* find payor
*   IF   (ST-V.ALOT-AMT NE 0)   /* payee
*    AND (LK-V.ALOT-AMT = 0)    /* payor
*     WRITE (10) ST-V.SSN ST-V.ID-NUMBER
*     'PAYEE has alot but PAYOR' LK-V.ID-NUMBER 'has no alot'
*         ST-V.ALOT-AMT
*     ADD ST-V.ALOT-AMT TO #TOT-ALOT-LINKED-NOT-PAID
*   END-IF
*
    MOVE LK-V.ALOT-AMT TO #TOT-ALOT
*
    FIND (1) NT-V WITH ID-NUMBER = LK-V.ID-NUMBER  /* find notes
      FOR #I2 1 TO C*NOTE-TABLE                           /* DW14
        IF NOTE-TEXT (#I2) = MASK ('*#ALOT:PAYS')  /* find pays note
          FIND LK-V WITH MEMBER-KEY = NOTE-TEXT-ALOT-PAYS-CN (#I2)
            ADD LK-V.ALOT-AMT TO #TOT-ALOT    /*    find payee
*
            IF   (#PAYOR-CN NE 0)
                AND (LK-V.ID-NUMBER = #PAYEE-CN)
              MOVE TRUE TO #FOUND-PAID-BY
            END-IF
          END-FIND
        END-IF
      END-FOR
    END-FIND
  END-FIND
*
  IF NOT #FOUND-PAID-BY
    WRITE (10) ST-V.SSN ST-V.ID-NUMBER
      'Alot payee cn not found on payor rec' ST-V.ALOT-AMT
    ADD ST-V.ALOT-AMT TO #TOT-BAD-ALOT-NOTE
  END-IF
ELSE     /* payor nonmatch check
  FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
    FOR #I2 1 TO C*NOTE-TABLE                          /* DW14
      IF NOTE-TEXT (#I2) = MASK ('*#ALOT:PAYS')
        FIND LK-V WITH MEMBER-KEY = NOTE-TEXT-ALOT-PAYS-CN (#I2)
          ADD LK-V.ALOT-AMT TO #TOT-ALOT
        END-FIND
      END-IF
    END-FOR
  END-FIND
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-ALOT-AMT-AND-DELQ
* * * * * * * * * * * * * * * * * * * * *
*
RESET #TOT-ALOT-RQD #1ST-POL-X #HAS-FBR #SVC-FEE
RESET #NUM-WL-POLS
  #PREM-DUE #DUES-DUE #APL-AMT #LOAN-INT #CSV #NET-AVAIL
*
IF #1ST-POL-X = 0
  MOVE 1 TO #1ST-POL-X
END-IF
*
IF   (ST-V.ISSUE-DATE (#1ST-POL-X) GE 19970101)
    AND (ST-V.MONTH-ALLOC-AMT (#1ST-POL-X) NE 999.99)
    AND (NOT ST-V.PLAN (#1ST-POL-X) = 'SO' OR = 'FSO')
    AND (NOT ST-V.INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    OR = 'O' OR = 'P' OR = 'Q')
    AND (ST-V.DUES-ALL-PAID-IND NE 'Y')
    AND (ST-V.PAY-STATUS (#1ST-POL-X) LT '40')
    AND (ST-V.MODE (#1ST-POL-X) = 'G')
    AND (ST-V.NUMBER-MEMBERSHIPS NE 0)   /* Must be an act mbr   DW10  OK DW17
    AND (ST-V.PROCESS-IND = 'G')     /* Must be G/F                     /* DW17
  RESET #SVC-FEE
  DECIDE ON FIRST VALUE ST-V.PLAN (#1ST-POL-X)
    VALUE '2PF' MOVE #SVC-FEE-2P TO #SVC-FEE
    VALUE '3PF' MOVE #SVC-FEE-3P TO #SVC-FEE
    VALUE '4PF' MOVE #SVC-FEE-4P TO #SVC-FEE
    VALUE '5PF' MOVE #SVC-FEE-5P TO #SVC-FEE
    VALUE '6PF' MOVE #SVC-FEE-6P TO #SVC-FEE
    VALUE '7PF' MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '8PF' MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '9PF' MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '7P'  MOVE #SVC-FEE-7P TO #SVC-FEE
    VALUE '20P' MOVE #SVC-FEE-20 TO #SVC-FEE
    VALUE '30P' MOVE #SVC-FEE-30 TO #SVC-FEE
    VALUE 'OL'  MOVE #SVC-FEE-OL TO #SVC-FEE
*   VALUE 'RT'  MOVE #SVC-FEE-TM TO #SVC-FEE          /* YK1
*   VALUE 'LT'  MOVE #SVC-FEE-TM TO #SVC-FEE          /* YK1
    NONE        IGNORE
  END-DECIDE
*
* IF   (ST-V.PLAN-A1 (#1ST-POL-X) GE 'U')             /* YK1  
*     AND (ST-V.PLAN-A1 (#1ST-POL-X) LE 'Z')          /* YK1
  IF FUNCTION-TERM-POLICY(<ST-V.PLAN(#1ST-POL-X)>)    /* YK1       
    MOVE #SVC-FEE-TM TO #SVC-FEE
  END-IF
*
  IF ST-V.PLAN (#1ST-POL-X) = MASK (NN'F')
    IF ST-V.PLAN (#1ST-POL-X) LE '19F' MOVE #SVC-FEE-10 TO #SVC-FEE ELSE
      IF ST-V.PLAN (#1ST-POL-X) LE '29F' MOVE #SVC-FEE-20 TO #SVC-FEE ELSE
        IF ST-V.PLAN (#1ST-POL-X) LE '34F' MOVE #SVC-FEE-30 TO #SVC-FEE ELSE
          MOVE #SVC-FEE-OL TO #SVC-FEE
        END-IF END-IF END-IF END-IF
*
  IF   (ST-V.PAY-STATUS (#1ST-POL-X) = '12' OR = '21')
*   AND (ST-V.PAID-TO-DATE (#1ST-POL-X) GE #2-MONS-AGO)
    RESET #SVC-FEE
  END-IF
END-IF
*
FOR #I1 1 TO 9    /* for delq report
  IF   (ST-V.STATUS (#I1) = 'D')
      AND (ST-V.PAY-STATUS (#I1) LT '40')
*   IF  (ST-V.PLAN (#I1) = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO')        /* YK1
*       OR ((ST-V.PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z'))    /* YK1
    IF  (ST-V.PLAN (#I1) = 'SO' OR = 'FSO')                            /* YK1
        OR FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>)                      /* YK1
        OR (ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
      IGNORE
    ELSE
      ADD 1 TO #NUM-WL-POLS
    END-IF
  END-IF
END-FOR
*
RESET #TOT-FIX-LOAN #TOT-VAR-LOAN
FOR #I1 1 TO 9    /* for delq report
  IF   (ST-V.STATUS (#I1) = 'D')
      AND (((ST-V.X-BILL-ADJUST (#I1) GT 0)   /* DELQ pd-to-date
      AND  (ST-V.ISSUE-DATE (#I1) GT #1-YR-AGO)
      AND  (ST-V.ISSUE-DATE (#I1) LT #3-MONS-AGO))
      OR  ((ST-V.X-FIRST-PLACE-FEE (#I1) NE 0)     /* DELQ FPF
      AND  (ST-V.ISSUE-DATE (#I1) LT #1-MONS-AGO)))
    ADD 1 TO #CNT-9
    DISPLAY (9) #CNT-9 ST-V.ID-NUMBER
      'Iss/Date'    ST-V.ISSUE-DATE (#I1)
      'Bill/Adjust' ST-V.X-BILL-ADJUST (#I1)
      'Pd-To/Date'  ST-V.PAID-TO-DATE (#I1)
      'FPF'         ST-V.X-FIRST-PLACE-FEE (#I1)
  END-IF
*
  IF   (ST-V.STATUS (#I1) = 'D')
      AND (ST-V.PAY-STATUS (#I1) LT '40')
*  AND (ST-V.MODE (#I1) = 'G')
*  AND (ST-V.PLAN (#I1) = 'RT' OR = 'LT')
*
    MOVE #PARM-YYYYMMDD TO #YYYYMMDD
*
    IF PAID-TO-DATE-MM (#I1) GT #MM
      ADD 12 TO #MM
      SUBTRACT 1 FROM #YYYY
    END-IF
*
    IF   (ST-V.X-FIRST-PLACE-FEE (#I1) NE 0)     /* DELQ FPF  /* DW7
        AND (ST-V.ISSUE-DATE (#I1) LT #1-MONS-AGO)
      RESET #TOT-MONS-DELQ                                    /* DW7
    ELSE
      COMPUTE #TOT-MONS-DELQ = ((#YYYY - PAID-TO-DATE-YYYY (#I1)) * 12)
        + (#MM - PAID-TO-DATE-MM (#I1))
    END-IF
*
    MOVE ST-V.PAID-TO-DATE (#I1) TO #YYYYMMDD
*
    IF  (ST-V.ISSUE-DATE (#I1) LT 19970101)    /* old or new
        OR (ST-V.MONTH-ALLOC-AMT (#I1) = 999.99)  /*   processing
        OR (ST-V.ISS-DT-DD (#I1) = 1)    /* NXT PROCESSING WITH ISS DAY = 1
      IF #MM = 02
        MOVE 28 TO #DD
      ELSE
        IF #MM = 4 OR = 6 OR = 9 OR = 11
          MOVE 30 TO #DD
        ELSE
          MOVE 31 TO #DD
        END-IF
      END-IF
    ELSE
      IF ((ST-V.ISS-DT-MM (#I1) = 2)
          AND (ST-V.ISS-DT-DD (#I1) = 28 OR = 29))  /* LAST DAY OF MONTH
          OR ((ST-V.ISS-DT-MM (#I1) = 4 OR = 6 OR = 9 OR = 11)
          AND (ST-V.ISS-DT-DD (#I1) = 30))
          OR ((ST-V.ISS-DT-MM (#I1) = 1 OR = 3 OR = 5 OR = 7 OR = 8 OR = 10
          OR = 12) AND (ST-V.ISS-DT-DD (#I1) = 31))
        IF #MM = 02
          MOVE 27 TO #DD /* nxt to last day of month
        ELSE
          IF #MM = 4 OR = 6 OR = 9 OR = 11
            MOVE 29 TO #DD
          ELSE
            MOVE 30 TO #DD
          END-IF
        END-IF
      ELSE
        COMPUTE #DD = ST-V.ISS-DT-DD (#I1) - 1
*
        IF (#MM = 2) AND (#DD GE 27)
          MOVE 26 TO #DD /* nxt to nxt to last day of month
        END-IF
      END-IF
    END-IF
*
*   IF #YYYYMMDD LT #2-MONS-AGO-TODAY
*   IF #YYYYMMDD LT #1-MONS-AGO-TODAY
*
    IF ((#TOT-MONS-DELQ GE 4)   /* WAS 3   DW6
        AND (NOT PAD-CODE = 'P' OR = 'V' OR = 'W' OR = 'X'
        OR = 'Z' OR = 'N' OR = 'D' OR = 'L'))
        OR  ((ST-V.X-FIRST-PLACE-FEE (#I1) NE 0)     /* DELQ FPF
        AND  (ST-V.ISSUE-DATE (#I1) LT #1-MONS-AGO))
      ADD 1 TO #CNT-8
      DISPLAY (8) #CNT-8 (EM=ZZ,ZZ9)ST-V.SSN 'CN' ST-V.ID-NUMBER
        'Iss/date'  ST-V.ISSUE-DATE (#I1)
*      'Paid/to'   ST-V.PAID-TO-DATE (#I1)
        'Paid/to'   #YYYYMMDD
*      'Int/Flag'  ST-V.INTRO-FLAG
        'Pay/Status' ST-V.PAY-STATUS (#I1)
        'Mode'      ST-V.MODE (#I1)
        'FPF'       ST-V.X-FIRST-PLACE-FEE (#I1)
        'Plan'      ST-V.PLAN (#I1)
        'Mons/Delq' #TOT-MONS-DELQ
        'DB-CR'     ST-V.DEBIT-CREDIT-AMT
        'Name'      ST-V.NAME  (EM=XXXXXXXXXXXXXXXXXXXXXXXXX)
        'Death/Benefit' ST-V.DEATH-BENEFIT (#I1)
      MOVE EDITED DEATH-BENEFIT (#I1) (EM=ZZZZZZZ.99) TO #AMT-10 /* DW5
      MOVE LEFT #AMT-10 TO #AMT-10
      MOVE EDITED X-FIRST-PLACE-FEE (#I1) (EM=ZZZZZ.99) TO #AMT-8 /* DW5
      MOVE LEFT #AMT-8 TO #AMT-8
      COMPRESS
        ST-V.SSN
        #TAB ST-V.ID-NUMBER
        #TAB ST-V.ISSUE-DATE (#I1)
        #TAB ST-V.PAID-TO-DATE (#I1)
        #TAB ST-V.INTRO-FLAG
        #TAB ST-V.PAY-STATUS (#I1)
        #TAB ST-V.MODE (#I1)
        #TAB ST-V.PLAN (#I1)
        INTO #REC-OVERFLOW LEAVING NO
      PERFORM CHECK-OVER-125
      COMPRESS #REC-OVERFLOW
        #TAB #TOT-MONS-DELQ
        #TAB ST-V.DEBIT-CREDIT-AMT
        #TAB ST-V.NAME
*      #TAB ST-V.DEATH-BENEFIT (#I1)
*      #TAB ST-V.X-FIRST-PLACE-FEE (#I1)
        #TAB #AMT-10     /* DB                /* DW5
        #TAB #AMT-8      /* FPF               /* DW5
        INTO #REC-OVERFLOW LEAVING NO
*
      PERFORM CHECK-OVER-125
      PERFORM BUILD-FIXED-FILE
      ADD 1 TO #NUM-RECS
      WRITE WORK FILE 4 #EXTRACT-300
      RESET #EXT-125-1
      RESET #EXT-125-2
      RESET #EXT-50
      RESET #REC-OVERFLOW
    END-IF
*
    ADD ST-V.X-LOAN-AMOUNT   (#I1) TO #TOT-FIX-LOAN
    ADD ST-V.X-LOAN-AMOUNT-2 (#I1) TO #TOT-VAR-LOAN
*   IF  (ST-V.PLAN (#I1) = 'LT' OR = 'RT' OR = 'SO' OR = 'FSO')          /* YK1 
*       OR ((ST-V.PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z'))      /* YK1
    IF  (ST-V.PLAN (#I1) = 'SO' OR = 'FSO')                              /* YK1 
        OR FUNCTION-TERM-POLICY(<ST-V.PLAN(#I1)>)                        /* YK1
        OR (ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q')
        OR (#NUM-WL-POLS NE 1)
        OR (#TOT-MONS-DELQ LT 4)
      IGNORE
    ELSE
      MOVE ST-V.PAID-TO-DATE (#I1) TO #YYYYMMDD
*
      REPEAT UNTIL #YYYYMMDD GE 20010701
        IF ST-V.MODE (#I1) = 'A' ADD 12 TO #MM
          ADD (#SVC-FEE * 12) TO #DUES-DUE
          ADD ST-V.ANNUAL-PREM (#I1) TO #PREM-DUE ELSE
          IF ST-V.MODE (#I1) = 'S' ADD 6  TO #MM
            ADD (#SVC-FEE * 6) TO #DUES-DUE
            ADD (ST-V.ANNUAL-PREM (#I1) / 2) TO #PREM-DUE ELSE
            IF ST-V.MODE (#I1) = 'Q' ADD 3  TO #MM
              ADD (#SVC-FEE * 3) TO #DUES-DUE
              ADD (ST-V.ANNUAL-PREM (#I1) / 4) TO #PREM-DUE ELSE
              ADD 1  TO #MM
              ADD (ST-V.ANNUAL-PREM (#I1) / 12) TO #PREM-DUE
              ADD #SVC-FEE TO #DUES-DUE
            END-IF END-IF END-IF
*
        IF #MM GT 12
          SUBTRACT 12 FROM #MM
          ADD 1 TO #YYYY
        END-IF
      END-REPEAT
*
      ADD #PREM-DUE TO #APL-AMT
      ADD #DUES-DUE TO #APL-AMT
*
      ADD ST-V.X-LOAN-AMOUNT       (#I1) TO #LOAN-INT
      ADD ST-V.X-ACCUM-INTEREST    (#I1) TO #LOAN-INT
      ADD ST-V.X-LOAN-AMOUNT-2     (#I1) TO #LOAN-INT
      ADD ST-V.X-ACCUM-INTEREST-2  (#I1) TO #LOAN-INT
*
      MOVE ST-V.CASH-VALUE (#I1) TO #CSV
      COMPUTE #NET-AVAIL = #CSV - #LOAN-INT
*
      ADD 1 TO #CNT-7
      DISPLAY (7) #CNT-7  (EM=9999)
        'CN' ST-V.ID-NUMBER
        'Prem/Due'   #PREM-DUE
        'Dues/Due'   #DUES-DUE
        #CSV
        'Loan/Int'   #LOAN-INT
        'Net/Avail'  #NET-AVAIL
        'Apl/Amt'    #APL-AMT
        '# WL/POLS'  #NUM-WL-POLS
        'PD-TO'      ST-V.PAID-TO-DATE (#I1)
        'Int/Flg'    ST-V.INTRO-FLAG
        'Md'         ST-V.MODE (#I1)
        'Plan'       ST-V.PLAN (#I1)
        'Mons/Delq'  #TOT-MONS-DELQ
        'DB-CR'      ST-V.DEBIT-CREDIT-AMT
        'Name'       ST-V.NAME   (EM=XXXXXXXXX)
    END-IF
  END-IF
END-FOR
*
RESET #PP    /* DW4
FOR #I1 1 TO 9    /* for alot amt check
  IF   (ST-V.STATUS (#I1) = 'D')  /* DW4
      AND (ST-V.PAY-STATUS (#I1) LT '40')
    MOVE TRUE TO #PP
  END-IF
*
  IF (ST-V.STATUS (#I1) = 'D')
      AND (#1ST-POL-X NE 0)
    MOVE #I1 TO #1ST-POL-X
  END-IF
*
  IF RID-PLAN (#I1) NE ' '
    MOVE TRUE TO #HAS-FBR
  END-IF
*
  IF   (ST-V.STATUS (#I1) = 'D')
      AND (ST-V.PAY-STATUS (#I1) LT '40')
      AND (ST-V.MODE (#I1) = 'G')
    MOVE ST-V.ISSUE-DATE (#I1) TO #LAST-ISS-DT
    MOVE ST-V.PAID-TO-DATE (#I1) TO #LAST-PD-TO-DT
*
    IF NOT ST-V.PAY-STATUS (#I1) = '20' OR = '22' /* bypass not prem pa
      ESCAPE TOP
    END-IF
*
    COMPUTE #TOT-ALOT-RQD =
      #TOT-ALOT-RQD + (ST-V.ANNUAL-PREM (#I1) / 12)
      IF ST-V.PLAN(#I1) = #EZ-TERM                                   /* YK2
        #TOT-ALOT-RQD := #TOT-ALOT-RQD - 1                           /* YK2
      END-IF                                                         /* YK2  
  END-IF
*
  IF ST-V.X-ALT-LP-IND    (#I1) = '1' OR = '2'
    ADD ST-V.X-ALT-LP-AMT (#I1) TO #TOT-ALOT-RQD
  END-IF
*
  IF ST-V.X-ALT-LP-IND-2    (#I1) = '1' OR = '2'
    ADD ST-V.X-ALT-LP-AMT-2 (#I1) TO #TOT-ALOT-RQD
  END-IF
END-FOR
*
IF #HAS-FBR
  MOVE ST-V.ID-NUMBER TO #ID
  CALLNAT 'GRIDCSXX' USING
    #ID
    #AT-RID-ATTACH-FAC-AMT
    #AT-RID-ATTACH-PLAN
    #AT-RID-PLAN            (1:5)
    #AT-RID-ATTACH-ISS-DT   (1:5)
    #AT-TOT-FBR-PREM
    #EX-FBR-PREM-BY-LINE    (1:9)
    #EX-SPS-DB-BY-LINE      (1:9)
    #EX-DEP-DB-BY-LINE      (1:9)
    #EX-EACH-DEP-DB-BY-LINE (1:9)
    #NUM-ELIG-CHILDREN
    #NUM-ELIG-CHILDREN-UNDER-6-MON
    #TOT-CHILD-DB
    #RID-TEXT
*
  IF #RID-TEXT NE ' '
    WRITE ST-V.ID-NUMBER 'FBR ERROR MESSAGE' #RID-TEXT
  END-IF
*
  FOR #I1 1 TO 9
    IF   (ST-V.STATUS (#I1) = 'D')
        AND (ST-V.PAY-STATUS (#I1) LT '40')
        AND (ST-V.MODE (#I1) = 'G')
      ADD #EX-FBR-PREM-BY-LINE (#I1) TO #TOT-ALOT-RQD
      IF #EX-FBR-PREM-BY-LINE (#I1) NE 0
        WRITE ST-V.ID-NUMBER 'FBR POLICY' #EX-FBR-PREM-BY-LINE (#I1)
      END-IF
    END-IF
  END-FOR
END-IF
*                                        NG1  Start
  RESET PARM-SVC
  PARM-SVC.SVC-MEMBER-ID := ST-V.ID-NUMBER
  PERFORM PREMIER-SERVICE
*
ADD #SVC-FEE TO #TOT-ALOT-RQD
*
COMPUTE #ALOT-DIFF = ST-V.ALOT-AMT - #TOT-ALOT-RQD
*
IF   (#ALOT-DIFF LE 1.00)
    AND (#ALOT-DIFF GE -1.00)
    AND (#ALOT-DIFF NE 0)
  ADD 1          TO #TOT-ALOT-DIFF-LT-1-NUM
  ADD #ALOT-DIFF TO #TOT-ALOT-DIFF-LT-1-AMT
* RESET #ALOT-DIFF
END-IF
*
RESET #STATUS
IF #TOT-ALOT-RQD = 0
  IF ST-V.WIDOW-FLAG = 'Y'
    MOVE 'DEAD' TO #STATUS
  ELSE
    IF ST-V.NUMBER-MEMBERSHIPS = 0       /* OK   DW17
      IF ST-V.PROCESS-IND =  'C' AND ST-V.INTRO-FLAG = 'A' /* PM13
        #STATUS := 'PNDAP'                                 /* PM13
      ELSE                                                 /* PM13
        MOVE 'INACT' TO #STATUS
      END-IF                                               /* PM13
    ELSE
      IF #PP     /* DW4  Still prem paying
        MOVE 'NOAL' TO #STATUS    /* DW4
      ELSE
        MOVE 'PDUP' TO #STATUS
      END-IF
    END-IF
  END-IF
END-IF
*
RESET #NOTE-TEXT (*)
IF   (#ALOT-DIFF NE 0)
* AND (#LAST-ISS-DT LT #3-MONS-AGO)                       /* PM8
  FIND (1) NT-V WITH ID-NUMBER = ST-V.ID-NUMBER
    FOR #I1 1 TO C*NOTE-TABLE                                /* DW14
      IF  (NOTE-TEXT (#I1) = MASK ('*#ALOT:PAID BY'))
          OR (NOTE-TEXT (#I1) = MASK ('*#ALOT:PAYS CN'))
        MOVE NOTE-TEXT (#I1) TO #NOTE-TEXT (1)
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-FIND
*
  IF #ALOT-DIFF LT 0
    SUBTRACT #ALOT-DIFF FROM #TOT-ALOT-DIFF-MIN
  ELSE
    ADD #ALOT-DIFF TO #TOT-ALOT-DIFF-PLUS
  END-IF
*
  ADD #ALOT-DIFF TO #TOT-ALOT-DIFF
*
  RESET #LOAN-IND
  IF (#TOT-FIX-LOAN NE 0) OR (#TOT-VAR-LOAN NE 0)
    MOVE 'Y' TO #LOAN-IND
  END-IF
*
  IF ST-V.INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
    ADD 1 TO #CNT-11
    DISPLAY (11) #CNT-11 ST-V.SSN
      'CN'               ST-V.ID-NUMBER
      'Name'             ST-V.NAME (EM=XXXXXXXXXXXXXXXX)
      'SRV'              ST-V.MILITARY-SERVICE
      'Stat'             #STATUS
      'DFAS/amt'         AL-AMOUNT
      'AAFMAA/Alot/Amt'  ST-V.ALOT-AMT
      'Tot/Allot/needed' #TOT-ALOT-RQD (EM=ZZZZ.99)
      'Diff'             #ALOT-DIFF   (EM=Z,ZZZ.99-)
      'DB-CR'            ST-V.DEBIT-CREDIT-AMT (EM=-ZZZZZZ.99)
      'Int/Flg'          ST-V.INTRO-FLAG
      'LN'               #LOAN-IND
      'Lnk/CN'           ST-V.LINKED-CN (1)
      'Pay/Stat'         ST-V.PAY-STATUS (1)
*
    IF #NOTE-TEXT (1) NE ' '
      WRITE (11) '    ' ST-V.ID-NUMBER #NOTE-TEXT (1)
    END-IF
*
    PERFORM ALOT-MISC-FILE    /* DW3
  ELSE
    ADD 1 TO #CNT-6
    DISPLAY (6) #CNT-6 ST-V.SSN
      'CN'               ST-V.ID-NUMBER
      'Name'             ST-V.NAME (EM=XXXXXXXXXXXXXXXX)
      'SRV'              ST-V.MILITARY-SERVICE
      'Stat'             #STATUS
      'DFAS/amt'         AL-AMOUNT
      'AAFMAA/Alot/Amt'  ST-V.ALOT-AMT
      'Tot/Allot/needed' #TOT-ALOT-RQD (EM=ZZZZ.99)
      'Diff'             #ALOT-DIFF   (EM=Z,ZZZ.99-)
      'DB-CR'            ST-V.DEBIT-CREDIT-AMT (EM=-ZZZZZZ.99)
      'Int/Flg'          ST-V.INTRO-FLAG
      'LN'               #LOAN-IND
      'Lnk/CN'           ST-V.LINKED-CN (1)
      'Pay/Stat'         ST-V.PAY-STATUS (1)
*
    IF #NOTE-TEXT (1) NE ' '
      WRITE (6) '    ' ST-V.ID-NUMBER #NOTE-TEXT (1)
    END-IF
*
    PERFORM ALOT-MISC-FILE    /* DW3
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * *
DEFINE SUBROUTINE ALOT-MISC-FILE        /* DW3
* * * * * * * * * * * * * *
*
RESET #UNDL                             /* PM16
* IF ST-V.ADDRESS-CHG-CODE = 'U' OR = 'V' /* PM16                /* JT1
IF F-UNDEL-ADDRESS (< ST-V.MEMBER-CONTACT-ID >)                  /* JT1
  #UNDL := 'UNDL'                       /* PM16
END-IF                                  /* PM16
*
COMPRESS
  ST-V.SSN
  #TAB ST-V.ID-NUMBER
  #TAB ST-V.NAME
  #TAB ST-V.MILITARY-STATUS              /* DW5
  #TAB ST-V.MILITARY-SERVICE
  #TAB #STATUS
  INTO #REC-OVERFLOW LEAVING NO
MOVE EDITED AL-AMOUNT (EM=ZZZZZ.99) TO #AMT-8
COMPRESS #REC-OVERFLOW
  #TAB #AMT-8
  INTO #REC-OVERFLOW LEAVING NO
MOVE EDITED ST-V.ALOT-AMT (EM=ZZZZZ.99) TO #AMT-8
COMPRESS #REC-OVERFLOW
  #TAB #AMT-8
  INTO #REC-OVERFLOW LEAVING NO
MOVE EDITED #TOT-ALOT-RQD (EM=ZZZZZ.99) TO #AMT-8
COMPRESS #REC-OVERFLOW
  #TAB #AMT-8
  INTO #REC-OVERFLOW LEAVING NO
MOVE EDITED #ALOT-DIFF (EM=-ZZZZZ.99) TO #AMT-10
COMPRESS #REC-OVERFLOW
  #TAB #AMT-10
  INTO #REC-OVERFLOW LEAVING NO
MOVE EDITED ST-V.DEBIT-CREDIT-AMT (EM=-ZZZZZZ.99) TO #AMT-10
COMPRESS #REC-OVERFLOW
  #TAB #AMT-10
  #TAB ST-V.INTRO-FLAG
  #TAB #LOAN-IND
  #TAB ST-V.LINKED-CN (1)
  #TAB ST-V.PAY-STATUS (1)
  #TAB #UNDL                            /* PM16
  #TAB #NOTE-TEXT (1)
  INTO #REC-OVERFLOW LEAVING NO
*
WRITE WORK FILE 5 #REC-OVERFLOW
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CHECK-OVER-125
* * * * * * * * * * * * * * * * *
*
IF #REC-OVF-2ND-125 NE ' '
  PERFORM BUILD-FIXED-FILE
  MOVE #REC-OVF-2ND-125 TO #REC-OVF-1ST-125
  RESET #REC-OVF-2ND-125
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * *
DEFINE BUILD-FIXED-FILE
* * * * * * * * * * * *
*
IF #EXT-125-1 = ' '
  MOVE #REC-OVF-1ST-125 TO #EXT-125-1
ELSE
  IF #EXT-125-2 = ' '
    MOVE #REC-OVF-1ST-125 TO #EXT-125-2
  ELSE
    MOVE #REC-OVF-1ST-125 TO #EXT-50
  END-IF
END-IF
*
END-SUBROUTINE
*                                       NG1 Added
DEFINE PREMIER-SERVICE
/*     ===============
PARM-SVC.ACTION        := 'GET'
PARM-SVC.SVC-PLAN      := 'PSM'
PARM-SVC.TRANSACTION-DATN := *DATN
CALLNAT 'SVCN0003' PARM-SVC #MSG
IF PARM-SVC.SVC-MODE = 'G'
    AND PARM-SVC.SVC-PAY-UP NE 'Y'
  ADD PARM-SVC.SVC-MONTHLY-RATE TO #TOT-ALOT-RQD
END-IF
END-SUBROUTINE
*
END
