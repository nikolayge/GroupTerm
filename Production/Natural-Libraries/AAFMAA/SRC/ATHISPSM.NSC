* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
*****************************************************************
*                                                               *
* New COPYCODE member: ATHISPSM created by ACCORD on: 02/09/05  *
*                                                               *
** SAG-AB 20060331 workaround to truncate significant digit giving overflows
*****************************************************************
*
DEFINE SUBROUTINE STOR-MNTHLY-PROJ-VALUES
*
IF IS-PROJ-START-YR-COMPARE < L-MNTHLY-START-YR OR IS-NO-LOAN-SW = 'Y' OR PTM-Y-X > 3
  ESCAPE ROUTINE
END-IF
*
ADD 1 TO PTM-M-X
IF L-DISPLAY-CALCS = 'Y' AND PTM-Y-X = 1 AND PTM-M-X = 1
  IF USE-X-CALCS = 'Y'
    MOVE IS-PROJ-YR TO L-CALC-MO-IND(1)
    MOVE IS-NET-LEVEL-PREM TO L-CALC-AMT(1)
    MOVE IS-ADJ-PREM TO L-CALC-AMT(2)
    MOVE IS-ADJ-PREM-MIN-DB TO L-CALC-AMT(3)
    MOVE IS-PVP-ADJ TO L-CALC-AMT(4)
    MOVE IS-PVP-GROSS TO L-CALC-AMT(5)
    MOVE IS-NET-PREM-RATIO TO L-CALC-AMT(6)
    MOVE IS-SNG-PREM-1AGO TO L-CALC-AMT(7)
    MOVE IS-SNG-PREM TO L-CALC-AMT(8)
    MOVE IS-NET-AMT-RISK-FACT TO L-CALC-AMT(9)
    MOVE IS-MORT-RT TO L-CALC-AMT(10)
    MOVE IS-INIT-ACQ TO L-CALC-AMT2(1)
    MOVE IS-MON-AMORT-ACQ TO L-CALC-AMT2(2)
    MOVE IS-BEG-MIN-CSV TO L-CALC-AMT2(3)
    MOVE IS-NXT-YR-MIN-CSV TO L-CALC-AMT2(4)
    MOVE 10 TO CLC-X
  ELSE
    IF IS-SMOK-STATUS = 'C'
      MOVE IS-PROJ-YR TO L-CALC-MO-IND(1)
      MOVE IS-SNG-PREM-1AGO TO L-CALC-AMT(1)
      MOVE IS-SNG-PREM TO L-CALC-AMT(2)
      MOVE IS-ZSPPRM-1AGO TO L-CALC-AMT(3)
      MOVE IS-ZSPPRM TO L-CALC-AMT(4)
** SAG-AB 20060331 workaround to truncate significant digit giving overflows
      DIVIDE 1000000 INTO IS-ZSPB-1AGO GIVING #TRUNC
      #TRUNC := #TRUNC * 1000000
      L-CALC-AMT(5) := IS-ZSPB-1AGO - #TRUNC
**    MOVE IS-ZSPB-1AGO TO L-CALC-AMT(5)
      DIVIDE 1000000 INTO IS-ZSPB GIVING #TRUNC
      #TRUNC := #TRUNC * 1000000
      L-CALC-AMT(6) := IS-ZSPB - #TRUNC
**    MOVE IS-ZSPB TO L-CALC-AMT(6)
      MOVE IS-ZSPEXP-1AGO TO L-CALC-AMT(7)
      MOVE IS-ZSPEXP TO L-CALC-AMT(8)
      MOVE IS-NET-AMT-RISK-FACT TO L-CALC-AMT(9)
      MOVE IS-MORT-RT TO L-CALC-AMT(10)
      MOVE 10 TO CLC-X
    ELSE
      MOVE IS-PROJ-YR TO L-CALC-MO-IND(1)
      MOVE IS-ADJ-PREM TO L-CALC-AMT(1)
      MOVE IS-WORK-C TO L-CALC-AMT(2)
      MOVE IS-WORK-D TO L-CALC-AMT(3)
      MOVE IS-NET-PREM-RATIO TO L-CALC-AMT(4)
      MOVE IS-SNG-PREM-1AGO TO L-CALC-AMT(7)
      MOVE IS-SNG-PREM TO L-CALC-AMT(8)
      MOVE IS-NET-AMT-RISK-FACT TO L-CALC-AMT(9)
      MOVE IS-MORT-RT TO L-CALC-AMT(10)
      MOVE 10 TO CLC-X
    END-IF
  END-IF
END-IF
IF L-DISPLAY-CALCS = 'Y' AND PTM-Y-X = 1 AND CLC-X < 78
  IF USE-X-CALCS = 'Y'
    ADD 1 TO CLC-X
    MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
    MOVE IS-SNG-PREM-CURR TO L-CALC-AMT(CLC-X)
    MOVE IS-MON-MAINT-EXP TO L-CALC-AMT2(CLC-X)
    ADD 1 TO CLC-X
    MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
    MOVE IS-INT-ACV TO L-CALC-AMT(CLC-X)
    MOVE IS-INT-CSV TO L-CALC-AMT2(CLC-X)
    ADD 1 TO CLC-X
    MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
    MOVE IS-INT-DB TO L-CALC-AMT(CLC-X)
    MOVE IS-NXT-CONT-FUND TO L-CALC-AMT2(CLC-X)
    ADD 1 TO CLC-X
    MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
    MOVE IS-MON-DB-PROC-EXP TO L-CALC-AMT(CLC-X)
    MOVE IS-CURR-ACQ TO L-CALC-AMT2(CLC-X)
    ADD 1 TO CLC-X
    MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
    MOVE IS-NAR TO L-CALC-AMT(CLC-X)
    MOVE IS-AVL-TDIV TO L-CALC-AMT2(CLC-X)
    ADD 1 TO CLC-X
    MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
    MOVE IS-RBC TO L-CALC-AMT(CLC-X)
    MOVE IS-EOM-DB TO L-CALC-AMT2(CLC-X)
  ELSE
    IF IS-SMOK-STATUS = 'C'
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-SNG-PREM-CURR TO L-CALC-AMT(CLC-X)
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-ZSPPRM-CURR TO L-CALC-AMT(CLC-X)
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-ZSPEXP-CURR TO L-CALC-AMT(CLC-X)
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-PREM-PAID-YTD TO L-CALC-AMT(CLC-X)
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-SAVE-INT-DB TO L-CALC-AMT(CLC-X)
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-NAR TO L-CALC-AMT(CLC-X)
    ELSE
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-SNG-PREM-CURR TO L-CALC-AMT(CLC-X)
      ADD 4 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-INT-DB TO L-CALC-AMT(CLC-X)
      ADD 1 TO CLC-X
      MOVE IS-MNTH-IND TO L-CALC-MO-IND(CLC-X)
      MOVE IS-NAR TO L-CALC-AMT(CLC-X)
    END-IF
  END-IF
END-IF
*
MOVE IS-LST-ACV TO IS-PTM-BOM-ACV(PTM-Y-X,PTM-M-X)
MOVE IS-WORK-PREM TO IS-PTM-PREMIUM(PTM-Y-X,PTM-M-X)
IF USE-X-CALCS = 'Y'
  COMPUTE IS-PTM-PR-DEFIC(PTM-Y-X,PTM-M-X) = IS-MON-AMORT-ACQ + IS-MON-MAINT-EXP
ELSE
  MOVE IS-PREM-DEFIC TO IS-PTM-PR-DEFIC(PTM-Y-X,PTM-M-X)
END-IF
COMPUTE ROUNDED IS-PTM-COI(PTM-Y-X,PTM-M-X)  = (IS-COI * 1)
COMPUTE ROUNDED IS-PTM-INT(PTM-Y-X,PTM-M-X)  = (IS-INTEREST * 1)
MOVE IS-NXT-ACV TO IS-PTM-EOM-ACV(PTM-Y-X,PTM-M-X)
IF USE-X-CALCS = 'Y'
  MOVE IS-CSH-SUR-VL TO IS-PTM-EOM-CSV(PTM-Y-X,PTM-M-X)
  MOVE IS-ILL-DB TO IS-PTM-EOM-DB(PTM-Y-X,PTM-M-X)
ELSE
  MOVE IS-NXT-CSV TO IS-PTM-EOM-CSV(PTM-Y-X,PTM-M-X)
  MOVE IS-EOM-DB TO IS-PTM-EOM-DB(PTM-Y-X,PTM-M-X)
END-IF
*
END-SUBROUTINE
*
*********************************************************************************
*
