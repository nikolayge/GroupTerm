* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
*****************************************************************
*                                                               *
* New COPYCODE member: ATHISOMN created by ACCORD on: 02/09/05  *
*                                                               *
*****************************************************************
************************************************************************
*                       MODIFICATION LOG                               *
* USER DATE     TAG  REASON                                            *
* SAG  20060221 RH1  AS - Correction made to converted code.  Logic    *
*                    now matches that of original Cobol module.        *
* DW12-AB 20060327   200510 Code change to Cobol migrated to converted *
*                    Natural                                           * 
* SAG-AB  20060717   Changes for precision of CSV and DB calculations  *
* DRW  20070316 DW1  Stop using Loan Amt to calc ACV Interest          *
* RSE  20090917 RE1  Change PROCESS-IND logic                          *
* PAM 07/21/2010 PM2 Added 3SR service-fee processing                 *
************************************************************************
*
DEFINE SUBROUTINE CALC-OLD-MNTHLY-VALUES
*
**                                             SAG-AB 20060717 START
**COMPUTE ROUNDED IS-SNG-PREM-CURR = IS-SNG-PREM-1AGO
**  + (((IS-MNTH-IND - 1) / 12) * (IS-SNG-PREM - IS-SNG-PREM-1AGO))
COMPUTE #INTVAL1 = (IS-MNTH-IND - 1) / 12
COMPUTE ROUNDED #INTVAL2 = IS-SNG-PREM - IS-SNG-PREM-1AGO
COMPUTE ROUNDED #INTVAL3 = #INTVAL1 * #INTVAL2
COMPUTE ROUNDED IS-SNG-PREM-CURR = IS-SNG-PREM-1AGO + #INTVAL3
**                                             SAG-AB 20060717 END
RESET IS-PREM-PAID-YTD IS-ZSPPRM-CURR
*
IF IS-PAID-UP-SW NE 'Y'
  MOVE IS-1ST-MONTHIVERSARY TO IS-BUMP-MONTH
  FOR #WORK-VALUE = 1 TO IS-MNTH-IND
    PERFORM ACCUM-YTD-PREMS-PAID
  END-FOR
**                                             SAG-AB 20060717 START
**COMPUTE ROUNDED IS-ZSPPRM-CURR = IS-ZSPPRM-1AGO + (((IS-MNTH-IND - 1) / 12) *
**  (IS-ZSPPRM - (IS-ZSPPRM-1AGO - IS-ANN-PREM))) - IS-PREM-PAID-YTD
  COMPUTE #INTVAL1 =    ((IS-MNTH-IND - 1) / 12)
  COMPUTE ROUNDED #INTVAL2 =   (IS-ZSPPRM - (IS-ZSPPRM-1AGO - IS-ANN-PREM))
  COMPUTE ROUNDED #INTVAL3 =   #INTVAL1 * #INTVAL2
  COMPUTE ROUNDED IS-ZSPPRM-CURR = IS-ZSPPRM-1AGO + #INTVAL3 - IS-PREM-PAID-YTD
**                                             SAG-AB 20060717 END
END-IF
*
**                                             SAG-AB 20060717 START
**COMPUTE ROUNDED IS-ZSPEXP-CURR = IS-ZSPEXP-1AGO
**  + (((IS-MNTH-IND - 1) / 12) * (IS-ZSPEXP - IS-ZSPEXP-1AGO))
COMPUTE #INTVAL1 =   ((IS-MNTH-IND - 1) / 12)
COMPUTE ROUNDED #INTVAL2 =   (IS-ZSPEXP - IS-ZSPEXP-1AGO)
COMPUTE ROUNDED #INTVAL3 =   #INTVAL1 * #INTVAL2
COMPUTE ROUNDED IS-ZSPEXP-CURR = IS-ZSPEXP-1AGO + #INTVAL3
**COMPUTE ROUNDED IS-SNG-PREM-NXMO = IS-SNG-PREM-1AGO
**  + ((IS-MNTH-IND / 12) * (IS-SNG-PREM - IS-SNG-PREM-1AGO))
COMPUTE #INTVAL1 = (IS-MNTH-IND / 12)
COMPUTE ROUNDED #INTVAL2 = (IS-SNG-PREM - IS-SNG-PREM-1AGO)
COMPUTE ROUNDED #INTVAL3 = #INTVAL1 * #INTVAL2
COMPUTE ROUNDED IS-SNG-PREM-NXMO = IS-SNG-PREM-1AGO + #INTVAL3
**                                             SAG-AB 20060717 END
RESET IS-PREM-PAID-YTD-NXMO IS-ZSPPRM-NXMO
*
IF IS-PAID-UP-SW NE 'Y'
  MOVE IS-1ST-MONTHIVERSARY TO IS-BUMP-MONTH
  FOR #WORK-VALUE = 1 TO IS-MNTH-IND
    PERFORM ACCUM-YTD-PREMS-PAID-NXMO
  END-FOR
  PERFORM ACCUM-YTD-PREMS-PAID-NXMO
**                                             SAG-AB 20060717 START
**  COMPUTE ROUNDED IS-ZSPPRM-NXMO = IS-ZSPPRM-1AGO
**    + ((IS-MNTH-IND / 12) * (IS-ZSPPRM - (IS-ZSPPRM-1AGO - IS-ANN-PREM)))
**    - IS-PREM-PAID-YTD-NXMO
COMPUTE #INTVAL1 = (IS-MNTH-IND / 12)
COMPUTE ROUNDED #INTVAL2 = (IS-ZSPPRM - (IS-ZSPPRM-1AGO - IS-ANN-PREM))
COMPUTE ROUNDED #INTVAL3 = #INTVAL1 * #INTVAL2
COMPUTE ROUNDED IS-ZSPPRM-NXMO = IS-ZSPPRM-1AGO + #INTVAL3
**                                             SAG-AB 20060717 END
END-IF
*
**                                             SAG-AB 20060717 START
**COMPUTE ROUNDED IS-ZSPEXP-NXMO = IS-ZSPEXP-1AGO
**  + ((IS-MNTH-IND / 12) * (IS-ZSPEXP - IS-ZSPEXP-1AGO))
COMPUTE #INTVAL1 = (IS-MNTH-IND / 12)
COMPUTE ROUNDED #INTVAL2 = (IS-ZSPEXP - IS-ZSPEXP-1AGO)
COMPUTE ROUNDED #INTVAL3 = #INTVAL1 * #INTVAL2
COMPUTE ROUNDED IS-ZSPEXP-NXMO = IS-ZSPEXP-1AGO + #INTVAL3
**                                             SAG-AB 20060717 END
*
RESET IS-WORK-PREM
IF IS-PAID-UP-SW NE 'Y' AND L-REIN-CODE NE 'REIN'
  IF L-REIN-CODE = ' '
    PERFORM ADD-AUTO-PREM
  ELSE
    IF (IS-MODE = 12)
        OR ((IS-MODE = 2) AND ((IS-TODAY-MON = IS-PRM-PD-MON(1))
        OR (IS-TODAY-MON = IS-PRM-PD-MON(2))))
        OR ((IS-MODE = 4) AND ((IS-TODAY-MON = IS-PRM-PD-MON(1))
        OR (IS-TODAY-MON = IS-PRM-PD-MON(2))
        OR (IS-TODAY-MON = IS-PRM-PD-MON(3))
        OR (IS-TODAY-MON = IS-PRM-PD-MON(4))))
        OR ((IS-MODE = 1) AND (IS-TODAY-MON = IS-PRM-PD-MON(1)))
      MOVE IS-PREMIUM TO IS-WORK-PREM
    END-IF
  END-IF
END-IF
*
IF IS-CONV-DUR > 10
  RESET IS-PREM-DEFIC
END-IF
*
COMPUTE ROUNDED IS-INT-ACV = IS-LST-ACV + IS-WORK-PREM - IS-PREM-DEFIC
COMPUTE ROUNDED IS-INT-DB = (9000 * IS-FAC-AMT) / +5000
COMPUTE ROUNDED IS-WORK-B = (IS-INT-ACV + IS-ZSPPRM-CURR - IS-ZSPEXP-CURR) / IS-SNG-PREM-CURR
MOVE IS-WORK-B TO IS-SAVE-INT-DB
*
IF IS-WORK-B > IS-INT-DB
  MOVE IS-WORK-B TO IS-INT-DB
END-IF
IF IS-LST-DB > IS-INT-DB
  MOVE IS-LST-DB TO IS-INT-DB
END-IF
IF IS-AGE-96-REINST = 'Y'
  MOVE IS-LST-ACV TO IS-INT-DB
END-IF
*
COMPUTE ROUNDED IS-NAR = (IS-INT-DB / IS-CALC-7A) - IS-INT-ACV + IS-NET-AMT-RISK-FACT
*
IF (IS-ISS-AGE + IS-DURATION) > 99
  RESET IS-COI
ELSE
  COMPUTE ROUNDED IS-COI = (IS-NAR / 1000) * IS-MORT-RT
END-IF
*
**IF IS-PROCESS-IND = 'O' AND IS-ISS-AGE + IS-DURATION LE 99 /* removed 10/2005 DW12-AB
**  SUBTRACT IS-OO-COI-ADJ FROM IS-COI                       /* removed 10/2005 DW12-AB
**END-IF                                                     /* removed 10/2005 DW12-AB
*
IF (L-REIN-CODE = 'IPRA' OR = 'IPRC') AND (IS-PROJ-DUR > 1)
  IF IS-PROJ-DUR > 11
    MOVE PROBABLE-INT-RATE(11) TO IS-CURR-RT
    PERFORM CALC-MNTHLY-CMP-INT-RATES
  ELSE
    MOVE PROBABLE-INT-RATE(IS-PROJ-DUR) TO IS-CURR-RT
    PERFORM CALC-MNTHLY-CMP-INT-RATES
  END-IF
END-IF
*
IF (L-REIN-CODE = 'IPRB' OR = 'IPRD') AND (IS-PROJ-DUR > 1)
  IF IS-PROJ-DUR > 11
    MOVE WORST-INT-RATE(11) TO IS-CURR-RT
    PERFORM CALC-MNTHLY-CMP-INT-RATES
  ELSE
    MOVE WORST-INT-RATE(IS-PROJ-DUR) TO IS-CURR-RT
    PERFORM CALC-MNTHLY-CMP-INT-RATES
  END-IF
END-IF
*
IF (IS-INT-DB > IS-WORK-B) AND (IS-ISS-AGE + IS-DURATION LE 99)
  COMPUTE ROUNDED IS-WORK-C = ((IS-INT-DB - IS-WORK-B) * IS-CALC-12-MORT-PORT * IS-MORT-RT)  / 1000
  COMPUTE ROUNDED IS-COI = IS-COI - IS-WORK-C
  COMPUTE IS-DB-DIFF = IS-INT-DB - IS-WORK-B
  ADD IS-WORK-C TO IS-YTD-COI-SUBSIDY
  ADD IS-DB-DIFF TO IS-YTD-DB-DIFF
END-IF
*
IF ((IS-PROCESS-IND = 'G') OR (IS-PROCESS-IND = 'O')   /* DW14-AB 20060327
    OR (IS-PROCESS-IND = 'S'))                         /* RE1
    AND (IS-SEG-X = IS-FIRST-GF-POL)                   /* DW14-AB 20060327
    AND ((IS-ISS-AGE + IS-DURATION) LE 99)             /* DW14-AB 20060327
  ADD IS-SVCS-FEE TO IS-COI                            /* DW14-AB 20060327
END-IF                                                 /* DW14-AB 20060327
**
**                     ADD BELOW FOR 1/2006 MONTH/END  /* DW14-AB 20060327
IF   (IS-PROCESS-IND = 'O')                            /* DW14-AB 20060327
    AND (IS-SEG-X = IS-FIRST-GF-POL)                   /* DW14-AB 20060327
    AND ((IS-ISS-AGE + IS-DURATION) LE 99)             /* DW14-AB 20060327
  SUBTRACT IS-LIV-SVC FROM IS-COI                      /* DW14-AB 20060327
END-IF                                                 /* DW14-AB 20060327
*
IF #SERVICES                                           /* PM2
 AND #OL-IND                                           /* PM2
 AND #OL-INDEX = IS-SEG-X                              /* PM2
 AND IS-ISS-AGE + IS-DURATION LE 99                    /* PM2
  ADD IS-SVCS-FEE TO IS-COI                            /* PM2
END-IF                                                 /* PM2
*
* COMPUTE ROUNDED IS-INTEREST   /* Replaced 3/16/2007     /* DW1
*   = ((IS-INT-ACV - IS-COI - IS-LN-AMT - IS-LN-AMT-2) * IS-M-CURR-RT)
*   + (IS-LN-AMT * IS-M-LOAN-RT)  + (IS-LN-AMT-2 * IS-M-LOAN-RT-2)
*
COMPUTE ROUNDED IS-INTEREST    /* New Int Calc not using Loan /* DW1
  = (IS-INT-ACV - IS-COI) * IS-M-CURR-RT
* DW99
* write id-number 'INT=' is-interest 'int-acv' is-int-acv 'coi=' is-coi
*   'm-int-rt=' is-m-curr-rt is-curr-rt 'LN-rt=' is-loan-rt is-loan-rt-2
*   'm-fix-int-rt=' is-m-loan-rt
*
IF IS-INTEREST < 0
  RESET IS-INTEREST
END-IF
*
COMPUTE ROUNDED IS-NXT-ACV = IS-INT-ACV - IS-COI + IS-INTEREST
*
IF IS-CONV-DUR > 10 OR (IS-ISS-AGE + IS-DURATION - 1 > 95)
  MOVE IS-NXT-ACV TO IS-NXT-CSV
ELSE
  IF IS-ISS-AGE + IS-DURATION - IS-CONV-DUR < 87
    COMPUTE ROUNDED IS-NXT-CSV = IS-NXT-ACV - ((((11 - IS-CONV-DUR) * 12)
      - IS-MNTH-IND) * IS-ALLOC-CRED)
  ELSE
    COMPUTE ROUNDED IS-NXT-CSV = IS-NXT-ACV - ((((96 - IS-ISS-AGE - IS-DURATION +
      1) * 12) - IS-MNTH-IND) * ((IS-ALLOC-CRED * 120) / (12 * (96 - IS-ISS-AGE
      - IS-DURATION + IS-CONV-DUR))))
  END-IF
END-IF
*
COMPUTE ROUNDED IS-WORK-C = IS-MIN-CSV + (IS-MNTHLY-MIN-DIFF * IS-MNTH-IND)
IF IS-NXT-CSV < IS-WORK-C
  MOVE IS-WORK-C TO IS-NXT-CSV
END-IF
*
COMPUTE ROUNDED IS-EOM-DB = (9000 * IS-FAC-AMT) / +5000
COMPUTE ROUNDED IS-WORK-B = (IS-NXT-ACV + IS-ZSPPRM-CURR - IS-ZSPEXP-CURR) / IS-SNG-PREM-CURR
IF IS-WORK-B > IS-EOM-DB
  MOVE IS-WORK-B TO IS-EOM-DB
END-IF
IF IS-LST-DB > IS-EOM-DB
  MOVE IS-LST-DB TO IS-EOM-DB
END-IF
*
IF (IS-ISS-AGE + IS-DURATION > 99) AND IS-NXT-CSV > IS-EOM-DB
  MOVE IS-NXT-CSV TO IS-EOM-DB
END-IF
IF (IS-AGE-96-REINST = 'Y')
    OR ((IS-ID-NO = 28033) AND ((IS-ISS-DATE = 19580301 OR = 19630801)))
  MOVE IS-NXT-CSV TO IS-EOM-DB
END-IF
*
END-SUBROUTINE
*
********************************************************************************
*
DEFINE SUBROUTINE ACCUM-YTD-PREMS-PAID
*
IF IS-MODE = 12
  ADD IS-PREMIUM TO IS-PREM-PAID-YTD
ELSE
  IF IS-MODE = 4
    IF IS-BUMP-MONTH = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2)
        OR = IS-PRM-PD-MON(3) OR = IS-PRM-PD-MON(4)
      ADD IS-PREMIUM TO IS-PREM-PAID-YTD
    ELSE                                                 /*SAG 20060221 RH1 AS
      IGNORE                                             /*SAG 20060221 RH1 AS
    END-IF                                               /*SAG 20060221 RH1 AS
  ELSE
    IF IS-MODE = 2
      IF IS-BUMP-MONTH = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2)
        ADD IS-PREMIUM TO IS-PREM-PAID-YTD
      ELSE                                               /*SAG 20060221 RH1 AS
        IGNORE                                           /*SAG 20060221 RH1 AS
      END-IF                                             /*SAG 20060221 RH1 AS
    ELSE
      IF IS-MODE = 1
        IF IS-BUMP-MONTH = IS-PRM-PD-MON(1)
          ADD IS-PREMIUM TO IS-PREM-PAID-YTD
        END-IF
      END-IF
    END-IF
  END-IF
END-IF
*
ADD 1 TO IS-BUMP-MONTH
IF IS-BUMP-MONTH = 13
  MOVE 1 TO IS-BUMP-MONTH
END-IF
*
END-SUBROUTINE
*
********************************************************************************
*
DEFINE SUBROUTINE ACCUM-YTD-PREMS-PAID-NXMO
*
IF IS-MODE = 12
  ADD IS-PREMIUM TO IS-PREM-PAID-YTD-NXMO
ELSE
  IF IS-MODE = 4
    IF IS-BUMP-MONTH = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2)
        OR = IS-PRM-PD-MON(3) OR = IS-PRM-PD-MON(4)
      ADD IS-PREMIUM TO IS-PREM-PAID-YTD-NXMO
    ELSE                                                 /*SAG 20060221 RH1 AS
      IGNORE                                             /*SAG 20060221 RH1 AS
    END-IF                                               /*SAG 20060221 RH1 AS
  ELSE
    IF IS-MODE = 2
      IF IS-BUMP-MONTH = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2)
        ADD IS-PREMIUM TO IS-PREM-PAID-YTD-NXMO
      ELSE                                               /*SAG 20060221 RH1 AS
        IGNORE                                           /*SAG 20060221 RH1 AS
      END-IF                                             /*SAG 20060221 RH1 AS
    ELSE
      IF IS-MODE = 1
        IF IS-BUMP-MONTH = IS-PRM-PD-MON(1)
          ADD IS-PREMIUM TO IS-PREM-PAID-YTD-NXMO
        END-IF
      END-IF
    END-IF
  END-IF
END-IF
*
ADD 1 TO IS-BUMP-MONTH
IF IS-BUMP-MONTH = 13
  MOVE 1 TO IS-BUMP-MONTH
END-IF
*
END-SUBROUTINE
*
********************************************************************************
*
DEFINE SUBROUTINE ADD-AUTO-PREM
*
IF ((IS-PAD-CODE = 'E') AND (IS-MODE-MODE = 'E'))
    OR (IS-PAD-CODE = 'V')
    OR ((IS-PAD-CODE = 'W') AND (IS-POL-OWNER = 'N'))
    OR ((IS-PAD-CODE = 'X') AND (IS-POL-OWNER = 'D'))
  IF IS-PD-THRU-YYYYMM GE IS-RUN-DATE-YYYYMM
    ESCAPE ROUTINE
  END-IF
END-IF
*
IF ((IS-PAD-CODE = 'E') AND (IS-MODE-MODE = 'E'))
    OR (IS-PAD-CODE = 'V')
    OR ((IS-PAD-CODE = 'W') AND (IS-POL-OWNER = 'N'))
    OR ((IS-PAD-CODE = 'X') AND (IS-POL-OWNER = 'D'))
    OR ((IS-MODE-MODE = 'G') AND (IS-PAY-STATUS = '20'))
    OR ((IS-MODE-MODE = 'G') AND (IS-PAY-STATUS = '22'))
  IGNORE
ELSE
  ESCAPE ROUTINE
END-IF
*
IF IS-TYPE = 'OL'
  MOVE IS-DOB TO IS-PD-UP
  ADD 96 TO IS-PD-UP-YYYY
ELSE
  MOVE IS-ISS-DATE TO IS-PD-UP
  IF IS-TYPE = '20'
    ADD 20 TO IS-PD-UP-YYYY
  ELSE
    IF IS-TYPE = '30'
      ADD 30 TO IS-PD-UP-YYYY
    ELSE
      ADD 7 TO IS-PD-UP-YYYY
    END-IF
  END-IF
END-IF
IF IS-PD-UP-YYYYMM GE IS-RUN-DATE-YYYYMM
  IF IS-PD-UP-YYYYMM = IS-RUN-DATE-YYYYMM
    COMPUTE ROUNDED IS-WORK-PREM = (IS-PREMIUM * (IS-PD-UP-DD - 1)) / 30
  ELSE
    MOVE IS-PREMIUM TO IS-WORK-PREM
  END-IF
END-IF
*
END-SUBROUTINE
*
*********************************************************************************
*
