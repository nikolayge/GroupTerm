* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* * * * * * * * * * * * * * * * * *
* PROGRAM-ID: C2H30PVW            *
* VW  -  VALUE ADDED WORK SCREEN  *
*  SUFFIX "COI" replaced by "MAX"  11/5/2005
* * * * * * * * * * * * * * * * * *
*****************************************************************************
*        MODIFICATION LOG
* USER   DATE   TAG   REASON
* DRW  10252004  DW2   fix "IN THE CORRIDOR" logic for nxt pols
* DRW  11152004  DW3   tell CVALUSXX not to repl #MCSV (suff VW)
* DRW  12032004  DW4   no svc-fee if no COI
* PAM  12072004  PM5   Include maint cost and acq  fee in exp calc
* DRW  12232004  DW6   Chg lbl from MAINT to ADMIN & add tots to COI SCN
* DRW  02272005  DW7   Add AL (Annuity Life) Processing
* DRW  04152005  DW8   Add face Amt & TPP linkage to CVALUSXX
* DRW  05042005  DW9   Make TOT-PREMS-PAID be TPP ADJUST if Term Ins
* DRW  05042005  DW10  Add FPF & BADJ to Screen
* PAM  05272005  PM11  Adjust AVL-TDIV for 124156 per RLB
* DRW  06202005  DW12  Show mismatched TPP & CSV in 1st month
* DRW  06282005  DW13  Add 7/1/2005 SVC-FEE rate change
* DRW  09232005  DW14  Add Screens for Over 13 Months History
* DRW  10242005  DW15  Add OPT OUT/DE-GF SVC FEE logic
* DRW  10252005  DW16  Add TOT ACQ-COST ACCUM
* DRW  10302005  DW17  Modify OPT/OUT SVC FEE Calculation
* DRW  11142005  DW18  ADD PROC-DT TO GOPTOSXX LINKAGE & NO FEE AFTER
*                      10/2005 MONTH-END
* DRW  12152005  DW19  wait 1 month for DE-GF processing date
* DRW  12282005  DW20  add breakout of svc-fee and O/O credit calcs
* DRW  01292006  DW21  On Nxt after 1/1/2006 show SAS as part of ADMIN
* DRW  02152006  DW22  Make MORT/ADMIN Split a variable (75/25)
* DRW  03032006  DW23  Add 7/1/2006 SVC-FEE rate change
* DRW  04022006  DW24  Fix 2006 OPT-OUT CALC (#PROCESS-DATE)
* DRW  04072006  DW25  No SVC/FE on SPS/GEN pols even if PROC-IND = G
* DRW  04212006  DW26  No SVC/FE on all NXT policies after 1/2006
* DRW  04292006  DW27  Clear OPT-OUT Credit to start each month Calcs
* DRW  07062006  DW28  set prem to 100K on cn 140630 pol iss 2/27/2006
* DRW  07242006  DW29  Give back SVC-FEE to NEXT non SPS/GEN
* DRW  11082006  DW30  EMP's should be considered as INS-ONLY
* DRW  11092006  DW31  Fix ADMIN calc if COI less than zero
* DRW  11092006  DW32  USE V/W FIELDS FOR ADMIN & ACQ
* DRW  11142006  DW33  CLEAR MAP BEFORE FILLING IT
* DRW  12012006  DW34  Add 7/1/2007 SVC-FEE rate change
* DRW  04123007  DW35  Use Plan not Split Ind to select segment
* DRW 12/05/2007 DW36  Bypass unneeded logic if doing Ann STMTS
* DRW 12/06/2007 DW37  Add 7/1/2008 SVC-FEE rate change
* PAM 11/17/2008 PM38  Use REAL PREMIUM (calculated because of storage)
* DRW 05/11/2009 DW39  Add 7/1/2009 SVC-FEE rate Change (Also chg G4103PMS)
* DRW 10/01/2009 DW40  Handle COI of greater then 999.99
* PAM 12/02/2010 PM41  Adjust COI estimate calculation - from 200 to 300
* PAM 12/07/2010 PM42  Readjust COI estimate calculation
* PAM 12/30/2011 PM43  Adjust calculations for 3SR service fees
* VXT 01/11/2012 vt1   Add 7/1/2011 SVC-FEE rate Change
* YAK 10/16/2012 YK1   Use function to identify Level Term II plans
* YAK 11/15/2012 YK2   Add No Medical Term plan (EZ)
* vxt 12/07/2012 vt2   Correction for annual statements
* VXT 01/21/2013 vt3   Add SVC-FEE rate Change
* vxt 02/06/2013 vt4   add pop-up screen for CN paid in error on 12/31/2012 /OI-1776/
* TMT 11/06/2013 TT1   1 MILLION DOLLAR STABILITY PROJECT
* vxt 01/23/2014 vt5   /Ticket 2520/ Change the service rate
* TMT 06/12/2014 TT2   Contact Normalization - Gender and DOB
* TMT 10/14/2014 TT3   Annuity Life Stabilization
* vxt 01/14/2015 vt6  Add new fee amounts /Ticket 1691 - effective service rates for year 2015/
* NGG 20160111   NG1   VAWL version
* vxt 12/23/2016 vt7  New rates for 2016 
* vxt 12/28/2017 vt8  /Ticket 6975 / New rates for 2018
*****************************************************************************
*
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK
LOCAL USING GONERLXX
LOCAL USING C2H30LVW
LOCAL USING SVCA0001                       /* PM43
LOCAL USING C2H31LVW                       /* vt4
LOCAL
1 #VERSION                 (A1)            /* NG1
1 #SVC-ISSUE-DATE          (N8)            /* PM43
1 REDEFINE #SVC-ISSUE-DATE                 /* PM43
  2 #SVC-ISSUE-DATE-YYYYMM  (N6)            /* PM43
  2 #SVC-ISSUE-DATE-DD      (N2)            /* PM43
1 #SVC-TERMINATION-DATE    (N8)            /* PM43
1 REDEFINE #SVC-TERMINATION-DATE           /* PM43
  2 #SVC-TERMINATION-YYYYMM (N6)            /* PM43
  2 #SVC-TERMINATION-DD     (N2)            /* PM43
1 #REAL-COI  (N4.2)   /* DW40
* CONT-FUND        = BEG-CASH-VALUE
* CURR-ACQ-BAL     = MONTH-ALLOC-AMT
* MONTHLY-ACQ-COST = PREM-DEFICIENCY
* AVL-TDIV         = CONT-FIND - CURR-ACQ-BAL
*
1 #A9     (A9)
1 REDEFINE #A9
  2 #N7-2  (N7.2)
*
1 #A5     (A5)
1 REDEFINE #A5
  2 #N3-2  (N3.2)
*
1 #SCR-BREAKOUT (A55)
1 #SVC-FEE-MSG  (A60)
1 #NXT  (L)
1 #SF   (L)
1 #SF-X (I2)
1 #WORK   (N9.7)
1 #PROCESS-DATE   (N6)      /* DW18
1 #COI-ADJ         (N3.2/9) /* DW15
1 #COI-ADMIN-MSG   (A33)    /* DW21
1 #NXT-X           (I2)
1 #NXT-PRM-ADJ     (P1.2)
1 #OO-EFF-DATE     (N8)
1 REDEFINE #OO-EFF-DATE
  2 #OO-EFF-DATE-YYYYMM  (N6)
1 #DEGF-EFF-DATE   (N8)
1 REDEFINE #DEGF-EFF-DATE
  2 #DEGF-EFF-DATE-YYYYMM  (N6)
  2 #DEGF-EFF-DATE-DD      (N2)
1 #SCR-FPF    (A12)          /*DW10
1 #SCR-BADJ   (A10)          /*DW10
1 #NXT-MON-MAINT-PER-POL (N2.2) INIT <21.60>
1 #NXT-MON-MAINT-PER-1K  (N.2)  INIT <.11>
1 #VA-YYYYMM    (N6)
1 REDEFINE #VA-YYYYMM
  2 #VA-YYYY  (N4)
  2 #VA-MM    (N2)
1 #COI       (N6.2)
1 #ADMIN     (N6.2)
*
1 #NXT-YR-MCV-LBL   (A9) INIT <'NX-Y-MN-C'>  /* DW7
1 #SVC-FEE    (N2.2)
1 #LIV-SVC    (N2.2)    /* DW20
1 #SAS        (N1.2)
1 #OO-CRED    (N3.2)
1 #SVC-FEE-TBL-ENTRIES  (N2) INIT <14>  /* must match below    /* DW39    /* vt1  /* vt3 was 8  /* vt5 was 9  /* vt6 was 10  /* vt7 was 12 /* vt8 was 13
1 #SVC-FEE-TBL     /* m/e date implemented
  2 #SVC-FEE-TBL-1  (A14) INIT <'200307-320-274'>
  2 #SVC-FEE-TBL-2  (A14) INIT <'200407-325-274'> /* Missed on 7/1/2004
  2 #SVC-FEE-TBL-4  (A14) INIT <'200507-334-288'>  /* DW13
  2 #SVC-FEE-TBL-5  (A14) INIT <'200607-348-300'>  /* DW23
  2 #SVC-FEE-TBL-6  (A14) INIT <'200707-360-310'>  /* DW34
  2 #SVC-FEE-TBL-7  (A14) INIT <'200807-368-317'>  /* DW37
  2 #SVC-FEE-TBL-8  (A14) INIT <'200907-389-335'>  /* DW39
  2 #svc-fee-tbl-9  (a14) INIT <'201201-403-347'>  /* vt1
  2 #svc-fee-tbl-10 (a14) INIT <'201301-410-353'>  /* vt3
  2 #svc-fee-tbl-11 (a14) INIT <'201401-416-358'>  /* vt5
  2 #svc-fee-tbl-12 (a14) INIT <'201501-423-364'>  /* vt6
  2 #svc-fee-tbl-13 (a14) INIT <'201601-423-364'>  /* vt6
  2 #svc-fee-tbl-14 (a14) INIT <'201701-426-366'>  /* vt7
  2 #svc-fee-tbl-15 (a14) INIT <'201801-435-374'>  /* vt8
* There is really 1 less occurrance than the above number
1 REDEFINE #SVC-FEE-TBL
  2 #SVC-FEE-OCC   (14)                             /* DW39 /* vt1 was 7   /* vt3 was 8  /* vt5 was 9  /* vt6 was 10  /* vt7 was 12 /* vt8 was 13
    3 #SVC-FE-DATE  (N6)
    3 #SVC-FE-FIL1  (A1)
    3 #SVC-FE      (N1.2)
    3 #SVC-FE-FIL2  (A1)
    3 #SVC-LIV-SVC  (N1.2)   /* DW20
*
1 #MORT-PCT  (N0.2)                        /* DW22
1 #MORT-PCT-ENTRIES  (N2) INIT <2>  /* must match below
1 #MORT-PCT-TBL     /* m/e date implemented
  2 #M-P-TBL-1  (A9) INIT <'200307-73'>
  2 #M-P-TBL-2  (A9) INIT <'200601-75'>
1 REDEFINE #MORT-PCT-TBL
  2 #MORT-PCT-OCC   (2)                                 
    3 #MORT-PCT-DATE (N6)
    3 #MORT-PCT-FIL1 (A1)
    3 #MORT-PERCENT  (N0.2)
*
1 #MON-TBL   (N6/100)
1 #FND-MATCH     (L)
*
1 #SUFFIX   (A3)
1 REDEFINE #SUFFIX
  2 #SUF-2  (A2)
  2 #SUF-3  (N1)
1 #AS-OF-DT   (N8)
1 #LOAN-BAL   (N7.2/9)
1 #LOAN-BAL-2 (N7.2/9)
1 #ACC-INT    (N7.2/9)
1 #ACC-INT-2  (N7.2/9)
1 #CSV        (N7.2/9)
1 #CVALUE     (N7.2/9)
1 #LVALUE     (N7.2/9)
1 #MCSV       (N7.2/9)
1 #DB         (N7.2/9)
1 #ANN-PREMIUM (N7.2/9)
1 #FACE-AMT    (N7.2/9)  /* DW8
1 #TPP         (N7.2/9)  /* DW8
*
1 #NEW-FLDS   (L)
1 #AMT-12    (A12)
1 #SCR-SEL       (A1/9)
1 #SCR-SEL-CV    (C/9)
1 #SCR-ISS-DT    (A10/9)
1 #SCR-POL-NUM   (A16/9)
1 #SCR-PLN       (A3/9)
1 REDEFINE #SCR-PLN
  2 #SCR-PLN-OCC   (9)
    3 #SCR-PLN-A1   (A1)
    3 #SCR-PLN-A2   (A2)
1 #SCR-FACE      (A12/9)
1 #SCR-SEL-X     (I2/9)
1 #SEL-X     (I2)
1 #BYPASS    (L)
*
1 #1-YEAR-AGO       (N8)
1 #CURR-YYYY        (N4)
1 REDEFINE #CURR-YYYY
  2 #CURR-YYY  (N3)
  2 #CURR-Y    (N1)
1 #TOT-SVC-FEE      (N5.2) /* DW6
1 #TOT-LIV-SVC      (N5.2) /* DW20
1 #TOT-SAS          (N5.2)
1 #TOT-OO-CRED      (N5.2)
1 #TOT-COI          (N5.2) /* DW6
1 #TOT-ADMIN        (N5.2)
1 #TOT-ACQ-COST     (N5.2) /* DW16
1 #TOT-EXP          (N5.2) /* DW16
1 #TOT-INT          (N5.2) /* DW16
1 #TOT-PRM          (N6.2) /* DW16
1 #AMT-10           (A10)
1 #MON-PREM         (N7.2)
1 #TOT-PREMS        (N7.2)
1 #TPP-DIFF         (N7.2)
1 #AMT-DISP         (A12)
1 #DRW-CB-LBL           (A3)
1 #SCR-DRW-COST-BASIS   (A12)
1 #CURR-COST-BASIS    (N7.2)
1 #MEC-IND (A3)
*
* BELOW for CALC-PREMS-PAID
1 #PP-DATE-OF-BIRTH  (N8)
1 #PP-ANNUAL-PREM    (N5.2)
1 #PP-PAY-STATUS     (A2)
1 #PP-TOT-PREMIUMS-PAID (N7.2)
1 #PP-PAID-TO-DATE   (N8)
1 #PP-ISSUE-DATE     (N8)
1 #PP-MODE           (A1)
1 #PP-PLAN           (A3)
1 #PP-COST-BASIS      (N7.2)
1 #PP-MONTH-ALLOC-AMT (N7.2)       /*TT1
1 #PP-INTRO-FLAG     (A1)
1 #PP-FIRST-PLACE-FEE (N7.2)
1 #PREMS-PAID         (P7.2)
1 #SUB-PREMS-PAID     (P7.2)
1 #PP-BADJ            (P5.2)
*
* ABOVE for CALC-PREMS-PAID
*
1 #SCR-TRM-PT-LBL  (A15)
1 #SCR-TRM-PT-YEAR (A4)
1 #SCR-TRM-PT-MM  (A2)
1 #SCR-AVL-TDIV-LBL (A11) INIT <'AVL-TDIV'>
1 #SCR-AVL-TDIV     (A11)
1 #AVL-TDIV  (P7.2)
1 #DB-TO-PAY   (P7.2)
1 #SCR-TOT-PRM-PD   (A12) INIT <'TOT-PREMS-PD'>
1 #SCR-MON-AL-CRED  (A11) INIT <'MON-AL-CRED'>
1 #SCR-PRM-DEF      (A7)  INIT <'PRM-DEF'>
1 #SCR-5-5-DB       (A8)  INIT <'5.5 DB  '>
1 #SCR-PROR-LN      (A7)  INIT <'PROR-LN'>
1 #SCR-PROR-IN      (A6)  INIT <'PRO-IN'>
1 #SCR-ACQ-COST   (A8)       /* PM5
1 #SCR-MESSAGE    (A75)
1 #SCR-NAME       (A24)
1 #SCR-ISS-DATE   (A10)
1 #SCR-PLAN       (A3)
1 #SCR-ACV        (A12)
1 #SCR-PT-DATE    (A10)
1 #SCR-AGE        (A2)
1 #CV        (P7.2)
1 #SCR-CSV        (A12)
1 #SCR-CV         (A12)
1 #LV        (P7.2)
1 #SCR-LV         (A12)
1 #SCR-PU-DATE    (A10)
1 #SCR-LST-DUR    (A2)
1 #SCR-NMCV       (A12)
1 #SCR-FACE-AMT   (A12)
1 #SCR-VA-DUR     (A2)
* 1 #SCR-MPREM    (A8)
1 #SCR-MPREM      (A11)                         /* PM38
1 #SCR-CON-DUR    (A3)
1 #SCR-DTH-BEN    (A12)
1 #SCR-DB-TO-PAY  (A12)
1 #SCR-MODE       (A1)
1 #SCR-MON-IND    (A2)
1 #SCR-NMDB       (A12)
1 #SCR-CV-FG      (A1)
1 #SCR-PAY-ST     (A4)
1 #SCR-TPP        (A12)
1 #SCR-MCV        (A11)
1 #SCR-SMOKE      (A1)
1 #SCR-NYMCV      (A11)
1 #SCR-PR-DEF     (A6)
1 #SCR-ALLOC-AMT  (A6)
1 #SCR-BCV        (A12)
1 #SCR-TRM-YEAR   (A4)
1 #SCR-TRM-MM     (A2)
1 #SCR-NET-PR-RT  (A8)
1 #SCR-ETI-YEAR   (A4)
1 #SCR-ETI-MM     (A2)
1 #SCR-ETI-ACV    (A9)
1 #SCR-ETI-CV     (A9)
1 #SCR-ETI-DB     (A9)
1 #SCR-ETI-LV     (A9)
1 #SCR-PREV-YEAR  (A4)
1 #SCR-PREV-MM    (A2)
1 #SCR-PACV       (A9)
1 #SCR-PCV        (A9)
1 #SCR-PDB        (A9)
1 #SCR-PPLB       (A7)
1 #SCR-PPLAI      (A7)
1 #SCR-TERM-CODE  (A10)
1 #SCR-DTH-MSG2   (A3)
1 #SCR-DOD        (A8)
1 #SCR-DB-MSG     (A3)
1 #SCR-DB-MOD     (A12)
1 #SCR-ACV-ADJ-CV    (C)
1 #SCR-ACV-PREM-ADJ-LBL (A12) INIT <'ACV-PREM-ADJ'>
1 #SCR-ACV-INT-ADJ-LBL  (A12) INIT <'ACV-INT-ADJ '>
1 #SCR-ACV-COI-ADJ-LBL  (A12) INIT <'ACV-COI-ADJ '>
1 #SCR-ACV-PREM-ADJ  (A11)
1 #SCR-ACV-INT-ADJ   (A10)
1 #SCR-ACV-COI-ADJ   (A10)
1 #SCR-COST-BASIS    (A12)
1 #SCR-ORIG-COST-BASIS (A12)
1 #SCR-TOT-PREMS-PAID  (A12)
1 #DISPLAY-DB          (A10)
*
1 #SCR-VA-HISTORY-GR
  2 #SCR-13-MONTHS            (13)
    3 #YR-MON-Y-A (A4)
    3 #FILL-1     (A1)
    3 #YR-MON-M-A (A2)
    3 #FILL-2     (A1)
    3 #MI-A       (A2)
    3 #FILL-3     (A2)
    3 #ACV-A      (A12)         /*TT1
    3 #CV-A       (A12)
    3 #DTH-BEN-A  (A12)
    3 #PREM-A     (A11)
*  3 #COI-A      (A6)       /* DW40
    3 #COI-A      (A8)       /* DW40
    3 #INT-A      (A8)
    3 #FILL-11    (A1)
    3 #SM-FG-A    (A1)
    3 #PR-INT-A   (A1)
*  3 #FILL-10    (A1)       /* DW40
**    3 #PR-LN-A    (A7)
1 REDEFINE #SCR-VA-HISTORY-GR
  2 #SCR-VA-HISTORY      (A78/13)
*
1 #SCR-VA-HISTORY-COI-GR
  2 #SCR-13-MONTHS-COI     (13)
    3 #YR-MON-Y-A-C (A4)
    3 #FILL-1-C     (A1)
    3 #YR-MON-M-A-C (A2)
    3 #FILL-2-C     (A1)
    3 #MI-A-C       (A2)
    3 #FILL-3-C     (A2)
*  3 #COI-A-C      (A7)    /* DW40
    3 #COI-A-C      (A8)    /* DW40
*  3 #FILL-4-C     (A1)    /* DW40
    3 #SVC-FEE-A-C  (A6)
    3 #FILL-5-C     (A3)
    3 #SAS-A-C      (A6)
    3 #FILL-6-C     (A3)
    3 #LVS-A-C      (A6)
    3 #FILL-7-C     (A3)
    3 #OO-CR-A-C    (A6)
    3 #FILL-8-C     (A2)
*
    3 #ADMIN-A-C    (A7)
    3 #FILL-9-C     (A1)
*  3 #COIX-A-C     (A7)     /* DW40
    3 #COIX-A-C     (A8)     /* DW40
*  3 #FILL-10-C    (A1)     /* DW40
    3 #ACQ-COST-A-C (A7)
1 REDEFINE #SCR-VA-HISTORY-COI-GR
  2 #SCR-VA-HISTORY-COI  (A78/13)
*
1 #SCR-VA-HISTORY-GR-36           /* DW14
  2 #SCR-36-MONTHS    (36)
    3 #YR-MON-Y-A-36 (A4)
    3 #FILL-1-36     (A1)
    3 #YR-MON-M-A-36 (A2)
    3 #FILL-2-36     (A1)
    3 #MI-A-36       (A2)
    3 #FILL-3-36     (A2)
    3 #ACV-A-36      (A12)      /*TT1 INCREASED FROM 10 TO 12
    3 #CV-A-36       (A12)      /*TT1 INCREASED FROM 10 TO 12
    3 #DTH-BEN-A-36  (A12)      /*TT1 INCREASED FROM 9 TO 12
    3 #PREM-A-36     (A11)
*  3 #COI-A-36      (A6)    /* DW40
    3 #COI-A-36      (A8)    /* DW40
    3 #INT-A-36      (A8)
    3 #FILL-10-36    (A1)
    3 #SM-FG-A-36    (A1)
*    3 #PR-LN-A-36    (A7)
    3 #FILL-11-36    (A1)
*    3 #PR-INT-A-36   (A6)
*    3 #RANDOM-FILL    (A3) /*TT1 SPACE TO DO STUFF WITH
1 REDEFINE #SCR-VA-HISTORY-GR-36
  2 #SCR-VA-HISTORY-36      (A78/36)
*
1 #SCR-VA-HISTORY-COI-GR-36       /* DW14
  2 #SCR-36-MONTHS-COI   (36)
    3 #YR-MON-Y-A-C-36 (A4)
    3 #FILL-1-C-36     (A1)
    3 #YR-MON-M-A-C-36 (A2)
    3 #FILL-2-C-36     (A1)
    3 #MI-A-C-36       (A2)
    3 #FILL-3-C-36     (A2)
*  3 #COI-A-C-36      (A7)   /* DW40
    3 #COI-A-C-36      (A8)   /* DW40
*  3 #FILL-4-C-36     (A1)   /* DW40
    3 #SVC-FEE-A-C-36  (A6)
*
    3 #FILL-5-C-36  (A3)
    3 #SAS-A-C-36   (A6)
    3 #FILL-6-C-36  (A3)
    3 #LVS-A-C-36   (A6)
    3 #FILL-7-C-36  (A3)
    3 #OO-CR-A-C-36 (A6)
    3 #FILL-8-C-36  (A2)
*
    3 #ADMIN-A-C-36    (A7)
    3 #FILL-9-C-36     (A1)
*  3 #COIX-A-C-36     (A7)     /* DW40
    3 #COIX-A-C-36     (A8)     /* DW40
*  3 #FILL-10-C-36    (A1)     /* DW40
    3 #ACQ-COST-A-36   (A7)
*  3 #FILL-8-C-36     (A18)
*  3 #FILL-7-C-36     (A28)
1 REDEFINE #SCR-VA-HISTORY-COI-GR-36
  2 #SCR-VA-HISTORY-COI-36  (A78/36)
*
1 #SCR-MSG-CV     (C)
1 #PAY-ST-CV      (C)
1 #DB-MOD-CV      (C)
1 #DOD-CV         (C)
1 #SCR-ETI-YEAR-CV (C)
1 #SCR-ETI-MM-CV  (C)
1 #SCR-ETI-ACV-CV (C)
1 #SCR-ETI-CV-CV  (C)
1 #SCR-ETI-DB-CV  (C)
1 #SCR-ETI-LV-CV  (C)
1 #TRM-YEAR-CV    (C)
1 #TRM-MM-CV      (C)
1 #TRM-CODE-CV    (C)
1 #WNUM-9         (N12)
1 #WNUM-7         (N7)
1 #WNUM-8         (N8)
1 #WNUM-6         (N6)
1 #WNUM-5         (N5)
1 #ACQ-COST       (N5.2)       /* PM5
1 #TOTAL-EXP      (P7.2)       /* PM5
1 #ACCUM-ACV      (P7.2)
1 #NEW-ACV        (P7.2)
1 #PREV-ACV       (P7.2)
1 #ACV-DIFF       (P7.2)
1 #REAL-PREM      (N6.2)
1 #MON-B4-ISS-DT    (N6)
******************************
*        WORK AREA
************
1 #HOLD-SCR-ID    (N9)
1 #HOLD-SCR-COMM  (A2)
*
1 #LAST-NAME      (A25)
1 #WNUM-3         (N3)
1 REDEFINE #WNUM-3
  2 #W-NUM-1      (A1)
  2 #W-NUM-2      (A2)
*
1 #SCN-NAME       (A25)
1 REDEFINE #SCN-NAME
  2 #SCN-NAME-1   (A1)
  2 #SCN-NAME-24  (A24)
1 #FIRST/MIDDLE   (A25)
1 #SUFFIX-NAME    (A25)
1 #TEMP-NAME      (A25)
1 #DEL            (A1)   INIT <','>
*
1 #W-X    (I2)
1 #ST-X   (I2)
1 #H-X    (I2)
1 #A-X    (I2)
1 #I1     (I2)
1 #I2     (I2)
1 #I-CNT  (I2)
*
1 #W-MON-IND     (N3)
1 REDEFINE #W-MON-IND
  2 #W-MI        (A1)
  2 #W-MI-A      (A2)
*
1 #YYYYMMDD   (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY   (N4)
    3 #MM     (N2)
  2 #DD     (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYY-A (A4)
  2 #MM-A   (A2)
  2 #DD-A   (A2)
*
1 #WYYYYMMDD     (N8)
1 REDEFINE #WYYYYMMDD
  2 #WCENT       (A2)
  2 #WYY         (A2)
  2 #WMM         (A2)
  2 #WDD         (A2)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-N  (N8)
1 REDEFINE #WYYYYMMDD
  2 #WYYYY-N     (N4)
  2 #WMM-N       (N2)
  2 #WDD-N       (N2)
*
1 #WMMDDYY-8     (A8)
*
1 #W-SCR-DATE    (N6)
1 REDEFINE #W-SCR-DATE
  2 #W-SCR-YEAR  (A4)
  2 #W-SCR-MON   (A2)
*
1 #START-KEY        (N15)
1 REDEFINE #START-KEY
  2 #START-ID       (N6)
  2 #START-ISSUE    (N8)
  2 #START-IND      (N1)
*
1 #END-KEY          (N15)
1 REDEFINE #END-KEY
  2 #END-ID         (N6)
  2 #END-ISSUE      (N8)
  2 #END-IND        (N1)
*
1 #REC-KEY
  2 #R-ID-NUM       (N6)
  2 #R-ISS-DATE     (N8)
  2 #R-SPLIT-IND    (N1)
*
1 #HOLD-REC-KEY     (N15)
1 REDEFINE #HOLD-REC-KEY
  2 #HOLD-ID        (N6)
  2 #HOLD-ISS-DATE  (N8)
  2 #HOLD-SPLIT-IND (N1)
*
1 #W-MPREM          (P5.2)
*
1 #REC-COUNTER      (N2)
1 #FOUND-STATUS     (L)
1 #INVALID          (L)
1 #ERR-MSG          (A60)
*
1 #INFO-SHOWN       (L/9)
1 #POLS-UNSHOWN     (P3)
1 #POLS-CNT         (P3)
*
1 #ANN-STMT-DONE    (L)     /* DW36
1 #DOING-ANN-STMTS  (L)
*
1 V_CNT             (N2)   /* bz1
1 #msg-txt          (a70/5)                          /* vt4 \/
1 #idx              (i2)
1 #id-nbr           (a6)
* 
1 DATE-OF-BIRTH     (N8.0)                          /* vt4 /\
END-DEFINE
*******************
INCLUDE GONERCXX
*
MOVE *DATN TO #YYYYMMDD
IF #MM LE 4   /* show last year thru April
  COMPUTE #CURR-YYYY = #YYYY - 1
ELSE
  MOVE #YYYY TO #CURR-YYYY
END-IF
*
IF   (#CGA-SCR-SUFFIX = MASK ('SF'))                   /* DW36
    AND (*DEVICE = 'BATCH')
  MOVE TRUE TO #DOING-ANN-STMTS
END-IF
*
MOVE #CGA-ORIG-SUFFIX TO #SUFFIX   /* DW20
IF (#SUF-2 = 'MA') AND (#SUF-3 = MASK (N))
  MOVE #SUF-3 TO #CURR-Y
  MOVE 'MAX' TO #CGA-SCR-SUFFIX #CGA-ORIG-SUFFIX
END-IF
*
GET STATUS-V #CGA-ISN
*
MOVE *DATN TO #AS-OF-DT
* MOVE 'NTP' TO #SUFFIX /* do not replace CSV w TPP
MOVE 'VW' TO #SUFFIX /* do not replace CSV w TPP or replace #MCV  DW3
MOVE FACE-AMOUNT (*) TO #FACE-AMT (*)   /* DW8
CALLNAT 'CVALUSXX'
  STATUS-V.ID-NUMBER
  #SUFFIX
  #AS-OF-DT
  #LOAN-BAL   (1:9)
  #LOAN-BAL-2 (1:9)
  #ACC-INT    (1:9)
  #ACC-INT-2  (1:9)
  #CSV        (1:9)
  #CVALUE     (1:9)
  #LVALUE     (1:9)
  #MCSV       (1:9)
  #DB         (1:9)
  #ANN-PREMIUM  (1:9)
  #FACE-AMT   (1:9)   /* DW8
  #TPP        (1:9)   /* DW8
*
MOVE #CGA-ORIG-SUFFIX TO #SUFFIX
RESET #SF-X
IF #SUF-2 = 'SF'
  MOVE TRUE TO #SF
  MOVE #SUF-3 TO #SF-X
END-IF
*
IF #CGA-ORIG-SUFFIX NE 'PUR'
  MOVE (AD=P) TO #SCR-SEL-CV (*)
  FOR #I1 1 TO 9
    IF STATUS (#I1) NE 'D'
      ESCAPE TOP
    END-IF
*
    ADD 1 TO #I2
    RESET #SCR-SEL-CV (#I2)
    MOVE #I1 TO #SCR-SEL-X (#I2)
    MOVE STATUS-V.ISSUE-DATE (#I1) TO #YYYYMMDD
    COMPRESS #MM-A #DD-A #YYYY-A INTO #SCR-ISS-DT (#I2) WITH '/'
    CALLNAT 'GPLNMSXX' #SCR-POL-NUM (#I2) ID-NUMBER #I1 /* build POL-#
    MOVE PLAN (#I1) TO #SCR-PLN (#I2)
    MOVE EDITED FACE-AMOUNT (#I1) (EM=Z,ZZZ,ZZZ.99) TO #SCR-FACE (#I2)
  END-FOR
*
  IF #I2 = 0
    MOVE 'No Active Policies - use VW XXXXX PUR to see Purged pols'
      TO #SCR-MESSAGE
  END-IF
*
  IF NOT #SF
    MOVE '*' TO #CGA-SCR-COMMAND
    IF   #CGA-SCR-SUFFIX <> 'P22'                          /* bz1
      PERFORM check-for-cn-paid-in-error                                        /* vt4
      INPUT TEXT #SCR-MESSAGE MARK *#SCR-SEL (1) USING MAP 'C2H39MVW'
    END-IF    /* bz1
*
    IF #CGA-SCR-COMMAND NE '*'
      IF #CGA-SCR-SUFFIX = 'P22' OR #CGA-ORIG-SUFFIX = 'P22' ESCAPE ROUTINE END-IF   /* bz1
      FETCH 'G1000PXX'
    END-IF
  END-IF
*
  FOR #I1 1 TO 9
    IF (#SCR-SEL (#I1) NE ' ')
        OR (#I1 = #SF-X)
      MOVE #SCR-SEL-X (#I1) TO #SEL-X
      IF #SF
        MOVE #I1 TO #SEL-X
      END-IF
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-IF
*
#SERVICES-CN        := STATUS-V.ID-NUMBER     /* PM43
#SERVICES-PARM-DATE := *DATN                  /* PM43
CALLNAT 'SVCN0001'                            /* PM43
  #PDA-AAFMAA-SERVICES                        /* PM43
#SVC-TERMINATION-DATE := #SERVICES-TERMINATION-DATE  /* PM43
#SVC-ISSUE-DATE       := #SERVICES-ISSUE-DATE        /* PM43
IF #SVC-TERMINATION-DATE = 0                         /* PM43
  #SVC-TERMINATION-DATE := 99999999                  /* PM43
END-IF                                               /* PM43
*
* WRITE #SVC-TERMINATION-DATE #SVC-ISSUE-DATE
RESET #SCR-MESSAGE
MOVE *DATN TO #YYYYMMDD
SUBTRACT 1 FROM #YYYY
MOVE #YYYYMMDD TO #1-YEAR-AGO
*
IF #CGA-ORIG-SUFFIX = '13M' OR = '13P' OR = 'MAX' or = 'EXP'   /* DW14  /*TT1 ADDED EXP
    OR = 'SVC'    /* DW 17
  IGNORE
ELSE
  RESET #CGA-ORIG-SUFFIX
END-IF
*
MOVE (AD=N) TO #SCR-ACV-ADJ-CV
MOVE 0           TO #REC-COUNTER
MOVE #CGA-SCR-ID TO #START-ID
MOVE 00000000    TO #START-ISSUE
MOVE 0           TO #START-IND
MOVE #CGA-SCR-ID TO #END-ID
MOVE 99999999    TO #END-ISSUE
MOVE 9           TO #END-IND
#VERSION := GET-POL-VERSION (< #START-ID, #SEL-X >) /* NG1
**CALLNAT 'RTEN0004' #START-ID #SEL-X #VERSION /* NG1
*
READ VA-HIST LOGICAL WITH RECORD-KEY FROM #START-KEY THRU #END-KEY
  ADD 1 TO #REC-COUNTER
  IF #REC-COUNTER GT 1
*
    MOVE '*' TO #CGA-SCR-COMMAND
*
    IF  ((#SEL-X NE 0) AND (#SEL-X NE #ST-X))
        OR ((#SEL-X NE 0) AND (NOT #INFO-SHOWN (#ST-X)))
      IGNORE
    ELSE
      IF (#CGA-ORIG-SUFFIX = '13M' OR = '13P' OR = 'MAX' OR = 'EXP') OR #SF     /*TT1 ADDED EXP
        IF (#YR-MON-Y-A-36 (1) NE ' ')        /* DW14
            AND (#SCR-MESSAGE = ' ')
          MOVE 'Press ENTER to view info prior to 13 Month-ago'
            TO #SCR-MESSAGE
        END-IF
*
        PERFORM BREAKOUT-DISP
*
*         WRITE *PROGRAM *LINE          /* --db
        IF #CGA-ORIG-SUFFIX <> 'EXP'
          INPUT TEXT #SCR-MESSAGE USING MAP 'C2H31MVW' /* lst 13 Mons       /*TT1
        END-IF
        RESET #SCR-BREAKOUT
*
        IF #CGA-SCR-COMMAND NE '*'
*         WRITE "Go Back from"      *LINE                    /*
          IF #CGA-SCR-SUFFIX = 'P22' ESCAPE ROUTINE END-IF   /* bz1
          FETCH 'G1000PXX'
        END-IF
*
        IF (#CGA-ORIG-SUFFIX NE 'MAX' AND #CGA-ORIG-SUFFIX NE 'EXP') AND NOT #SF      /*TT1 ADDED 'EXP'
          MOVE 'VW' TO #CGA-SCR-COMMAND
        END-IF
*
        IF (#CGA-ORIG-SUFFIX = 'MAX' OR = 'EXP') OR #SF       /*TT1 ADDED 'EXP'
          MOVE 'Press ENTER to view EXPENSE breakdown' TO #SCR-MESSAGE
        ELSE
          RESET #SCR-MESSAGE
        END-IF
*
        IF #YR-MON-Y-A-36 (1) NE ' '                        /* DW14
*          WRITE *PROGRAM *LINE          /* --db
          IF #CGA-ORIG-SUFFIX <> 'EXP'                    /*TT1
            INPUT TEXT #SCR-MESSAGE USING MAP 'C2H33MVW'
          END-IF
        END-IF
      ELSE
        IF #CGA-SCR-SUFFIX = 'P22'                        /* bz1
          V_CNT := V_CNT + 1                              /* bz1
          IF V_CNT > 1 NEWPAGE(22) END-IF                 /* bz1
          WRITE (22) NOTITLE USING MAP 'C2H30FVW'       /* bz1 1
        ELSE                                              /* bz1
          IF #CGA-SCR-SUFFIX <> 'EXP' THEN                  /*TT1
            INPUT TEXT #SCR-MESSAGE USING MAP 'C2H30MVW'  /* Only show 6 Mons
          END-IF
        END-IF                                            /* bz1
      END-IF
*
      IF #CGA-SCR-COMMAND NE '* '
*      WRITE "Go Back from"      *LINE                     /*   --db
        IF #CGA-SCR-SUFFIX = 'P22' ESCAPE ROUTINE END-IF    /* bz1
        FETCH 'G1000PXX'
      END-IF
*
      IF (#CGA-ORIG-SUFFIX = 'MAX' OR = 'EXP') OR #SF         /*TT1 ADDED EXP
        IF   (#POLS-UNSHOWN = 0)
            AND ((#CGA-ORIG-SUFFIX = 'MAX' OR = 'EXP') OR #SF)   /* ADDED EXP
            AND (#YR-MON-Y-A-36 (1) = ' ')
          MOVE 'VW' TO #CGA-SCR-COMMAND
        END-IF
*
        PERFORM EXP-BREAKOUT-DISP        /*TT1
*
*        WRITE *PROGRAM *LINE          /* --db
        INPUT TEXT #SCR-MESSAGE USING MAP 'C2H32MVW'  /*TT1
        RESET #SCR-BREAKOUT
*
        IF #CGA-SCR-COMMAND NE '*'
          FETCH 'G1000PXX'
        END-IF
*
        IF #YR-MON-Y-A-36 (1) NE ' '
*          WRITE *PROGRAM *LINE          /* --db
          INPUT TEXT #SCR-MESSAGE USING MAP 'C2H34MVW'    /* DW14
*
          IF #CGA-SCR-COMMAND NE '* '
            FETCH 'G1000PXX'
          END-IF
        END-IF
*
        IF #POLS-UNSHOWN = 0
          MOVE 'VW' TO #CGA-SCR-COMMAND
*           WRITE "Go Back from"      *LINE                     /*   --db
          IF #CGA-SCR-SUFFIX = 'P22' ESCAPE ROUTINE END-IF    /* bz1
          FETCH 'G1000PXX'
        END-IF
      END-IF
    END-IF
*
    RESET #SCR-MESSAGE
      #SCR-ACV-PREM-ADJ
      #SCR-ACV-INT-ADJ
      #SCR-ACV-COI-ADJ
      #SCR-ORIG-COST-BASIS
      #SCR-TOT-PREMS-PAID
      #SCR-TRM-PT-LBL
      #SCR-TRM-PT-YEAR
      #SCR-TRM-PT-MM
      #SCR-DB-TO-PAY
      #SCR-BREAKOUT
      #SCR-TERM-CODE
      #SCR-TRM-YEAR
      #SCR-TRM-MM
    MOVE 'NX-Y-MN-C' TO #NXT-YR-MCV-LBL       /* DW7
    RESET #TOT-SVC-FEE #TOT-COI #TOT-ADMIN #TOT-ACQ-COST /* DW6
      #TOT-LIV-SVC #TOT-SAS #TOT-OO-CRED #TOT-EXP #TOT-PRM #TOT-INT
    MOVE (AD=N) TO    #SCR-ETI-YEAR-CV
    MOVE (AD=N) TO    #SCR-ETI-MM-CV
    MOVE (AD=N) TO    #SCR-ETI-ACV-CV
    MOVE (AD=N) TO    #SCR-ETI-CV-CV
    MOVE (AD=N) TO    #SCR-ETI-DB-CV
    MOVE (AD=N) TO    #SCR-ETI-LV-CV
    MOVE (AD=N) TO    #TRM-CODE-CV
    MOVE (AD=N) TO    #TRM-YEAR-CV
    MOVE (AD=N) TO    #TRM-MM-CV
    MOVE (AD=N) TO    #SCR-MSG-CV
    MOVE (AD=N) TO    #PAY-ST-CV
    MOVE (AD=N) TO    #DB-MOD-CV
    MOVE (AD=N) TO    #DOD-CV
  END-IF
*
  RESET #HOLD-REC-KEY
  MOVE VA-HIST.RECORD-KEY TO #HOLD-REC-KEY
  PERFORM HEADER-INFO
  MOVE (AD=N) TO #SCR-ACV-ADJ-CV
*
  FOR #ST-X 1 TO 9
*   display #st-x status-v.issue-date(#st-x) status-v.split-ind (#st-x)
*      status-v.plan (#st-x) #hold-rec-key issue-plan

    IF (STATUS-V.STATUS (#ST-X) = 'D')
        OR ((STATUS-V.STATUS (#ST-X) = 'E' OR = 'F' OR = 'G')
        AND (#CGA-ORIG-SUFFIX = '13P' OR = 'PUR'))
      IF STATUS-V.ISSUE-DATE(#ST-X) = #HOLD-ISS-DATE
          AND ((STATUS-V.SPLIT-IND (#ST-X) = #HOLD-SPLIT-IND)   /* DW35
          OR  (STATUS-V.PLAN (#ST-X)      = ISSUE-PLAN))       /* DW35
        MOVE TRUE TO #INFO-SHOWN (#ST-X)
        PERFORM MOVE-STATUS-INFO
        ESCAPE BOTTOM
      END-IF
    END-IF
  END-FOR
*
  IF #ST-X GT 9
    PERFORM USE-HIST-INFO
  END-IF
*
  IF #SF
    IF   (#SF-X = #ST-X)
        AND (VA-HIST.ISSUE-DATE = STATUS-V.ISSUE-DATE (#ST-X))
      ESCAPE BOTTOM
    ELSE
      ESCAPE TOP
    END-IF
  END-IF
END-READ
*
IF #SF
  MOVE #TOT-ACQ-COST TO #N7-2     /* DW17
  MOVE #A9 TO #CGA-MF-SCR-PARM-1
  MOVE #TOT-SVC-FEE TO #N3-2
  MOVE #A5 TO #CGA-MF-SCR-PARM-2
  MOVE #TOT-ADMIN TO #N7-2
  MOVE #A9 TO #CGA-MF-ORIG-PARM-1
  MOVE #TOT-OO-CRED TO #N3-2       /* DW20
  MOVE #A5 TO #CGA-MF-ORIG-PARM-2
  COMPUTE #CGA-SCR-ID  = #TOT-LIV-SVC * 100
  COMPUTE #CGA-ORIG-ID = #TOT-SAS     * 100  /* DW20
  ESCAPE ROUTINE
END-IF
*
FOR #I1 1 TO 9
  IF  (STATUS-V.STATUS (#I1) = 'D')
      OR ((STATUS-V.STATUS (#I1) = 'E' OR = 'F' OR = 'G')
      AND (#CGA-ORIG-SUFFIX = '13P' OR = 'PUR'))
    IF NOT #INFO-SHOWN (#I1)
      ADD 1 TO #POLS-UNSHOWN
    END-IF
  END-IF
END-FOR
*
MOVE '*' TO #CGA-SCR-COMMAND
*
IF #REC-COUNTER EQ 0
  IF #POLS-UNSHOWN = 0
    MOVE (AD=I)                     TO #SCR-MSG-CV
    MOVE 'NO HISTORY RECORDS FOUND' TO #SCR-MESSAGE
    PERFORM HEADER-INFO
*
    MOVE 'VW' TO #CGA-SCR-COMMAND
    IF #CGA-SCR-SUFFIX = 'P22'                            /* bz1
      V_CNT := V_CNT + 1                                /* bz1
      IF V_CNT > 1 NEWPAGE(22) END-IF                   /* bz1
      WRITE (22) NOTITLE "NO HISTORY RECORDS FOUND"     /* bz1
      ESCAPE ROUTINE                                    /* bz1
    ELSE                                                  /* bz1
      INPUT TEXT #SCR-MESSAGE MARK *#CGA-SCR-COMMAND USING MAP 'C2H30MVW'
    END-IF
*
    IF #CGA-SCR-COMMAND NE #CGA-ORIG-COMMAND OR
        #CGA-SCR-ID NE #CGA-ORIG-ID
      FETCH 'G1000PXX'
    END-IF
  END-IF
ELSE
  IF   (#POLS-UNSHOWN = 0)
      AND (#CGA-SCR-SUFFIX = ' ')
    MOVE 'VW' TO #CGA-SCR-COMMAND
  END-IF
  MOVE ID-NUMBER TO #CGA-SCR-ID
*
  IF (#SEL-X NE 0) AND (#ST-X LE 9) AND (#SEL-X NE #ST-X)
    IGNORE
  ELSE
    IF (#CGA-ORIG-SUFFIX = '13M' OR = '13P' OR = 'MAX' OR = 'EXP') OR #SF       /*TT1 ADDED 'EXP'
      IF #YR-MON-Y-A-36 (1) NE ' '    /* DW14
          AND (#SCR-MESSAGE = ' ')
        MOVE '*' TO #CGA-SCR-COMMAND
        MOVE 'Press ENTER to view info prior to 13 Month-ago'
          TO #SCR-MESSAGE
      END-IF
*
      PERFORM BREAKOUT-DISP
*
      IF #CGA-ORIG-SUFFIX <> 'EXP'             /*TT1 ADDED 'EXP' SUFFIX
        INPUT TEXT #SCR-MESSAGE USING MAP 'C2H31MVW'  /* Lst 13 Months
      END-IF
      RESET #SCR-BREAKOUT
*
      IF #CGA-SCR-COMMAND NE '*'
        FETCH 'G1000PXX'
      END-IF
*
      IF (#CGA-ORIG-SUFFIX NE 'MAX' AND #CGA-ORIG-SUFFIX NE 'EXP') AND NOT #SF     /* TT1 ADDED 'EXP'
        MOVE 'VW' TO #CGA-SCR-COMMAND
      END-IF
*
      IF (#CGA-ORIG-SUFFIX = 'MAX' OR = 'EXP' ) OR #SF           /*TT1 ADDED 'EXP'
        MOVE 'Press ENTER to view EXPENSE breakdown'
          TO #SCR-MESSAGE
      ELSE
        RESET #SCR-MESSAGE
      END-IF
      IF #YR-MON-Y-A-36 (1) NE ' '    /* DW14
        IF #CGA-ORIG-SUFFIX <> 'EXP'           /*TT1 ADDED 'EXP' SUFFIX IF STATEMENT
          INPUT TEXT #SCR-MESSAGE USING MAP 'C2H33MVW'    /* DW14
        END-IF
      END-IF
    ELSE
      IF #CGA-SCR-SUFFIX = 'P22'                          /* bz1
        V_CNT := V_CNT + 1                              /* bz1
        IF V_CNT > 1 NEWPAGE(22) END-IF                 /* bz1
        WRITE (22) NOTITLE USING MAP 'C2H30FVW'         /* bz1
      ELSE                                                /* bz1
        INPUT TEXT #SCR-MESSAGE USING MAP 'C2H30MVW' /* Only show 6 Months
      END-IF                                              /* bz1
    END-IF
*
    IF #CGA-SCR-COMMAND NE '* '
      IF #CGA-SCR-SUFFIX = 'P22' ESCAPE ROUTINE END-IF   /* bz1
      FETCH 'G1000PXX'
    END-IF
*
    IF (#CGA-ORIG-SUFFIX = 'MAX' OR = 'EXP') OR #SF        /*TT1 ADDED 'EXP'
      IF   (#POLS-UNSHOWN = 0)
          AND ((#CGA-ORIG-SUFFIX = 'MAX') OR #SF)
          AND (#YR-MON-Y-A-36 (1) = ' ')
        MOVE 'VW' TO #CGA-SCR-COMMAND
      END-IF
*
      PERFORM EXP-BREAKOUT-DISP
*
*      WRITE *PROGRAM *LINE          /* --db
      INPUT TEXT #SCR-MESSAGE USING MAP 'C2H32MVW'
*
      IF #CGA-SCR-COMMAND NE '*'
        FETCH 'G1000PXX'
      END-IF
*
      IF #YR-MON-Y-A-36 (1) NE ' '

*          WRITE *PROGRAM *LINE          /* --db
        INPUT TEXT #SCR-MESSAGE USING MAP 'C2H34MVW'
*
        IF #CGA-SCR-COMMAND NE '* '
          FETCH 'G1000PXX'
        END-IF
      END-IF
*
      IF #POLS-UNSHOWN = 0
        MOVE 'VW' TO #CGA-SCR-COMMAND
      END-IF
    END-IF
  END-IF
END-IF
*
IF #POLS-UNSHOWN NE 0
  PERFORM HEADER-INFO
  RESET #SCR-VA-HISTORY (*) #SCR-VA-HISTORY-COI (*) #SCR-ACQ-COST /* PM5
  RESET #SCR-PREV-YEAR #SCR-PACV #SCR-PCV #SCR-PDB #SCR-PPLB #SCR-PPLAI
  RESET #SCR-PREV-MM
  RESET #SCR-TOT-PREMS-PAID
    #SCR-BREAKOUT
  FOR #ST-X 1 TO 9
    IF  (STATUS-V.STATUS (#ST-X) = 'D')
        OR ((STATUS-V.STATUS (#ST-X) = 'E' OR = 'F' OR = 'G')
        AND (#CGA-ORIG-SUFFIX = '13P' OR = 'PUR'))
      IF NOT #INFO-SHOWN (#ST-X)
        MOVE 'NO HIST REC *' TO #SCR-MESSAGE
        RESET #SCR-TERM-CODE
          #SCR-TRM-YEAR
          #SCR-TRM-MM
          #SCR-TRM-PT-LBL
          #SCR-TRM-PT-YEAR
          #SCR-TRM-PT-MM
        PERFORM MOVE-STATUS-INFO
*
        RESET #TOT-PREMS                               /* DW12
        IF  MTD-ACV-PREM-ADJ (#ST-X) NE 9999999.99     /* DW12
          ADD MTD-ACV-PREM-ADJ (#ST-X) TO #TOT-PREMS
        END-IF
*
        PERFORM SHOW-TPP-PREM-DIFF   /* DW12
*
        ADD 1 TO #POLS-CNT
*
        IF #POLS-CNT = #POLS-UNSHOWN
          MOVE 'VW' TO #CGA-SCR-COMMAND
        ELSE
          MOVE '*' TO #CGA-SCR-COMMAND
        END-IF
*
        IF (#SEL-X NE 0) AND (#ST-X NE #SEL-X)
          IGNORE
        ELSE
          IF #CGA-SCR-SUFFIX = 'P22'                        /* bz1
            V_CNT := V_CNT + 1                              /* bz1
            IF V_CNT > 1 NEWPAGE(22) END-IF                 /* bz1
            WRITE (22) NOTITLE USING MAP 'C2H30FVW'         /* bz1 3
          ELSE
            IF #CGA-SCR-SUFFIX = 'EXP'
              IGNORE
            ELSE                                             /* bz1
              INPUT TEXT #SCR-MESSAGE MARK *#CGA-SCR-COMMAND
                USING MAP 'C2H30MVW'
            END-IF
          END-IF                                            /* bz1
*
          IF #CGA-SCR-COMMAND NE '*'
            IF #CGA-SCR-SUFFIX = 'P22' ESCAPE ROUTINE END-IF   /* bz1
            FETCH 'G1000PXX'
          END-IF
        END-IF
      END-IF
    END-IF
  END-FOR
END-IF
*
IF #CGA-SCR-SUFFIX = 'P22' ESCAPE ROUTINE END-IF   /* bz1
FETCH 'G1000PXX'
*
*****************************
DEFINE SUBROUTINE HEADER-INFO
*****************************
*
SEPARATE NAME INTO #LAST-NAME #FIRST/MIDDLE #SUFFIX-NAME
  WITH DELIMITER #DEL
IF #SUFFIX-NAME = '    '
  COMPRESS #FIRST/MIDDLE #LAST-NAME INTO #SCN-NAME
ELSE
  COMPRESS #FIRST/MIDDLE #LAST-NAME INTO #TEMP-NAME
  COMPRESS #TEMP-NAME ',' #SUFFIX-NAME INTO #SCN-NAME LEAVING NO SPACE
END-IF
MOVE #SCN-NAME-24 TO #SCR-NAME
END-SUBROUTINE
*
************************************
DEFINE SUBROUTINE MOVE-STATUS-INFO
************************************
*
MOVE 'NX-Y-MN-C' TO #NXT-YR-MCV-LBL   /* DW7
IF IS-ANNUITY-LIFE (< PLAN (#ST-X) >)            /* TT3
  MOVE 'LST-MCV' TO #NXT-YR-MCV-LBL   /* DW7    
END-IF                                           
RESET #MEC-IND
IF STATUS-V.MEC-IND (#ST-X) = 'Y'
  MOVE 'MEC' TO #MEC-IND
END-IF
*
IF   (STATUS-V.ISSUE-DATE (#ST-X) GE 19970101)
    AND (MONTH-ALLOC-AMT (#ST-X) = 999.99)
  MOVE 'USES PRE-1997 METHOD' TO #SCR-MESSAGE
END-IF
*
IF  (STATUS-V.ISSUE-DATE (#ST-X) GE 19970101) /* DW20
    AND (MONTH-ALLOC-AMT (#ST-X) NE 999.99)
  MOVE TRUE TO #NXT
END-IF
*
IF CONV-DURATION (#ST-X) = 777
  MOVE 'ORIGINALLY OWNED BY A TRUST' TO #SCR-MESSAGE
END-IF
*
IF PAY-STATUS (#ST-X) = '47' OR = '48'
  MOVE 'TOT-PREMS-PD' TO #SCR-TOT-PRM-PD
ELSE
* IF (PLAN (#ST-X) = 'LT' OR = 'RT')              /* DW9              /* YK1
*  OR ((PLAN-A1 (#ST-X) GE 'U') AND (PLAN-A1 (#ST-X) LE 'Z'))         /* YK1
  IF FUNCTION-TERM-POLICY(<PLAN(#ST-X)>)                              /* YK1
    MOVE 'TPP-ADJUST' TO #SCR-TOT-PRM-PD          /* DW9
  ELSE
    MOVE 'XTRA-PRMS-PD' TO #SCR-TOT-PRM-PD
  END-IF
END-IF
*
PERFORM CALC-PREMS-PAID-SETUP
MOVE EDITED #PREMS-PAID (EM=-ZZZZ,ZZZ.99) TO #SCR-TPP
MOVE EDITED X-FIRST-PLACE-FEE(#ST-X)(EM=-ZZZZ,ZZZ.99) TO #SCR-FPF /*DW10
MOVE EDITED X-BILL-ADJUST    (#ST-X)(EM=-ZZ,ZZZ.99) TO #SCR-BADJ /*DW10
*
IF   (STATUS-V.ISSUE-DATE (#ST-X) GE 19970101)
    AND (MONTH-ALLOC-AMT (#ST-X) NE 999.99)
  MOVE 'CURR-ACQ'   TO #SCR-MON-AL-CRED
  MOVE 'MON-ACQ'    TO #SCR-PRM-DEF
  MOVE 'CONT-FND'   TO #SCR-5-5-DB
  MOVE 'ACQ-CST'    TO #SCR-PROR-LN
  MOVE ' ADMIN'      TO #SCR-PROR-IN        /* DW6
  MOVE 'AVL-TDIV'   TO #SCR-AVL-TDIV-LBL
  MOVE '+ACQ CST' TO #SCR-ACQ-COST                             /* PM5
ELSE
  IF PROCESS-IND = 'O'
    MOVE 'OPT-OUT COI' TO #SCR-MON-AL-CRED
  ELSE
    MOVE 'MON-AL-CRED' TO #SCR-MON-AL-CRED
  END-IF
*
  MOVE 'PRM-DEF'    TO #SCR-PRM-DEF
  MOVE '5.5 DB'     TO #SCR-5-5-DB
  MOVE 'PROR-LN'    TO #SCR-PROR-LN
  MOVE 'PRO-IN'     TO #SCR-PROR-IN
  RESET                #SCR-AVL-TDIV-LBL
END-IF
*
MOVE STATUS-V.ISSUE-DATE(#ST-X)       TO #WYYYYMMDD
COMPRESS #WMM '/' #WDD '/' #WYYYY-N   INTO #SCR-ISS-DATE LEAVING NO
MOVE STATUS-V.PLAN(#ST-X)             TO #SCR-PLAN
CALLNAT 'GPYSTSXX' STATUS-V.PAY-STATUS(#ST-X) #SCR-PAY-ST
  #INVALID #ERR-MSG
*
IF #INVALID
  MOVE STATUS-V.PAY-STATUS (#ST-X) TO #SCR-PAY-ST
END-IF
*
IF #SCR-PAY-ST = 'PP'
  RESET #PAY-ST-CV
ELSE
  MOVE (AD=I) TO #PAY-ST-CV
END-IF
*
MOVE STATUS-V.CONVERSION-FLAG(#ST-X) TO #SCR-CV-FG
*
RESET #SCR-ACV-PREM-ADJ
RESET #SCR-ACV-INT-ADJ
RESET #SCR-ACV-COI-ADJ
*
IF   (STATUS-V.MTD-ACV-PREM-ADJ (#ST-X) NE 9999999.99)
    AND (STATUS-V.MTD-ACV-PREM-ADJ (#ST-X) NE 0)
  RESET #SCR-ACV-ADJ-CV          /* MAKE HEADINGS SHOW UP
  MOVE EDITED STATUS-V.MTD-ACV-PREM-ADJ (#ST-X) (EM=-ZZZ,ZZZ.99)
    TO #SCR-ACV-PREM-ADJ
END-IF
*
IF   (STATUS-V.MTD-ACV-INT-ADJ (#ST-X) NE 99999.99)
    AND (STATUS-V.MTD-ACV-INT-ADJ (#ST-X) NE 0)
  RESET #SCR-ACV-ADJ-CV          /* MAKE HEADINGS SHOW UP
  MOVE EDITED STATUS-V.MTD-ACV-INT-ADJ (#ST-X) (EM=-ZZ,ZZZ.99)
    TO #SCR-ACV-INT-ADJ
END-IF
*
IF   (STATUS-V.MTD-ACV-COI-ADJ (#ST-X) NE 99999.99)
    AND (STATUS-V.MTD-ACV-COI-ADJ (#ST-X) NE 0)
  RESET #SCR-ACV-ADJ-CV          /* MAKE HEADINGS SHOW UP
  MOVE EDITED STATUS-V.MTD-ACV-COI-ADJ (#ST-X) (EM=-ZZ,ZZZ.99)
    TO #SCR-ACV-COI-ADJ
END-IF
*
MOVE EDITED STATUS-V.ACC-CASH-VALUE(#ST-X) (EM=-ZZZZ,ZZZ.99)
  TO #SCR-ACV
MOVE STATUS-V.PAID-TO-DATE(#ST-X) TO #WYYYYMMDD
*
IF  NOT #NXT   /* DW20
    OR (ISS-DD (#ST-X) = 1)    /* NXT PROCESSING WITH ISS DAY = 1
  IF #WMM-N = 02
    MOVE 28 TO #WDD-N
  ELSE
    IF #WMM-N = 4 OR = 6 OR = 9 OR = 11
      MOVE 30 TO #WDD-N
    ELSE
      MOVE 31 TO  #WDD-N
    END-IF
  END-IF
ELSE
  IF ((ISS-MM (#ST-X) = 2)
      AND (ISS-DD (#ST-X) = 28 OR = 29))  /* LAST DAY OF MONTH
      OR ((ISS-MM (#ST-X) = 4 OR = 6 OR = 9 OR = 11)
      AND (ISS-DD (#ST-X) = 30))
      OR ((ISS-MM (#ST-X) = 1 OR = 3 OR = 5 OR = 7 OR = 8 OR = 10
      OR = 12) AND (ISS-DD (#ST-X) = 31))
    IF #WMM-N = 02
      MOVE 27 TO #WDD-N /* nxt to last day of month
    ELSE
      IF #WMM-N = 4 OR = 6 OR = 9 OR = 11
        MOVE 29 TO #WDD-N
      ELSE
        MOVE 30 TO #WDD-N
      END-IF
    END-IF
  ELSE
    COMPUTE #WDD-N = ISS-DD (#ST-X) - 1
*
    IF (#WMM-N = 2) AND (#WDD-N GE 27)
      MOVE 26 TO #WDD-N /* nxt to nxt to last day of month
    END-IF
  END-IF
END-IF
*
COMPRESS #WMM '/' #WDD '/' #WYYYY-N INTO #SCR-PT-DATE LEAVING NO
MOVE STATUS-V.ISSUE-AGE   (#ST-X)           TO #SCR-AGE
MOVE STATUS-V.SMOKER-FLAG (#ST-X)           TO #SCR-SMOKE
MOVE EDITED CASH-VALUE(#ST-X) (EM=-ZZZZ,ZZZ.99) TO #SCR-CSV
*
IF #NXT   /* DW20
  COMPUTE #AVL-TDIV = BEG-CASH-VALUE (#ST-X)
    - MONTH-ALLOC-AMT (#ST-X)
*
  IF #AVL-TDIV LT +0
    RESET #AVL-TDIV
  END-IF
*
  IF STATUS-V.ID-NUMBER = 124156                                 /* PM11
      AND STATUS-V.ISSUE-DATE (#ST-X) = 20040413
      AND STATUS-V.DEATH-BENEFIT (#ST-X) = 226000
    MOVE 10150.58 TO #AVL-TDIV
  END-IF                                                         /* PM11
*
  MOVE EDITED #AVL-TDIV (EM=ZZZZ,ZZZ.99) TO #SCR-AVL-TDIV
*
* COMPUTE #CV = ACC-CASH-VALUE (#ST-X) - BEG-CASH-VALUE (#ST-X)
  COMPUTE #DB-TO-PAY = DEATH-BENEFIT (#ST-X) + #AVL-TDIV
ELSE
* MOVE CASH-VALUE (#ST-X) TO #CV
  MOVE DEATH-BENEFIT (#ST-X) TO #DB-TO-PAY
END-IF
*
MOVE #CVALUE (#ST-X) TO #CV
MOVE #LVALUE (#ST-X) TO #LV
MOVE EDITED #CV (EM=-ZZZZ,ZZZ.99) TO #SCR-CV
*
* COMPUTE ROUNDED #LV = #CV * .75
MOVE EDITED #LV (EM=-ZZZZ,ZZZ.99) TO #SCR-LV
*
* IF STATUS-V.DEATH-BENEFIT (#ST-X) GT /* replaced 10/25/2004
IF   (#DB (#ST-X) GT          /* Curr DB greater than last mon DB  DW2
    STATUS-V.NXT-MON-DEATH-BENEFIT (#ST-X)) /* DW3
    AND (STATUS-V.DEATH-BENEFIT (#ST-X) GT
    STATUS-V.FACE-AMOUNT (#ST-X))              /* DW3
  COMPRESS #SCR-MESSAGE '*In the Corridor' INTO #SCR-MESSAGE
END-IF
*
IF #MCSV (#ST-X) GT #CSV (#ST-X) /* MIN-CSV gtr CASH SURR VALUE   DW3
  MOVE EDITED #MCSV (#ST-X) (EM=-ZZZZ,ZZZ.99) TO #AMT-12
  MOVE LEFT #AMT-12 TO #AMT-12
  COMPRESS #SCR-MESSAGE 'MIN-CSV' #AMT-12 'exceeds CSV'
    INTO #SCR-MESSAGE
END-IF
*
MOVE EDITED STATUS-V.DEATH-BENEFIT (#ST-X)  (EM=-ZZZZ,ZZ9.99)
  TO #SCR-DTH-BEN
MOVE EDITED #DB-TO-PAY (EM=-ZZZZ,ZZ9.99) TO #SCR-DB-TO-PAY
*
IF STATUS-V.ISSUE-DATE (#ST-X) GE 19970101
  IF STATUS-V.LAST-ANN-CASH-VALUE (#ST-X) GT #DB-TO-PAY
    RESET #DISPLAY-DB
    MOVE EDITED STATUS-V.LAST-ANN-CASH-VALUE (#ST-X) (EM=ZZZ,ZZZ.99)
      TO #DISPLAY-DB
    IF #SCR-MESSAGE = ' '
      COMPRESS #SCR-MESSAGE 'LETTER SENT RE INCORRECT DB OF $'
        #DISPLAY-DB INTO #SCR-MESSAGE LEAVING NO
    ELSE
      COMPRESS #SCR-MESSAGE '; LETTER SENT RE INCORRECT DB OF $'
        #DISPLAY-DB INTO #SCR-MESSAGE LEAVING NO
    END-IF
  END-IF
END-IF
*
MOVE EDITED STATUS-V.NXT-MON-DEATH-BENEFIT(#ST-X) (EM=-ZZZZ,ZZZ.99)
  TO #SCR-NMDB
MOVE STATUS-V.PAID-UP-DATE(#ST-X)          TO #WYYYYMMDD
COMPRESS #WMM '/' #WDD '/' #WYYYY-N INTO #SCR-PU-DATE LEAVING NO
MOVE EDITED STATUS-V.LAST-DURATION (#ST-X) (EM=ZZ) TO #SCR-LST-DUR
MOVE EDITED STATUS-V.DURATION      (#ST-X) (EM=ZZ) TO #SCR-VA-DUR
MOVE EDITED STATUS-V.CONV-DURATION (#ST-X) (EM=ZZZ) TO #SCR-CON-DUR
MOVE EDITED STATUS-V.MONTH-IND     (#ST-X) (EM=ZZ) TO #SCR-MON-IND
MOVE EDITED STATUS-V.NXT-MON-CASH-VALUE(#ST-X) (EM=-ZZZZ,ZZZ.99)
  TO #SCR-NMCV
MOVE EDITED STATUS-V.MIN-CASH-VALUE(#ST-X) (EM=-ZZZ,ZZZ.99)
  TO #SCR-MCV
MOVE EDITED STATUS-V.FACE-AMOUNT(#ST-X)    (EM=Z,ZZZ,ZZ9.99)
  TO #SCR-FACE-AMT
MOVE STATUS-V.MODE(#ST-X)                  TO #SCR-MODE
MOVE EDITED STATUS-V.NXT-YR-MIN-CASH-VALUE(#ST-X) (EM=-ZZZ,ZZ9.99)
  TO #SCR-NYMCV
IF STATUS-V.MODE(#ST-X) = 'A' OR = '1'
  COMPUTE #W-MPREM = STATUS-V.ANNUAL-PREM(#ST-X) / 1
ELSE
  IF STATUS-V.MODE(#ST-X) = 'S' OR = '2'
    COMPUTE #W-MPREM = STATUS-V.ANNUAL-PREM(#ST-X) / 2
  ELSE
    IF STATUS-V.MODE(#ST-X) = 'Q' OR = '4'
      COMPUTE #W-MPREM = STATUS-V.ANNUAL-PREM(#ST-X) / 4
    ELSE
      COMPUTE #W-MPREM = STATUS-V.ANNUAL-PREM(#ST-X) / 12
    END-IF
  END-IF
END-IF
*
MOVE EDITED #W-MPREM (EM=ZZZZ,ZZ9.99)        TO #SCR-MPREM     /* PM38
MOVE EDITED STATUS-V.BEG-CASH-VALUE (#ST-X)  (EM=Z,ZZZ,ZZZ.99)
  TO #SCR-BCV
MOVE EDITED STATUS-V.NET-PR-RATIO(#ST-X)    (EM=ZZ.99999)
  TO #SCR-NET-PR-RT
MOVE EDITED STATUS-V.PREM-DEFICIENCY(#ST-X) (EM=ZZZ.99) TO #SCR-PR-DEF
MOVE EDITED STATUS-V.MONTH-ALLOC-AMT(#ST-X) (EM=ZZZ.99)
  TO #SCR-ALLOC-AMT
*
RESET #SCR-COST-BASIS #SCR-ORIG-COST-BASIS
IF #CGA-CLERK = 'DRW'
  MOVE 'DRW' TO #DRW-CB-LBL
  MOVE EDITED STATUS-V.COST-BASIS (#ST-X) (EM=-ZZZZ,ZZZ.99)
    TO #SCR-DRW-COST-BASIS
END-IF
*
IF COST-BASIS (#ST-X) = 0
  MOVE #PREMS-PAID TO #CURR-COST-BASIS
ELSE
  COMPUTE #CURR-COST-BASIS = COST-BASIS (#ST-X)
    + (#PREMS-PAID - TOT-PREMIUMS-PAID (#ST-X))
END-IF
*
MOVE EDITED #CURR-COST-BASIS (EM=-ZZZZ,ZZZ.99) TO #SCR-COST-BASIS
*
IF STATUS-V.ORIG-COST-BASIS (#ST-X) NE 0
  MOVE EDITED STATUS-V.ORIG-COST-BASIS (#ST-X) (EM=-ZZZZ,ZZZ.99)
    TO #SCR-ORIG-COST-BASIS
END-IF
*
IF STATUS-V.TOT-PREMIUMS-PAID (#ST-X) NE 0
  MOVE EDITED STATUS-V.TOT-PREMIUMS-PAID (#ST-X) (EM=-ZZZZ,ZZZ.99)
    TO #SCR-TOT-PREMS-PAID
END-IF
*
IF #INFO-SHOWN (#ST-X)
  PERFORM MOVE-ETI-INFO
  PERFORM HISTORY-LOOP
END-IF
*
END-SUBROUTINE
*
*******************************
DEFINE SUBROUTINE USE-HIST-INFO
*******************************
*
MOVE (AD=I)            TO #SCR-MSG-CV
MOVE 'NO INSUR MASTER' TO #SCR-MESSAGE
RESET #SCR-ISS-DATE #SCR-PAY-ST #SCR-CV-FG
RESET #SCR-ACV #SCR-DTH-BEN #SCR-PT-DATE #SCR-AGE #SCR-SMOKE
RESET #SCR-NMDB #SCR-PU-DATE #SCR-LST-DUR #SCR-VA-DUR #SCR-CV #SCR-CSV
RESET #SCR-NMCV #SCR-MCV #SCR-FACE-AMT #SCR-MODE #SCR-CON-DUR #SCR-LV
RESET #SCR-NYMCV #SCR-MPREM #SCR-MON-IND #SCR-BCV #SCR-AVL-TDIV
RESET #SCR-NET-PR-RT #SCR-PR-DEF #SCR-ALLOC-AMT
RESET #SCR-COST-BASIS #SCR-ORIG-COST-BASIS
RESET #TOT-SVC-FEE #TOT-COI #TOT-ADMIN    /* DW6
  #TOT-LIV-SVC #TOT-SAS #TOT-OO-CRED #TOT-EXP #TOT-PRM #TOT-INT
*
IF VA-HIST.ISSUE-DATE GE 19970101
  MOVE 'CURR-ACQ'   TO #SCR-MON-AL-CRED
  MOVE 'MON-ACQ'    TO #SCR-PRM-DEF
  MOVE 'CONT-FND'   TO #SCR-5-5-DB
  MOVE 'ACQ-CST'    TO #SCR-PROR-LN
  MOVE ' ADMIN'      TO #SCR-PROR-IN      /* DW6
  MOVE 'AVL-TDIV'   TO #SCR-AVL-TDIV-LBL
  MOVE EDITED CONT-FUND  (EM=Z,ZZZ,ZZZ.99) TO #SCR-BCV
ELSE
  IF PROCESS-IND = 'O'
    MOVE 'OPT-OUT COI' TO #SCR-MON-AL-CRED
  ELSE
    MOVE 'MON-AL-CRED'   TO #SCR-MON-AL-CRED
  END-IF
*
  MOVE 'PRM-DEF'    TO #SCR-PRM-DEF
  MOVE '5.5 DB'     TO #SCR-5-5-DB
  MOVE 'PROR-LN'    TO #SCR-PROR-LN
  MOVE 'PRO-IN'     TO #SCR-PROR-IN
  RESET                #SCR-AVL-TDIV-LBL
END-IF
*
MOVE EDITED VA-HIST.NET-PREM-RATIO (EM=ZZ.99999)  TO #SCR-NET-PR-RT
MOVE EDITED VA-HIST.PREMIUM-DEFIC (EM=ZZZ.99)     TO #SCR-PR-DEF
MOVE EDITED VA-HIST.MONTHLY-ALLOC-AMT (EM=ZZZ.99) TO #SCR-ALLOC-AMT
*
MOVE VA-HIST.ISSUE-PLAN TO #SCR-PLAN
MOVE VA-HIST.ISSUE-AGE  TO #SCR-AGE
MOVE #HOLD-ISS-DATE     TO #WYYYYMMDD
COMPRESS #WMM '/' #WDD '/' #WYYYY-N INTO #SCR-ISS-DATE LEAVING NO SPACE
PERFORM MOVE-ETI-INFO
PERFORM HISTORY-LOOP
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE MOVE-ETI-INFO
********************************
*
IF VA-HIST.ETI-DATE NE 0
  MOVE (AD=I)             TO #SCR-ETI-YEAR-CV
  MOVE (AD=I)             TO #SCR-ETI-MM-CV
  MOVE (AD=I)             TO #SCR-ETI-ACV-CV
  MOVE (AD=I)             TO #SCR-ETI-CV-CV
  MOVE (AD=I)             TO #SCR-ETI-DB-CV
  MOVE (AD=I)             TO #SCR-ETI-LV-CV
  MOVE VA-HIST.ETI-DATE   TO #W-SCR-DATE
  MOVE #W-SCR-YEAR        TO #SCR-ETI-YEAR
  MOVE #W-SCR-MON         TO #SCR-ETI-MM
*
  COMPUTE #WNUM-9 = VA-HIST.ETI-ACCUM-CASH-VALUE * 100
  MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-ETI-ACV
  COMPUTE #WNUM-9 = VA-HIST.ETI-CASH-VALUE * 100
  MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-ETI-CV
  COMPUTE #WNUM-9 = VA-HIST.ETI-DEATH-BENE * 100
  MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-ETI-DB
  COMPUTE #WNUM-9 = VA-HIST.ETI-LOAN-VALUE * 100
  MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-ETI-LV
END-IF
PERFORM LAST-ANN-INFO
*
END-SUBROUTINE
*
********************************
DEFINE SUBROUTINE LAST-ANN-INFO
********************************
*
MOVE VA-HIST.PREV-ANN-DATE TO #W-SCR-DATE
MOVE #W-SCR-YEAR           TO #SCR-PREV-YEAR
MOVE #W-SCR-MON            TO #SCR-PREV-MM
RESET #W-SCR-DATE
COMPUTE #WNUM-9 = VA-HIST.PREV-ACCUM-CASH-VALUE * 100
MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-PACV
COMPUTE #WNUM-9 = VA-HIST.PREV-CASH-VALUE * 100
MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-PCV
COMPUTE #WNUM-9 = VA-HIST.PREV-DEATH-BENE * 100
MOVE EDITED #WNUM-9 (EM=ZZZZZZZ99) TO #SCR-PDB
COMPUTE #WNUM-7 = VA-HIST.PREV-PRORAT-LOAN-BAL * 100
MOVE EDITED #WNUM-7 (EM=ZZZZZ99)   TO #SCR-PPLB
COMPUTE #WNUM-7 = VA-HIST.PREV-PRORAT-LN-ACC-INT * 100
MOVE EDITED #WNUM-7 (EM=ZZZZZ99)   TO #SCR-PPLAI
*
IF VA-HIST.TERMINATION-DATE NE 0
* IF (ISSUE-PLAN = 'RT' OR = 'LT') AND (TWO-AGO-ANN-DATE NE 0)                   /* YK2
  IF (ISSUE-PLAN = 'RT' OR = 'LT' OR = 'EZ') AND (TWO-AGO-ANN-DATE NE 0)          /* YK2
    MOVE TWO-AGO-ANN-DATE TO #W-SCR-DATE  /* paid-thru at TERMINATION
    MOVE EDITED TWO-AGO-CASH-VALUE(EM=ZZZZ,ZZ9.99) TO #SCR-MPREM /*mon prm  PM38
    MOVE #W-SCR-YEAR TO #SCR-TRM-PT-YEAR
    MOVE #W-SCR-MON  TO #SCR-TRM-PT-MM
    MOVE 'TRM-PAID-TH-DATE' TO #SCR-TRM-PT-LBL
  END-IF
*
  MOVE VA-HIST.TERMINATION-DATE    TO #W-SCR-DATE
  MOVE #W-SCR-YEAR                 TO #SCR-TRM-YEAR
  MOVE #W-SCR-MON                  TO #SCR-TRM-MM
  RESET #W-SCR-DATE
  MOVE (AD=I) TO #TRM-YEAR-CV
  MOVE (AD=I) TO #TRM-MM-CV
  MOVE (AD=I) TO #TRM-CODE-CV
  IF VA-HIST.TERMINATION-CODE EQ 'DTH'
    MOVE 'DEATH     ' TO #SCR-TERM-CODE
  ELSE
    IF VA-HIST.TERMINATION-CODE EQ 'CSV'
      MOVE 'CASH VALUE' TO #SCR-TERM-CODE
    ELSE
      IF VA-HIST.TERMINATION-CODE EQ 'LAP'
        MOVE 'LAPSE     ' TO #SCR-TERM-CODE
      ELSE
        IF VA-HIST.TERMINATION-CODE EQ 'EXP'
          MOVE 'EXPIRATION' TO #SCR-TERM-CODE
        ELSE
          IF VA-HIST.TERMINATION-CODE EQ 'REI'
            MOVE 'REINSTATED' TO #SCR-TERM-CODE
          END-IF
        END-IF
      END-IF
    END-IF
  END-IF
END-IF
*
END-SUBROUTINE
*
******************************
DEFINE SUBROUTINE HISTORY-LOOP
******************************
*
RESET #COI-ADJ (*) #NXT-X #NXT-PRM-ADJ #OO-EFF-DATE
RESET #COI-ADMIN-MSG    /* DW21
*
RESET #SCR-VA-HISTORY-COI (*)
MOVE 12  TO #I-CNT
MOVE 1   TO #H-X
MOVE 0   TO #A-X
*
IF (#ST-X = 0) OR (#ST-X GT 9)
  MOVE 1 TO #ST-X
END-IF
*
MOVE STATUS-V.ISSUE-DATE (#ST-X) TO #YYYYMMDD
SUBTRACT 1 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMM TO #MON-B4-ISS-DT
*
RESET #SCR-VA-HISTORY-36 (*)   /* DW33
RESET #ACCUM-ACV #TOT-PREMS #AMT-DISP #OO-EFF-DATE #DEGF-EFF-DATE
*
FOR #H-X 1 TO 13
  FOR #A-X 1 TO 13
    COMPUTE #H-X = #H-X + #I-CNT
    MOVE YEAR-MONTH-M (#A-X) TO #VA-YYYYMM        /* DW36
    IF VA-HIST.YEAR-MONTH-M(#H-X) NE 0
      IF PROCESS-IND = 'O' OR = 'D'  /* OPTED-OUT or DE-GF  /* DW15
          AND (NUMBER-MEMBERSHIPS NE 0)
        MOVE VA-HIST.YEAR-MONTH-M (#H-X) TO #PROCESS-DATE  /* DW18
        CALLNAT 'GOPTOSXX'
          STATUS-V.ID-NUMBER
          #PROCESS-DATE      /* DW18
          STATUS          (1:9)
          PAY-STATUS      (1:9)
          ISSUE-DATE      (1:9)
          MONTH-ALLOC-AMT (1:9)
          FACE-AMOUNT     (1:9)
          NUM-MBRSHIPS    (1:9)
          EXPIRY-DAY      (1:9)
          #COI-ADJ        (1:9)
          #NXT-X
          #NXT-PRM-ADJ
          #OO-EFF-DATE
          #DEGF-EFF-DATE
        IF PROCESS-IND = 'O' /* OPTED-OUT of sharing services  /* DW15
          MOVE #OO-EFF-DATE TO #DEGF-EFF-DATE /* when to apply 3.34
          MOVE #OO-EFF-DATE TO #YYYYMMDD /* Create real O/O EFF DATE
          ADD 1 TO #MM
          IF #MM GT 12
            SUBTRACT 12 FROM #MM
            ADD 1 TO #YYYY
          END-IF
          MOVE #YYYYMMDD TO #OO-EFF-DATE
          IF #PROCESS-DATE GE 200512  /*changed de-gf process /* DW19 DW24
            MOVE #YYYYMMDD TO #DEGF-EFF-DATE
          END-IF
        END-IF
*
        IF PROCESS-IND = 'D' /* DE-GF  /* DW19
          MOVE #DEGF-EFF-DATE TO #YYYYMMDD  /* to start $3.34 add to COI
          IF #PROCESS-DATE = 200512  /* chged de-gf process /* DW19 DW24
            ADD 1 TO #MM               /* Only for 12/1/2005
            IF #MM GT 12
              SUBTRACT 12 FROM #MM
              ADD 1 TO #YYYY
            END-IF
          END-IF
          MOVE #YYYYMMDD TO #DEGF-EFF-DATE
        END-IF
      END-IF
*
      IF #H-X GT 1
        MOVE VA-HIST.ACCUM-CASH-VALUE-M (#H-X - 1) TO #PREV-ACV
      ELSE
        IF YEAR-MONTH-M (14) NE 0              /* DW14
          MOVE ACCUM-CASH-VALUE-M (14) TO #PREV-ACV    /* 14 months ago
        ELSE
          RESET #PREV-ACV
        END-IF
      END-IF
*
      MOVE VA-HIST.COST-OF-INSURANCE-M (#H-X) TO #REAL-COI         /* DW40
      IF  (VA-HIST.ACCUM-CASH-VALUE-M (#H-X) GT 400000.00)         /* PM41
          AND (VA-HIST.COST-OF-INSURANCE-M (#H-X) LT 400.00)          /* PM41                     /* vt2 fix was 400.00 , back to 400.00 01102013
          AND ( NOT IS-ANNUITY-LIFE (< PLAN(#ST-X)>)   )                            /* PM42    /* TT1
        COMPUTE #REAL-COI = VA-HIST.COST-OF-INSURANCE-M (#H-X) + 1000
      END-IF                                                       /* END DW40
*
      IF (STATUS-V.ID-NUMBER = 44747)                                 /* PM43
          AND (STATUS-V.ISSUE-DATE (#ST-X) = 20071218)                   /* PM43
          AND (VA-HIST.ACCUM-CASH-VALUE-M (#H-X) GT 200000.00)           /* PM43
          AND (VA-HIST.COST-OF-INSURANCE-M (#H-X) LT 500.00)             /* PM43
        COMPUTE #REAL-COI = VA-HIST.COST-OF-INSURANCE-M (#H-X) + 1000 /* PM43
      END-IF                                                          /* PM43
*
*   WRITE 'line 2982' #H-X
*   'ACV='      VA-HIST.ACCUM-CASH-VALUE-M (#H-X)
*   'Curr coi=' VA-HIST.COST-OF-INSURANCE-M (#H-X)
*   'REAL coi=' #REAL-COI
*
      COMPUTE #NEW-ACV = #PREV-ACV + VA-HIST.PREMIUM-M           (#H-X)
        + VA-HIST.INTEREST-M          (#H-X)
*                                - VA-HIST.COST-OF-INSURANCE-M (#H-X)  /* DW40
        - #REAL-COI                           /* DW40
*
      IF   (#ST-X LE 9)
          AND #NXT  /* DW10
* below 4 lines to fix mistake during 1997 can be removed 1/1999
        IF SMOKER-FLAG-M (#H-X) = ' '    /* indicates 1st month
          RESET PRORAT-LOAN-BAL-M   (#H-X) /* by mistake contains loan
          RESET PRORAT-LN-ACC-INT-M (#H-X)  /* and interest
        END-IF
*
        SUBTRACT VA-HIST.PRORAT-LOAN-BAL-M   (#H-X) FROM #NEW-ACV
        SUBTRACT VA-HIST.PRORAT-LN-ACC-INT-M (#H-X) FROM #NEW-ACV
      END-IF
*
      IF #NEW-ACV GT VA-HIST.ACCUM-CASH-VALUE-M (#H-X)
        COMPUTE #ACV-DIFF = #NEW-ACV - VA-HIST.ACCUM-CASH-VALUE-M (#H-X)
      ELSE
        COMPUTE #ACV-DIFF = VA-HIST.ACCUM-CASH-VALUE-M (#H-X) - #NEW-ACV
      END-IF
*
      MOVE VA-HIST.PREMIUM-M (#H-X) TO #REAL-PREM
      IF #ACV-DIFF NE 0
*    AND ((#H-X NE 1)   /* ADDED 12/98 FOR ALC
*     OR  (VA-HIST.YEAR-MONTH-M (#H-X) = #MON-B4-ISS-DT))
        PERFORM CALC-REAL-PREM
      END-IF
*
      MOVE VA-HIST.YEAR-MONTH-M(#H-X) TO #W-SCR-DATE
      MOVE #W-SCR-YEAR                TO #YR-MON-Y-A(#A-X)
      MOVE #W-SCR-MON                 TO #YR-MON-M-A(#A-X)
      RESET #W-SCR-DATE
      MOVE VA-HIST.MONTH-IND-M(#H-X)  TO #W-MON-IND
      MOVE #W-MI-A                    TO #MI-A(#A-X)
      RESET #W-MON-IND
*      COMPUTE #WNUM-9 = VA-HIST.ACCUM-CASH-VALUE-M(#H-X) * 100                 /*TT1 BEGIN
      MOVE EDITED VA-HIST.ACCUM-CASH-VALUE-M(#H-X) (EM=ZZZZZZ9.99-) TO #ACV-A(#A-X)
*      COMPUTE #WNUM-9 = VA-HIST.CASH-VALUE-M(#H-X) * 100
      MOVE EDITED VA-HIST.CASH-VALUE-M(#H-X) (EM=ZZZZZZ9.99-) TO #CV-A(#A-X)
*      COMPUTE #WNUM-9 = VA-HIST.DEATH-BENEFIT-M(#H-X) * 100
      MOVE EDITED VA-HIST.DEATH-BENEFIT-M(#H-X) (EM=ZZZZZZ9.99) TO #DTH-BEN-A(#A-X)
*   COMPUTE #WNUM-6 = VA-HIST.PREMIUM-M(#H-X) * 100
**      COMPUTE #WNUM-8 = #REAL-PREM  * 100
      MOVE EDITED #REAL-PREM (EM=ZZZZZZZ9.99) TO #PREM-A(#A-X)                       /*TT1 END
*
      PERFORM SETUP-CALCS
*
      IF #NXT
        MOVE EDITED #ACQ-COST (EM=ZZ9.99) TO #ACQ-COST-A-C (#A-X)
      END-IF
*
      MOVE YEAR-MONTH-M(#H-X)  TO #W-SCR-DATE
      MOVE #W-SCR-YEAR         TO #YR-MON-Y-A-C (#A-X)
      MOVE #W-SCR-MON          TO #YR-MON-M-A-C (#A-X)
      MOVE MONTH-IND-M(#H-X)   TO #W-MON-IND
      MOVE #W-MI-A             TO #MI-A-C (#A-X)
      COMPUTE #TOTAL-EXP = #COI + #ADMIN + #ACQ-COST + #SVC-FEE
*   MOVE EDITED #TOTAL-EXP (EM=-ZZZ.99) TO #COI-A-C (#A-X)    /* DW40
      MOVE EDITED #TOTAL-EXP (EM=-ZZZZ.99) TO #COI-A-C (#A-X)   /* DW40
      MOVE EDITED #SVC-FEE (EM=-ZZ.99) TO #SVC-FEE-A-C (#A-X)
*
      IF VA-HIST.YEAR-MONTH-M (#H-X) GE 200512
        MOVE EDITED #LIV-SVC (EM=-ZZ.99) TO #LVS-A-C (#A-X)
        MOVE EDITED #SAS     (EM=-ZZ.99) TO #SAS-A-C (#A-X)
        MOVE EDITED #OO-CRED (EM=-ZZ.99) TO #OO-CR-A-C (#A-X)
      END-IF
*
      MOVE EDITED #ADMIN (EM=-ZZZ.99) TO #ADMIN-A-C (#A-X)
      MOVE EDITED #COI   (EM=-ZZZZ.99) TO #COIX-A-C (#A-X) /* DW40
*
      FOR #I1 1 TO 100
        IF #MON-TBL (#I1) = 0 OR = YEAR-MONTH-M (#H-X)
          MOVE YEAR-MONTH-M (#H-X) TO #MON-TBL (#I1)
          ESCAPE BOTTOM
        END-IF
      END-FOR
*              #####
*   COMPUTE #WNUM-5 = VA-HIST.COST-OF-INSURANCE-M(#H-X) * 100    /* DW40
**      COMPUTE #WNUM-6 = #REAL-COI * 100                            /* DW40    /*TT1
*
*    MOVE EDITED #WNUM-5 (EM=ZZZ99-) TO #COI-A(#A-X)        /* DW40
      MOVE EDITED #REAL-COI (EM=ZZZZZZ.99) TO #COI-A(#A-X)        /* DW40       /*TT1
**      COMPUTE #WNUM-7 = VA-HIST.INTEREST-M(#H-X) * 100
      MOVE EDITED VA-HIST.INTEREST-M(#H-X) (EM=ZZZZZ.99) TO #INT-A(#A-X)
      MOVE VA-HIST.SMOKER-FLAG-M(#H-X)      TO #SM-FG-A(#A-X)
      COMPUTE #WNUM-7 = VA-HIST.PRORAT-LOAN-BAL-M(#H-X) * 100
**      MOVE EDITED #WNUM-7 (EM=ZZZZZ99) TO #PR-LN-A(#A-X)          /*tt1
      COMPUTE #WNUM-6 = VA-HIST.PRORAT-LN-ACC-INT-M(#H-X) * 100
**      MOVE EDITED #WNUM-6 (EM=ZZZZ99) TO #PR-INT-A(#A-X)          /*tt1
      PERFORM BUMP-HIST-SEGMENT
      ADD #REAL-PREM TO #TOT-PREMS
    ELSE
      RESET #YR-MON-Y-A (#A-X)
      RESET #YR-MON-M-A (#A-X)
      RESET #MI-A       (#A-X)
      RESET #ACV-A      (#A-X)
      RESET #CV-A       (#A-X)
      RESET #DTH-BEN-A  (#A-X)
      RESET #PREM-A     (#A-X)
      RESET #COI-A      (#A-X)
      RESET #INT-A      (#A-X)
      RESET #SM-FG-A    (#A-X)
**      RESET #PR-LN-A    (#A-X)
      RESET #PR-INT-A   (#A-X)
      COMPUTE #H-X = #H-X - #I-CNT
      SUBTRACT 2 FROM #I-CNT
      ADD 1 TO #H-X
    END-IF
  END-FOR
END-FOR
*
IF (ISSUE-DATE (#ST-X) GE #1-YEAR-AGO)
* AND (NOT PLAN (#ST-X) = 'LT' OR = 'RT')                              /* YK1
* AND ((#SCR-PLN-A1 (#ST-X) LT 'U') OR (#SCR-PLN-A1 (#ST-X) GT 'Z'))   /* YK1
    AND (NOT FUNCTION-TERM-POLICY(<PLAN(#ST-X)>))                        /* YK1
  IF  MTD-ACV-PREM-ADJ (#ST-X) NE 9999999.99                      /* PM1
    ADD MTD-ACV-PREM-ADJ (#ST-X) TO #TOT-PREMS
  END-IF                                                          /* PM1
*
  PERFORM SHOW-TPP-PREM-DIFF   /* DW12
END-IF
*
RESET #A-X                            /* DW14
RESET #SCR-VA-HISTORY-COI-36 (*)      /* DW33
FOR #H-X 14 TO 39
  IF VA-HIST.YEAR-MONTH-M (#H-X) = 0
    ESCAPE BOTTOM
  END-IF
*
  MOVE YEAR-MONTH-M (#H-X) TO #VA-YYYYMM        /* DW36
  IF   #DOING-ANN-STMTS                         /* DW36
      AND (#VA-YYYY LT #CURR-YYYY)
    MOVE TRUE TO #ANN-STMT-DONE
    ESCAPE BOTTOM
  END-IF
*
  ADD 1 TO #A-X
  IF #H-X EQ 14                                                     /* PM38
    MOVE VA-HIST.ACCUM-CASH-VALUE-M (1) TO #PREV-ACV                /* prev year
  ELSE                                                              /* PM38
    IF YEAR-MONTH-M (#H-X + 1) NE 0
      MOVE VA-HIST.ACCUM-CASH-VALUE-M (#H-X + 1) TO #PREV-ACV       /* PM38
    ELSE
      RESET #PREV-ACV
    END-IF
  END-IF                                                            /* PM38
*
  COMPUTE #NEW-ACV = #PREV-ACV + VA-HIST.PREMIUM-M           (#H-X)
    + VA-HIST.INTEREST-M          (#H-X)
*                              - VA-HIST.COST-OF-INSURANCE-M (#H-X)   /* DW40
    - #REAL-COI                            /* DW40
*
  IF   (#ST-X LE 9)
      AND (ISSUE-DATE (#ST-X) GE 19970101) /* 1997 pol
      AND (MONTH-ALLOC-AMT (#ST-X) NE 999.99) /* not FORCED 1996 PREMS
    SUBTRACT VA-HIST.PRORAT-LOAN-BAL-M   (#H-X) FROM #NEW-ACV
    SUBTRACT VA-HIST.PRORAT-LN-ACC-INT-M (#H-X) FROM #NEW-ACV
  END-IF
*
  IF #NEW-ACV GT VA-HIST.ACCUM-CASH-VALUE-M (#H-X)                   /* PM38
    COMPUTE #ACV-DIFF = #NEW-ACV - VA-HIST.ACCUM-CASH-VALUE-M (#H-X) /* PM38
  ELSE                                                               /* PM38
    COMPUTE #ACV-DIFF = VA-HIST.ACCUM-CASH-VALUE-M (#H-X) - #NEW-ACV /* PM38
  END-IF                                                             /* PM38
*
  MOVE VA-HIST.PREMIUM-M (#H-X) TO #REAL-PREM
  IF #ACV-DIFF NE 0
    PERFORM CALC-REAL-PREM
  END-IF
*
  MOVE VA-HIST.YEAR-MONTH-M(#H-X)       TO #W-SCR-DATE
  MOVE #W-SCR-YEAR                      TO #YR-MON-Y-A-36(#A-X)
  MOVE #W-SCR-MON                       TO #YR-MON-M-A-36(#A-X)
  RESET #W-SCR-DATE
  MOVE VA-HIST.MONTH-IND-M(#H-X)        TO #W-MON-IND
  MOVE #W-MI-A                          TO #MI-A-36(#A-X)
  RESET #W-MON-IND
*  COMPUTE #WNUM-9 = VA-HIST.ACCUM-CASH-VALUE-M(#H-X) * 100      /* TT1 BEGIN
  MOVE EDITED VA-HIST.ACCUM-CASH-VALUE-M(#H-X) (EM=ZZZZZZ9.99) TO #ACV-A-36(#A-X)
*  COMPUTE #WNUM-9 = VA-HIST.CASH-VALUE-M(#H-X) * 100
  MOVE EDITED VA-HIST.CASH-VALUE-M(#H-X) (EM=ZZZZZZ9.99) TO #CV-A-36(#A-X)
*  COMPUTE #WNUM-9 = VA-HIST.DEATH-BENEFIT-M(#H-X) * 100
  MOVE EDITED VA-HIST.DEATH-BENEFIT-M(#H-X) (EM=ZZZZZZ9.99) TO #DTH-BEN-A-36(#A-X)
*  COMPUTE #WNUM-8 = #REAL-PREM  * 100
  MOVE EDITED #REAL-PREM (EM=ZZZZZ9.99) TO #PREM-A-36(#A-X)         /* TT1 END
*
  PERFORM SETUP-CALCS
*
  IF #NXT
    MOVE EDITED #ACQ-COST (EM=ZZ9.99) TO #ACQ-COST-A-36 (#A-X)
  END-IF
*
  MOVE YEAR-MONTH-M(#H-X)  TO #W-SCR-DATE
  MOVE #W-SCR-YEAR         TO #YR-MON-Y-A-C-36 (#A-X)
  MOVE #W-SCR-MON          TO #YR-MON-M-A-C-36 (#A-X)
  MOVE MONTH-IND-M(#H-X)   TO #W-MON-IND
  MOVE #W-MI-A             TO #MI-A-C-36 (#A-X)
  COMPUTE #TOTAL-EXP = #COI + #ADMIN + #ACQ-COST + #SVC-FEE     /* PM5
* MOVE EDITED #TOTAL-EXP (EM=-ZZZ.99) TO #COI-A-C-36 (#A-X) /* PM5   DW40
  MOVE EDITED #TOTAL-EXP (EM=-ZZZZ.99) TO #COI-A-C-36 (#A-X) /* PM5   DW40
  MOVE EDITED #SVC-FEE (EM=-ZZ.99) TO #SVC-FEE-A-C-36 (#A-X)
*
*  IF #CGA-CLERK = 'DRW'
  IF VA-HIST.YEAR-MONTH-M (#H-X) GE 200512
    MOVE EDITED #LIV-SVC (EM=-ZZ.99) TO #LVS-A-C-36 (#A-X)
    MOVE EDITED #SAS     (EM=-ZZ.99) TO #SAS-A-C-36 (#A-X)
    MOVE EDITED #OO-CRED (EM=-ZZ.99) TO #OO-CR-A-C-36 (#A-X)
  END-IF
*
  MOVE EDITED #ADMIN (EM=-ZZZ.99) TO #ADMIN-A-C-36 (#A-X)
*  MOVE EDITED #COI   (EM=-ZZZ.99) TO #COIX-A-C-36 (#A-X)   /* DW40
  MOVE EDITED #COI   (EM=-ZZZZ.99) TO #COIX-A-C-36 (#A-X)  /* DW40
*
  FOR #I1 1 TO 100
    IF #MON-TBL (#I1) = 0 OR = YEAR-MONTH-M (#H-X)
      MOVE YEAR-MONTH-M (#H-X) TO #MON-TBL (#I1)
      ESCAPE BOTTOM
    END-IF
  END-FOR
*              #####
* COMPUTE #WNUM-5 = VA-HIST.COST-OF-INSURANCE-M(#H-X) * 100         /* DW40
*  COMPUTE #WNUM-6 = #REAL-COI * 100                                 /* DW40
*  MOVE EDITED #WNUM-5 (EM=ZZZ99-) TO #COI-A-36 (#A-X)              /* DW40
*  MOVE EDITED #WNUM-6 (EM=-ZZZ99) TO #COI-A-36 (#A-X)              /* DW40
  MOVE EDITED #REAL-COI (EM=ZZZZZ.99) TO #COI-A-36 (#A-X)              /* DW40     /*tt1

*  COMPUTE #WNUM-7 = VA-HIST.INTEREST-M(#H-X) * 100
* MOVE EDITED #WNUM-7 (EM=ZZZZ99-) TO #INT-A-36 (#A-X)  /*TT1 COMMENTED OUT
  MOVE EDITED VA-HIST.INTEREST-M(#H-X) (EM=ZZZZZ.99) TO #INT-A-36 (#A-X)     /*TT1
  MOVE VA-HIST.SMOKER-FLAG-M(#H-X)      TO #SM-FG-A-36 (#A-X)
*  COMPUTE #WNUM-7 = VA-HIST.PRORAT-LOAN-BAL-M(#H-X) * 100       /*TT1 COMMENTED OUT BEGIN
*  MOVE EDITED #WNUM-7 (EM=ZZZZZ99) TO #PR-LN-A-36 (#A-X)
*  COMPUTE #WNUM-6 = VA-HIST.PRORAT-LN-ACC-INT-M(#H-X) * 100
*  MOVE EDITED #WNUM-6 (EM=ZZZZ99) TO #PR-INT-A-36 (#A-X)        /*TT1 COMMENTED OUT END
  ADD #REAL-PREM TO #TOT-PREMS
END-FOR
*
END-SUBROUTINE
* * * * * *
DEFINE SHOW-TPP-PREM-DIFF
* * * * * *
*
* IF   (PLAN (#ST-X) = 'RT' OR = 'LT')                        /* YK1
* OR ((PLAN-A1 (#ST-X) GE 'U') AND (PLAN-A1 (#ST-X) LE 'Z'))  /* YK1
IF FUNCTION-TERM-POLICY(<PLAN(#ST-X)>)                        /* YK1
  ESCAPE ROUTINE
END-IF
*
IF #TOT-PREMS = #PREMS-PAID
  COMPRESS #SCR-MESSAGE 'TPP = CSV Prems' INTO #SCR-MESSAGE
ELSE
  COMPUTE #TPP-DIFF = #PREMS-PAID - #TOT-PREMS
  COMPUTE #MON-PREM = ANNUAL-PREM (#ST-X) / 12
  MOVE EDITED #PREMS-PAID (EM=Z,ZZZ,ZZZ.99) TO #AMT-DISP
  MOVE LEFT #AMT-DISP TO #AMT-DISP
  COMPRESS #SCR-MESSAGE 'TPP=' #AMT-DISP
    INTO #SCR-MESSAGE
  MOVE EDITED #TOT-PREMS (EM=Z,ZZZ,ZZZ.99) TO #AMT-DISP
  MOVE LEFT #AMT-DISP TO #AMT-DISP
  COMPRESS #SCR-MESSAGE 'CV Prms =' #AMT-DISP
    INTO #SCR-MESSAGE
  MOVE EDITED #TPP-DIFF (EM=-ZZZZZZ.99) TO #AMT-DISP
  MOVE LEFT #AMT-DISP TO #AMT-DISP
  COMPRESS #SCR-MESSAGE 'Diff=' #AMT-DISP
    INTO #SCR-MESSAGE
  MOVE EDITED #MON-PREM (EM=ZZZZ.99) TO #AMT-DISP
  MOVE LEFT #AMT-DISP TO #AMT-DISP
  COMPRESS #SCR-MESSAGE 'Mn Prm =' #AMT-DISP
    INTO #SCR-MESSAGE
END-IF
*
END-SUBROUTINE
*
*******************
DEFINE SUBROUTINE BUMP-HIST-SEGMENT
*******************
*
COMPUTE #H-X = #H-X - #I-CNT
COMPUTE #I-CNT = #I-CNT - 2
COMPUTE #H-X = #H-X + 1
*
IF VA-HIST.TERMINATION-CODE = 'DTH'
  MOVE STATUS-V.DATE-OF-DEATH                        TO #WYYYYMMDD
  COMPRESS #WMM '/' #WDD '/' #WYY INTO #WMMDDYY-8 LEAVING NO SPACE
  MOVE #WMMDDYY-8 TO #SCR-DOD
  MOVE (AD=I) TO #DOD-CV
  MOVE 'DOD'      TO #SCR-DTH-MSG2
  MOVE 'DB='      TO #SCR-DB-MSG
  FIND (1) FIRS-V WITH WIDOW-KEY = #CGA-ID-G
    IF NO RECORDS FOUND
      MOVE (AD=I)                   TO #SCR-MSG-CV
      MOVE 'NO FIRS RECORD ON FILE' TO #SCR-MESSAGE
      ESCAPE BOTTOM
    END-NOREC
  END-FIND
*
  FOR #W-X 1 TO 32
    IF FIRS-V.POL-NAME(#W-X) EQ 'AMAA               '
      IF FIRS-V.POL-DATE(#W-X) EQ #HOLD-ISS-DATE
        MOVE (AD=I) TO #DB-MOD-CV
        MOVE EDITED FIRS-V.POL-AMT-PAID(#W-X) (EM=Z,ZZZ,ZZZ.99)
          TO #SCR-DB-MOD
      ELSE
        ADD 1 TO #W-X
      END-IF
    ELSE
      IF FIRS-V.POL-NAME(#W-X) EQ 'AAFMAA             '
        IF FIRS-V.POL-DATE(#W-X) EQ #HOLD-ISS-DATE
          MOVE (AD=I) TO #DB-MOD-CV
          MOVE EDITED FIRS-V.POL-AMT-PAID(#W-X) (EM=Z,ZZZ,ZZZ.99)
            TO #SCR-DB-MOD
        ELSE
          ADD 1 TO #W-X
        END-IF
      ELSE
        ADD 1 TO #W-X
      END-IF
    END-IF
  END-FOR
END-IF
END-SUBROUTINE
*
****************
DEFINE SUBROUTINE CALC-REAL-PREM
****************
*
* if STATUS-V.ID-NUMBER GE 13826   /* DW99
*   WRITE STATUS-V.ID-NUMBER 'C2H30PVW year-mon=' YEAR-MONTH-M (#H-X)
*                'H-X=' #H-X 'I1=' #I1
* END-IF
*
IF   (ID-NUMBER = 140630)
    AND (VA-HIST.YEAR-MONTH-M (#H-X) = 200605) /* DW28
    AND (ISSUE-DATE (#I1) = 20060227)
  MOVE 100000 TO #REAL-PREM
  ESCAPE ROUTINE
END-IF
*
FOR #I1 1 TO 800
  IF   (#ACV-DIFF GT ((#I1 * 1000) - 10))
      AND (#ACV-DIFF LT ((#I1 * 1000) + 10))
    IF #NEW-ACV LT VA-HIST.ACCUM-CASH-VALUE-M (#H-X)
      ADD (#I1 * 1000) TO #REAL-PREM
    ELSE
      SUBTRACT (#I1 * 1000) FROM #REAL-PREM
    END-IF
*
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
*
* * * * * *
DEFINE CALC-PREMS-PAID-SETUP
* * * * * *
*
RESET DATE-OF-BIRTH                                                          /* TT2
DATE-OF-BIRTH := GET-DATE-OF-BIRTH(<MEMBER-CONTACT-ID>)                      /* TT2
*
MOVE DATE-OF-BIRTH             TO #PP-DATE-OF-BIRTH
MOVE STATUS-V.ANNUAL-PREM (#ST-X)       TO #PP-ANNUAL-PREM
MOVE STATUS-V.PAY-STATUS (#ST-X)        TO #PP-PAY-STATUS
MOVE STATUS-V.TOT-PREMIUMS-PAID (#ST-X) TO #PP-TOT-PREMIUMS-PAID
MOVE STATUS-V.PAID-TO-DATE (#ST-X)      TO #PP-PAID-TO-DATE
MOVE STATUS-V.ISSUE-DATE (#ST-X)        TO #PP-ISSUE-DATE
MOVE STATUS-V.MODE (#ST-X)              TO #PP-MODE
MOVE STATUS-V.PLAN (#ST-X)              TO #PP-PLAN
MOVE STATUS-V.COST-BASIS (#ST-X)        TO #PP-COST-BASIS
MOVE STATUS-V.MONTH-ALLOC-AMT (#ST-X)   TO #PP-MONTH-ALLOC-AMT
MOVE STATUS-V.INTRO-FLAG                TO #PP-INTRO-FLAG
MOVE STATUS-V.X-FIRST-PLACE-FEE (#ST-X) TO #PP-FIRST-PLACE-FEE
MOVE STATUS-V.X-BILL-ADJUST     (#ST-X) TO #PP-BADJ
RESET #PREMS-PAID #SUB-PREMS-PAID
*
CALLNAT 'GPRPDSCO'
  #PP-DATE-OF-BIRTH
  #PP-ANNUAL-PREM
  #PP-PAY-STATUS
  #PP-TOT-PREMIUMS-PAID
  #PP-PAID-TO-DATE
  #PP-ISSUE-DATE
  #PP-MODE
  #PP-PLAN
  #PP-COST-BASIS
  #PP-MONTH-ALLOC-AMT
  #PP-INTRO-FLAG
  #PP-FIRST-PLACE-FEE
  #PREMS-PAID
  #SUB-PREMS-PAID
  #PP-BADJ
*
END-SUBROUTINE
*
* * * *
DEFINE SUBROUTINE EXP-BREAKOUT-DISP
* * * *
MOVE EDITED #TOT-SVC-FEE (EM=-ZZZZZ.99) TO #AMT-10    /* DW6
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #CURR-YYYY 'totals:'
  'SVC-FEE=' #AMT-10 INTO #SCR-MESSAGE
MOVE EDITED #TOT-COI (EM=-ZZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SCR-MESSAGE 'COI=' #AMT-10 INTO #SCR-MESSAGE
MOVE EDITED #TOT-ADMIN (EM=-ZZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SCR-MESSAGE 'ADMIN=' #AMT-10 INTO #SCR-MESSAGE
MOVE EDITED #TOT-ACQ-COST (EM=-ZZZZZ.99) TO #AMT-10  /* DW16
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SCR-MESSAGE 'ACQ COST=' #AMT-10 INTO #SCR-MESSAGE
*
* IF #CGA-CLERK NE 'DRW'
*   ESCAPE ROUTINE
* END-IF
*
MOVE EDITED #TOT-SVC-FEE (EM=-ZZZZZ.99) TO #AMT-10  /* DW20
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #CURR-YYYY ' tots:'
  ' SVC-FEE=' #AMT-10 INTO #SVC-FEE-MSG LEAVING NO
MOVE EDITED #TOT-SAS (EM=-ZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SVC-FEE-MSG ' SAS=' #AMT-10 INTO #SVC-FEE-MSG LEAVING NO
MOVE EDITED #TOT-LIV-SVC (EM=-ZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SVC-FEE-MSG ' LVS=' #AMT-10 INTO #SVC-FEE-MSG LEAVING NO
MOVE EDITED #TOT-OO-CRED (EM=-ZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SVC-FEE-MSG ' OO-CR=' #AMT-10 INTO #SVC-FEE-MSG LEAVING NO
*
END-SUBROUTINE
*
* * * *
DEFINE SUBROUTINE BREAKOUT-DISP
* * * *
MOVE EDITED #TOT-PRM (EM=-ZZZZZ.99) TO #AMT-10    /* DW6
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #CURR-YYYY 'totals:'
  'PREM=' #AMT-10 INTO #SCR-BREAKOUT
MOVE EDITED #TOT-EXP (EM=-ZZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SCR-BREAKOUT 'EXP=' #AMT-10 INTO #SCR-BREAKOUT
MOVE EDITED #TOT-INT (EM=-ZZZZZ.99) TO #AMT-10
MOVE LEFT #AMT-10 TO #AMT-10
COMPRESS #SCR-BREAKOUT 'INT=' #AMT-10 INTO #SCR-BREAKOUT
*
END-SUBROUTINE
*
DEFINE SUBROUTINE SETUP-CALCS
*
RESET #FND-MATCH
MOVE YEAR-MONTH-M (#H-X) TO #VA-YYYYMM
FOR #I1 1 TO 100
  IF #MON-TBL (#I1) = 0
    ESCAPE BOTTOM
  END-IF
*
  IF #VA-YYYYMM = #MON-TBL (#I1)
    MOVE TRUE TO #FND-MATCH
  END-IF
END-FOR
*
IF (#VA-YYYYMM LT #SVC-FE-DATE (1)) /* prior to 1st svc-fee
    OR  (#NXT AND (#VA-YYYYMM GE 200601) /* No sv-fe after 1/2006 /* DW25/DW26/DW29
    AND (INTRO-FLAG = 'S' OR = 'K' OR = 'G')  /* no svc fee  DW25/DW29
    OR (MILITARY-SERVICE = 'EMP'))           /* no svc fee  DW30
  RESET #SVC-FEE #LIV-SVC #SAS #OO-CRED
ELSE
  FOR #I1 1 TO #SVC-FEE-TBL-ENTRIES
    IF  (#I1 = #SVC-FEE-TBL-ENTRIES)
        OR (#VA-YYYYMM LT #SVC-FE-DATE (#I1 + 1))
      MOVE #SVC-FE (#I1) TO #SVC-FEE
      MOVE #SVC-LIV-SVC (#I1) TO #LIV-SVC    /* DW20
      COMPUTE #SAS = #SVC-FEE - #LIV-SVC
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-IF
*
IF (#FND-MATCH  /* This month already charged on prev policy
    OR (NOT PROCESS-IND = 'G')  /* Not G/F
* OR (COST-OF-INSURANCE-M(#H-X) LE 0)) /* no COI to start with  DW4   DW40
    OR (#REAL-COI LE 0)) /* no COI to start with  DW4                   DW40
*
  IF   ((PROCESS-IND = 'O')  /* O/O chg in 10/2005 m/e  DW17
      AND (#DEGF-EFF-DATE-YYYYMM NE 0)             /* DW15
      AND (((#VA-YYYYMM GE #DEGF-EFF-DATE-YYYYMM) /*alwys aftr 10/2005
      AND  ((#VA-YYYYMM LT 200511)     /* DW18
      OR   ((#VA-YYYYMM GE 200512) AND NOT #NXT))     /* DW20
      AND   (#VA-YYYYMM GE 200510))
      OR   (#VA-YYYYMM LT #DEGF-EFF-DATE-YYYYMM)) /* prior to O/O
      AND (NOT #FND-MATCH)
*   AND (COST-OF-INSURANCE-M(#H-X) GT 0))               /* DW40
      AND (#REAL-COI GT 0))                               /* DW40

      OR   ((PROCESS-IND = 'D')  /* DE/GF
      AND (#DEGF-EFF-DATE-YYYYMM NE 0)            /* DW15
      AND (#VA-YYYYMM LT #DEGF-EFF-DATE-YYYYMM)   /* DW15
      AND (NOT #FND-MATCH)
*    AND (COST-OF-INSURANCE-M(#H-X) GT 0))            /* DW40
      AND (#REAL-COI GT 0))            /* DW40
      OR  ((#SERVICES AND #OL-IND)                  /* PM43
      AND (#OL-INDEX = #ST-X) AND (#VA-YYYYMM GE #SVC-ISSUE-DATE-YYYYMM)
      AND (#VA-YYYYMM LT #SVC-TERMINATION-YYYYMM))
*    DISPLAY STATUS-V.ID-NUMBER #SVC-ISSUE-DATE-YYYYMM #SVC-TERMINATION-YYYYMM #VA-YYYYMM
    IGNORE  /* SVC-FEE should be applied
  ELSE
    IF (#NXT AND (#VA-YYYYMM GE 200601))   /* DW21
        AND NOT #FND-MATCH
      IGNORE
    ELSE
      RESET #SVC-FEE #LIV-SVC #SAS #OO-CRED
    END-IF
  END-IF
END-IF
*
RESET #OO-CRED      /* DW27
IF (PROCESS-IND = 'O') AND (#VA-YYYYMM = 200512)    /* DW20
  CALLNAT 'COOCRSXX' STATUS-V.ID-NUMBER
    ISSUE-DATE(#ST-X) #OO-CRED
  ADD #OO-CRED TO #SVC-FEE
END-IF
*
IF (PROCESS-IND = 'O') AND (#VA-YYYYMM GE 200601)    /* DW20
    AND (#VA-YYYYMM GE #DEGF-EFF-DATE-YYYYMM)
  IF (#NXT AND (#VA-YYYYMM GE 200601))   /* DW21
    IGNORE
  ELSE
    COMPUTE #OO-CRED = #LIV-SVC * -1
    SUBTRACT #LIV-SVC FROM #SVC-FEE
  END-IF
END-IF
*
IF   (#OO-EFF-DATE NE 0)                   /* DW17
    AND (#VA-YYYYMM GE #OO-EFF-DATE-YYYYMM)
* AND (COST-OF-INSURANCE-M(#H-X) GT 0)                /* DW40
    AND (#REAL-COI GT 0)                                 /* DW40
  SUBTRACT #COI-ADJ (#ST-X) FROM #SVC-FEE
END-IF
*
IF  NOT #NXT /* DW20
  FOR #I1 1 TO #MORT-PCT-ENTRIES         /* DW22
    IF  (#I1 = #MORT-PCT-ENTRIES)
        OR (#VA-YYYYMM LT #MORT-PCT-DATE (#I1 + 1))
      MOVE #MORT-PERCENT (#I1) TO #MORT-PCT
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  COMPUTE ROUNDED #COI =            /* in 2006 this was 75%
*     (COST-OF-INSURANCE-M(#H-X) - #SVC-FEE) * #MORT-PCT  /* DW22      /* DW40
    (#REAL-COI - #SVC-FEE) * #MORT-PCT  /* DW22                      /* DW40
  COMPUTE ROUNDED #ADMIN =          /* In 2006 this was 25%
*        COST-OF-INSURANCE-M (#H-X) - #COI - #SVC-FEE        /* DW40
    #REAL-COI - #COI - #SVC-FEE                         /* DW40
ELSE     /* NXT
  IF   (#SVC-FEE NE 0)
      AND (#VA-YYYYMM LE 200512)  /* WAS LT
    IF (PROCESS-IND = 'O') AND (#VA-YYYYMM = 200512)
      IGNORE
    ELSE
      SUBTRACT 2.00 FROM #SVC-FEE /* back out amt already charged
      SUBTRACT 2.00 FROM #LIV-SVC
    END-IF
  END-IF
*
  RESET #ADMIN #ACQ-COST /* DW4
* IF PLAN (#ST-X) = 'AL'    /* DW32
  MOVE PRORAT-LN-ACC-INT-M (#H-X) TO #ADMIN
*   RESET #ACQ-COST
* ELSE
*  IF COST-OF-INSURANCE-M(#H-X) GT 0 /* no COI to start with DW4 DW31
  MOVE VA-HIST.PRORAT-LN-ACC-INT-M (#H-X) TO #ADMIN     /* DW32
*    COMPUTE ROUNDED #ADMIN = (#NXT-MON-MAINT-PER-POL
*     + (#NXT-MON-MAINT-PER-1K * (DEATH-BENEFIT (#ST-X)/ 1000))) / 12
*
  MOVE VA-HIST.PRORAT-LOAN-BAL-M(#H-X) TO #ACQ-COST  /* PM5
* END-IF                                                    /* DW31
* END-IF                                                    /* DW32
*
  IF (#NXT AND (#VA-YYYYMM GE 200601))   /* DW21
      AND NOT ((#SERVICES AND #OL-IND) AND (#OL-INDEX = #ST-X) /* PM43
      AND (#VA-YYYYMM GE #SVC-ISSUE-DATE-YYYYMM)
      AND (#VA-YYYYMM LT #SVC-TERMINATION-YYYYMM))
*    MOVE COST-OF-INSURANCE-M (#H-X) TO #COI         /* DW40
    MOVE #REAL-COI TO #COI                          /* DW40
    IF #COI-ADMIN-MSG NE 'Insufficient ADMIN for SAS'
      MOVE 'SAS adjusted ADMIN' TO #COI-ADMIN-MSG
    END-IF
    COMPUTE #SAS = #SVC-FEE - #LIV-SVC
*   BELOW is 1st plan by hargis & crooks
*   IF COST-OF-INSURANCE-M (#H-X) LT (#SAS * 2)
*     COMPRESS #COI-ADMIN-MSG '& ADMIN' INTO #COI-ADMIN-MSG
*     COMPUTE ROUNDED #COI = COST-OF-INSURANCE-M (#H-X) / 2
*     COMPUTE #ADMIN = #ADMIN - (#SAS - #COI)
*   ELSE
*     COMPUTE #COI = COST-OF-INSURANCE-M (#H-X) - #SAS
*   END-IF
    IF #ADMIN LE #SAS
      MOVE 'Insufficient ADMIN for SAS' TO #COI-ADMIN-MSG
      RESET #SAS
    ELSE
      COMPUTE #ADMIN = #ADMIN - #SAS
    END-IF
*
    MOVE #SAS TO #SVC-FEE
    RESET #LIV-SVC #OO-CRED                                /* DW21
  ELSE
*   COMPUTE #COI = COST-OF-INSURANCE-M (#H-X) - #SVC-FEE   /*PM5   DW40
    COMPUTE #COI = #REAL-COI - #SVC-FEE                    /*PM5   DW40
  END-IF
END-IF
*

IF #VA-YYYY = #CURR-YYYY                                   /* DW6
  ADD #SVC-FEE  TO #TOT-SVC-FEE
  ADD #LIV-SVC  TO #TOT-LIV-SVC                            /* DW20
  ADD #SAS      TO #TOT-SAS
  ADD #OO-CRED  TO #TOT-OO-CRED
  ADD #COI      TO #TOT-COI
  ADD #ACQ-COST TO #TOT-ACQ-COST   /* WAS #TOT-COI         /* DW16
  ADD #ADMIN    TO #TOT-ADMIN
* ADD COST-OF-INSURANCE-M (#H-X) TO #TOT-EXP     /* DW40
  ADD #REAL-COI TO #TOT-EXP                      /* DW40
  ADD #ACQ-COST    TO #TOT-EXP
  IF #NXT
    ADD #ADMIN    TO #TOT-EXP
  END-IF
* ADD PREMIUM-M (#H-X)  TO #TOT-PRM                        /* PM38
  ADD #REAL-PREM TO #TOT-PRM                               /* PM38
  ADD INTEREST-M (#H-X) TO #TOT-INT
END-IF

*
END-SUBROUTINE
*
*****************
DEFINE SUBROUTINE check-for-cn-paid-in-error                                      /* vt4 \/
*****************
*
RESET #msg-txt(*)
MOVE id-number to #id-nbr
EXAMINE #tabl-cn(*) FOR #id-nbr GIVING INDEX #idx
IF #idx GT 0
  MOVE '******************************************************** ' to #msg-txt (1)
  MOVE '*  ONE OF THIS MEMBER''S POLICIES HAD AN ADJUSTMENT TO  * ' to #msg-txt (2)
  MOVE '*  PREMIUMS IN DECEMBER 2012. REVIEW DAL VW AND 2012   * ' to #msg-txt (3)
  MOVE '*  ANNUAL STATEMENT TO SEE WHAT ADJUSTMENTS WERE MADE. * ' to #msg-txt (4)
  MOVE '******************************************************** ' to #msg-txt (5)
ELSE
  RESET #msg-txt(*)
END-IF
*
END-SUBROUTINE                                                                 /* vt4 /\
END
