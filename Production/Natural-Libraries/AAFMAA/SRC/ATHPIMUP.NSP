* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* PROGRAM-ID: ATHPIMUP - INTRO MBR COUNTS FOR "IP" AND "IS"
*
DEFINE DATA
LOCAL
*
* * * *   I N T R O   M E M B E R   F I L E * * * * * * * * * *
1 IM-V VIEW OF A-INTRO-MEMBER
  2 RANK                (A3)
  2 STATUS              (A1)
  2 MIL-SERVICE         (A3)
  2 APPL-SOURCE         (A6)
  2 INS-MODE            (A1)
  2 PAID-THRU-DATE      (N8)
  2 REDEFINE PAID-THRU-DATE
   3 PAID-THRU-DATE-YYYY (N4)
   3 PAID-THRU-DATE-MM   (N2)
   3 PAID-THRU-DATE-DD   (N2)
* * * *   N O T E   F I L E  * * * * * * * * * * * * * * * * *
1 NT-V VIEW OF A-NOTES
  2 ID-NUMBER      (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NBR       (A6)
  2 NOTE-DATE      (N8/1)
  2 NOTE-TEXT      (A60/40)
*
  2 REDEFINE NOTE-TEXT             /* "IP" DEFINITION
   3 SCHOOL         (6)    /* MIL-ACAD/A-F-ACAD/AR ROTC/A-F ROTC/OCS/OTS
    4 GRAD-YEAR     (4)    /* CURR-YR/+1 YR/+2 YR/OTHER YR
     5 NUMBER-INTRO-MBRS (N5)
    4 FILL              (A40)
*
  2 REDEFINE NOTE-TEXT             /* "IP" PAGE 2 (HISTORY) DEFINITION
   3 SCHOOL-A       (6)    /* MIL-ACAD/A-F-ACAD/AR ROTC/A-F ROTC/OCS/OTS
    4 GRAD-YEAR-A   (10)    /* LAST 10 YEARS
     5 HIST-INTRO-MBRS      (P5)
     5 HIST-INTRO-MBRS-CONV (P5)
*
  2 REDEFINE NOTE-TEXT             /* "IS" DEFINITION
   3 IS-S-O-A       (40)   /* EACH 2 LINES IS A SOURCE-OF-APPL
    4 IS-SOURCE-CODE (A6)
    4 IS-SEQ         (N1)  /* 1-1ST 4 SCHOOLS    2-ARMY OCS AND A-F OTS
    4 IS-TOT-CNT     (P5)  /* TOTAL SOURCE COUNT
    4 IS-SCHOOL    (4)     /* MIL-ACAD/A-F-ACAD/AR ROTC/A-F ROTC
     5 IS-YEAR     (4)     /* CURR-YR/+1/+2/OTHER YEAR
      6 IS-NBR-INTRO-MBRS (P5)
    4 FILL-A            (A2)
* * * *   S O U R C E - O F - A P P L   F I L E   * * * * * * *
1 SA-V VIEW OF A-SOURCE-OF-APPL
  2 SOURCE-CODE-GROUP         (A1)
  2 SOURCE-CODE               (A6)
*
1 #COUNTERS
  2 #IP-REC-FOUND     (L)
  2 #IS-REC-FOUND     (L)
  2 #IP-REC-ISN       (P8)
  2 #IS-REC-ISN       (P8)
  2 #RECS-READ        (P5)
  2 #NOTE-NUM         (P6)
  2 #I-A              (P5/4)
  2 #I-F              (P5/4)
  2 #I-ACR            (P5/4)
  2 #I-FCR            (P5/4)
  2 #O-A              (P5/4)
  2 #O-F              (P5/4)
  2 #OTHERS           (P5/4)
  2 #CURR-CONVS       (P5/7)
  2 #COUNT-DELETED    (P5)
  2 #RECS-UPDT        (P5)
  2 #CNT              (P5)
  2 #I1               (I2)
  2 #I2               (I2)
  2 #I3               (I2)
  2 #I4               (I2)
  2 #I5               (I2)
  2 #SPACE-INDX       (I2)
  2 #UNKNOWN-INDX     (I2)
  2 #CONVERT-INDX     (I2)
*
1 #JCL-PARM       (A10)
1 REDEFINE #JCL-PARM
 2 #JCL-WEEKLY-MONTHLY (A7)     /* 'WEEKLY ' OR 'MONTHLY'
1 REDEFINE #JCL-PARM
 2 #JCL-MM            (N2)   /* DATE PARM 03/01/1999
 2 #JCL-X1            (A1)
 2 #JCL-DD            (N2)
 2 #JCL-X2            (A1)
 2 #JCL-YYYY          (N4)
*
1 #WEEKLY-MONTHLY (A7)
*
1 #IP-SCHOOL     (6)        /* ACCUMS FOR "IP" SCREEN (NX 800001)
 2 #IP-CNT       (P5/4)
*
1 #IS-S-O-A      (103)      /* ACCUMS FOR "IS" SCREEN (NX 800020/29)
 2 #IS-SOA       (A6)
 2 #IS-TOTAL-CNT (P5)
 2 #IS-SCHOOL    (6)
  3 #IS-CNT      (P5/4)
*
1 #TODAY-YYYYMMDD  (N8)
1 REDEFINE #TODAY-YYYYMMDD
  2 #TODAY-YYYY    (N4)
  2 #TODAY-MM      (N2)
  2 #TODAY-DD      (N2)
*
1 #CURR-IM-YYYY      (N4)
*
END-DEFINE
*
FORMAT LS=133 PS=76
WRITE  TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
                  'INTRODUCTORY MEMBER COUNTS UPDATE'
                   5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
READ WORK 1 ONCE RECORD #JCL-PARM
MOVE #JCL-WEEKLY-MONTHLY TO #WEEKLY-MONTHLY
READ WORK 1 ONCE RECORD #JCL-PARM
*
MOVE *DATN TO #TODAY-YYYYMMDD
*
IF #WEEKLY-MONTHLY = 'MONTHLY'
  MOVE #JCL-MM   TO #TODAY-MM
  MOVE #JCL-DD   TO #TODAY-DD
  MOVE #JCL-YYYY TO #TODAY-YYYY
END-IF
*
IF   (#TODAY-MM GE 09)
 AND (#TODAY-DD GE 01)
  COMPUTE #CURR-IM-YYYY = #TODAY-YYYY + 1
ELSE
  MOVE #TODAY-YYYY TO #CURR-IM-YYYY
END-IF
*
RESET #I1
READ SA-V BY SOURCE-CODE-GROUP FROM '9' THRU '9'
  ADD 1 TO #I1
  MOVE SOURCE-CODE TO #IS-SOA (#I1)
*
  IF #I1 GE 100
    WRITE 'EXCEEDED 100 SOURCE CODES - EXCESS IGNORED'
    ESCAPE BOTTOM
  END-IF
END-READ
*
COMPUTE #SPACE-INDX   = #I1 + 1
COMPUTE #UNKNOWN-INDX = #I1 + 2
MOVE '??????' TO #IS-SOA (#UNKNOWN-INDX)
COMPUTE #CONVERT-INDX = #I1 + 3
MOVE 'CONVRT' TO #IS-SOA (#CONVERT-INDX)
*
READ IM-V PHYSICAL
  IF PAID-THRU-DATE-YYYY LT #CURR-IM-YYYY
*   ADD 1 TO #COUNT-DELETED                           /* USED TO DELETE
*   WRITE ID-NUMBER 'DELETED =  ' PAID-THRU-DATE-YYYY /* ENTIRE YEAR
*   DELETE
*   END TRANSACTION
    ESCAPE TOP        /* DO NOT COUNT ANY UNCONVERTED RECS AFTER 9/1/XX
  END-IF
*
  ADD 1 TO #RECS-READ
*
  IF STATUS = 'I'
    DECIDE ON FIRST VALUE OF MIL-SERVICE
      VALUE 'A'   MOVE 1 TO #I1
      VALUE 'F'   MOVE 2 TO #I1
      VALUE 'ACR' MOVE 3 TO #I1
      VALUE 'FCR' MOVE 4 TO #I1
      NONE        MOVE 7 TO #I1
    END-DECIDE
  ELSE
    IF  STATUS = 'O'
      DECIDE ON FIRST VALUE OF MIL-SERVICE
        VALUE 'A'   MOVE 5 TO #I1
        VALUE 'F'   MOVE 6 TO #I1
        NONE        MOVE 7 TO #I1
      END-DECIDE
    ELSE
      MOVE 7 TO #I1
    END-IF
  END-IF
*
  IF PAID-THRU-DATE-YYYY = #CURR-IM-YYYY
    MOVE 1 TO #I2
  ELSE
    IF PAID-THRU-DATE-YYYY = #CURR-IM-YYYY + 1
      MOVE 2 TO #I2
    ELSE
      IF PAID-THRU-DATE-YYYY = #CURR-IM-YYYY + 2
        MOVE 3 TO #I2
      ELSE
        MOVE 4 TO #I2
      END-IF
    END-IF
  END-IF
*
  IF #I1 = 7
    WRITE 'INVALID STATUS OR MIL-SERVICE' ID-NUMBER STATUS MIL-SERVICE
    ESCAPE TOP                          /* IGNORE THIS RECORD
  ELSE
    ADD 1 TO #IP-CNT (#I1, #I2)      /* "IP" ACCUMULATION
  END-IF
*
  IF IM-V.INS-MODE NE 'N' /* MODE HAS BEEN ENTERED (INTENDS TO CONVERT)
    ADD 1 TO #IS-CNT       (#CONVERT-INDX, #I1, #I2) /* no longer done
    ADD 1 TO #IS-TOTAL-CNT (#CONVERT-INDX)
*
    IF #I2 = 1
      ADD 1 TO #CURR-CONVS (#I1)
    END-IF
*   IF PAID-THRU-DATE-YYYY NE 1990      /* TO FIND BAD MODE CASES
*     WRITE 'BAD CONVERT ' ID-NUMBER
*   END-IF
  END-IF
*
  IF IM-V.APPL-SOURCE = ' '
    ADD 1 TO #IS-CNT (#SPACE-INDX, #I1, #I2)    /* "IS" ACCUMULATION
    ADD 1 TO #IS-TOTAL-CNT (#SPACE-INDX)
  ELSE
    FOR #I3 1 TO 100
      IF  (IM-V.APPL-SOURCE = #IS-SOA (#I3))
       OR (#I3 = #UNKNOWN-INDX)
        ADD 1 TO #IS-CNT (#I3, #I1, #I2)        /* "IS ACCUMULATION
        ADD 1 TO #IS-TOTAL-CNT (#I3)
        ESCAPE BOTTOM
      END-IF
    END-FOR
  END-IF
END-READ
* * * * * * * * * * UPDATE "IP" NX 800001 RECORD * * * * * * * * * *
*
MOVE TRUE TO #IP-REC-FOUND
FIND (1) NT-V WITH ID-NUMBER = 800001
  IF NO RECORDS FOUND
    RESET #IP-REC-FOUND
    WRITE 'NO "IP" REC FOUND'
    ESCAPE BOTTOM
  END-NOREC
  MOVE *ISN TO #IP-REC-ISN
END-FIND
*
IF #IP-REC-FOUND
  GET NT-V #IP-REC-ISN
END-IF
*
FOR #I1 1 TO 6
  FOR #I2 1 TO 4
    MOVE #IP-CNT (#I1, #I2) TO NUMBER-INTRO-MBRS (#I1, #I2)
  END-FOR
END-FOR
MOVE *DATN TO NOTE-DATE (1)
*
IF #IP-REC-FOUND
  UPDATE (0247)
ELSE
  MOVE 800001 TO ID-NUMBER
  STORE NT-V
END-IF
END TRANSACTION
* * * * * * * * * * UPDATE "IP" HISTORY NX 800004 RECORD * * * * * *
*
MOVE TRUE TO #IP-REC-FOUND
FIND (1) NT-V WITH ID-NUMBER = 800004
  IF NO RECORDS FOUND
    RESET #IP-REC-FOUND
    RESET HIST-INTRO-MBRS      (*, *)
    RESET HIST-INTRO-MBRS-CONV (*, *)
    WRITE 'NO "IP" HISTORY REC FOUND'
    ESCAPE BOTTOM
  END-NOREC
  MOVE *ISN TO #IP-REC-ISN
END-FIND
*
IF #IP-REC-FOUND
  GET NT-V #IP-REC-ISN
END-IF
*
IF   (#WEEKLY-MONTHLY = 'MONTHLY')     /* SHIFT COLUMNS
 AND (#JCL-MM = 09)                /* ON AUGUST MONTH-END
 AND (#JCL-DD = 01)
  FOR #I1 1 TO 6
    FOR #I2 10 TO 2 STEP -1
      MOVE HIST-INTRO-MBRS      (#I1, #I2 - 1)
                                    TO HIST-INTRO-MBRS (#I1, #I2)
      MOVE HIST-INTRO-MBRS-CONV (#I1, #I2 - 1)
                                    TO HIST-INTRO-MBRS-CONV (#I1, #I2)
    END-FOR
*
    RESET HIST-INTRO-MBRS      (#I1, 1)
    RESET HIST-INTRO-MBRS-CONV (#I1, 1)
  END-FOR
END-IF
*
FOR #I1 1 TO 6
  MOVE #IP-CNT (#I1, 1) TO HIST-INTRO-MBRS (#I1, 1)
* BELOW STOPPED 7/98 (convs not done by mode changes)
* MOVE #CURR-CONVS (#I1) TO HIST-INTRO-MBRS-CONV (#I1, 1)
END-FOR
MOVE *DATN TO NOTE-DATE (1)
*
IF #IP-REC-FOUND
  UPDATE (0279)
ELSE
  MOVE 800004 TO ID-NUMBER
  STORE NT-V
END-IF
END TRANSACTION
* * * * * * * * * * UPDATE "IS" NX 800020/29 RECORDS  * * * * * * * * *
*
MOVE 800019 TO #NOTE-NUM     /* TO BEGIN AT 800020
RESET #I4                    /* TO ACCESS SOA-TABLE
REPEAT
  MOVE TRUE TO #IS-REC-FOUND
  ADD 1 TO #NOTE-NUM
  FIND (1) NT-V WITH ID-NUMBER = #NOTE-NUM
    IF NO RECORDS FOUND
      RESET #IS-REC-FOUND
      WRITE 'NO "IS" 800020 REC FOUND'
      ESCAPE BOTTOM
    END-NOREC
    MOVE *ISN TO #IS-REC-ISN
  END-FIND
*
  IF #IS-REC-FOUND
    GET NT-V #IS-REC-ISN
  END-IF
*
  RESET IS-SOURCE-CODE (*)
  RESET IS-SEQ         (*)
  RESET IS-TOT-CNT     (*)
  RESET IS-NBR-INTRO-MBRS (*, *, *)
*
  FOR #I1 1 TO 40
    ADD 1 TO #I4
*
    IF  (#I4 GT #CONVERT-INDX)
     OR (#I4 GT 103)
      ESCAPE BOTTOM
    END-IF
*
    MOVE #IS-SOA       (#I4) TO IS-SOURCE-CODE (#I1)
    MOVE #IS-TOTAL-CNT (#I4) TO IS-TOT-CNT     (#I1)
    MOVE 1 TO IS-SEQ (#I4)
    FOR #I2 1 TO 4
      FOR #I3 1 TO 4
       MOVE #IS-CNT (#I4, #I2, #I3) TO IS-NBR-INTRO-MBRS (#I1, #I2, #I3)
      END-FOR
    END-FOR
*
    ADD 1 TO #I1
    MOVE #IS-SOA (#I4) TO IS-SOURCE-CODE (#I1)
    MOVE 2 TO IS-SEQ (#I4)
    MOVE 4 TO #I5
    FOR #I2 1 TO 2
      ADD 1 TO #I5
      FOR #I3 1 TO 4
       MOVE #IS-CNT (#I4, #I5, #I3) TO IS-NBR-INTRO-MBRS (#I1, #I2, #I3)
      END-FOR
    END-FOR
  END-FOR
  MOVE *DATN TO NOTE-DATE (1)
*
  IF #IS-REC-FOUND
    UPDATE (0329)
  ELSE
    MOVE #NOTE-NUM TO ID-NUMBER
    STORE NT-V
  END-IF
  END TRANSACTION
*
  IF #I4 GE #CONVERT-INDX
    ESCAPE BOTTOM
  END-IF
END-REPEAT
*
WRITE     'TOT-RECS-READ        = ' #RECS-READ
WRITE     'TOT-RECS-DELETED     = ' #COUNT-DELETED
*
END
