* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNEMP1'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   null
*   using PARSE XML statement and datastructure 'AUCAEM01'
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
1 #XML_OUTPUT            (A) DYNAMIC        /* Out
LOCAL USING AUCAEM01
LOCAL USING PARSER-X
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY (L)
*
LOCAL
1 #LEN              (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 #NATURAL-ERROR    (I4) CONST <-3>
1 #ERROR-LOG        (I4) CONST <3>
*
1 #GEN-KEY           (A4)
1 GEN-TABLE-V VIEW OF A-GEN-TABLE
  2 GEN-KEY (A4)
  2 GEN-SUB-KEY (A3)
  2 GEN-ALPHA-VALUE (A50)
1 #CX                          (I4)
END-DEFINE
*
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  ErrorCode := #Parse-error
  ErrorDescription := 'Empty search data XML'
  CALLNAT 'AUCNEMS1' #XML_OUTPUT Email
  ESCAPE ROUTINE
END-IF
RESET Email
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
ErrorCode := #PARSE-ERROR
ErrorDescription := XML_PARSER_ERROR_TEXT
CALLNAT 'AUCNEMS1' #XML_OUTPUT Email
END-SUBROUTINE
*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE
*
CALLNAT 'AUCNEMM1' Email               /* Manage email
CALLNAT 'AUCNEMS1' #XML_OUTPUT Email   /* Send back manage email result
*
* ------------------------------------------------- CALL THE PARSER
DEFINE PARSE-DOCUMENT
/*     ==============
* PARSE XML #XML_INPUT INTO PATH #XML_PATH NAME #XML_NAME VALUE XML_PARSER_CONTENT
*
DECIDE ON FIRST #XML_PATH
  VALUE 'Email//'
    IGNORE
  VALUE 'Email'
    RESET INITIAL Email
  VALUE 'Email/ActionType//'
    IGNORE
  VALUE 'Email/ActionType'
    IGNORE
  VALUE 'Email/ActionType/$'
    Email.ActionType := VAL(#XML_VALUE)
  VALUE 'Email/ErrorCode//'
    IGNORE
  VALUE 'Email/ErrorCode'
    IGNORE
  VALUE 'Email/ErrorCode/$'
    Email.ErrorCode := VAL(#XML_VALUE)
  VALUE 'Email/ErrorDescription//'
    IGNORE
  VALUE 'Email/ErrorDescription'
    IGNORE
  VALUE 'Email/ErrorDescription/$'
    Email.ErrorDescription := #XML_VALUE
  VALUE 'Email/ContactID//'
    IGNORE
  VALUE 'Email/ContactID'
    IGNORE
  VALUE 'Email/ContactID/$'
    Email.ContactID := VAL(#XML_VALUE)
  VALUE 'Email/CN//'
    IGNORE
  VALUE 'Email/CN'
    IGNORE
  VALUE 'Email/CN/$'
    Email.CN := VAL(#XML_VALUE)
  VALUE 'Email/LastUpdatedDate//'
    IGNORE
  VALUE 'Email/LastUpdatedDate'
    IGNORE
  VALUE 'Email/LastUpdatedDate/$'
    Email.LastUpdatedDate := VAL(#XML_VALUE)
  VALUE 'Email/LastUpdatedTime//'
    IGNORE
  VALUE 'Email/LastUpdatedTime'
    IGNORE
  VALUE 'Email/LastUpdatedTime/$'
    Email.LastUpdatedTime := VAL(#XML_VALUE)
  VALUE 'Email/SystemSource//'
    IGNORE
  VALUE 'Email/SystemSource'
    IGNORE
  VALUE 'Email/SystemSource/$'
    Email.SystemSource := #XML_VALUE
  VALUE 'Email/User//'
    IGNORE
  VALUE 'Email/User'
    IGNORE
  VALUE 'Email/User/$'
    Email.User := FUNCTION-WEB-USER(<#XML_VALUE>)(2)
  VALUE 'Email/EmailID//'
    IGNORE
  VALUE 'Email/EmailID'
    IGNORE
  VALUE 'Email/EmailID/$'
    Email.EmailID := VAL(#XML_VALUE)
  VALUE 'Email/EmailPreferred//'
    IGNORE
  VALUE 'Email/EmailPreferred'
    IGNORE
  VALUE 'Email/EmailPreferred/$'
    Email.EmailPreferred := #XML_VALUE
  VALUE 'Email/EmailType//'
    IGNORE
  VALUE 'Email/EmailType'
    IGNORE
  VALUE 'Email/EmailType/$'
    Email.EmailType := #XML_VALUE
  VALUE 'Email/EmailAddress//'
    IGNORE
  VALUE 'Email/EmailAddress'
    IGNORE
  VALUE 'Email/EmailAddress/$'
    Email.EmailAddress := #XML_VALUE
  VALUE 'Email/Remarks//'
    IGNORE
  VALUE 'Email/Remarks'
    IGNORE
  VALUE 'Email/Remarks/$'
    Email.Remarks := #XML_VALUE
  VALUE 'Email/ShowRemarks//'
    IGNORE
  VALUE 'Email/ShowRemarks'
    IGNORE
    IF #XML_VALUE = 'TRUE'
      Email.ShowRemarks := 'Y'
    ELSE
      Email.ShowRemarks := 'N'
    END-IF
  VALUE 'Email/EmailUndeliverable//'
    IGNORE
  VALUE 'Email/EmailUndeliverable'
    IGNORE
    IF #XML_VALUE = 'TRUE'
      Email.EmailUndeliverable := 'Y'
    ELSE
      Email.EmailUndeliverable := 'N'
    END-IF
  VALUE 'Email/EmailStatus//'
    IGNORE
  VALUE 'Email/EmailStatus'
    IGNORE
  VALUE 'Email/EmailStatus/$'
    Email.EmailStatus := #XML_VALUE
  VALUE 'Email/EmailStatusDate//'
    IGNORE
  VALUE 'Email/EmailStatusDate'
    IGNORE
  VALUE 'Email/EmailStatusDate/$'
    Email.EmailStatusDate := VAL(#XML_VALUE)
  VALUE 'Email/EmailStartDate//'
    IGNORE
  VALUE 'Email/EmailStartDate'
    IGNORE
  VALUE 'Email/EmailStartDate/$'
    Email.EmailStartDate := VAL(#XML_VALUE)
  VALUE 'Email/EmailEndDate//'
    IGNORE
  VALUE 'Email/EmailEndDate'
    IGNORE
  VALUE 'Email/EmailEndDate/$'
    Email.EmailEndDate := VAL(#XML_VALUE)
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
