* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
* ----------------------------------------------------------------------
* Generated from NFN XML TOOLKIT
*
*   'AUCNPCP1'
*
* DESCRIPTION
*   XML Parser implementationfor file:
*   C:\Users\nguentchev\workspace96\PolicyOwnership\Natural-Libraries\AUCPO\PolicyContacts.xsd
*   using PARSE XML statement and datastructure 'AUCAPCNT'
*
* ----------------------------------------------------------------------
*
DEFINE DATA PARAMETER
1 #XML_INPUT             (A) DYNAMIC BY VALUE
1 #XML_OUTPUT            (A) DYNAMIC        /* Out
LOCAL USING AUCAPCNT
LOCAL USING PARSER-X
*
LOCAL
1 #XML_PATH             (A) DYNAMIC
1 #XML_VALUE            (A) DYNAMIC
1 #XML_NAME             (A) DYNAMIC
1 #PREV_PARSE-TYPE      (A1)
1 #CX                          (I4)
1 #CY                          (I4)
1 #XML_PREFIX                  (A/1:1) DYNAMIC INIT <
  'i:' >
1 XML_PARSER_XPATH_TYPE (A1)
1 XML_PARSER_ERROR_TEXT (A253)
1 XML_PARSER_RESPONSE   (I4)
1 XML_PARSER_CONTENT_IS_EMPTY (L)
1 #LEN              (I4)
1 #PARSE-ERROR      (I4) CONST <-7>
1 #GET              (I4) CONST <0>
1 #ADD              (I4) CONST <2>
1 #UPDATE           (I4) CONST <2>
1 #DELETE           (I4) CONST <4>
END-DEFINE
*
RESET PolicyContacts
ASSIGN #LEN := *LENGTH (#XML_INPUT)
IF #LEN <= 0
  PolicyContacts.ErrorCode := #PARSE-ERROR
  PolicyContacts.ErrorDescription := 'Empty search data XML'
  CALLNAT 'AUCNDSS1' #XML_OUTPUT PolicyContacts
  ESCAPE ROUTINE
END-IF
*
INCLUDE PARSER_X '#XML_INPUT'       /* XML file to be parsed
  '#XML_PATH'                       /* XPATH to represent element...
  'XML_PARSER_XPATH_TYPE'           /* Type of callback
  '#XML_VALUE'                      /* Content of element found
  'XML_PARSER_CONTENT_IS_EMPTY'     /* Is TRUE if element is empty
  'XML_PARSER_ERROR_TEXT'           /* error Message
  'XML_PARSER_RESPONSE'             /* Error NR; 0 = OK
/*
DEFINE SUBROUTINE PARSER_ERROR
/*                ============
PolicyContacts.ErrorCode := #PARSE-ERROR
PolicyContacts.ErrorDescription := XML_PARSER_ERROR_TEXT
CALLNAT 'AUCNPCS1' #XML_OUTPUT PolicyContacts
END-SUBROUTINE
/*
DEFINE SUBROUTINE CALLBACK
/*                ========
IF XML_PARSER_CONTENT_IS_EMPTY THEN
  IGNORE
ELSE
  #XML_VALUE := *TRIM (#XML_VALUE)
  MOVE *TRANSLATE(#XML_VALUE, UPPER) TO #XML_VALUE
  PERFORM PARSE-DOCUMENT
END-IF
END-SUBROUTINE



* ----------- CALL THE PARSER
DEFINE SUBROUTINE PARSE-DOCUMENT
*
DECIDE ON FIRST #XML_PATH
  VALUE 'PolicyContacts//'
    IGNORE
  VALUE 'PolicyContacts'
    RESET INITIAL PolicyContacts
  VALUE 'PolicyContacts/ActionType//'
    IGNORE
  VALUE 'PolicyContacts/ActionType'
    IGNORE
  VALUE 'PolicyContacts/ActionType/$'
    PolicyContacts.ActionType := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/ErrorCode//'
    IGNORE
  VALUE 'PolicyContacts/ErrorCode'
    IGNORE
  VALUE 'PolicyContacts/ErrorCode/$'
    PolicyContacts.ErrorCode := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/ErrorDescription//'
    IGNORE
  VALUE 'PolicyContacts/ErrorDescription'
    IGNORE
  VALUE 'PolicyContacts/ErrorDescription/$'
    PolicyContacts.ErrorDescription := #XML_VALUE
  VALUE 'PolicyContacts/ContactID//'
    IGNORE
  VALUE 'PolicyContacts/ContactID'
    IGNORE
  VALUE 'PolicyContacts/ContactID/$'
    PolicyContacts.ContactID := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyNumber//'
    IGNORE
  VALUE 'PolicyContacts/PolicyNumber'
    IGNORE
  VALUE 'PolicyContacts/PolicyNumber/$'
    PolicyContacts.PolicyNumber := #XML_VALUE
  VALUE 'PolicyContacts/SystemSource//'
    IGNORE
  VALUE 'PolicyContacts/SystemSource'
    IGNORE
  VALUE 'PolicyContacts/SystemSource/$'
    PolicyContacts.SystemSource := #XML_VALUE
  VALUE 'PolicyContacts/PolicyContact//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact'
    ADD 1 TO PolicyContacts.C@PolicyContact
    #CX := PolicyContacts.C@PolicyContact
    EXPAND ARRAY PolicyContacts.PolicyContact TO (1:#CX)
  VALUE 'PolicyContacts/PolicyContact/ContactID//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/ContactID'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/ContactID/$'
    PolicyContacts.ContactID_001(#CX) := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyContact/CN//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/CN'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/CN/$'
    PolicyContacts.CN(#CX) := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyContact/DOB//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/DOB'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/DOB/$'
    PolicyContacts.DOB(#CX) := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyContact/ContactName//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/ContactName'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/ContactName/$'
    PolicyContacts.ContactName(#CX) := #XML_VALUE
  VALUE 'PolicyContacts/PolicyContact/Roles//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole'
    ADD 1 TO PolicyContacts.C@PolicyRole(#CX)
    #CY := PolicyContacts.C@PolicyRole(#CX)
    EXPAND ARRAY PolicyContacts.PolicyRole TO (*,1:#CY)
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/ID//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/ID'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/ID/$'
    PolicyContacts.ID(#CX,#CY) := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/Name//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/Name'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/Name/$'
    PolicyContacts.Name(#CX,#CY) := #XML_VALUE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedDate//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedDate'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedDate/$'
    PolicyContacts.LastUpdatedDate(#CX,#CY) := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedTime//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedTime'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedTime/$'
    PolicyContacts.LastUpdatedTime(#CX,#CY) := VAL(#XML_VALUE)
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedUser//'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedUser'
    IGNORE
  VALUE 'PolicyContacts/PolicyContact/Roles/PolicyRole/LastUpdatedUser/$'
    PolicyContacts.LastUpdatedUser(#CX,#CY) := #XML_VALUE
  NONE
    IGNORE
END-DECIDE
*
END-SUBROUTINE
*
END
