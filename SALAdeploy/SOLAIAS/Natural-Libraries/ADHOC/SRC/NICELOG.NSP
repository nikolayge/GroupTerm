* >Natural Source Header 000000
* :Mode S
* :CP
* <Natural Source Header
/** New Program NICELOG.
/**
/** :author nguentchev
/* 
define data 
local
1 keys (a/4) dynamic init <
  'http://dynamicswebapi',
  'Natural',
  'Service response:',
  '->'
  >
1 current-key (a) dynamic
1 log-message (a) dynamic
1 nice-log    (a5000) 
1 startp      (i4)
1 endp        (i4)
1 text-length (i4)
1 log-record  (a) dynamic
1 log-length  (i4)
1 #eof        (l)
1 j           (i4)
1 #only-test  (a60)
end-define
/*  WRITE WORK FILE 1 VARIABLE LOG-MESSAGE

DEFINE WORK FILE 12 "/usr/SAG/tmp/LW_LOG20180430.log" TYPE "UNFORMATTED" 
DEFINE WORK FILE 11 "/usr/SAG/tmp/LW_Nice.log" TYPE "ASCII-COMPRESSED"                                    

reset text-length
j := 1
perform read-input
log-message := log-record

repeat until #eof

  current-key := keys(j)
  examine log-message for current-key giving position startp

  add 1 to j
  if j > 4
    j := 1
  end-if
  current-key := keys(j) 
  examine log-message for current-key giving position endp

  if endp > startp
    perform nice-log-line
  else
/*    text-length := log-length - startp
/*    log-message := substr(log-message,endp,text-length)
    perform read-input
    if #EOF escape top end-if
    compress log-message log-record into log-message
    log-length := *length(log-message)
    startp := 1
    examine log-message for current-key giving position endp

    repeat until endp > startp
        or #EOF
      perform read-input
      compress log-message log-record into log-message
      log-length := *length(log-message)
      examine log-message for current-key giving position endp

      #only-test := log-message
      print 'new log' '=' log-length #only-test

    end-repeat
    perform nice-log-line
  end-if

end-repeat

define nice-log-line
/*     -------------
text-length := endp - startp
nice-log := substr(log-message,startp,text-length)
**print nice-log
WRITE WORK FILE 11 VARIABLE nice-log                               

text-length := log-length - endp
log-message := substr(log-message,endp,text-length)
log-length := *length(log-message)

* #only-test := log-message
* print '=' log-length #only-test

end-subroutine

define subroutine read-input
/*                ----------
read work file 12 once and select log-record
  at end of file
    #eof := true
    reset log-record
    escape routine
  end-endfile
  log-length := *length(log-record)
  end-subroutine

END
