* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* PGM-ID: C2300PCI
* CONV LTD = CONV an LT pol to (d)ecr prem to lower refnd
***********
*  MODIFICATION LOG
* USER DATE    TAG REASON
* PAM 06232004     Allow DEAD for PULT pols w reduced DB
* DRW 09292004     Add Credit Card Processing
* PAM 10122004     Allow CONV for rated Policies
* PAM 10192004     Allow CONV from LTII to LT and vice versa
* DRW 12162004     CSV Splits not allowed on Flex Pol
* PAM 01052005 PM5 Change term conv edit
* PAM 02152005 PM6 REIN 1099 REMINDER
* DRW 02182005 DW7 Remove FPF & BADJ on all RSGN's
* DRW 03042005 DW8  Add AL (Annuity Life) PROCESSING
* DRW 03312005 DW9  LAP/RSGN invalid w cash-valu (later chged 8/2005)
* DRW 04292005 DW10 Add DOB processing to GMAXSXX
* DRW 05162995 DW11 Add SEX to GPREMSXX linkage
* DRW 05262995 DW12 Modify PD-TO-DATE test & test for NXT
* DRW 06222005 PM13 Max age for AL is 99
* PAM 08042005 PM14 Modify conversion paid-to-date check
* DRW 08082005 DW15 Disallow terminations with BADJ/FPF
* DRW 09092005 DW16 No CSV with TERM
* PAM 09212005 PM17 Added replacement policy resignations
* PAM 10142005 PM18 Allow mode 'E' to be changed
* SAG 11012005 RH1  AB - Replace CALL to Cobol with CALLNAT to Natural
* PAM 01182006 PM19 Fix issue date edit for term conversion
* PAM 02082006 PM20 Adjust FPF/BADJ process
* DRW 04192006 DW21 Set Alot-sw for AFSC interface processing
* DRW 04222006 DW22 Add NX/NS Processing for Interface- 6/14 added more
* PAM 05222006 PM23 Do not check face amount for RPU'd policies
* DRW 04092007 DW24 Allow Mult of 1K for CSV splits
* DRW 04102007 DW25 Only Exclude CSV Splits if 1035 Exch or Lump Pmt
* YAK 12042007  YK1 Remove hardcording for interest rates
*                   (Read GEN-TABLE through OBJNGENT)
* DRW 01/07/2008 DW26 Fix #IFL Index problem on LT RT Conv Test
* YAK 02/05/2008 YK2  Change code to use FUNCTION-INT-RATE
*                         to get rate from GEN-TABLE
* DRW 02/14/2008 DW27 Add Tran Code "ANNU"
* DRW 03/14/2008 DW28 Do not clear ACV ADJUST on a CONV
* DRW 04/16/2008 DW29 Do Not allow CSV on Cap member with Fixed Loan
* DRW 05/21/2008 DW30 Set ALOT-CHG-AUTH 'N' to "A" if alot amt chged
* DRW 06/05/2008 DW31 ADD #did-rein to C2320PCI linkage
* PAM 06/17/2008 PM32 Adjust MD entry for "ANNU" code - see DW27
* DRW 08/21/2008 DW33 Gen Plus Processing
* PAM 03/03/2009 PM34 Remove prenote process - P/D/L goes straight to draft
* YAK 05/20/2009 YK3  Check Credit card info on the CC-INFO file
* YAK 03/12/2010 YK4  Add BILL-PAYER field to Global Variable and map
* RSE 04/20/2010 RE1  Enable PF4 to view Member's Contact info
* PAM 07/23/2010 PM35 Added LAPC to cash value error message
* PAM 08/11/2010 PM36 Allow AJT to convert LTII plans
* PAM 08/18/2010 PM37 Added temporary pop-up for deaths with allotment
*                     paying policies
* BZ  09/16/2010 bz1  (--db) Print death claims report (cont.  09/29 )
* BZ  10/05/2010 bz2   Change Name source to contacts
* YAK 09/24/2012 YK5  Add RENEW-FLAG field to Global Variable and map
*                     Replace multiple IF with DECIDE statement
*                     Use function to identify Term plans
* NG  12/15/2012 NG1  Add 'EZ' to valid plans
* YAK 01/10/2013 YK6  Add business rules for EZ term
* YAK 02/19/2013 YK7  Add Accelerated Death Benefit payment process for EZ Term plan
* YAK 06/19/2013 YK8  Pass premium refund from C2302PCI (for RSGN) to C2320/C2316PCI
*                     using X-BILL-DOLLAR field. Add edit to use RSGN only for term policies
*                     Allow to have Billing adjustments on an account and include in calculation
*                     Pass time to C2301/C2302/C2320/C2316PCI to write transactions
*                     (TA interprets transactions combining by time)
*                     Replace *DATN with #DATN calling internal function once
*                     Replace '9' counter with C*ACTIVE-SEGMENTS counter from database.
* NG  20130726   NG2  Address normalization
* YAK 20131022   YK9  Open Renew flag for all term policies
* YAK 20131127   YK10 Allow RSGN transaction for SO plans
* vxt 12/09/2013 vt1  fix production error
* TMT 01/13/2014 TT1  1MIL POLICY SUPPORT
* TMT 01/16/2014 TT2  GP2 POLICY SUPPORT
* vxt 03/21/2014 vt2  fix 1305 error
* vxt 04/04/2014 vt3  /Ticket 2702/
* TMT 06/11/2014 TT3  Contact Normalization - DOB and sex
* vxt 07/10/2014 vt4  Allow Cliff and Gail to change the status.
* NGG 09/17/2014 NG3  MS STATISTICS
* NGG 20141023   NG4  Multiple annuity products
* vxt 03/20/2015 vt5  /Ticket 3399/
* vxt 04/07/2015 VT6  /Ticket 3446 /Block message for LAPS when there is a badj or db/cr or trmf  amount
* vxt 01/12/2016 vt7 /Ticket 4136/ Block DEAD when the designation is not validated
* vxt 01/20/2016 vt8 /Ticket 4162/ Fix the issue with reseting the NUMBER-MEMBERSHIP field during the reinstatement of the policy.
* vxt 04/07/2016 vt9 /Ticket 4401 -add apop-up screen for mec policies'
* vxt 10/18/2016 vt10 /Ticket 4717 - add a message blocking LAPC transaction for VAWL policies with CAP loan/
* vxt 10/19/2016 vt11 /Ticket 4335/
* vxt 12/21/2016 vt12 /Ticket 2122/ Remove code related to ticket 4335
* vxt 02/13/2017 vt13 /Ticket-2494/- Block execution of CVS/LAPx/RSGN/CVEX/ANNU when owner SSN is not populated.
* vxt 02/17/2017 vt14 /Ticket 2099/ - Reset total premiums paid for LT to RT convirsions.
* vxt 05/26/2017 vt15 New Group Term plan
* bz-Name-C 07/07/2017     Fine Names. Keep all capital
* vxt 08/08/2017 vt16 /Ticket 5006/
* vxt 02/21/2018 vt17 /Ticket 6299/
* vxt 03/26/2018 vt18 /Ticket 8270/
************************************************************************
DEFINE DATA
GLOBAL USING BCOMMGXX WITH MASTER-BLOCK.CI-BLOCK
LOCAL USING GONERLXX
LOCAL USING C2300LCI
LOCAL USING GC2V6LXX
LOCAL USING CONTPDA1                           /* TT3
LOCAL
1 #PlanCodes (A3/16) init <
  'OL' ,
  '20P',
  '30P',
  '7P',
  'GPL',
  'GP2' ,
  'EZ'    ,
  'RT' ,
  'LT' ,
  'SO' ,
  'FSO' ,
  'GT1'
  >
* 1 #CURR-VAR-INT-RATE (P2.3) INIT <8.10>       /* YK1
1 #CURR-VAR-INT-RATE (P2.3)                     /* YK1
1 #PROGRAM           (A8)                       /* NG3
1 #USE-TIMX          (L) INIT <TRUE>            /* NG3
1 #SCR-TRAN-OLD      (A4/9)                     /* NG3
1 #FORCE-A              (L)       /* DW30
1 #SUFFIX      (A3)    /* DW25
1 #MAX-7-PAY   (P6.2)
1 #MEC-PREMS-PAID-TO-DATE (P7.2)                /* TT1
1 #EXCEEDS-MEC (P7.2)                           /* TT1
1 #1035-NX     (A60)
1 #1035-EXCH-AMT  (P6.2)
1 #LUMP-PMT  (P6.2)
1 #AP-PREMS-PAID (P7.2)
1 #HAS-1035-LUMP-SUM (L)     /* DW25
*
1 #SFX     (I2)
1 #NX-IND  (A1)
1 #NS-ISS-DT    (N8/9)
1 REDEFINE #NS-ISS-DT
  2 #NS-ISS-DT-OCC (9)
    3 #NS-ISS-DT-A (A8)
1 #NS-TRAN      (A4/9)
1 #ADJ (P5.2)
1 #IS-NXT (L)  /* DW12
1 #YN     (A1)
1 #SUBTYPE (A1)
1 #MULTIPLE-OWNER (L)
1 #NON-INS-OWNER (L)
1 #OWNER-OCC-9 (9)
  2 #OWNER-FLAG (A1)
  2 #OWNER-CN (N6/10)
  2 #OWNER-CN-BY-POL (N6)
  2 #OWNER-CN-SEG (I2/9)
  2 #ISS-DATE (N8/9)
  2 #ISS-DATE-DISP (A10/9)
  2 #BENE-TYPE (A1/2)
  2 #BENE-TEXT (A60/10)
*
1 #MEC-IND (A9)
1 REDEFINE #MEC-IND
  2 #MEC-IND-X (A1/9)
*
1 #SCR-MEC-IND (A9)
1 REDEFINE #SCR-MEC-IND
  2 #SCR-MEC-IND-X (A1/9)
*
1 #DUES-ADJ (N3.2)
1 REDEFINE #DUES-ADJ
  2 #DUES-ADJ-A (A5)
*
1 #FPF-ADJ (N7.2)    /* PM20
1 REDEFINE #FPF-ADJ  /* PM20
  2 #FPF-ADJ-A (A9)   /* PM20
*
1 #STORE-FLAGS (A2)
1 REDEFINE #STORE-FLAGS
  2 #STORE-PROCESS-IND (A1)
  2 #STORE-INTRO-FLAG (A1)
1 #PLAN-3 (A3)
1 REDEFINE #PLAN-3
  2 #PLAN-3-A1 (A1)
  2 #PLAN-3-N2 (N2)
1 #SCR-VAR-TERM (L)
1 #FIL-VAR-TERM (L)
1 #Y-N (A1)
*
1 VA-V VIEW OF A-VA-HISTORY
  2 YEAR-MONTH-M (P7/13)
  2 PREMIUM-M (13)
  2 ACCUM-CASH-VALUE-M (13)
  2 INTEREST-M (13)
  2 COST-OF-INSURANCE-M (13)
  2 PRORAT-LOAN-BAL-M (13)
  2 PRORAT-LN-ACC-INT-M (13)
*
1 #PREV-ACV (P7.2)
1 #NEW-ACV  (P7.2)
1 #ACV-DIFF (P7.2)
1 #REAL-PREM (N6.2)
1 #I4 (I2)
*
1 #HIST-KEY (N15)
1 REDEFINE #HIST-KEY
  2 #HIST-KEY-ID  (N6)
  2 #HIST-KEY-ISS (N8)
  2 #HIST-KEY-SPL (N1)
*
1 #DIVIDEND (N5.4)
1 REDEFINE #DIVIDEND
  2 #DIV-5 (N5)
  2 #REM (N4)
*
1 #DIVIDEND-CSV (N5.4)
1 REDEFINE #DIVIDEND-CSV
  2 #DIV-5-CSV (N5)
  2 #REM-CSV (N4)
*
1 TR-V VIEW OF A-TRANSACTION-REGISTER
  2 ID-NUMBER (N6)
  2 PROCESS-IND (A1)
  2 NAME (A25)
  2 DATE-LAST-UPDATE (N8)
  2 TERMINAL-ID (A8)
  2 CLERK-ID (A3)
  2 TRANSACTION-DATN (P9)
  2 TRANSACTION-TIMN (P7)
  2 OLD-DATA (A125/20)
  2 NEW-DATA (A125/20)
  2 SYNC-FLD-NUM      (60)
  2 SYNC-FLD-OLD-DATA (60)
  2 SYNC-FLD-NEW-DATA (60)
*
1 stat view of a-status                  /* vt13  \/
  2 id-number
  2 policy-id (a16/9)
  2 issue-date (n8/9)                    /* vt13 \/

*
1 ST-V VIEW OF A-STATUS
  2 MEMBER-CONTACT-ID
  2 PROCESS-IND
  2 PAD-CODE
* 2 CC-NUM                             /* YK3
  2 NAME
  2 INTRO-FLAG
  2 ALOT-SW
  2 MILITARY-STATUS
  2 ALOT-CHG-DATE
  2 CHIEF-OF-STAFF-IND
  2 DUES-FPF
  2 DUES-BALANCE
  2 FACE-AMOUNT (9)                   /* YK7
  2 ANNUAL-PREM (9)                   /* YK7
  2 DEATH-BENEFIT (9)                 /* YK7
  2 X-FIRST-PLACE-FEE (9)
  2 X-BILL-ADJUST (9)
  2 X-BILL-DOLLAR (9)
  2 PLAN (9) /* PM19
  2 PAY-NOW-SWITCH
  2 PREM-RATING (9)
  2 X-LOAN-DATE (9)
  2 REDEFINE X-LOAN-DATE
    3 X-LOAN-DATE-OCC (9)
      4 X-LOAN-DATE-YYYY (N4)
      4 X-LOAN-DATE-MM (N2)
      4 X-LOAN-DATE-DD (N2)
  2 X-LOAN-DATE-2 (9)
  2 REDEFINE X-LOAN-DATE-2
    3 X-LOAN-DATE-OCC-2 (9)
      4 X-LOAN-DATE-YYYY-2 (N4)
      4 X-LOAN-DATE-MM-2 (N2)
      4 X-LOAN-DATE-DD-2 (N2)
  2 X-LOAN-AMOUNT (9)
  2 X-LOAN-AMOUNT-2 (9)
  2 X-ACCUM-INTEREST (9)
  2 X-ACCUM-INTEREST-2(9)
  2 X-NXT-YR-ACCUM-INT(9)
  2 X-NXT-YR-ACCUM-INT-2(9)
  2 X-INTEREST-RATE (9)
  2 X-ALT-LP-IND (9)
  2 X-ALT-LP-AMT (9)
  2 X-ALT-LP-IND-2 (9)
  2 X-ALT-LP-AMT-2 (9)
  2 MEC-IND (9)
  2 debit-credit-amt                  /* VT6
  2  OUT-TERM-REF-AMOUNT (10)         /* VT6
  2 status (9)                        /* vt7   \/
  2 policy-id (9)
*
1 POS-V VIEW OF A-POLICY-CONTACTS
  2 POLICY-NUMBER (A16)
  2 CONTACT-ID (N8.0)
  2 RELATION   (N2.0)
  2 designation-id
*
1 designation VIEW OF A-DESIGNATION
  2 STATUS-CODE (A1)
  2 DESIGNATION-ID (N8)              /* vt7 /\
*
1 #k      (i2)                        /* VT6
1 #trmf-amt   (n7.2)                  /* VT6

1 #CAT-X (I2)
1 #GL-X (I2)
1 #TO-INIT (A3)
1 #HOLD-SUFFIX (A3)
1 #POL-AFT-7-1-2000 (L)
1 #OLD-STAT-XXXX  (A4)
1 #UPDATE-ST (L)
1 #SECURITY-ERROR (L)
1 #FIRST-TIME (L) INIT <TRUE>
1 #NUM-SEGS (P2)
1 #CURR-CSV (P7.2)
1 #CURR-ACCUM-INT (P5.2)
1 #SCR-MEC-POL (A16)
*
1 #IM (I1)
1 #HOLD-OLD-MEMSHIP (N1)
*
1 #HOLD-ISN (P8)
1 #HOLD-ISC (I2)
1 #HOLD-IFL (I2)
*
1 #YYYYMMDD (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY (N4)
    3 #MM (N2)
  2 #DD (N2)
*
1 #WYYYYMMDD
  2 #WYYYY (N4)
  2 #WMM (N2)
  2 #WDD  (N2)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMMDD-N (N8)
1 REDEFINE #WYYYYMMDD
  2 #WYYYYMM-N (N6)
  2 #WDD-N (N2)
*
1 #WMMDDYYYY
  2 #WMM (N2)
  2 #WDD (N2)
  2 #WYYYY (N4)
1 REDEFINE #WMMDDYYYY
  2 #WMMDDYYYY-A (A8)
*
1 #WMMYYYY
  2 #WMM (N2)
  2 #WYYYY (N4)
1 REDEFINE #WMMYYYY
  2 #WMMYYYY-A (A6)
*
1 #COST-BASIS-CV (C)
1 #RENEW-FLAG-CV (C/9)                  /* YK5
1 #PUR-MBRS (N2)
1 #INVALID (L)
1 #FORCED-PRORATION (L)
1 #TOT-PCT (P3)
1 #ERR-MSG (A60)
1 #TEXT (A78)
1 #PAY-STAT-XX (A2)
1 #HOLD-TIME (N7)                       /* YK8
1 #WORK-FREQ (P2)
1 #DAILY-INT-RATE (P0.7)
1 #TOT-CSV (P7.2)
1 #TOT-FACE (P7.2)
1 #TOT-FACE-TERM (P7.2)
1 #WORK-FACE (P7.2)
1 #MAX-FACE-TOTAL (P7.2)
1 #MAX-FACE-TERM (P7.2)
1 #OVERRIDE-MAX-FACE-TOTAL (P7.2)
1 #OVERRIDE-MAX-FACE-TERM  (P7.2)
*
1 #PREM-6-2 (N7.2)                    /* vt1 was n6.2
1 #WORK-MONTHS (P3)
1 #WORK-AMT (P5.2)
1 #CURR-DAYS (P2)
*
1 #PLAN-A3 (A3)
1 REDEFINE #PLAN-A3
  2 #PLAN-A2 (A2)
  2 REDEFINE #PLAN-A2
    3  #PLAN-N2 (N2)
  2 REDEFINE #PLAN-A2
    3 #PLAN-N1 (N1)
  2 REDEFINE #PLAN-A2
    3 #PLAN-A1 (A1)
  2 #FILL-PL (A1)
*
1 #PERCENT (P1.4)
1 #NOTE-TEXT (A60/10)
1 #INT (I2)
1 #G-F (L)
1 #DID-REIN (L)
1 #DID-DEAD (L)
1 #DID-CSV  (L)
1 #DID-RSGN (L)
1 #DID-RPU  (L)
1 #DID-LAPO (L)
1 #DID-LAPS (L)
1 #DID-LAPN (L)
1 #DID-LAPC (L)
1 #DID-CONV (L)
1 #DID-TERM (L)
1 #DID-MODE (L)
1 #DID-RTAD (L)
1 #DOING-REINSTATEMENT (L)
1 #DID-ACDB (L)                            /* YK7
1 #FOUND-HIST (L)
1 #START-KEY (N15) INIT <000000000000000>
1 REDEFINE #START-KEY
  2 #START-KEY-ID (N6)
  2 #START-KEY-ISSUE-DT (N8)
  2 #START-KEY-SPLIT-IND (N1)
*
1 #END-KEY (N15) INIT <999999999999999>
1 REDEFINE #END-KEY
  2 #END-KEY-ID (N6)
  2 #END-KEY-ISSUE-DT (N8)
  2 #END-KEY-SPLIT-IND (N1)
*
1 #STATS-TABLE (A79)
1 REDEFINE #STATS-TABLE
  2 #ENTRIES (5)
    3 #ST-MBR (N1)
    3 #ST-MBRSHIP (N2)
    3 #ST-PLANS (N2)
    3 #ST-FACE (N7.2)
  2 #ST-NET-DB (N7.2)
*
1 #REIN-TABLE (A65)     /* WAS 44                  DW33  was 51 YK6
1 REDEFINE #REIN-TABLE
  2 #G-L-REINSTATE (P3/9)        /* WAS 6          DW33  was 7 YK6
  2 #G-L-REINSTATE-DB (P7.2/9)
  2 #REIN-TERMED-THIS-MON (L)
  2 #PRIOR-OA (A1)
*
1 #G-L-TABLE (A63)   /* WAS 42     DW33            was 49 YK6
1 REDEFINE #G-L-TABLE
  2 #G-L-LOSSES    (P3/9)      /* Was 6     DW33   was 7 YK6
  2 #G-L-LOSSES-DB (P7.2/9)
*
1 #GAINS-LIVES-BY-CAT-TABLE (A24)
1 REDEFINE #GAINS-LIVES-BY-CAT-TABLE
  2 #GAINS-LIVES-BY-CAT (P5/4)
  2 #LOSSES-LIVES-BY-CAT (P5/4)
*
1 #PASSED-INFO-G1
  2 #LOAN-INT-TBL (9)
    3 #LOAN-PRIN (P7.2)
1 REDEFINE #PASSED-INFO-G1
  2 #PASSED-INFO-1 (A45)
*
1 #PASSED-INFO-G2
  2 #LOAN-INT-TBL (9)
    3 #LOAN-INT (P5.2)
  2 #TOT-RPU-LOAN-AMT (P7.2)
  2 #TOT-RPU-INT-AMT (P5.2)
1 REDEFINE #PASSED-INFO-G2
  2 #PASSED-INFO-2 (A45)
* YK7 Start
1 #PASSED-INFO-G3
  2 #ACC-DEATH-BENEFIT  (N6.2)
  2 #PREM-REFUND-PASSED (N6.2)
  2 #PREM-DUE-PASSED    (N6.2)
  2 #DB-ADJ             (N6.2)
1 REDEFINE #PASSED-INFO-G3
  2 #PASSED-INFO-3 (A32)
* YK7 End
1 #NOTE-FOUND (L)
1 #NOTE-FIND (A3)
*
1 L_VLD (L)  INIT <FALSE>        /*  bz1
1 V_A78 (A78)                    /*  bz1
1 V_MARK (I4)                    /*  bz1
*
1 V_NAME  (A54)                  /*  bz2
1 P_CONTACT                      /*  bz2
  2 P_CID    (N8)                /*  bz2
  2 P_NAME   (A)    DYNAMIC      /*  bz2
1 #EZ-FACES              (N6/8) CONST <0,10000,12500,25000,37500,50000,75000,100000>   /* NG1
*
1 AR-V VIEW OF A-ACCOUNTING-REGISTER    /* YK7
  2 ID-NUMBER                           /* YK7
  2 TXN-CODE                            /* YK7
  2 POLICY-NUMBER                       /* YK7
1 #FOUND (L)                            /* YK7
1 #POL-NUM (A16)                        /* YK7
1 #DATN    (N8)                         /* YK8
*
1 #validated   (l)   /* vt7
1 #i           (i2)  /* vt7
1 #replay      (a1)                   /* vt9 9
1 #pol-type       (a1)                /* vt10
1 #scr-policy-number             (a16/9)    /* vt12
*
1 #owner-id-number           (n6)         /* vt13  \/
1 CONT view of a-contacts
  2 id-number
  2 ssn
1 #l                        (i2)         /* vt13   /\
*
END-DEFINE
*
INCLUDE GONERCXX
*
DEFINE WINDOW Replay                             /* vt9  \/
  SIZE 9 * 42
  BASE 5/14
  FRAMED ON POSITION SYMBOL AUTO                 /* vt9  /\
*
#DATN := *DATN
RESET CI-V
GET CI-V #CGA-ISN
GET ST-V #CGA-ISN
P_CID := MEMBER-CONTACT-ID       /*  bz2
P_NAME := '!'
CALLNAT 'GPRS0CNT' P_CONTACT     /*  bz2  /* bz-Name-C
V_NAME := P_NAME                 /*  bz2
*
CALLNAT 'GSECURXX'
  CI-V.ID-NUMBER
  #CGA-CLERK
  #SECURITY-ERROR
*
IF #SECURITY-ERROR
  INPUT TEXT 'Security Violation - Member is linked to user'
    USING MAP 'G1000MXX'
  END TRANSACTION
  FETCH 'G1000PXX'
END-IF
*
MOVE #CGA-ISN TO #HOLD-ISN
*
IF (#CGA-SCR-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU')
    AND (NOT #CGA-SECURITY-CODE = 4 OR = 12 OR = 98 OR = 99)
  RESET #CGA-SCR-SUFFIX #CGA-ORIG-SUFFIX
  MOVE 'Suffix "UPD/UPO/PUU" Invalid for FINANCE users' TO #TEXT
END-IF
*
IF #CGA-SCR-SUFFIX = 'FBR'
  FETCH 'C2340PCI'
END-IF
*
IF NOT #CGA-CLERK  = 'KHB' OR = 'VXT' OR = 'SKS' OR = 'BMG' or = 'CEB'   /* vt removed 'MBW' 03/30/2018
  MOVE (AD=P) TO #COST-BASIS-CV
END-IF
*
RESET #CGA-MF-SCR-COMMAND
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                        /* YK8
  MOVE ST-V.MEC-IND (#I1) TO #MEC-IND-X (#I1)
  move st-v.policy-id(#i1) to #scr-policy-number(#i1)           /* vt12
END-FOR
MOVE #MEC-IND TO #CGA-MF-ORIG-PARM-1
*
FETCH RETURN 'C230XPCI'
*
MOVE #CGA-MF-SCR-PARM-1 TO #SCR-MEC-IND
*
#CURR-VAR-INT-RATE := FUNCTION-INT-RATE(<'RATE5AB'>)  /* YK2
RESET #LOAN-PRIN (*) #LOAN-INT (*)
RESET #ISC
#RENEW-FLAG-CV(*) := (AD=P)                           /* YK5
FOR #IFL 1 TO C*ACTIVE-SEGMENTS
  IF  (STATUS (#IFL) NE 'D')
      OR (PAY-STATUS (#IFL) = '44')
    ESCAPE TOP
  END-IF
*
  ADD 1 TO #ISC
  IF X-LOAN-AMOUNT (#IFL) GT 0
    COMPUTE ROUNDED #DAILY-INT-RATE = ST-V.X-INTEREST-RATE (#IFL) / 365
*
    IF   (X-LOAN-DATE-YYYY (#IFL) = #TODAY-YYYY)  /* LOAN TAKEN THIS MON
        AND (X-LOAN-DATE-MM   (#IFL) = #TODAY-MM)
      COMPUTE ROUNDED #CURR-ACCUM-INT =
        X-ACCUM-INTEREST (#IFL) + X-NXT-YR-ACCUM-INT (#IFL)
        + (X-LOAN-AMOUNT (#IFL) *
        ((#DAILY-INT-RATE * (#TODAY-DD - X-LOAN-DATE-DD (#IFL))) /100))
    ELSE
      COMPUTE ROUNDED #CURR-ACCUM-INT =
        X-ACCUM-INTEREST (#IFL) + X-NXT-YR-ACCUM-INT (#IFL)
        + (X-LOAN-AMOUNT (#IFL)
        * ((#DAILY-INT-RATE * (#TODAY-DD - 1)) /100))
    END-IF
*
    ADD #CURR-ACCUM-INT      TO #LOAN-INT   (#ISC)
    ADD X-LOAN-AMOUNT (#IFL) TO #LOAN-PRIN  (#ISC)
  END-IF
*
  IF X-LOAN-AMOUNT-2 (#IFL) GT 0
    COMPUTE ROUNDED #DAILY-INT-RATE = #CURR-VAR-INT-RATE / 365
*
    IF   (X-LOAN-DATE-YYYY-2 (#IFL) = #TODAY-YYYY)  /* LOAN this MON
        AND (X-LOAN-DATE-MM-2   (#IFL) = #TODAY-MM)
      COMPUTE ROUNDED #CURR-ACCUM-INT =
        X-ACCUM-INTEREST-2 (#IFL) + X-NXT-YR-ACCUM-INT-2 (#IFL)
        + (X-LOAN-AMOUNT-2 (#IFL) *
        ((#DAILY-INT-RATE
        * (#TODAY-DD - X-LOAN-DATE-DD-2 (#IFL))) /100))
    ELSE
      COMPUTE ROUNDED #CURR-ACCUM-INT =
        X-ACCUM-INTEREST-2 (#IFL) + X-NXT-YR-ACCUM-INT-2 (#IFL)
        + (X-LOAN-AMOUNT-2 (#IFL)
        * ((#DAILY-INT-RATE * (#TODAY-DD - 1)) /100))
    END-IF
*
    ADD #CURR-ACCUM-INT        TO #LOAN-INT   (#ISC)
    ADD X-LOAN-AMOUNT-2 (#IFL) TO #LOAN-PRIN  (#ISC)
  END-IF
*
  IF  (ISSUE-DATE-DD (#IFL) = 01)
      OR (#TODAY-DD GE ISSUE-DATE-DD (#IFL))
    MOVE CASH-VALUE (#IFL) TO #CURR-CSV
  ELSE
    MOVE NXT-MON-CASH-VALUE (#IFL) TO #CURR-CSV /* use last csv
*
    MOVE CI-V.ID-NUMBER TO #HIST-KEY-ID
    MOVE ISSUE-DATE (#IFL) TO #HIST-KEY-ISS
    MOVE SPLIT-IND (#IFL) TO #HIST-KEY-SPL
    MOVE #DATN TO #YYYYMMDD
    SUBTRACT 1 FROM #MM
    IF #MM LT 1
      MOVE 12 TO #MM
      SUBTRACT 1 FROM #YYYY
    END-IF
*
    FIND VA-V WITH RECORD-KEY = #HIST-KEY
      IF   (YEAR-MONTH-M (13) = #YYYYMM)
        MOVE ACCUM-CASH-VALUE-M (12) TO #PREV-ACV
        COMPUTE #NEW-ACV = #PREV-ACV + PREMIUM-M  (13)
          + INTEREST-M (13) - COST-OF-INSURANCE-M (13)
*
        IF   (#IFL LE 9)
            AND (ISSUE-DATE (#IFL) GE 19970101)
            AND (MONTH-ALLOC-AMT (#IFL) NE 999.99)
          SUBTRACT PRORAT-LOAN-BAL-M   (13) FROM #NEW-ACV
          SUBTRACT PRORAT-LN-ACC-INT-M (13) FROM #NEW-ACV
        END-IF
*
        IF #NEW-ACV GT ACCUM-CASH-VALUE-M (13)
          COMPUTE #ACV-DIFF = #NEW-ACV - ACCUM-CASH-VALUE-M(13)
        ELSE
          COMPUTE #ACV-DIFF = ACCUM-CASH-VALUE-M(13) - #NEW-ACV
        END-IF
*
        MOVE PREMIUM-M (13) TO #REAL-PREM
        PERFORM CALC-REAL-PREM
        ADD #REAL-PREM TO #CURR-CSV
      END-IF
    END-FIND
  END-IF
*
  IF MTD-ACV-PREM-ADJ (#IFL) NE 9999999.99
    ADD MTD-ACV-PREM-ADJ (#IFL) TO #CURR-CSV
  END-IF
  IF MTD-ACV-INT-ADJ (#IFL) NE 99999.99
    ADD MTD-ACV-INT-ADJ (#IFL) TO #CURR-CSV
  END-IF
*
  COMPUTE #SCR-RPU-ACV (#ISC) =
    #CURR-CSV - #LOAN-PRIN (#ISC) - #LOAN-INT (#ISC)
* YK5 - Open renew flag only for new TERM policies YK7 - add EZ,
* IF F-LT2PLUS-TRUE(<ST-V.PLAN(#IFL)>) OR ST-V.PLAN(#IFL) = 'EZ'
* YK9 - open renew flag for ALL term policies to be used in creating letters
* "X" means - do not send letters
  IF FUNCTION-TERM-POLICY(<ST-V.PLAN(#IFL)>)             /* YK9
    #RENEW-FLAG-CV(#ISC) := (AD=U)
  END-IF
*
END-FOR /*(0615)
*
MOVE '*'              TO #CGA-SCR-COMMAND
MOVE #CGA-ORIG-ID     TO #CGA-SCR-ID
MOVE #CGA-ORIG-SUFFIX TO #CGA-SCR-SUFFIX
*                                                                 <<<<<<<<
VLD.                                                          /* bz1
REPEAT                                                        /* bz1
  L_VLD := TRUE                                               /* bz1
  V_MARK := POS(#SCR-TRAN (1))                                /* bz1
  INPUT TEXT #TEXT MARK V_MARK USING MAP 'C2300MCI'
  MOVE #SCR-MEC-IND TO #CGA-MF-SCR-PARM-1
  IF ( #SCR-TRAN(1) = 'DEAD') AND #CGA-SCR-SUFFIX = 'UPD'/* bz1
****  if #scr-pln(1) ne 'GT1'                                                     /* vt15
    FETCH RETURN 'G0000PDR'                              /* bz1
****    end-if                                                                    /* vt15
    IF #CGA-SCR-COMMAND = "GM"   /* Bad responce         /* bz1
      FETCH 'G1000PXX'                                   /* bz1
    END-IF                                               /* bz1
  END-IF                                                 /* bz1
*
  IF  (#CGA-SCR-COMMAND = '*' OR = ' ') AND (#CGA-SCR-ID = #CGA-ORIG-ID)
    IGNORE
  ELSE
    END TRANSACTION
    FETCH 'G1000PXX'
  END-IF
*
*   EDIT SCREEN * *
*
RESET #CGA-MF-SCR-COMMAND /* #cnt-csv         /* vt11 vt12 removed #cnt-csv
* FOR #I1 1 TO 9
  FOR #I1 1 TO C*ACTIVE-SEGMENTS              /* YK8
    IF #SCR-TRAN (#I1) = 'CVEI'
      MOVE 'EI' TO #CGA-MF-SCR-COMMAND
      #SCR-TRAN-OLD (#I1) := #SCR-TRAN (#I1)  /* NG3
      MOVE 'CVEX' TO #SCR-TRAN (#I1)
    END-IF
*
    IF #SCR-TRAN (#I1) = 'REPL' /* PM17
      MOVE 'RP' TO #CGA-MF-SCR-COMMAND
      MOVE 'RSGN' TO #SCR-TRAN (#I1)
    END-IF
  END-FOR
*
  RESET #TEXT
  MOVE C*ACTIVE-SEGMENTS TO #CURR-NUM-SEGS
  RESET #DOING-REINSTATEMENT
*
  CALLNAT 'GOWNRSXX' #CGA-ID
    #NON-INS-OWNER
    #MULTIPLE-OWNER
    #OWNER-OCC-9 (1:9)
*
  RESET PDA-CONTACT                                          /* TT3
  P-CONTACT-ID := CI-V.MEMBER-CONTACT-ID                     /* TT3
  CALLNAT 'CONTS001' PDA-CONTACT                             /* TT3
*
  CALLNAT 'GMAXSXX'
    #CGA-ORIG-COMMAND
    #MAX-FACE-TOTAL
    #MAX-FACE-TERM
    #OVERRIDE-MAX-FACE-TOTAL
    #OVERRIDE-MAX-FACE-TERM
    INTRO-FLAG
    P-DATE-OF-BIRTH   /* DW10         /* TT3
*
  PL_VLD_1.
* FOR #ISC 1 TO 9
  FOR #ISC 1 TO C*ACTIVE-SEGMENTS                             /* YK8
    IF #SCR-TRAN (#ISC) = ' ' ESCAPE TOP  END-IF
*
    MOVE #FILE-MATCHING-INDX (#ISC) TO #IFL
*
    IF #IFL = 0  /* ON A PREV BLANK LINE
      IF #SCR-TRAN (#ISC) = 'REIN'
        IF (#CURR-NUM-SEGS GE 9)
*           REINPUT 'Already has 9 segments -call EDS' MARK *#SCR-TRAN (#ISC)                   /* bz1
L_VLD := FALSE #TEXT := 'Already has 9 segments -call EDS' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                       /* bz1
        ELSE
          ADD 1 TO #CURR-NUM-SEGS
          MOVE #CURR-NUM-SEGS TO #IFL
        END-IF
      ELSE
*        REINPUT 'Only REIN allowed' MARK *#SCR-TRAN (#ISC)                    /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                        /* bz1
L_VLD := FALSE #TEXT := 'Only REIN allowed' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
      END-IF
    END-IF
*
    RESET #IS-NXT           /* DW12
    IF (CI-V.ISSUE-DATE (#IFL) GE 19970101)
        AND (CI-V.MONTH-ALLOC-AMT (#IFL) NE 999.99)
      MOVE TRUE TO #IS-NXT
    END-IF
*
IF (NOT #SCR-TRAN (#ISC) = ' ' OR = 'CORR' or = 'LTCC')                  /* vt17
        AND (CI-V.PAY-STATUS (#IFL) = '43')
      RESET #NOTE-FOUND
      IF #SCR-TRAN (#ISC) = 'DEAD'
        MOVE 'LTC' TO #NOTE-FIND
        CALLNAT 'GNOTESXX'
          #NOTE-FIND
          CI-V.ID-NUMBER
          CI-V.ISSUE-DATE (#IFL)
          #NOTE-FOUND
      END-IF
*
      if #scr-tran(#isc) ne 'LTCC'                 /* vt17
        IF NOT #NOTE-FOUND
*         REINPUT 'No trans to PULT allowed' MARK *#SCR-TRAN (#ISC)                   /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                               /* bz1
L_VLD := FALSE #TEXT := 'No trans to PULT allowed' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
        END-IF
      end-if                                       /* vt17
    END-IF
*
    MOVE CI-V.PLAN (#IFL) TO #PLAN-A3
#SCR-VAR-TERM := F-LT2-TRUE(<#PLAN-A3>)                                     /* YK5
*    RESET #SCR-VAR-TERM                                                        /* YK5
*      IF   (#SCR-PLN-A1 (#ISC) GE 'U')                                         /* YK5
*          AND (#SCR-PLN-A1 (#ISC) LE 'Z')                                      /* YK5
*        MOVE TRUE TO #SCR-VAR-TERM                                             /* YK5
*      END-IF                                                                   /* YK5
*
    IF (#SCR-TRAN (#ISC) NE 'REIN') /* no file seg exists on a rein
      MOVE PLAN (#IFL) TO #PLAN-3
#FIL-VAR-TERM := F-LT2-TRUE(<#PLAN-A3>)                                   /* YK5
*      RESET #FIL-VAR-TERM                                                      /* YK5
*        IF   (#PLAN-3-A1 GE 'U')                                               /* YK5
*            AND (#PLAN-3-A1 LE 'Z')                                            /* YK5
*          MOVE TRUE TO #FIL-VAR-TERM                                           /* YK5
*        END-IF                                                                 /* YK5
    END-IF
*
reset #trmf-amt                                                                         /* VT6 \/
    for #k 1 10
      if st-v.out-term-ref-amount (#k) ne 0
        add out-term-ref-amount(#k) to #trmf-amt
      end-if
    end-for
    If (#scr-tran(#isc) = 'LAPC' or = 'LAPO'  or = 'LAPS')
and (st-v.x-bill-adjust(#ifl) ne 0 or st-v.debit-credit-amt ne 0 or #trmf-amt ne 0)
      V_MARK := POS(#SCR-TRAN (#ISC))
L_VLD := FALSE #TEXT := 'STOP! Cannot perform transaction. There is BADJ, DB/CR or TRMF amount.' ESCAPE BOTTOM (PL_VLD_1.)
    end-if
*
if st-v.plan(#ifl) = 'OL' OR = '20P' OR = '30P' OR = '7P' or  = 'SPF' or = 'GPL' or = 'GP2' or = 'AL' or  = 'AL2'      /* vt10 \/
        OR  (st-v.plan (#ifl) = MASK (NN'F'))
        OR  (st-v.plan (#ifl) = MASK (N'P'))
      move 'W' to #pol-type
    else
      reset #pol-type
    end-if
*
    If ((#scr-tran(#isc) = 'LAPC' ) and (st-v.x-loan-amount(#ifl) ne 0)
        and ( #pol-type = 'W'))
      V_MARK := POS(#SCR-TRAN (#ISC))
L_VLD := FALSE #TEXT := 'Cannnot perform transaction. This is a whole life policy with CAP loan!' ESCAPE BOTTOM (PL_VLD_1.)
end-if                                                                                                              /* vt10 /\
*
   IF (NOT #SCR-TRAN (#ISC) = 'MODE' OR = 'RSGN' OR = 'CONV' OR = 'CORR'
        OR = 'REIN' OR = 'LAPS' OR = 'MACV' OR = 'DEAD' OR = 'LAPN'
        OR = 'LAPC')
        AND #SCR-VAR-TERM
*          REINPUT 'This trans for LTII not yet developed' MARK *#SCR-TRAN (#ISC)               /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                           /* bz1
L_VLD := FALSE #TEXT := 'This trans for LTII not yet developed' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    IF #SCR-VAR-TERM AND (#SCR-PLN-N2(#ISC) NE #PLAN-3-N2)
        AND (#SCR-TRAN (#ISC) NE 'REIN')
AND (NOT #CGA-CLERK = 'CEB' OR = 'AJT' OR = 'KHB' OR = 'VXT'        /* PM36
        OR = 'SKS' OR = 'EAC' )
*          REINPUT 'Only selected Users can chg Plan Yrs' MARK *#SCR-TRAN (#ISC)                /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                           /* bz1
L_VLD := FALSE #TEXT := 'Only selected Users can chg Plan Yrs' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
    END-IF
*
    IF  ((#SCR-TRAN (#ISC) = 'REIN') AND (#IFL = 0))
        OR ((#SCR-TRAN (#ISC) = 'REIN')
        AND  (PREM-RATING (#IFL) NE ' ')
        AND  (#CGA-ORIG-SUFFIX NE 'PUU'))
*        REINPUT 'This process for rated policies not developed' MARK *#SCR-TRAN (#ISC)                 /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                                   /* bz1
L_VLD := FALSE #TEXT := 'This process for rated policies not developed' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    IF (#SCR-TRAN (#ISC) NE 'REIN')
        AND (CI-V.STATUS (#IFL) = 'E' OR = 'F' OR = 'G')
*          REINPUT 'Only REIN allowed on Terminated Pols' MARK *#SCR-TRAN (#ISC)                 /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                            /* bz1
L_VLD := FALSE #TEXT := 'Only REIN allowed on Terminated Pols' ESCAPE BOTTOM (PL_VLD_1.)   /* bz1
    END-IF
*
if (#scr-tran(#isc) eq 'LTCC') and (ci-v.pay-status(#ifl) ne '43')                /* vt17  \/
      v_mark := pos(#scr-tran(#isc))
      l_vld  := FALSE
  #text  := 'The LTCC could be used only on policies in status ''PULT'''
      escape bottom (pl_VLD_1.)
end-if                                                                           /* vt17  /\
*
    IF  ((#SCR-EFF-DTE (#ISC) NE ' ')
        OR  (#SCR-TRAN (#ISC) = 'REIN'))
        AND (#SCR-EFF-DTE (#ISC) NE MASK (MMDDYYYY))
*          REINPUT 'INVALID DATE FORMAT - MUST BE MMDDYYYY' MARK *#SCR-EFF-DTE (#ISC)             /* bz1
V_MARK := POS(#SCR-EFF-DTE (#ISC))                                                          /* bz1
L_VLD := FALSE #TEXT := 'INVALID DATE FORMAT - MUST BE MMDDYYYY' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
    END-IF
*
    IF  ((#SCR-PAID-THRU (#ISC) NE ' ')
        OR  (#SCR-TRAN (#ISC) = 'REIN'))
        AND (#SCR-PAID-THRU (#ISC) NE MASK (MMYYYY))
*          REINPUT 'Date must be MMYYYY' MARK *#SCR-PAID-THRU (#ISC)             /* bz1
V_MARK := POS(#SCR-PAID-THRU (#ISC))                                       /* bz1
L_VLD := FALSE #TEXT := 'Date must be MMYYYY' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
    END-IF
*
IF   (#SCR-BILL-TO (#ISC) NE ' ') AND (#SCR-BILL-TO (#ISC) NE MASK (MMYYYY))
*        REINPUT 'Date must be MMYYYY' MARK *#SCR-BILL-TO (#ISC)                  /* bz1
V_MARK := POS(#SCR-BILL-TO (#ISC))                                          /* bz1
L_VLD := FALSE #TEXT := 'Date must be MMYYYY' ESCAPE BOTTOM (PL_VLD_1.)     /* bz1
    END-IF
*
  IF #SCR-PAID-UP (#ISC) NE ' ' AND #SCR-PAID-UP (#ISC) NE MASK (MMYYYY)
*        REINPUT 'Date must be MMYYYY' MARK *#SCR-PAID-UP (#ISC)                  /* bz1
V_MARK := POS(#SCR-PAID-UP (#ISC))                                          /* bz1
L_VLD := FALSE #TEXT := 'Date must be MMYYYY' ESCAPE BOTTOM (PL_VLD_1.)     /* bz1
    END-IF
*
    IF #SCR-TRAN (#ISC) = 'CONV' OR = 'RPU'
    IF #SCR-TRN-DT (#ISC) NE ' ' AND #SCR-TRN-DT (#ISC) NE MASK (MMYYYY)
*          REINPUT 'Date must be MMYYYY' MARK *#SCR-TRN-DT (#ISC)                 /* bz1
V_MARK := POS(#SCR-TRN-DT (#ISC))                                         /* bz1
L_VLD := FALSE #TEXT := 'Date must be MMYYYY' ESCAPE BOTTOM (PL_VLD_1.)   /* bz1
      END-IF
    END-IF
*
   if #scr-tran(#isc) = 'DEAD'                                 /* vt7 \/
      perform validate-designation
      if not #validated
        V_MARK := POS(#SCR-TRan (#ISC))
        L_VLD := FALSE #TEXT := 'At least 1 BD not Validated'
        ESCAPE BOTTOM (PL_VLD_1.)
      end-if
   end-if                                                      /* vt7 /\
*
    MOVE #SCR-EFF-DTE (#ISC) TO #WMMDDYYYY-A
    MOVE BY NAME #WMMDDYYYY TO #WYYYYMMDD
    MOVE #WYYYYMMDD-N TO #SCR-EFF-DTE-YYYYMMDD (#ISC)
*
    MOVE #SCR-PAID-THRU (#ISC) TO #WMMYYYY-A
    MOVE BY NAME #WMMYYYY TO #WYYYYMMDD
    MOVE 15 TO #WYYYYMMDD.#WDD
    MOVE #WYYYYMMDD-N TO #SCR-PAID-THRU-YYYYMMDD (#ISC)
*
    MOVE #SCR-BILL-TO (#ISC) TO #WMMYYYY-A
    MOVE BY NAME #WMMYYYY TO #WYYYYMMDD
    MOVE 15 TO #WYYYYMMDD.#WDD
    MOVE #WYYYYMMDD-N TO #SCR-BILL-TO-YYYYMMDD (#ISC)
*
    MOVE #SCR-PAID-UP (#ISC) TO #WMMYYYY-A
    MOVE BY NAME #WMMYYYY TO #WYYYYMMDD
    MOVE 15 TO #WYYYYMMDD.#WDD
    MOVE #WYYYYMMDD-N TO #SCR-PAID-UP-YYYYMMDD (#ISC)
*
if  (#scr-tran (#isc) = 'CSV' or = 'CVEX' or = 'CVEI' or = 'LAPO')                 /* vt9  \/
        and #scr-mec-ind-x(#isc) = 'Y'

      SET WINDOW 'Replay'
      REPEAT
        move '?' to #replay

        INPUT WINDOW ='Replay' USING MAP 'C2399MCI'
        if #replay eq  ' '
          reinput  'Must Enter (Y)es or (N)o'
            mark *#replay
        end-if
        if #replay = 'Y'
          escape bottom
        end-if
        if #replay = 'N'
          fetch 'C2300PCI'
        end-if
      end-repeat
      set window off
end-if                                                                            /* vt9 /\
*
IF (#SCR-TRAN (#ISC) = 'CSV' OR = 'CVEX' OR = 'RPU' OR = 'ANNU'  /* DW27
        OR = 'LAPO' OR = 'LAPN' OR = 'LAPS')
        AND #MULTIPLE-OWNER
        AND (#CGA-MF-SCR-COMMAND NE 'EI') /* allowed on int exch
*     FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                                                     /* YK8
      IF   (#SCR-EFF-DTE(#I1) = #SCR-EFF-DTE(#ISC)) /* SKIP CURRENT LINE
            AND (#SCR-PLN (#I1) = #SCR-PLN (#ISC))
          ESCAPE TOP
        END-IF
*
        IF #SCR-TRAN (#I1) NE ' '
*          REINPUT 'Only 1 Trans per line allowed on a Multiple Owner' MARK *#SCR-TRAN (#ISC)                    /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                                        /* bz1
L_VLD := FALSE #TEXT := 'Only 1 Trans per line allowed on a Multiple Owner' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
        END-IF
      END-FOR
    END-IF
*
if (#scr-pln(#isc) = 'GT1')                                                                     /* vt15  \/
if not (#scr-tran(#isc) = 'MODE' or = 'CORR' or = 'RSGN' or = 'REIN' or = 'DEAD')
        v_mark := pos(#scr-tran(#isc))
        l_vld  := FALSE
#text  := 'The specified transaction is not allowed for Group Term plan'
        escape bottom (pl_vld_1.)
      end-if
*
      if #scr-tran(#isc) = 'CORR' and
          ((#scr-mode (#ISC)              ne ci-v.mode(#ifl))         or
          (#scr-pln(#isc)                 ne ci-v.plan(#ifl))         or
          (#scr-age(#isc)                 ne ci-v.issue-age(#ifl))    or
     (#scr-paid-thru-yyyy(#isc)      ne ci-v.paid-to-date-yyyy(#ifl)) or
     (#scr-paid-thru-mm(#isc)        ne ci-v.paid-to-date-mm(#ifl))   or
          (#scr-status(#isc)              ne 'PDUP' )                 or
          (#scr-mode(#isc)                ne ci-v.mode(#ifl))         or
          (#scr-mec-ind-x (#isc)          ne ' ' ))
        v_mark := pos(#scr-tran(#isc))
        l_vld  := FALSE
#text  := 'The CORR trnasaction for Group Term plan is used only for FACE-AMT change'
        escape bottom (pl_vld_1.)
      end-if
*
      if #scr-tran(#isc) = 'MODE' and
          ((#scr-mode (#ISC)              ne ci-v.mode(#ifl))         or
          (#scr-pln(#isc)                 ne ci-v.plan(#ifl))         or
          (#scr-age(#isc)                 ne ci-v.issue-age(#ifl))    or
          (#scr-face-amt(#isc)            ne ci-v.face-amount(#ifl))  or
          (#scr-status(#isc)              ne 'PDUP')                  or
          (#scr-mode(#isc)                ne ci-v.mode(#ifl))         or
          (#scr-mec-ind-x (#isc)          ne ' ' ))
        v_mark := pos(#scr-tran(#isc))
        l_vld  := FALSE
#text  := 'The MODE transaction for Group Term plan is used only for PAID-TRU-DATE change'
        escape bottom (pl_vld_1.)
      end-if
end-if                                                                                        /* vt15  /\
*
if (#scr-tran(#isc) = 'LTCC') and (#scr-status(#isc) ne 'PODB' )                   /* vt17 \/
      v_mark := pos(#scr-tran(#isc))
      l_vld  := FALSE
#text  := 'The LTCC transaction  is used only for change from ''PULT'' to ''PODB'' status '
      escape bottom (pl_vld_1.)
end-if                                                                             /* vt17 /\
*
    IF   (#SCR-PLN (#ISC) = 'LTD') AND (CI-V.PLAN (#IFL) NE 'LT')
*       REINPUT 'LTD only applies to plan LT' MARK *#SCR-PLN (#ISC)                      /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                     /* bz1
L_VLD := FALSE #TEXT := 'LTD only applies to plan LT' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
    END-IF
*
    IF #SCR-TRAN (#ISC) = 'CONV'
     IF CI-V.PLAN (#IFL) = 'GPL'  OR = 'GP2'     /* TT2          /* DW33
*         REINPUT 'CONV on a "GPL" Invalid' MARK *#SCR-PLN (#ISC)
V_MARK := POS(#SCR-PLN (#ISC))                                                 /* bz1
L_VLD := FALSE #TEXT := 'CONV on a "GPL/GP2" Invalid' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
      END-IF

IF CI-V.PLAN (#IFL) = 'EZ'                                                   /* YK6
V_MARK := POS(#SCR-PLN (#ISC))                                             /* YK6
L_VLD := FALSE #TEXT := 'CONV on a "EZ" Invalid' ESCAPE BOTTOM (PL_VLD_1.) /* YK6
END-IF                                                                       /* YK6
*
*     IF   ((CI-V.PLAN (#IFL) = 'RT' OR = 'LT') OR #FIL-VAR-TERM)
*         AND ((NOT #SCR-PLN (#ISC) = 'RT' OR = 'LT' OR = 'LTD')
*         AND NOT #SCR-VAR-TERM)
IF   (FUNCTION-TERM-POLICY(<CI-V.PLAN(#IFL)>))                                       /* YK6
AND (NOT FUNCTION-TERM-POLICY(<#SCR-PLN(#ISC)>) AND #SCR-PLN(#ISC) <> 'LTD')     /* YK6
*            REINPUT 'CONV from Term to Whole Life Invalid' MARK *#SCR-PLN (#ISC)                /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                           /* bz1
L_VLD := FALSE #TEXT := 'CONV from Term to Whole Life Invalid' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
      END-IF
*
*     IF   ((NOT CI-V.PLAN (#IFL) = 'RT' OR = 'LT') AND NOT #FIL-VAR-TERM)
*         AND ((#SCR-PLN (#ISC) = 'RT' OR = 'LT') OR #SCR-VAR-TERM)
*            REINPUT 'CONV from Whole Life to Term Invalid' MARK *#SCR-PLN (#ISC)                /* bz1
IF   (NOT FUNCTION-TERM-POLICY(<CI-V.PLAN(#IFL)>))                                   /* YK6
AND (FUNCTION-TERM-POLICY(<#SCR-PLN(#ISC)>))                                     /* YK6
V_MARK := POS(#SCR-PLN (#ISC))                                                           /* bz1
L_VLD := FALSE #TEXT := 'CONV from Whole Life to Term Invalid' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
      END-IF
*
IF   (CI-V.ONLINE-ACTION-GN NE '2') AND (CI-V.ONLINE-ACTION (#IFL) NE '1')
        IF CI-V.PAY-STATUS (#IFL) GT '40'
*          REINPUT 'CONV Invalid with Paid-up Policy' MARK *#SCR-PLN (#ISC)                       /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                          /* bz1
L_VLD := FALSE #TEXT := 'CONV Invalid with Paid-up Policy' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
        END-IF
      END-IF
*
      IF NOT ((CI-V.PLAN (#IFL) = 'RT' OR = 'LT') OR #FIL-VAR-TERM)
          AND ((#SCR-PLN (#ISC) = 'RT' OR = 'LT') OR #SCR-VAR-TERM)
*            REINPUT 'CONV from NON RT/LT to RT/LT Invalid' MARK *#SCR-PLN (#ISC)                 /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                            /* bz1
L_VLD := FALSE #TEXT := 'CONV from NON RT/LT to RT/LT Invalid' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
      END-IF
*
      IF   ((CI-V.PLAN (#IFL) = 'RT' OR = 'LT') OR #FIL-VAR-TERM)
          AND NOT ((#SCR-PLN (#ISC) = 'RT' OR = 'LT' OR = 'LTD')
          OR #SCR-VAR-TERM)
*            REINPUT 'CONV from RT/LT to NON RT/LT Invalid' MARK *#SCR-PLN (#ISC)                 /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                            /* bz1
L_VLD := FALSE #TEXT := 'CONV from RT/LT to NON RT/LT Invalid' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
      END-IF
*
      IF   (#SCR-PLN (#ISC) = 'SO')
          AND (CI-V.PLAN (#IFL) NE 'FSO')
*            REINPUT 'CONV to "SO" only valid from "FSO"' MARK *#SCR-PLN (#ISC)                   /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                            /* bz1
L_VLD := FALSE #TEXT := 'CONV to "SO" only valid from "FSO"' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
      END-IF
*
      IF #IS-NXT   /* DW12
        IF  (#SCR-PLN (#ISC) = 'OL' OR = '20P' OR = '30P' OR = '7P'
            OR = 'AP' OR = 'LT' OR = 'RT' OR = 'SO' OR = 'LTD'
*            OR = 'AL'      /* DW8
 OR = 'EZ'      /* NG1                                           /* vt15
 or = 'GT1' )                                                    /* vt15
            OR SUBSTR(#SCR-PLN (#ISC),1,2) EQ 'AL' /* ng4
            OR #SCR-VAR-TERM
            OR (#SCR-PLN (#ISC) = MASK (NN'F'))  /* 4/02 rlb
            OR (#SCR-PLN (#ISC) = MASK (N'PF'))
          IGNORE
        ELSE
*           REINPUT 'Invalid Plan' MARK *#SCR-PLN (#ISC)                             /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                             /* bz1
L_VLD := FALSE #TEXT := 'Invalid Plan' ESCAPE BOTTOM (PL_VLD_1.)           /* bz1
        END-IF
      ELSE
        IF  (NOT #SCR-PLN (#ISC) = 'OL' OR = '20P' OR = '30P' OR = 'AP'
            OR = '7P' OR = 'RT' OR = 'LT' OR = 'SO'
  OR = '1S' OR = '2S' OR = '3S'  or = 'GT1' )                    /* vt15
*              REINPUT 'Invalid Plan' MARK *#SCR-PLN (#ISC)                          /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                             /* bz1
L_VLD := FALSE #TEXT := 'Invalid Plan' ESCAPE BOTTOM (PL_VLD_1.)           /* bz1
        END-IF
      END-IF
*
      IF #SCR-PLN (#ISC) = 'RT' OR = 'LT'
        IF NOT #IS-NXT  /* DW12
*          REINPUT 'RT and LT only valid for New Products' MARK *#SCR-PLN (#ISC)                     /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                             /* bz1
L_VLD := FALSE #TEXT := 'RT and LT only valid for New Products' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
        END-IF
*
        IF (ST-V.INTRO-FLAG = 'K' OR = 'G')
*           REINPUT 'RT and LT invalid for Spouse or Gen Coverage' MARK *#SCR-PLN (#ISC)                   /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                                   /* bz1
L_VLD := FALSE #TEXT := 'RT and LT invalid for Spouse or Gen Coverage' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
        END-IF
*
        IF CI-V.FACE-AMOUNT (#IFL) LT 50000
*           REINPUT 'RT and LT requires $50,000' MARK *#SCR-PLN (#ISC)                    /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                  /* bz1
L_VLD := FALSE #TEXT := 'RT and LT requires $50,000' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
        END-IF
      END-IF
    ELSE
      IF  #SCR-VAR-TERM AND (#SCR-PLN (#ISC) = MASK (.NN))
        IGNORE
      ELSE
        IF #SCR-PLN (#ISC) = #PlanCodes (*)
            OR SUBSTR(#SCR-PLN (#ISC),1,2) EQ 'AL'
            OR CI-V.PLAN (#IFL) EQ MASK (..'F')
          ignore
        else
          V_MARK := POS(#SCR-PLN (#ISC)) /* bz1
          L_VLD := FALSE #TEXT := 'Invalid Plan'
          ESCAPE BOTTOM (PL_VLD_1.)      /* bz1
        END-IF
      END-IF
    END-IF
*
    IF   (#SCR-PLN (#ISC) = 'GPL')                 /* DW33
        AND (#SCR-AGE (#ISC) GT '12')
*       REINPUT 'GPL Issue Age cannot exceed age 12' MARK *#SCR-AGE (#ISC)                    /* bz1
V_MARK := POS(#SCR-AGE (#ISC))                                                          /* bz1
L_VLD := FALSE #TEXT := 'GPL Issue Age cannot exceed age 12' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
    END-IF
*
IF   (#SCR-PLN (#ISC) = 'GP2')                                                             /* TT2 BEGIN
        AND (#SCR-AGE (#ISC) GT '14')
      V_MARK := POS(#SCR-AGE (#ISC))
L_VLD := FALSE #TEXT := 'GP2 Issue Age cannot exceed age 14' ESCAPE BOTTOM (PL_VLD_1.)
END-IF                                                                                     /* TT2 END
*
*   IF  (#SCR-AGE (#ISC) GT '85' AND CI-V.PLAN (#IFL) NE 'AL') /* PM13
*       REINPUT 'ISSUE AGE CANNOT EXCEED AGE 85' MARK *#SCR-AGE (#ISC)                     /* bz1
 IF #SCR-AGE (#ISC) GT '85' AND NOT SUBSTR(CI-V.PLAN (#IFL),1,2) EQ 'AL'
V_MARK := POS(#SCR-AGE (#ISC))                                                       /* bz1
L_VLD := FALSE #TEXT := 'ISSUE AGE CANNOT EXCEED AGE 85' ESCAPE BOTTOM (PL_VLD_1.)   /* bz1
    END-IF
*
  IF #SCR-MODE (#ISC) = 'E' OR = 'G' OR = 'M' OR = 'Q' OR = 'S' OR = 'A'
OR = '0' OR = '1' OR = '2' OR = '4' or = 'B'                                      /* vt15
      IGNORE
    ELSE
*      REINPUT USING HELP MARK *#SCR-MODE (#ISC)                        /* bz1
V_MARK := POS(#SCR-MODE (#ISC))                                   /* bz1
L_VLD := FALSE #TEXT := 'Wrong Mode' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
    END-IF
*
    IF #SCR-SMK(#ISC) = 'S' OR = 'N'
      IGNORE
    ELSE
      IF #SCR-SMK(#ISC) = 'C' AND #SCR-TRAN(#ISC) = 'REIN'
        IGNORE
      ELSE
        IF #SCR-SMK(#ISC) = 'C'
          IF SMOKER-FLAG(#IFL) = 'C'
            IGNORE
          ELSE
*             REINPUT 'CANNOT CHANGE SMOKER FLAG TO C' MARK *#SCR-SMK(#ISC)                     /* bz1
V_MARK := POS(#SCR-SMK(#ISC))                                                       /* bz1
L_VLD := FALSE #TEXT := 'CANNOT CHANGE SMOKER FLAG TO C' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
          END-IF
        ELSE
*           REINPUT 'Smoker Flag must be S or N' MARK *#SCR-SMK(#ISC)                        /* bz1
V_MARK := POS(#SCR-SMK(#ISC))                                                      /* bz1
L_VLD := FALSE #TEXT := 'Smoker Flag must be S or N' ESCAPE BOTTOM (PL_VLD_1.)     /* bz1
        END-IF
      END-IF
    END-IF
*
    IF  (#SCR-TRAN (#ISC) = 'CONV')
        OR ((#SCR-TRAN (#ISC) = 'REIN') /* REIN from scratch
        AND (STATUS (#IFL) = ' '))
      IF #SCR-PLN (#ISC) NE 'AP'
        IF CI-V.PLAN (#IFL) NE MASK (..'F')  /* can't reset FLEX PREM
          RESET #SUFFIX
          IF CI-V.MONTH-ALLOC-AMT (#IFL) = 999.99
            MOVE 'OLD' TO #SUFFIX
          END-IF
          IF ST-V.PREM-RATING (#IFL) NE ' '
           COMPRESS 'SB' ST-V.PREM-RATING (#IFL) INTO #SUFFIX LEAVING NO
          END-IF
          MOVE #SCR-ANN-PRM (#ISC) TO #PREM-6-2
          MOVE #SCR-PLN (#ISC) TO #PLAN-3
          MOVE #SCR-EFF-DTE-YYYYMMDD (#ISC) TO #YYYYMMDD
          IF #SCR-PLN (#ISC) = 'LTD'
            MOVE 20030701 TO #YYYYMMDD
            MOVE 'LT' TO #PLAN-3
          END-IF
*
          CALLNAT 'GPREMSXX' #CGA-SCR-COMMAND #CGA-SCR-ID #SUFFIX
            #PLAN-3 #SCR-AGE-N (#ISC) #PREM-6-2  #YYYYMMDD
    #SCR-SMK (#ISC) #SCR-FACE-AMT (#ISC) P-GENDER /* DW11         /* TT3
          IF   (#SCR-PLN (#ISC) = 'LTD')
              AND (#PREM-6-2 = #SCR-ANN-PRM (#ISC))
*                REINPUT 'LT prem already decreased' MARK *#SCR-TRAN (#ISC)                 /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                 /* bz1
L_VLD := FALSE #TEXT := 'LT prem already decreased' ESCAPE BOTTOM (PL_VLD_1.)   /* bz1
          END-IF
          MOVE #PREM-6-2 TO #SCR-ANN-PRM (#ISC)
        END-IF
        PERFORM CALC-MODAL-PREM
      END-IF
    ELSE
      IF   (#SCR-PLN (#ISC) NE CI-V.PLAN (#IFL))
          AND (CI-V.ONLINE-ACTION-GN NE '2')
          AND (CI-V.ONLINE-ACTION  (#IFL) NE '1')
*            REINPUT 'PLAN can only be changed on a CONV transaction' MARK *#SCR-PLN (#ISC)                /* bz1
V_MARK := POS(#SCR-PLN (#ISC))                                                                     /* bz1
L_VLD := FALSE #TEXT := 'PLAN can only be changed on a CONV transaction' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
      END-IF
    END-IF
*
    IF  (#SCR-TRAN (#ISC) = 'MODE' OR = 'MACV')
        OR ((#SCR-TRAN (#ISC) = 'REIN') /* REIN TO TERMINATED POLICY
        AND (STATUS (#IFL) = ' '))
      IGNORE
    ELSE
      IF #SCR-MODE (#ISC) NE CI-V.MODE (#IFL)
*         REINPUT 'MODE can only be changed on a MODE transaction' MARK *#SCR-MODE (#ISC)                  /* bz1
V_MARK := POS(#SCR-MODE (#ISC))                                                                    /* bz1
L_VLD := FALSE #TEXT := 'MODE can only be changed on a MODE transaction' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
      END-IF
    END-IF
* NG1 Start
    IF #SCR-PLN (#ISC) = 'EZ'
      DECIDE ON FIRST VALUE OF #SCR-TRAN (#ISC)
        VALUE 'CORR'
          IF NOT #SCR-FACE-AMT ( #ISC ) EQ #EZ-FACES (*)
            V_MARK := POS(#SCR-FACE-AMT (#ISC))
            L_VLD := FALSE
#TEXT := 'Face amount is not equal to $10,000,$25,000,$50,000,$75,000,$100,000'
            ESCAPE BOTTOM (PL_VLD_1.)
          END-IF
        VALUE 'RSGN'
          #WORK-FACE := FACE-AMOUNT ( #IFL ) - #SCR-FACE-AMT ( #ISC )
          IF NOT #WORK-FACE EQ #EZ-FACES (*)
            V_MARK := POS(#SCR-PLN (#ISC))
            L_VLD := FALSE
#TEXT := 'Resultant face amount is not equal to $10,000,$25,000,$50,000,$75,000,$100,000'
            ESCAPE BOTTOM (PL_VLD_1.)
          END-IF
        NONE VALUE IGNORE
      END-DECIDE
    END-IF
* NG1 End
*
    RESET #PAY-STAT-XX
    CALLNAT 'GPYSTSXX' #PAY-STAT-XX #SCR-STATUS (#ISC) #INVALID #ERR-MSG
    IF #INVALID
*       REINPUT #ERR-MSG MARK *#SCR-STATUS (#ISC)                          /* bz1
V_MARK := POS(#SCR-STATUS (#ISC))                                    /* bz1
L_VLD := FALSE #TEXT := #ERR-MSG ESCAPE BOTTOM (PL_VLD_1.)           /* bz1
    END-IF
*
    IF   (#SCR-TRAN (#ISC) = 'RPU')
        AND (#SCR-RPU-ACV (#ISC) = 0)
*          REINPUT 'RPU-ACV MUST BE ENTERED ON AN RPU' MARK *#SCR-RPU-ACV (#ISC)            /* bz1
V_MARK := POS(#SCR-RPU-ACV (#ISC))                                                    /* bz1
L_VLD := FALSE #TEXT := 'RPU-ACV MUST BE ENTERED ON AN RPU' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    IF   (#SCR-TRAN (#ISC) = 'CSV' OR = 'CVEX' OR = 'ANNU')     /* DW27
AND (#SCR-PLN (#ISC) = 'RT' OR = 'LT' OR = 'FSO' OR = 'SO' OR = 'EZ')         /* YK6
*          REINPUT 'Cash Value invalid on TERM Policy' MARK *#SCR-TRAN (#ISC)               /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                       /* bz1
L_VLD := FALSE #TEXT := 'Cash Value invalid on TERM Policy' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    IF   (#SCR-TRAN (#ISC) = 'CSV' OR = 'CVEX' OR = 'ANNU')     /* DW29
        AND (CONV-DURATION (#IFL) = 999)
        AND (X-LOAN-AMOUNT (#IFL) NE 0)
        AND (NOT CI-V.ID-NUMBER = 156308)  /* PM99
*        REINPUT 'Cash Value invalid on Cap Policy with an existing Loan' MARK *#SCR-TRAN (#ISC)                 /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                                            /* bz1
L_VLD := FALSE #TEXT := 'Cash Value invalid on Cap Policy with an existing Loan' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    IF #SCR-TRAN (#ISC) = 'ANNU'             /* DW27
        AND NOT SUBSTR(CI-V.PLAN (#IFL),1,2) EQ 'AL'
*       AND (PLAN (#IFL) NE 'AL')
*        REINPUT 'Tran "ANNU" only valid on "AL" Policies' MARK *#SCR-TRAN (#ISC)                 /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                                             /* bz1
L_VLD := FALSE #TEXT := 'Tran "ANNU" only valid on "AL" Policies' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    IF (#SCR-FACE-AMT (#ISC) NE FACE-AMOUNT (#IFL))       /* DW33
        AND (#SCR-PLN (#ISC) = 'GPL' OR = 'GP2')          /* TT2
*        REINPUT 'Face Amt can not be Split on "GPL"' MARK *#SCR-FACE-AMT (#ISC)                /* bz1
V_MARK := POS(#SCR-FACE-AMT (#ISC))                                                       /* bz1
L_VLD := FALSE #TEXT := 'Face Amt can not be Split on "GPL/GP2"' ESCAPE BOTTOM (PL_VLD_1.)    /* bz1
    END-IF
*
    IF (#SCR-FACE-AMT (#ISC) NE FACE-AMOUNT (#IFL))
        AND (CI-V.ONLINE-ACTION-GN NE '2')
        AND (CI-V.ONLINE-ACTION (#IFL) NE '1')
    AND (NOT #SCR-TRAN(#ISC) = 'CSV' OR = 'CVEX' OR = 'RSGN' OR = 'REIN'
        OR = 'ANNU' )                                       /* DW27
        AND (NOT #CGA-CLERK = 'VXT' OR = 'KHB')
*      IF  (#PLAN-A3 = 'LT' OR = 'RT') /* face can chg on term         /* YK5
*            OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))              /* YK5
 IF FUNCTION-TERM-POLICY(<#PLAN-A3>)                              /* YK5
        IGNORE
      ELSE
if #scr-tran(#isc) = 'LTCC' and (#cga-clerk = 'SKS' or = 'RDR' or = 'ELB' or = 'CEB' or = 'VXT' or = 'CHP' or = 'JRR' )   /* vt17 \/
          ignore
else                                                                                                                      /* vt17 /\
*         REINPUT 'Face Amt can only chg on a Split' MARK *#SCR-FACE-AMT (#ISC)              /* bz1
V_MARK := POS(#SCR-FACE-AMT (#ISC))                                                  /* bz1
L_VLD := FALSE #TEXT := 'Face Amt can only chg on a Split' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
        END-IF
end-if                                                                                                                       /* vt17
    END-IF
*
    MOVE #SCR-PAID-THRU-YYYYMMDD (#ISC) TO #YYYYMMDD
    MOVE #TODAY-YYYYMMDD-N TO #WYYYYMMDD-N
    MOVE 99 TO #WDD-N /* for test of PDUP-DT   DW12
    IF ((((#SCR-MODE (#ISC) = 'G') AND (#SCR-STATUS (#ISC) = 'PP')
        AND (#YYYYMM NE #WYYYYMM-N))
        OR  ((#SCR-MODE (#ISC) = 'E') AND (#SCR-STATUS (#ISC) = 'PP')
        AND (#YYYYMM LT #WYYYYMM-N))))
        AND (#SCR-TRAN (#ISC) NE 'REIN')
        AND (PAID-UP-DATE (#IFL) GE #WYYYYMMDD-N)  /* DW12
*          REINPUT 'Mode G/E Stat PP must have Valid Pd-To-Date' MARK *#SCR-PAID-THRU (#ISC)          /* bz1
V_MARK := POS(#SCR-PAID-THRU (#ISC))                                                            /* bz1
L_VLD := FALSE #TEXT := 'Mode G/E Stat PP must have Valid Pd-To-Date' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    MOVE 01 TO #DD /* for test of paid-to-date vs issue-date PM14
    IF (#SCR-TRAN (#ISC) = 'CONV')
        AND (#YYYYMM NE #WYYYYMM-N AND CI-V.ISSUE-DATE (#IFL)  /* PM5
        LT #YYYYMMDD) /* PM14
        AND (CI-V.ONLINE-ACTION-GN NE '2')
        AND (CI-V.ONLINE-ACTION (#IFL) NE '1')
        AND FUNCTION-TERM-POLICY(<#PLAN-A3>)                    /* YK5
*        AND ((#PLAN-A3 = 'LT' OR = 'RT' OR = 'LTD')            /* YK5
*        OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z')))          /* YK5
      MOVE (AD=P) TO #SCR-CV
*      REINPUT 'Term conversion must have current Pd-To-Date' MARK *#SCR-PAID-THRU (#ISC)               /* bz1
V_MARK := POS(#SCR-PAID-THRU (#ISC))                                                              /* bz1
L_VLD := FALSE #TEXT := 'Term conversion must have current Pd-To-Date' ESCAPE BOTTOM (PL_VLD_1.)  /* bz1
    END-IF
*
    IF (#SCR-TRAN (#ISC) = 'CONV')
        AND #SCR-PAID-THRU-YYYYMMDD (#ISC) NE CI-V.PAID-TO-DATE (#IFL)
*          REINPUT 'Paid to Date can not be changed on CONV transaction' MARK *#SCR-PAID-THRU (#ISC)          /* bz1
V_MARK := POS(#SCR-PAID-THRU (#ISC))                                                                    /* bz1
L_VLD := FALSE #TEXT := 'Paid to Date can not be changed on CONV transaction' ESCAPE BOTTOM (PL_VLD_1.) /* bz1
    END-IF
*
    DECIDE ON FIRST VALUE OF #SCR-TRAN (#ISC)
      VALUE 'REIN' PERFORM REINSTATEMENT-EDIT
      VALUE 'MODE' PERFORM MODE-CHG-EDIT
      VALUE 'MACV' PERFORM MODE-CHG-EDIT
      VALUE 'DEAD' PERFORM DEATH-EDIT
      VALUE 'CSV ' PERFORM CASH-VALUE-EDIT
      VALUE 'ANNU' PERFORM CASH-VALUE-EDIT         /* DW27
      VALUE 'CVEX' PERFORM CASH-VALUE-EDIT
      VALUE 'LAPS' PERFORM CASH-VALUE-EDIT
      VALUE 'LAPN' PERFORM CASH-VALUE-EDIT
      VALUE 'LAPC' PERFORM CASH-VALUE-EDIT
      VALUE 'LAPO' PERFORM CASH-VALUE-EDIT
      VALUE 'RSGN' PERFORM CASH-VALUE-EDIT
      VALUE 'CONV' PERFORM CONV-EDIT
      VALUE 'RPU ' PERFORM RPU-EDIT
      VALUE 'CORR' PERFORM CORRECTION-EDIT
      VALUE 'RTAD' PERFORM RT-ADJ-EDIT
VALUE 'ACDB' PERFORM ACCELERATED-DEATH-BENEFIT-EDIT                             /* YK7
 value 'LTCC' perform long-term-care-complete-edit               /* vt17
      NONE
*         REINPUT USING HELP MARK *#SCR-TRAN (#ISC)                                   /* bz1
V_MARK := POS(#SCR-TRAN (#ISC))                                               /* bz1
L_VLD := FALSE #TEXT := 'Choose the correct transaction' ESCAPE BOTTOM (PL_VLD_1.) /* bz1    /* vt17
    END-DECIDE
IF NOT L_VLD ESCAPE BOTTOM (PL_VLD_1.) END-IF                                     /* bz1
  END-FOR /*(0744)
*
IF NOT L_VLD ESCAPE TOP END-IF                                                      /* bz1
*
* * * * * * * * * UPDATE VIEW  * * * * * * * * * * * * * * * * *
*
  MOVE C*ACTIVE-SEGMENTS TO #CURR-NUM-SEGS
*
  MOVE *TIMN TO #HOLD-TIME
  RESET TR-REG-V                         /* INITIALIZE TRANS-REGISTER
  MOVE CI-V.ID-NUMBER        TO TR-REG-V.ID-NUMBER
  MOVE CI-V.NAME        TO TR-REG-V.NAME
  MOVE DATE-ACCT-UPDATE TO TR-REG-V.DATE-LAST-UPDATE
  MOVE *INIT-ID     TO TR-REG-V.TERMINAL-ID
  MOVE #CGA-CLERK   TO TR-REG-V.CLERK-ID
  MOVE #DATN        TO TR-REG-V.TRANSACTION-DATN
  MOVE #HOLD-TIME   TO TR-REG-V.TRANSACTION-TIMN
  MOVE 1 TO #ITR1
  MOVE 0 TO #ITR2
*
  RESET #ST-MBR (*)
  RESET #ST-MBRSHIP (*)
  RESET #ST-FACE (*)
  RESET #ST-NET-DB
  RESET #G-L-REINSTATE (*)
    #G-L-REINSTATE-DB (*)
    #G-L-LOSSES       (*)
    #G-L-LOSSES-DB    (*)
    #GAINS-LIVES-BY-CAT  (*)
    #LOSSES-LIVES-BY-CAT (*)
  MOVE CI-V.NUMBER-MEMBERSHIPS TO #HOLD-OLD-MEMSHIP
*
  PL_VLD_2.
* FOR #ISC 1 TO 9
  FOR #ISC 1 TO C*ACTIVE-SEGMENTS                         /* YK8
    IF #SCR-TRAN (#ISC) = ' '
      ESCAPE TOP
    END-IF
*
    MOVE #FILE-MATCHING-INDX (#ISC) TO #IFL    /* RESTORE MATCHING INDEX
*
    IF   (#IFL = 0) AND (#SCR-TRAN (#ISC) = 'REIN')
      ADD 1 TO #CURR-NUM-SEGS      /* BUMP NUMBER OF SEGMENTS
      MOVE #CURR-NUM-SEGS TO #IFL
      MOVE #IFL TO #FILE-MATCHING-INDX (#ISC)
    END-IF
*
IF #SCR-TRAN (#ISC) = 'CSV' OR = 'CVEX' OR = 'LAPS' OR = 'LAPN' OR = 'ANNU' /* DW27
  OR = 'LAPO' OR = 'RSGN' OR = 'CONV' OR = 'RPU' OR = 'DEAD' OR = 'LAPC'
      IF MTD-ACV-PREM-ADJ (#IFL) NE 9999999.99
        ADD MTD-ACV-PREM-ADJ (#IFL) TO CI-V.ACC-CASH-VALUE (#IFL)
        ADD MTD-ACV-PREM-ADJ (#IFL) TO CI-V.CASH-VALUE (#IFL)
        ADD MTD-ACV-PREM-ADJ (#IFL) TO CI-V.NXT-MON-CASH-VALUE (#IFL)
        ADD MTD-ACV-PREM-ADJ (#IFL) TO #SCR-ACV (#ISC)
        ADD MTD-ACV-PREM-ADJ (#IFL) TO #SCR-CSH-VL (#ISC)
      END-IF
*
      IF MTD-ACV-INT-ADJ (#IFL) NE 99999.99
        ADD MTD-ACV-INT-ADJ (#IFL) TO CI-V.ACC-CASH-VALUE (#IFL)
        ADD MTD-ACV-INT-ADJ (#IFL) TO CI-V.CASH-VALUE (#IFL)
        ADD MTD-ACV-INT-ADJ (#IFL) TO CI-V.NXT-MON-CASH-VALUE (#IFL)
        ADD MTD-ACV-INT-ADJ (#IFL) TO #SCR-ACV (#ISC)
        ADD MTD-ACV-INT-ADJ (#IFL) TO #SCR-CSH-VL (#ISC)
        ADD MTD-ACV-INT-ADJ (#IFL) TO #SCR-RPU-ACV (#ISC)
      END-IF
*
      IF MTD-ACV-COI-ADJ (#IFL) NE 99999.99
        SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM CI-V.ACC-CASH-VALUE (#IFL)
        SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM CI-V.CASH-VALUE (#IFL)
     SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM CI-V.NXT-MON-CASH-VALUE (#IFL)
        SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM #SCR-ACV (#ISC)
        SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM #SCR-CSH-VL (#ISC)
        SUBTRACT MTD-ACV-COI-ADJ (#IFL) FROM #SCR-RPU-ACV (#ISC)
      END-IF
    END-IF
*
    DECIDE ON FIRST VALUE OF #SCR-TRAN (#ISC)
      VALUE 'REIN'
        MOVE CI-V.ONLINE-ACTION (#IFL) TO #PRIOR-OA
        V_A78 := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := " "                                  /* bz1
        FETCH RETURN 'C230RPCI'
        #TEXT := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := V_A78                                /* bz1
        IF #TEXT <> " "                                         /* bz1
          IF #TEXT = SCAN 'Paid To'                             /* bz1
            V_MARK := POS(#SCR-PAID-THRU (#ISC))                /* bz1
          ELSE                                                  /* bz1
            V_MARK := POS(#SCR-PAID-UP (#ISC))                  /* bz1
          END-IF                                                /* bz1
          L_VLD := FALSE ESCAPE BOTTOM (PL_VLD_2.)              /* bz1
        END-IF                                                  /* bz1
        MOVE TRUE TO #DID-REIN
      VALUE 'MODE'
        V_A78 := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := " "                                  /* bz1
        FETCH RETURN 'C230MPCI'
        #TEXT := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := V_A78                                /* bz1
        IF #TEXT <> " "                                         /* bz1
          V_MARK := POS(#SCR-STATUS (#ISC))                     /* bz1
          L_VLD := FALSE ESCAPE BOTTOM (PL_VLD_2.)              /* bz1
        END-IF                                                  /* bz1
        PERFORM BADJ-ADJ
      VALUE 'MACV'
        V_A78 := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := " "                                  /* bz1
        FETCH RETURN 'C230MPCI'
        #TEXT := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := V_A78                                /* bz1
        IF #TEXT <> " "                                         /* bz1
          V_MARK := POS(#SCR-STATUS (#ISC))                     /* bz1
          L_VLD := FALSE ESCAPE BOTTOM (PL_VLD_2.)              /* bz1
        END-IF                                                  /* bz1
        PERFORM BADJ-ADJ
      VALUE 'DEAD' FETCH RETURN 'C2301PCI'
        MOVE TRUE TO #DID-DEAD #DID-TERM
        RESET X-FIRST-PLACE-FEE (#IFL)
* YK8  Do not reset - need in 2320 to display correct calculations
*       X-BILL-ADJUST (#IFL)
      VALUE 'CSV ' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-CSV #DID-TERM
      VALUE 'ANNU' FETCH RETURN 'C2302PCI' #PASSED-INFO-1    /* DW27
        MOVE TRUE TO #DID-CSV #DID-TERM

        IF ST-V.MEC-IND (#IFL) = 'Y'
          MOVE '** MEC POLICY **' TO #SCR-MEC-POL
        END-IF
        RESET X-BILL-DOLLAR (#IFL)
        RESET X-FIRST-PLACE-FEE (#IFL) X-BILL-ADJUST (#IFL)
      VALUE 'CVEX' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-CSV #DID-TERM
        RESET X-BILL-DOLLAR (#IFL) RESET X-FIRST-PLACE-FEE (#IFL)
*       X-BILL-ADJUST (#IFL)  /* YK8
      VALUE 'LAPS' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-LAPS #DID-TERM
        RESET X-BILL-DOLLAR (#IFL) X-FIRST-PLACE-FEE (#IFL)
*       X-BILL-ADJUST (#IFL)    /* YK8
      VALUE 'LAPN' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-LAPN #DID-TERM
        RESET X-BILL-DOLLAR (#IFL) X-FIRST-PLACE-FEE (#IFL)
*       X-BILL-ADJUST (#IFL)    /* YK8
      VALUE 'LAPC' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-LAPC #DID-TERM
        RESET X-BILL-DOLLAR (#IFL)
      VALUE 'LAPO' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-LAPO #DID-TERM
        RESET X-BILL-DOLLAR (#IFL) RESET X-FIRST-PLACE-FEE (#IFL)
*       X-BILL-ADJUST (#IFL)    /* YK8
      VALUE 'RSGN' FETCH RETURN 'C2302PCI' #PASSED-INFO-1
        MOVE TRUE TO #DID-RSGN #DID-TERM
        RESET X-BILL-DOLLAR (#IFL) X-FIRST-PLACE-FEE (#IFL)
*       X-BILL-ADJUST (#IFL)       YK8
*        if #cga-mf-scr-parm-1-n = mask('999999999')                           /* vt2 /* vt3
if #CGA-MF-SCR-PARM-1-N lt 9999999                                            /* vt3
          X-BILL-DOLLAR (#IFL) := #CGA-MF-SCR-PARM-1-N / 100     /* YK8
end-if                                                                /* vt2
        RESET #CGA-MF-SCR-PARM-1-N                             /* YK8
      VALUE 'CONV' FETCH RETURN 'C2304PCI'
        MOVE #ISC TO #HOLD-ISC
        MOVE #IFL TO #HOLD-IFL
        MOVE TRUE TO #DID-CONV
        RESET X-BILL-DOLLAR (#IFL)
      VALUE 'RPU'  FETCH RETURN 'C2306PCI' #PASSED-INFO-1 #PASSED-INFO-2
        MOVE #ISC TO #HOLD-ISC
        MOVE #IFL TO #HOLD-IFL
        MOVE TRUE TO #DID-RPU
        RESET X-BILL-DOLLAR (#IFL)
      VALUE 'CORR'
        V_A78 := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := " "                                  /* bz1
        FETCH RETURN 'C2309PCI'
        #TEXT := #SCR-MSG-LINE-1                                /* bz1
        #SCR-MSG-LINE-1 := V_A78                                /* bz1
        IF #TEXT <> " "                                         /* bz1
          IF #TEXT = SCAN 'Issue Date day'                      /* bz1
            V_MARK := POS(#SCR-EFF-DTE (#ISC))                  /* bz1
          ELSE                                                  /* bz1
            V_MARK := POS(#SCR-STATUS (#ISC))                   /* bz1
          END-IF                                                /* bz1
          L_VLD := FALSE ESCAPE BOTTOM (PL_VLD_2.)              /* bz1
        END-IF                                                  /* bz1
      VALUE 'RTAD' FETCH RETURN 'C2310PCI'
        MOVE TRUE TO #DID-RTAD
        COMPUTE ST-V.X-BILL-ADJUST (#IFL) = ST-V.X-BILL-ADJUST (#IFL)
          + (#CGA-MF-SCR-PARM-1-N / 100)
      VALUE 'ACDB'
        FETCH RETURN 'C2303PCI' #PASSED-INFO-3                  /* YK7
        INPUT #PASSED-INFO-3                                    /* YK7
        MOVE TRUE TO #DID-ACDB                                  /* YK7
value 'LTCC'                                                      /* vt17
 fetch return 'C2312PCI'                                         /* vt17
      NONE IGNORE
    END-DECIDE
*
IF #SCR-TRAN(#ISC) = 'REIN' OR = 'CSV ' OR = 'LAPS' OR = 'DEAD' OR = 'ANNU' /* DW27
        OR = 'CVEX' OR = 'RSGN' OR = 'LAPN' OR = 'LAPO'
OR = 'LAPC' OR = 'ACDB'                                                 /* YK7
        OR = 'CONV'
      PERFORM ACC-STATS              /* ACCUM MBRS STATISTICS
*
      IF   (#CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU')
          AND (#SCR-TRAN (#ISC) NE 'DEAD')
        RESET MBRSHIP-MTD-DET-V
        COMPUTE MBRSHIP-MTD-DET-V.ENTRY-DATE
          = 99999999 - #TODAY-YYYYMMDD-N
        MOVE #HOLD-ISN        TO MBRSHIP-MTD-DET-V.REC-ISN
        MOVE #CGA-ID          TO MBRSHIP-MTD-DET-V.ID-NUMBER
* YK5 Start
* Replace multiple IF statements with DECIDE
        DECIDE ON FIRST VALUE #SCR-TRAN (#ISC)
          VALUE 'CVEX'
            IF #SCR-TRAN-OLD (#I1) = 'CVEI'
              MOVE '0' TO MBRSHIP-MTD-DET-V.CODE    /* NG3
            ELSE
              MOVE 'X' TO MBRSHIP-MTD-DET-V.CODE
            END-IF
          VALUE 'RSGN'
            MOVE 'S' TO MBRSHIP-MTD-DET-V.CODE
          VALUE 'LAPN'
            MOVE 'T' TO MBRSHIP-MTD-DET-V.CODE
          VALUE 'LAPO'
            MOVE 'U' TO MBRSHIP-MTD-DET-V.CODE
          VALUE 'LAPC'
            MOVE 'V' TO MBRSHIP-MTD-DET-V.CODE
          VALUE 'CSV'
            MOVE '2' TO MBRSHIP-MTD-DET-V.CODE /* MAPPED TO CASH-SUR
          VALUE 'ANNU'                            /* PM32
            MOVE 'C' TO MBRSHIP-MTD-DET-V.CODE    /* PM32
          VALUE 'ACDB'                            /* YK7
            MOVE 'F' TO MBRSHIP-MTD-DET-V.CODE    /* YK7
          VALUE 'CONV'                            /* NG3
            MOVE '1' TO MBRSHIP-MTD-DET-V.CODE    /* NG3
          NONE VALUE
           MOVE #SCR-TRAN(#ISC) TO MBRSHIP-MTD-DET-V.CODE /* GET 1ST LTR
        END-DECIDE
*  YK5 End
        MOVE #SCR-EFF-DTE-YYYYMMDD(#ISC) TO MBRSHIP-MTD-DET-V.ISSUE-DATE
        MOVE #PUR-MBRS TO MBRSHIP-MTD-DET-V.NUM-MBRSHIPS
        STORE MBRSHIP-MTD-DET-V
*
        MOVE *PROGRAM TO #PROGRAM
        CALLNAT 'MSSNL003'           /* NG3
          MBRSHIP-MTD-DET-V.ID-NUMBER
          MBRSHIP-MTD-DET-V.CODE
          #CGA-USER-COMPANY
          MBRSHIP-MTD-DET-V.ISSUE-DATE
          #PROGRAM
          #USE-TIMX
      END-IF
    END-IF
  END-FOR /*(1446)
  UNTIL L_VLD                   /* bz1
END-REPEAT                      /* bz1                           /*  <<<<<<<
*
* * * GENERAL UPDATING * * * * *
*
RESET #NUM-SEGS #WORK-AMT
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                     /* YK8
IF ci-v.STATUS (#I1) = 'D'                                       /*  vt8
    ADD 1 TO #NUM-SEGS
  END-IF
*
 IF   (ci-v.STATUS (#I1) = 'D') AND (CI-V.MODE (#I1) = 'G')       /* vt8
      AND (CI-V.PAY-STATUS (#I1) LE '40')
    COMPUTE #WORK-AMT = (ANNUAL-PREM (#I1) / 12) + #WORK-AMT
*
    IF X-ALT-LP-IND     (#I1) = '1' OR = '2'
      MOVE X-ALT-LP-AMT (#I1) TO #WORK-AMT
    END-IF
*
    IF X-ALT-LP-IND-2     (#I1) = '1' OR = '2'
      MOVE X-ALT-LP-AMT-2 (#I1) TO #WORK-AMT
    END-IF
  END-IF
END-FOR
*
IF #NUM-SEGS = 0
  RESET NUMBER-MEMBERSHIPS
  MOVE '9' TO CI-V.HANDLE-FLAG
    CI-V.S-ADDRESS-CODE               /* maybe obsolete NG2
END-IF
*
* * GIVE THEM A CHANCE TO CHANGE THEIR MINDS * * *
*
MOVE (AD=P) TO #SCR-CV
MOVE (AD=P) TO #SCR-EFF-DTE-CV (*)
MOVE (AD=P) TO #SCR-BILL-TO-CV (*)
MOVE (AD=P) TO #SCR-FACE-AMT-CV (*)
MOVE (AD=P) TO #SCR-SMK-CV      (*)
MOVE #SCR-MEC-POL TO #TEXT
*
IF #CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU'
  IF #DID-CSV
      AND (CI-V.NUMBER-MEMBERSHIPS = 0)
    COMPRESS #TEXT 'ALL UNITS CSV"D - CHECK IT OUT - PRESS ENTER IF OK'
      INTO #TEXT
  ELSE
    COMPRESS #TEXT  'CHECK IT OUT - PRESS ENTER IF OK'
      INTO #TEXT
  END-IF

  INPUT TEXT #TEXT USING MAP 'C2300MCI'
*
  IF   (#CGA-SCR-COMMAND = '*' OR = ' ')
      AND (#CGA-SCR-ID = #CGA-ORIG-ID)
    IGNORE
  ELSE
    BACKOUT TRANSACTION /* BECAUSE OF MBRSHIP DTL STORE ABOVE & OTHERS
    FETCH 'G1000PXX'
  END-IF
END-IF
*
* * UPDATE RECORDS * * * * *
*
MOVE #DATN      TO DATE-ACCT-UPDATE
MOVE #DATN      TO DTS-DATN
MOVE #HOLD-TIME TO DTS-TIMN
*
IF   #REC-CHGD
  IF NOT #CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU'
    BACKOUT TRANSACTION /* BECAUSE OF MBRSHIP DTL STORE ABOVE & OTHERS
  ELSE
    RESET #I1
#HOLD-IFL := #IFL                                                    /* YK7
FOR #ISC 1 TO C*ACTIVE-SEGMENTS                                      /* YK7
      MOVE #FILE-MATCHING-INDX (#ISC) TO #IFL /* RESTORE MATCHING INDX
*
      IF #SCR-TRAN (#ISC) = 'CSV' OR = 'CVEX' OR = 'LAPS' OR = 'LAPN'
  OR = 'ANNU'                                                    /* DW27
*         OR = 'LAPO' OR = 'RSGN' OR = 'CONV' OR = 'RPU' OR = 'LAPC'
  OR = 'LAPO' OR = 'RSGN' OR = 'RPU' OR = 'LAPC'                 /* DW28
        ADD 1 TO #I1
        MOVE ISSUE-DATE(#IFL) TO #NS-ISS-DT (#I1)  /* DW22
        MOVE #SCR-TRAN (#ISC) TO #NS-TRAN (#I1)
* "DEAD" and "CONV" CANNOT BE INCLUDED IN ABOVE SINCE ACV ADJ IS NEEDED IN C2320PCI
        IF   (MTD-ACV-PREM-ADJ (#IFL) NE 9999999.99)
            AND (MTD-ACV-PREM-ADJ (#IFL) NE 0)
          MOVE 9999999.99 TO MTD-ACV-PREM-ADJ (#IFL)
        END-IF
*
        IF   (MTD-ACV-INT-ADJ (#IFL) NE 99999.99)
            AND (MTD-ACV-INT-ADJ (#IFL) NE 0)
          MOVE 99999.99 TO MTD-ACV-INT-ADJ (#IFL)
        END-IF
*
        IF   (MTD-ACV-COI-ADJ (#IFL) NE 99999.99)
            AND (MTD-ACV-COI-ADJ (#IFL) NE 0)
          MOVE 99999.99 TO MTD-ACV-COI-ADJ (#IFL)
        END-IF
      END-IF
*
      IF  #SCR-TRAN (#ISC) = 'CORR'
        MOVE #CGA-MF-SCR-PARM-1 TO #SCR-MEC-IND
        GET ST-V #CGA-ISN
        MOVE #SCR-MEC-IND-X (#ISC) TO ST-V.MEC-IND (#IFL)
        UPDATE (1768)
      END-IF
    END-FOR
*
    IF #DID-CONV
      GET ST-V #CGA-ISN
      ADD (#CGA-MF-SCR-PARM-1-N / 100) TO DUES-BALANCE
      UPDATE (1775)
    END-IF
*
    FETCH RETURN 'C2311PCI' #STATS-TABLE  /* UPDATE MBR STATS
      #PASSED-INFO-1
      #PASSED-INFO-2
      #PASSED-INFO-3      /* YK7
      #REIN-TABLE
      #G-L-TABLE
      #GAINS-LIVES-BY-CAT-TABLE
*
* BELOW IS ALSO IN C2304PCI AT LINES 2200 & 6200
FOR #ISC 1 TO C*ACTIVE-SEGMENTS   /* RESET ISSUE DATE ON TERM CONVERSIONS
      MOVE #FILE-MATCHING-INDX (#ISC) TO #IFL /* Setup IFL     /* DW26
      IF   (#SCR-TRAN (#ISC) = 'CONV')
*      AND (#SCR-PLN (#ISC) = 'RT' OR = 'LT')                    /* PM19
          AND (((#SCR-PLN (#ISC) = 'RT') AND (ST-V.PLAN (#ISC) = 'LT'))
          OR ((#SCR-PLN (#ISC) = 'LT') AND (ST-V.PLAN (#ISC) = 'RT')))
          AND (CI-V.ONLINE-ACTION-GN NE '2')   /* NOT 1ST MONTH CONV
          AND (CI-V.ONLINE-ACTION (#IFL) NE '1')
        MOVE #FILE-MATCHING-INDX (#ISC) TO #IFL
        MOVE #DATN TO ISSUE-DATE (#IFL)
        reset tot-premiums-paid(#ifl)                     /* vt14
      END-IF
    END-FOR
*
    IF #DID-CONV OR #DID-MODE OR #DID-RPU /* bill-dollar updated
        OR #DID-RTAD              /* BILL ADJUST updated
      UPDATE (0519)
    END-IF
*
    IF #DID-TERM OR #DID-REIN
*            DE-GRANDFATHERING PROCESSING
      MOVE ST-V.PROCESS-IND  TO #STORE-PROCESS-IND
      MOVE ST-V.INTRO-FLAG   TO #STORE-INTRO-FLAG
      MOVE #STORE-FLAGS TO #CGA-MF-ORIG-COMMAND
      RESET #CGA-GOOD-TAS   /* for update ind
      FETCH RETURN 'C2315PCI' #DID-REIN #DID-TERM #DID-DEAD
      MOVE #CGA-MF-ORIG-PARM-2 TO #NX-IND
      RESET #CGA-MF-ORIG-PARM-2
*
      IF #CGA-GOOD-TAS  /* ind to update st-v rec
        MOVE #CGA-MF-ORIG-COMMAND TO #STORE-FLAGS
        MOVE #STORE-PROCESS-IND TO ST-V.PROCESS-IND
        MOVE #STORE-INTRO-FLAG  TO ST-V.INTRO-FLAG
      END-IF
*
      IF  (ST-V.PROCESS-IND NE 'G')
          OR (NUMBER-MEMBERSHIPS = 0)
        RESET ST-V.DUES-BALANCE ST-V.DUES-FPF /* 10/2003 khb
      END-IF
*
      UPDATE (0519)  /* flags & bill-dollar
      RESET #CGA-GOOD-TAS #CGA-MF-ORIG-COMMAND
    END-IF
*
    UPDATE RECORD (0518)  /*  <<<<<<<
*
    GET ST-V #CGA-ISN
*    IF ST-V.ALOT-SW NE 'A'                                    /* DW21
*      MOVE 'I' TO ST-V.ALOT-SW
*    END-IF
    MOVE 'A' TO ST-V.ALOT-SW /* To get PROCESS-IND & INTRO-FLAG
    UPDATE (1835)
*
    MOVE TR-REG-V.ID-NUMBER TO TR-V.ID-NUMBER
    MOVE TR-REG-V.NAME TO TR-V.NAME
    MOVE TR-REG-V.DATE-LAST-UPDATE TO TR-V.DATE-LAST-UPDATE
    MOVE TR-REG-V.TERMINAL-ID TO TR-V.TERMINAL-ID
    MOVE TR-REG-V.CLERK-ID TO TR-V.CLERK-ID
    MOVE TR-REG-V.TRANSACTION-DATN TO TR-V.TRANSACTION-DATN
    MOVE TR-REG-V.TRANSACTION-TIMN TO TR-V.TRANSACTION-TIMN
    MOVE TR-REG-V.OLD-DATA (*) TO TR-V.OLD-DATA (*)
    MOVE TR-REG-V.NEW-DATA (*) TO TR-V.NEW-DATA (*)
    MOVE ST-V.PROCESS-IND TO TR-V.PROCESS-IND
*
    IF #NX-IND = '1'
      ADD 1 TO #SFX   /* DW22
      MOVE 403 TO SYNC-FLD-NUM (#SFX)
      MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
      ADD 1 TO #SFX   /* DW22
      MOVE 503 TO SYNC-FLD-NUM (#SFX)
      MOVE 'NS Message' TO SYNC-FLD-NEW-DATA (#SFX)
    END-IF
*
    IF #NX-IND = '2'
      ADD 1 TO #SFX   /* DW22
      MOVE 402 TO SYNC-FLD-NUM (#SFX)
      MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
    END-IF
*
    IF #NX-IND = '3'
      ADD 1 TO #SFX   /* DW22
      MOVE 409 TO SYNC-FLD-NUM (#SFX)
      MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
    END-IF
*
    IF #NX-IND = '4'
      ADD 1 TO #SFX   /* DW22
      MOVE 410 TO SYNC-FLD-NUM (#SFX)
      MOVE 'NX Message' TO SYNC-FLD-NEW-DATA (#SFX)
    END-IF
*
    IF #DID-TERM AND NOT #DID-DEAD
*     FOR #I1 1 TO 9
      FOR #I1 1 TO C*ACTIVE-SEGMENTS                              /* YK8
        IF #NS-ISS-DT (#I1) NE 0
          ADD 1 TO #SFX   /* DW22
          MOVE 504 TO SYNC-FLD-NUM (#SFX)
          COMPRESS 'NS Message' #NS-ISS-DT-A (#I1) #NS-TRAN (#I1)
            INTO SYNC-FLD-NEW-DATA (#SFX)
        END-IF
      END-FOR
    END-IF
*
    IF #DID-REIN
      ADD 1 TO #SFX   /* DW22
      MOVE 505 TO SYNC-FLD-NUM (#SFX)
      MOVE 'NS Message' TO SYNC-FLD-NEW-DATA (#SFX)
    END-IF
*
    STORE TR-V
*
    IF   #DID-CSV
        AND (CI-V.NUMBER-MEMBERSHIPS = 0)
      FIND (1) FR-V WITH MEMBER-KEY = #CGA-ID-G
        MOVE 'Y' TO INACTIVE-FLAG
        UPDATE (1902)
      END-FIND
    END-IF
*
    IF #DID-REIN
      FIND (1) FR-V WITH MEMBER-KEY = #CGA-ID-G
        RESET INACTIVE-FLAG
        UPDATE (1909)
      END-FIND
*
      FETCH RETURN 'C2307PCI' /* PM6
    END-IF
  END-IF
END-IF
*
END TRANSACTION
*
IF   #REC-CHGD                                /* DW30
    AND (#CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU')
  CALLNAT 'GAUTHSXX' CI-V.ID-NUMBER      /*Set ALOT-CHG-AUTH if FA chged
    #CGA-CLERK #FORCE-A /*Set ALOT-CHG-AUTH if FA chged
END-IF
*
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                                /* YK8
  IF  (CI-V.PAY-STATUS (#I1) = '48')   /* Puap done today
      AND (CI-V.DATE-ACCT-UPDATE = #DATN)
    CALLNAT 'C2009SNM' #I1 CI-V.ID-NUMBER #CGA-CLERK /* set mec ind
  END-IF
END-FOR
*
IF   #REC-CHGD
  IF NOT #CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU'
    IF #DID-TERM
      COMPRESS #TEXT
        'TXN COMP BUT RCD NOT UPDATED-PRESS ENTER TO SEE CALCS'
        INTO #TEXT
    ELSE
      COMPRESS  #TEXT 'TRANS COMPLETED BUT RCD NOT UPDATED' INTO #TEXT
    END-IF
  ELSE
    IF #DID-DEAD OR #DID-CSV OR #DID-RPU OR #DID-LAPO OR #DID-RSGN
        OR #DID-LAPS OR #DID-LAPN OR #DID-LAPC OR #DID-REIN      /* DW31
        OR #DID-ACDB                                             /* YK7
    MOVE 'TXN COMPLETED, PRESS ENTER TO SEE PAYMENT CALCS & to Complete'
        TO #TEXT
*
      IF #DID-DEAD                           /* PM37
        CALLNAT 'DEATHNOT' CI-V.ID-NUMBER    /* PM37
      END-IF                                 /* PM37
    ELSE
      MOVE 'TRANS COMPLETED' TO #TEXT
    END-IF
  END-IF
ELSE
  MOVE 'NO UPDATES REQUESTED' TO #TEXT
END-IF
*
COMPRESS #TEXT #SCR-MSG-LINE-2 INTO #TEXT
*
IF #DID-DEAD OR #DID-CSV OR #DID-RPU OR #DID-LAPO OR #DID-RSGN
    OR #DID-LAPS OR #DID-LAPN OR #DID-LAPC OR #DID-REIN          /* DW31
    OR #DID-ACDB                                                 /* YK7
  INPUT TEXT #TEXT USING MAP 'C2300MCI'
*
* write 'after Input' #cga-scr-command #did-csv #cga-scr-suffix
  IF  (#CGA-SCR-COMMAND = '*' OR = ' ')
      OR ((#DID-DEAD OR #DID-CSV OR #DID-LAPO  /* TO FORC DOING C2320PCI
      OR   #DID-ACDB                                             /* YK7
      OR #DID-RSGN OR #DID-LAPS OR #DID-LAPN OR #DID-LAPC)
      AND (#CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU'))
    IGNORE
  ELSE
    FETCH 'G1000PXX'
  END-IF
*
  IF #DID-DEAD OR #DID-CSV OR #DID-RPU OR #DID-LAPO OR #DID-RSGN
      OR #DID-LAPS OR #DID-LAPN OR #DID-LAPC OR #DID-REIN    /* DW31
      OR #DID-ACDB                                           /* YK7
    #IFL := #HOLD-IFL                                      /* YK7
    FETCH 'C2320PCI' #CGA-CLERK #DID-DEAD #DID-CSV #DID-RPU
   #DID-LAPO #DID-RSGN #DID-LAPN #DID-LAPS #DID-LAPC #DID-REIN #DID-ACDB
#PASSED-INFO-1 #PASSED-INFO-2 #PASSED-INFO-3 #HOLD-TIME   /* DW31    /* YK7 add time
      #scr-policy-number(*)                     /* vt12
  END-IF
END-IF
*
MOVE #CGA-ORIG-ID TO #CGA-SCR-ID
MOVE 'CI'         TO #CGA-SCR-COMMAND
*
IF NOT #CGA-ORIG-SUFFIX = 'UPD' OR = 'UPO' OR = 'PUU'
  MOVE #CGA-ORIG-SUFFIX TO  #CGA-SCR-SUFFIX
ELSE
  RESET #CGA-SCR-SUFFIX
END-IF
*
RESET #ERR-MSG
INPUT TEXT #TEXT USING MAP 'C2300MCI'
*
FETCH 'G1000PXX'
*
* * * * *
DEFINE SUBROUTINE BADJ-ADJ
* * * * *
MOVE TRUE TO #DID-MODE
RESET X-BILL-DOLLAR (#IFL)
COMPUTE #ADJ = #CGA-MF-SCR-PARM-1-N / 100
ADD #ADJ TO ST-V.X-BILL-ADJUST (#IFL)
*
MOVE #CGA-MF-SCR-PARM-2 TO #DUES-ADJ-A
ADD #DUES-ADJ TO ST-V.DUES-BALANCE
*
MOVE #CGA-MF-ORIG-PARM-1 TO #FPF-ADJ-A             /* PM20
ADD #FPF-ADJ TO ST-V.X-FIRST-PLACE-FEE (#IFL)
*
END-SUBROUTINE
*
* * * * *
DEFINE SUBROUTINE REINSTATEMENT-EDIT
* * * * *
*
MOVE TRUE TO #DOING-REINSTATEMENT
*
IF #SCR-PLN (#ISC) = 'FSO'
  REINPUT 'FSO policies cannot be reinstated'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
RESET #REIN-TERMED-THIS-MON
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                               /* YK8
  IF   (CI-V.ISSUE-DATE(#I1) = #SCR-EFF-DTE-YYYYMMDD (#ISC)) /* REIN TO
     AND (CI-V.PLAN (#I1) = #SCR-PLN (#ISC))                   /* PURGED
     AND (CI-V.STATUS (#I1) = 'E' OR = 'F' OR = 'G')           /* POLICY
*
    IF NOT #CGA-ORIG-SUFFIX = ' ' OR = 'PUU'
      MOVE 'CI' TO #CGA-SCR-COMMAND
      MOVE 'PUU' TO #CGA-SCR-SUFFIX
      INPUT TEXT '"PUU" must be used for current reinstatements'
        USING MAP 'G1000MXX'
      END TRANSACTION
      FETCH 'G1000PXX'
    END-IF
*
    IF CI-V.STATUS (#I1) = 'E'
      MOVE TRUE TO #REIN-TERMED-THIS-MON
    END-IF
  END-IF
END-FOR
*
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                              /* YK8
  IF   (#SCR-EFF-DTE (#I1) = #SCR-EFF-DTE (#ISC))
      AND (#SCR-PLN (#I1) = #SCR-PLN (#ISC))
    ESCAPE TOP
  END-IF
*
  IF #SCR-TRAN (#I1) NE ' '
    REINPUT 'Only 1 REIN per trans is allowed'
      MARK *#SCR-TRAN (#ISC)
  END-IF
END-FOR
*
IF CI-V.STATUS (#IFL) = 'D'
  REINPUT 'REIN to active policy not allowed'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
PERFORM EDIT-FACE-AMOUNT
*
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS             /* YK8
  IF #I1 = #ISC
    ESCAPE TOP
  END-IF
*
  IF   (#SCR-EFF-DTE (#I1) = #SCR-EFF-DTE (#ISC))
      AND (#SCR-PLN (#I1) = #SCR-PLN (#ISC))
      AND (#CGA-ORIG-SUFFIX NE 'PUU')
    REINPUT 'Duplicate Issue Dates cannot exist'
      MARK *#SCR-EFF-DTE (#ISC)
  END-IF
END-FOR
*
IF #SCR-EFF-DTE-YYYYMMDD (#ISC) GT 19860630
  IF #SCR-SMK (#ISC) = 'S' OR = 'N'
    IGNORE
  ELSE
    REINPUT 'SMOKER FLAG MUST BE S OR N'
      MARK *#SCR-SMK (#ISC)
  END-IF
ELSE
  IF #SCR-SMK (#ISC) NE 'C'
    REINPUT 'SMOKER FLAG MUST BE C'
      MARK *#SCR-SMK (#ISC)
  END-IF
END-IF
*
MOVE CI-V.ID-NUMBER TO #START-KEY-ID
  #END-KEY-ID
RESET #FOUND-HIST
*
IF #CGA-ORIG-SUFFIX NE 'PUU'
  READ VA-HIST-V WITH RECORD-KEY FROM #START-KEY THRU #END-KEY
    IF   (#SCR-EFF-DTE-YYYYMMDD (#ISC) = VA-HIST-V.REC-KEY-ISSUE-DT)
*    AND (SPLIT-IND (#IFL) = VA-HIST-V.REC-KEY-SPLIT-IND)
        AND (#SCR-PLN (#ISC) = ISSUE-PLAN)
      MOVE TRUE TO #FOUND-HIST
      ESCAPE BOTTOM
    END-IF
  END-READ
*
  IF NOT #FOUND-HIST
    REINPUT 'Entered Iss Date & Plan must match prior V/A History'
      MARK *#SCR-TRAN (#ISC)
  END-IF
*
  IF   (#SCR-STATUS (#ISC) = 'RPU' OR = 'ETI' )
      OR  (ETI-DATE NE 0)
    REINPUT 'RPU/ETI Policies cannot be reinstated'
      MARK *#SCR-STATUS (#ISC)
  END-IF
END-IF
*
END-SUBROUTINE /*(2022)
*
* * * * * *
DEFINE SUBROUTINE MODE-CHG-EDIT
* * * * * *
*
IF   (#SCR-MODE (#ISC) = 'E')
    AND (CI-V.MODE (#IFL) NE 'E')
    AND (NOT PAD-CODE = 'E' OR = 'V' OR ='W' OR = 'X' OR = 'Z'
    OR = 'P' OR = 'D' OR = 'L')                  /* PM34
    AND (NOT #CGA-CLERK = 'VXT' OR = 'KHB')
  REINPUT 'MODE cannot change to "E" unless a MODE "E" already exists'
    MARK *#SCR-MODE (#ISC)
END-IF
*
IF   (#SCR-MODE (#ISC) = '0' OR = '1' OR = '2' OR = '4')
*    AND (CC-NUM = ' ')                                   /* YK3
    AND FUNCTION-CC-NUMBER(<CI-V.ID-NUMBER>) = ' '       /* YK3
  REINPUT 'CC Number must exist for Mode 0/1/2/4'
    MARK *#SCR-MODE (#ISC)
END-IF
*
IF   (#SCR-MODE (#ISC) = '1' OR = '2' OR = '4')
    AND ((X-ALT-LP-IND (#IFL) = '8')
    OR  (X-ALT-LP-IND-2 (#IFL) = '8'))
  REINPUT 'CC Mode must be 0 if CIP exists'
    MARK *#SCR-MODE (#ISC)
END-IF
*
IF   (MODE (#IFL) = 'G') AND (#SCR-MODE (#ISC) NE 'G')
    AND (NOT #CGA-CLERK = 'VXT')
  IF  (PAY-STATUS (#IFL) = '12' OR = '21')        /* UNPD OR GAWT
      OR (#SCR-MODE (#ISC) = 'A' OR = 'S' OR = 'Q' OR = 'M'
      OR = '0' OR = '1' OR = '2' OR = '4')
    IGNORE
  ELSE
    REINPUT 'PAY STATUS MUST HAVE BEEN UNPD OR GAWT'
      MARK *#SCR-TRAN (#ISC)
  END-IF
END-IF
*
if #scr-pln(#isc) ne 'GT1'                                                /* vt15
  IF (#SCR-PAID-THRU-YYYYMMDD (#ISC) GT #SCR-PAID-UP-YYYYMMDD (#ISC))
    REINPUT 'Paid-to Date cannot be after Paid-up Date'
      MARK *#SCR-TRAN (#ISC)
  END-IF
end-if                                                                    /* vt15
*
IF   (PAID-TO-DATE (#IFL) NE #SCR-PAID-THRU-YYYYMMDD (#ISC))
*   AND (NOT #SCR-PLN (#ISC) = 'LT' OR ='RT')                          /* YK5
AND (NOT FUNCTION-TERM-POLICY(<#SCR-PLN(#ISC)>))                   /* YK5
    AND (#SCR-TRAN (#ISC) NE 'MACV')
* IF  (#SCR-PLN-A1 (#ISC) LT 'U')                                      /* YK5
*       OR (#SCR-PLN-A1 (#ISC) GT 'Z')                                 /* YK5
  REINPUT 'MACV must be used for Whole-Life PD-TO date changes'
    MARK *#SCR-TRAN (#ISC)
* END-IF
END-IF
*
END-SUBROUTINE /*(2131)
*
* * * * *
DEFINE SUBROUTINE DEATH-EDIT
* * * * *
*
IF WIDOW-FLAG NE 'Y'
*  REINPUT 'WIDOW DEPT HAS NOT DONE WN SCREEN YET' MARK *#SCR-TRAN (#ISC)
L_VLD := FALSE #TEXT := 'Death has not been entered in DN Screen yet'  /* bz1
END-IF
*
IF DATE-OF-DEATH = 0
*  REINPUT 'WIDOW DEPT HAS NOT ENTERED DOD YET' MARK *#SCR-TRAN (#ISC)
L_VLD := FALSE #TEXT := 'Death has not been entered in DN Screen yet'  /* bz1
END-IF
*
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                 /* YK8
  IF   (#SCR-EFF-DTE (#I1) NE ' ')
      AND (#SCR-TRAN (#I1) NE 'DEAD')
    MOVE 'DEAD' TO #SCR-TRAN (#I1)
  END-IF
END-FOR
*
PERFORM BADJ-FPF-TEST   /* DW15   /* YK8
*
END-SUBROUTINE /*(2190)
*
* * * * * *
DEFINE SUBROUTINE CASH-VALUE-EDIT
* * * * * *
* find stat with stat.id-number = ci-v.id-number                 /* vt13   /* vt16 \/
*   for #l 1 c*active-segments
*     if stat.issue-date(#l) = #SCR-EFF-DTE-YYYYMMDD (#ISC)
*       move stat.policy-id(#l) to #scr-policy-number (#isc)
*       escape bottom
*     end-if
*   end-for
* end-find                                                                 /* vt16 /\
*
#owner-id-number := get-policy-owner(<#scr-policy-number (#ifl)>)          /* vt18  was #isc   03/26/2018
find cont with id-number = #owner-id-number
  if cont.ssn eq 0
    reinput 'Owner missing SSN/TIN'
      MARK *#SCR-TRAN (#ISC)
    escape bottom
  end-if
end-find                                                         /* vt13 /\
*
IF WIDOW-FLAG = 'Y'
  REINPUT 'This tran invalid if MBR is DEAD'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
IF #SCR-FACE-AMT (#ISC) GT FACE-AMOUNT (#IFL)
  REINPUT 'FACE CASHED/LAPSED CANNOT EXCEED CURRENT FACE'
    MARK *#SCR-FACE-AMT (#ISC)
END-IF
*
RESET #HAS-1035-LUMP-SUM                 /* DW25
MOVE '135' TO #SUFFIX
PERFORM CALL-GMECCSXX
IF (#1035-EXCH-AMT NE 0) OR (#LUMP-PMT NE 0)
  MOVE TRUE TO #HAS-1035-LUMP-SUM           /* DW19
END-IF
* display ci-v.id-number #has-1035-lump-sum #1035-exch-amt #lump-pmt
*
IF #SCR-FACE-AMT (#ISC) NE FACE-AMOUNT (#IFL)
* IF  (PLAN (#IFL) = MASK (..'F'))    /* DW25
  IF #HAS-1035-LUMP-SUM               /* DW25
*     OR (PLAN (#IFL) = 'AL')            /* DW8
      OR SUBSTR(CI-V.PLAN (#IFL),1,2) EQ 'AL'
    REINPUT 'Splits invalid on a 1035/Lump-Sum Pol and AL'
*   REINPUT 'Splits invalid on Flex Plans (Non 7P/20P/30P etc) or AL'
      MARK *#SCR-FACE-AMT (#ISC)
  END-IF
  PERFORM EDIT-FACE-AMOUNT
END-IF
*
IF   (#SCR-FACE-AMT (#ISC) NE FACE-AMOUNT (#IFL))
    AND (#CURR-NUM-SEGS GT 9)
  REINPUT
    'TRAILERS FULL - NOT ENOUGH ROOM FOR SPLIT - WAIT TILL NEXT MONTH'
    MARK *#SCR-TRAN (#ISC)
ELSE
  ADD 1 TO #CURR-NUM-SEGS
END-IF
*
IF  ((ONLINE-ACTION (#IFL) = '1')
    OR  (CI-V.ONLINE-ACTION-GN     = '2'))
    AND (NOT #SCR-TRAN (#ISC) = 'RSGN' OR = 'CSV'
    OR = 'ANNU')  /* new and rsgn/csv ok      /* DW27
  REINPUT 'Wait till next month since this policy is NEW this month'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS           /* YK8
  IF #SCR-EFF-DTE (#I1) = #SCR-EFF-DTE (#ISC) /* SKIP CURRENT LINE
    ESCAPE TOP
  END-IF
*
  IF   (#SCR-EFF-DTE-YYYYMMDD (#ISC) = CI-V.ISSUE-DATE (#I1))
      AND (#SCR-PLN (#ISC) = CI-V.PLAN (#I1))
      AND (CI-V.STATUS (#I1)  = 'E') /* this month
    REINPUT 'Pol has SPLIT this month - wait till next month'
      MARK *#SCR-TRAN (#ISC)
  END-IF
END-FOR
*
* YK8 added
IF  (#SCR-TRAN (#ISC) = 'RSGN')
AND  (NOT FUNCTION-TERM-POLICY(<CI-V.PLAN(#IFL)>)) AND (CI-V.PLAN(#IFL) <> 'SO')        /* YK10
  REINPUT 'RSGN is only valid for Term policies, use CSV for whole life'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
if not( #cga-clerk = 'VXT' or = 'CEB' or = 'KHB' or = 'SKS')
IF  (#SCR-TRAN (#ISC) = 'RSGN') AND CI-V.CONV-DURATION(#IFL) = 999 AND X-LOAN-AMOUNT(#IFL) <> 0
    REINPUT 'Policy has CAP Loan - can not resign'
      MARK *#SCR-TRAN (#ISC)
  END-IF
end-if
*
IF  (#SCR-TRAN (#ISC) = 'LAPS' OR = 'LAPN' OR = 'RSGN' OR = 'LAPC')  /* DW9 PM35
    AND (#SCR-RPU-ACV (#ISC) GT 0)
*   AND  (NOT CI-V.PLAN (#IFL) = 'RT' OR = 'LT')   /* DW16
*   AND  (NOT #FIL-VAR-TERM)
 AND  (NOT FUNCTION-TERM-POLICY(<CI-V.PLAN(#IFL)>))               /* YK6
  INPUT //' Has AVAIL CSV - Do you wish to Continue? (Enter Y or N)' #YN
  IF #YN NE 'Y'
    END TRANSACTION
    FETCH 'G1000PXX'
  END-IF
END-IF
*
PERFORM BADJ-FPF-TEST   /* DW15    /* YK8
*
END-SUBROUTINE /*(2216)
*
* * * * *
DEFINE SUBROUTINE BADJ-FPF-TEST  /* DW15
* * * * *
IF  (X-FIRST-PLACE-FEE (#IFL) NE 0)
*    OR (X-BILL-ADJUST (#IFL) NE 0)                     /* YK8
*  REINPUT 'Terminations invalid with FPF or BADJ'
*   REINPUT 'Terminations invalid with FPF'              /* YK8
*     MARK *#SCR-TRAN (#ISC)
  L_VLD := FALSE
  #TEXT := 'Terminations invalid with FPF or BADJ'         /* TT2
END-IF
*
END-SUBROUTINE /*(2216)
*
* * * * * * * * *
DEFINE SUBROUTINE CONV-EDIT
* * * * * * * * *
*
IF PLAN (#IFL) = #SCR-PLN (#ISC)
    AND (CI-V.ONLINE-ACTION-GN NE '2')
    AND (CI-V.ONLINE-ACTION  (#IFL) NE '1')
  REINPUT 'PLAN must change on a CONV transaction'
    MARK *#SCR-PLN (#ISC)
END-IF
*
IF  (#SCR-TRN-DT-MM (#ISC) NE #TODAY-MM)
    OR (#SCR-TRN-DT-YYYY (#ISC) NE #TODAY-YYYY)
  REINPUT 'Trans date must be current month and year'
    MARK *#SCR-TRN-DT (#ISC)
END-IF
*
MOVE #SCR-PLN (#ISC) TO #PLAN-3
*
IF   ((#PLAN-A2 = MASK (NN))
    AND (CI-V.LAST-DURATION (#IFL) GE #PLAN-N2))
    OR ((#PLAN-A2 = MASK (N'P'))
    AND (CI-V.LAST-DURATION (#IFL) GE #PLAN-N1))
  REINPUT '"AP" should be used since dur is so high'
    MARK *#SCR-PLN (#ISC)
END-IF
*
IF   ((#PLAN-A2 = MASK (NN))
    AND (CI-V.LAST-DURATION (#IFL) + #PLAN-N2 GT 100))
    OR ((#PLAN-A2 = MASK (N'P'))
    AND (CI-V.LAST-DURATION (#IFL) + #PLAN-N1 GT 100))
  REINPUT 'New Term exceeds 100 years'
    MARK *#SCR-PLN (#ISC)
END-IF
*
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS            /* YK8
  IF #SCR-TRAN (#I1) = 'RPU '
    REINPUT 'CONV/RPU cannot be done on the same transaction'
      MARK *#SCR-TRAN (#ISC)
  END-IF
*
  IF #SCR-EFF-DTE (#I1) = #SCR-EFF-DTE (#ISC)
    ESCAPE TOP
  END-IF
*
  IF #SCR-TRAN (#I1) = 'CONV'
    REINPUT 'Only 1 CONV per transaction is allowed'
      MARK *#SCR-TRAN (#ISC)
  END-IF
END-FOR
*
IF CI-V.PAY-STATUS (#IFL) GT '40'
    AND (CI-V.ONLINE-ACTION-GN NE '2')
    AND (CI-V.ONLINE-ACTION  (#IFL) NE '1')
  REINPUT 'CONV not allowed on a Paid-up policy'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
END-SUBROUTINE /*(2342)
*
* * * * * * * * * * * * *
DEFINE SUBROUTINE RPU-EDIT
* * * * * * * * * * * * *
*
IF (CI-V.PAY-STATUS (#IFL) GT '40') /* DW8
    AND (X-LOAN-AMOUNT (#IFL) = 0)
    AND (X-LOAN-AMOUNT-2 (#IFL) = 0)
  REINPUT 'RPU invalid if paid-up with no loan'
    MARK *#SCR-PLN (#ISC)
END-IF
*
IF WIDOW-FLAG = 'Y'
  REINPUT 'This tran invalid if MBR is DEAD'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
IF CONVERSION-FLAG (#IFL) = 'C' OR = 'N'
  IGNORE
ELSE
  REINPUT 'UNCONVERTED POLICIES CANNOT BE RPU''D'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
MOVE 606 TO #L-CI-TRAN
MOVE #SCR-TRN-DT-YYYY (#ISC) TO #YYYY
MOVE #SCR-TRN-DT-MM (#ISC) TO #MM
MOVE #TODAY-DD             TO #DD
MOVE #YYYYMMDD             TO #L-606-TRN-DATE
MOVE CI-V.ISSUE-DATE    (#IFL) TO #L-606-ISS-DT
MOVE CI-V.ISSUE-AGE-N   (#IFL) TO #L-606-ISS-AGE
MOVE CI-V.PLAN          (#IFL) TO #L-606-TYPE
MOVE #SCR-RPU-ACV       (#ISC) TO #L-606-ACV
MOVE CI-V.MIN-CASH-VALUE (#IFL) TO #L-606-LST-MN-CV
MOVE CI-V.NXT-YR-MIN-CASH-VALUE (#IFL) TO #L-606-NXT-MN-CV
*
IF CI-V.CASH-VALUE (#IFL) GT CI-V.ACC-CASH-VALUE (#IFL)
  MOVE CI-V.CASH-VALUE (#IFL) TO #L-606-LN-INT
ELSE
  MOVE CI-V.ACC-CASH-VALUE (#IFL) TO #L-606-LN-INT
END-IF
*
SUBTRACT #L-606-ACV FROM #L-606-LN-INT
*
RESET #L-606-NEW-DB
  #L-606-NEW-FAC-AMT
  #L-606-NEW-LST-MCV
  #L-606-NEW-NXT-MCV
  #L-606-NEW-CUR-MCV
**CALL 'AOCX2V6A' #L-CI-TRAN       /* SAG 11012005 RH1
CALLNAT 'AOCX2V6A' #L-PARMS      /* SAG 11012005 RH1
*
IF #L-606-NEW-FAC-AMT LT 0
  REINPUT 'INDEBTEDNESS EXCEEDS MIN-CSV'
    MARK *#SCR-RPU-ACV (#ISC)
END-IF
*
IF   (#L-606-NEW-DB LT 5000.00)   /* was 500  12/2003
    AND (NOT #CGA-CLERK = 'KHB' OR = 'VXT')
  REINPUT 'Kathie must do all RPU"s with DB < $5000'
    MARK *#SCR-TRAN (#ISC)
END-IF
*
END-SUBROUTINE /*(2403)
*
* * * * * * * * *
DEFINE SUBROUTINE CORRECTION-EDIT
* * * * * * * * *
*
IF (#SCR-FACE-AMT (#ISC) NE FACE-AMOUNT (#IFL))
  PERFORM EDIT-FACE-AMOUNT
END-IF
*
IF NOT #SCR-MEC-IND-X (#ISC) = 'Y' OR = ' '
  REINPUT 'Mec-Ind must be "Y" or blank'
    MARK *#SCR-MEC-IND-X (#ISC)
END-IF
*
CALLNAT 'GPYSTSXX' CI-V.PAY-STATUS (#IFL) #OLD-STAT-XXXX
  #INVALID #ERR-MSG
IF   (#SCR-STATUS (#ISC) NE #OLD-STAT-XXXX)
    AND (CI-V.ALOT-AMT NE 0)
AND (NOT #CGA-CLERK = 'ELB' OR =  'KHB' OR = 'SKS' OR ='VXT' or = 'CEB' or = 'GME')  /* vt4
  REINPUT 'Pay status cannot chg if Allot is going'
    MARK *#SCR-STATUS (#ISC)
END-IF
*
if #scr-status(#isc) eq 'PODB'                                                 /* vt17 \/
  reinput '"PODB" STATUS change could be made only on "CI LTCC "'
    mark *#scr-status(#isc)
end-if                                                                          /* vt17 /\
*
IF  (#SCR-PAID-THRU-YYYY (#ISC) NE PAID-TO-DATE-YYYY (#IFL))
    OR (#SCR-PAID-THRU-MM (#ISC) NE PAID-TO-DATE-MM (#IFL))
  REINPUT 'PAID-TO DATE change must be made on "CI MODE"'
    MARK *#SCR-PAID-THRU (#ISC)
END-IF
*
IF #SCR-POL-OWNERSHIP (#ISC) = 'N' OR = ' ' OR = 'D'
  IGNORE
ELSE
  REINPUT 'Pol-Ownership Flag must be " " or (N)on-mbr or = (D)ifferent'
    MARK *#SCR-POL-OWNERSHIP (#ISC)
END-IF
*
IF #SCR-BILL-PAYER (#ISC) = ' ' OR = 'Y'                               /* YK4
IGNORE                                                               /* YK4
ELSE                                                                   /* YK4
REINPUT 'Policy Bill Payer Flag must be " " or (Y)'                  /* YK4
MARK *#SCR-BILL-PAYER (#ISC)                                       /* YK4
END-IF                                                                 /* YK4
*
IF #SCR-RENEW-FLAG (#ISC) = ' ' OR = 'Y' OR  = 'N' OR = 'X'            /* YK5   /* YK9
IGNORE                                                               /* YK5
ELSE                                                                   /* YK5
REINPUT 'Renew Flag must be " ", (X), (N)or (Y)'                     /* YK5   /* YK9
MARK *#SCR-RENEW-FLAG (#ISC)                                       /* YK5
END-IF                                                                 /* YK5
*
IF  (#SCR-EFF-DTE-YYYYMMDD (#ISC) NE CI-V.ISSUE-DATE (#IFL))
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS                                       /* YK8
    IF #I1 = #IFL  /* SKIP CURRENT LINE
      ESCAPE TOP
    END-IF
*
    IF #SCR-EFF-DTE-YYYYMMDD (#ISC) = CI-V.ISSUE-DATE (#I1)
      IF ((((#SCR-PLN (#ISC) = 'RT' OR = 'LT') OR #SCR-VAR-TERM)
       AND (NOT CI-V.PLAN(#I1) = 'RT' OR = 'LT') AND NOT #SCR-VAR-TERM))
*
          OR ((((NOT #SCR-PLN (#ISC) = 'RT' OR = 'LT')
          AND  NOT #SCR-VAR-TERM)
          AND (CI-V.PLAN(#I1) = 'RT' OR = 'LT') OR #SCR-VAR-TERM))
        IGNORE
      ELSE
        REINPUT '2 Issue Dates cannot match'
          MARK *#SCR-EFF-DTE (#ISC)
      END-IF
    END-IF
  END-FOR
END-IF
*
END-SUBROUTINE /*(2467)
*
* * * * * * * * *
DEFINE SUBROUTINE RT-ADJ-EDIT
* * * * * * * * *
*
IF   (#SCR-PLN (#ISC) NE 'RT')
  REINPUT 'Only applies to RT pols'
    MARK *#SCR-PLN (#ISC)
END-IF
*
END-SUBROUTINE /*(2467)
*
* * * * * * * * * *
DEFINE SUBROUTINE CALC-MODAL-PREM
* * * * * * * * * *
*
IF #SCR-MODE (#ISC) = 'A' OR = '1'
  MOVE  1 TO #WORK-FREQ
ELSE
  IF #SCR-MODE (#ISC) = 'S' OR = '2'
    MOVE 2 TO #WORK-FREQ
  ELSE
    IF #SCR-MODE (#ISC) = 'Q' OR = '4'
      MOVE 4 TO #WORK-FREQ
    ELSE
      MOVE 12 TO #WORK-FREQ
    END-IF
  END-IF
END-IF
*
COMPUTE #SCR-MODAL-PRM (#ISC) = #SCR-ANN-PRM (#ISC)/ #WORK-FREQ
*
END-SUBROUTINE
*
* * * * * * * *
DEFINE SUBROUTINE ACC-STATS
* * * * * * * *
*
IF #SCR-TRAN (#ISC) = 'REIN'
  MOVE 5 TO #IM
ELSE
  IF #SCR-TRAN (#ISC) = 'CSV ' OR = 'CVEX' OR = 'ANNU'           /* DW27
    MOVE 2 TO #IM
  ELSE
    IF #SCR-TRAN (#ISC) = 'DEAD'
      MOVE 1 TO #IM
      FIND (1) FR-V WITH MEMBER-KEY = #CGA-ID-G
      END-FIND
    ELSE
      IF #SCR-TRAN (#ISC) = 'LAPS' OR = 'RSGN' OR = 'LAPN' OR = 'LAPO'
          OR = 'LAPC'
        MOVE 3 TO #IM
      ELSE
        MOVE 4 TO #IM
      END-IF
    END-IF
  END-IF
END-IF
*
IF CI-V.PAY-STATUS (#IFL) = '44' OR = '45'    /* rpu or eti
  IF CI-V.ISSUE-DATE (#IFL) LT 19941201
    MOVE CI-V.NUM-MBRSHIPS (#IFL) TO #PUR-MBRS
  ELSE
    MOVE CI-V.EXPIRY-DAY (#IFL) TO #PUR-MBRS
  END-IF
ELSE
  IF #SCR-FACE-AMT (#ISC) GE 500000
    MOVE 99 TO #PUR-MBRS
  ELSE
    COMPUTE #PUR-MBRS = #SCR-FACE-AMT (#ISC) / 5000
  END-IF
END-IF
* Replace with DECIDE statement
* YK5 Start  ********************************************************
*
DECIDE FOR FIRST CONDITION
* WHEN CI-V.PLAN (#IFL) = MASK ('AL')
  WHEN SUBSTR(CI-V.PLAN (#IFL),1,2) EQ 'AL'
    MOVE 4 TO #GL-X
  WHEN CI-V.PLAN (#IFL) = MASK ('LT')
    MOVE 2 TO #GL-X
  WHEN CI-V.PLAN (#IFL) = MASK ('RT')
    MOVE 3 TO #GL-X
  WHEN CI-V.PLAN (#IFL) = MASK ('SO')
    MOVE 5 TO #GL-X
  WHEN CI-V.PLAN (#IFL) = 'GPL' OR = 'GP2'   /* TT2
    MOVE 7 TO #GL-X
  WHEN CI-V.PLAN (#IFL) = 'EZ'               /* YK6
    MOVE 8 TO #GL-X                          /* YK6
  WHEN F-LT2PLUS-TRUE(<CI-V.PLAN(#IFL)>)     /* YK6
    MOVE 9 TO #GL-X                          /* YK6
  WHEN F-LT2-TRUE(<CI-V.PLAN (#IFL)>)        /* YK6
    MOVE 6 TO #GL-X
  WHEN NONE
    MOVE 1 TO #GL-X
END-DECIDE
*
DECIDE ON FIRST VALUE ST-V.INTRO-FLAG
  VALUE 'S'
    MOVE 2 TO #CAT-X
  VALUE 'K'
    MOVE 3 TO #CAT-X
  VALUE 'G'
    MOVE 4 TO #CAT-X
  NONE VALUE
    MOVE 1 TO #CAT-X
END-DECIDE
* YK5 End *********************************************************
*
IF #IM = 1 OR = 2 OR = 3     /* OR = 4         /* YK7
  ADD 1 TO #ST-PLANS (#IM)
  ADD 1 TO #G-L-LOSSES (#GL-X)
*
  IF   (#IM = 1)    /* DEAD
      AND (FR-V.POL-DATE (#IFL) = CI-V.ISSUE-DATE (#IFL))
    ADD FR-V.POL-AMT-PAID (#IFL) TO #G-L-LOSSES-DB (#GL-X)
  ELSE
    IF CI-V.DEATH-BENEFIT (#IFL) = 0
      ADD CI-V.FACE-AMOUNT   (#IFL) TO #G-L-LOSSES-DB (#GL-X)
    ELSE
      ADD CI-V.DEATH-BENEFIT (#IFL) TO #G-L-LOSSES-DB (#GL-X)
    END-IF
  END-IF
END-IF
*
IF #IM = 2 OR = 3
* FOR #I1 1 TO 9
  FOR #I1 1 TO C*ACTIVE-SEGMENTS              /* YK8
    MOVE CI-V.PLAN (#I1) TO #PLAN-A3
    IF   (#SCR-EFF-DTE-YYYYMMDD (#ISC) = CI-V.ISSUE-DATE (#I1))
     AND (#SCR-PLN (#ISC) = #PLAN-A3) /* 4 cases of term & wl sam iss dt
      AND (CI-V.STATUS (#I1) = 'D' OR = 'E') /* PARTIAL TERM & FULL TERM
      IF   (CI-V.STATUS (#I1) = 'E') /* Full Termination
        IF CI-V.PAY-STATUS (#I1) = '44' OR = '45'    /* rpu or eti
          IF CI-V.ISSUE-DATE (#I1) LT 19941201
            MOVE CI-V.NUM-MBRSHIPS (#I1) TO #PUR-MBRS
          ELSE
            MOVE CI-V.EXPIRY-DAY (#I1) TO #PUR-MBRS
          END-IF
        ELSE
          IF #SCR-FACE-AMT (#ISC) GE 500000
            MOVE 99 TO #PUR-MBRS
          ELSE
            COMPUTE #PUR-MBRS = CI-V.FACE-AMOUNT (#I1) / 5000
          END-IF
        END-IF
      ELSE  /* reset stats due to partial terms
        SUBTRACT 1 FROM #ST-PLANS (#IM)
        SUBTRACT 1 FROM #G-L-LOSSES (#GL-X)
        IF CI-V.DEATH-BENEFIT (#IFL) = 0
          SUBTRACT CI-V.FACE-AMOUNT (#IFL) FROM #G-L-LOSSES-DB (#GL-X)
        ELSE
          SUBTRACT CI-V.DEATH-BENEFIT (#IFL) FROM #G-L-LOSSES-DB (#GL-X)
        END-IF
      END-IF
      ESCAPE BOTTOM
    END-IF
  END-FOR
END-IF
*
IF #SCR-TRAN (#ISC) = 'LAPS' OR = 'CSV ' OR = 'RSGN' OR = 'CVEX' OR = 'ANNU' /* DW27
    OR = 'LAPN' OR = 'LAPO' OR = 'DEAD' OR = 'LAPC'
  IF (#PUR-MBRS + #ST-MBRSHIP (#IM)) GT 99
    MOVE 99 TO #ST-MBRSHIP (#IM)
  ELSE
    ADD #PUR-MBRS TO #ST-MBRSHIP (#IM)
  END-IF
ELSE
  IF   (#SCR-TRAN (#ISC) = 'REIN')
      AND (CI-V.ONLINE-ACTION (#IFL) = 'B') /* eti from scratch
    IF FACE-AMOUNT (#IFL) GE 500000
      ADD 99 TO #ST-MBRSHIP (#IM)
    ELSE
      ADD (FACE-AMOUNT (#IFL) / 5000) TO #ST-MBRSHIP (#IM)
    END-IF
    COMPUTE #ST-FACE (#IM) = #ST-FACE (#IM) + FACE-AMOUNT (#IFL)
  END-IF
END-IF
*
IF #SCR-TRAN(#ISC) = 'REIN'
  ADD 1 TO #G-L-REINSTATE (#GL-X)
  IF CI-V.DEATH-BENEFIT (#IFL) = 0
    ADD CI-V.FACE-AMOUNT   (#IFL) TO #G-L-REINSTATE-DB (#GL-X)
  ELSE
    ADD CI-V.DEATH-BENEFIT (#IFL) TO #G-L-REINSTATE-DB (#GL-X)
  END-IF
*
  IF #HOLD-OLD-MEMSHIP = 0
    ADD 1 TO #ST-MBR (#IM)
*
    IF CI-V.PLAN (#IFL) NE 'FSO'
      ADD 1 TO #GAINS-LIVES-BY-CAT (#CAT-X)
    END-IF
  ELSE
    ADD 1 TO #ST-PLANS (#IM)
  END-IF
ELSE
IF (#SCR-TRAN(#ISC) = 'LAPS' OR = 'CSV ' OR = 'DEAD' OR = 'ANNU'   /* DW27
      OR = 'RSGN' OR = 'CVEX' OR = 'LAPC' OR = 'LAPN' OR = 'LAPO')
      AND (CI-V.NUMBER-MEMBERSHIPS = 0)
      AND (#FIRST-TIME)
    RESET #FIRST-TIME
    ADD 1 TO #ST-MBR (#IM)
*
    IF CI-V.PLAN (#IFL) NE 'FSO'
      ADD 1 TO #LOSSES-LIVES-BY-CAT (#CAT-X)
    END-IF
  END-IF
END-IF
*
* YK7
IF #SCR-TRAN(#ISC) = 'ACDB'
  ADD 1 TO #ST-PLANS (#IM)
  #G-L-LOSSES-DB(#GL-X) := #G-L-LOSSES-DB(#GL-X) + #ACC-DEATH-BENEFIT
  #ST-FACE(#IM) := #ST-FACE(#IM) - #ACC-DEATH-BENEFIT
END-IF
* YK7
*
END-SUBROUTINE /* (2579)
* * * * * * * *
DEFINE SUBROUTINE CALC-REAL-PREM
* * * * * * * * *
*
FOR #I4 1 TO 800
  IF   (#ACV-DIFF GT ((#I4 * 1000) - 10))
      AND (#ACV-DIFF LT ((#I4 * 1000) + 10))
    IF #NEW-ACV LT ACCUM-CASH-VALUE-M (13)
      ADD (#I4 * 1000) TO #REAL-PREM
    ELSE
      SUBTRACT (#I4 * 1000) FROM #REAL-PREM
    END-IF
*
    ESCAPE BOTTOM
  END-IF
END-FOR
*
END-SUBROUTINE
*
* * * * * * * * *
DEFINE SUBROUTINE EDIT-FACE-AMOUNT
* * * * * * * * *
*
IF #SCR-FACE-AMT (#ISC) = 0
  REINPUT 'Face Amt required'
    MARK *#SCR-FACE-AMT (#ISC)
END-IF
*
RESET #TOT-FACE #TOT-FACE-TERM
* FOR #I1 1 TO 9
FOR #I1 1 TO C*ACTIVE-SEGMENTS               /* YK8
  RESET #WORK-FACE
  IF CI-V.STATUS (#I1) = 'D'
    IF CI-V.PAY-STATUS (#I1) = '45' OR = '44'
      IF CI-V.ISSUE-DATE (#I1) GE 19941201
        COMPUTE #WORK-FACE = (CI-V.EXPIRY-DAY (#I1) * 5000)
      ELSE
        COMPUTE #WORK-FACE = (CI-V.NUM-MBRSHIPS(#I1) * 5000)
      END-IF
    ELSE
      MOVE CI-V.FACE-AMOUNT (#I1) TO #WORK-FACE
    END-IF
*
    MOVE CI-V.PLAN (#I1) TO #PLAN-A3
*   IF  (#PLAN-A3 = 'LT' OR = 'RT')                     /* YK5
*       OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))    /* YK5
*       OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))    /* YK5
    IF FUNCTION-TERM-POLICY(<#PLAN-A3>)                 /* YK5
      ADD #WORK-FACE TO #TOT-FACE-TERM
    END-IF
    ADD #WORK-FACE TO #TOT-FACE
  END-IF

END-FOR
*
IF #SCR-TRAN (#ISC) = 'CSV' OR = 'ANNU'                   /* DW24/DW27
  COMPUTE #DIVIDEND-CSV = #SCR-FACE-AMT (#ISC) / 1000
*
  IF (#REM-CSV NE 0)
    REINPUT 'Face amt must be mult of $1k'
      MARK *#SCR-FACE-AMT (#ISC)
  END-IF
*
  IF    (FACE-AMOUNT (#IFL) NE #SCR-FACE-AMT (#ISC))  /* DW24
      AND ((FACE-AMOUNT (#IFL) - #SCR-FACE-AMT (#ISC)) LT 10000)
    REINPUT 'Remaining Face amt must be more than $10,000'
      MARK *#SCR-FACE-AMT (#ISC)
  END-IF
ELSE
if #SCR-PLN (#ISC) ne 'GT1'                                                  /* vt15
    COMPUTE #DIVIDEND = #SCR-FACE-AMT (#ISC) / 5000
    IF  (#SCR-PLN (#ISC) = 'SO' OR = 'FSO')
        OR (PLAN (#IFL) = 'SO' OR = 'FS')
      IF #SCR-FACE-AMT (#ISC) NE 1000
        REINPUT 'Face amount must be $1,000 for Svc-only'
          MARK *#SCR-FACE-AMT (#ISC)
      END-IF
    ELSE
      IF   (#SCR-EFF-DTE-YYYYMMDD (#ISC) GE 19970101)
          AND (CI-V.MONTH-ALLOC-AMT (#IFL) NE 999.99)
          AND (CI-V.PAY-STATUS (#IFL)  NE '45') /* PM23
        IF (CI-V.PLAN (#IFL) = MASK (..'F'))
*         OR (CI-V.PLAN (#IFL) = 'AL')
            OR SUBSTR(CI-V.PLAN (#IFL),1,2) EQ 'AL'
            OR #SCR-VAR-TERM
          IF  (#SCR-FACE-AMT (#ISC) GT #MAX-FACE-TOTAL)
              OR (#SCR-FACE-AMT (#ISC) LT 5000)
            REINPUT 'Face amt must be between $5k & $MAX k'
              MARK *#SCR-FACE-AMT (#ISC)
          END-IF
        ELSE
          IF ((#REM NE 0) OR (#SCR-FACE-AMT (#ISC) GT #MAX-FACE-TOTAL))
              AND (CI-V.PLAN (#IFL) NE 'RT')
              AND (CI-V.PAY-STATUS (#IFL)  NE '45') /* PM23
            REINPUT 'Face amt must be mult of $5k between $5k & $Maxk'
              MARK *#SCR-FACE-AMT (#ISC)
          END-IF
        END-IF
      ELSE
        IF #SCR-EFF-DTE-YYYYMMDD (#ISC) GE 19941201
          IF ((#REM NE 0) OR (#SCR-FACE-AMT (#ISC) GT 50000))
              AND (CI-V.PAY-STATUS (#IFL)  NE '45') /* PM23
            REINPUT 'Face amt must be mult of $5k between $5k & $50k'
              MARK *#SCR-FACE-AMT (#ISC)
          END-IF
        ELSE
          IF ((#REM NE 0) OR (#SCR-FACE-AMT (#ISC) GT 20000))
              AND (CI-V.PAY-STATUS (#IFL)  NE '45') /* PM23
           REINPUT 'Face amt must be multiple of $5k between $5k & $20k'
              MARK *#SCR-FACE-AMT (#ISC)
          END-IF
        END-IF
      END-IF
    END-IF
  end-if                                                         /* vt15
END-IF
*
IF #SCR-TRAN (#ISC) = 'REIN'
  IGNORE
ELSE
  SUBTRACT CI-V.FACE-AMOUNT (#IFL) FROM #TOT-FACE
  SUBTRACT CI-V.FACE-AMOUNT (#IFL) FROM #TOT-FACE-TERM
END-IF
*
IF #SCR-TRAN (#ISC) NE 'CORR'
  ESCAPE ROUTINE
END-IF
*
MOVE CI-V.PLAN (#IFL) TO #PLAN-A3
*   IF  (#PLAN-A3 = 'LT' OR = 'RT')                     /* YK5
*       OR ((#PLAN-A1 GE 'U') AND (#PLAN-A1 LE 'Z'))    /* YK5
IF FUNCTION-TERM-POLICY(<#PLAN-A3>)                     /* YK5
  IF #SCR-FACE-AMT (#ISC) + #TOT-FACE-TERM > #MAX-FACE-TERM
    REINPUT 'Exceeds maximum term insurance'
      MARK *#SCR-FACE-AMT (#ISC)
  END-IF
ELSE
  IF #SCR-FACE-AMT (#ISC) + #TOT-FACE GT #MAX-FACE-TOTAL
    REINPUT 'Exceeds maximum insurance'
      MARK *#SCR-FACE-AMT (#ISC)
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * *
DEFINE SUBROUTINE CALL-GMECCSXX   /* DW25
* * * * * * * * * * * * * * * *
*
CALLNAT 'GMECCSXX' CI-V.ID-NUMBER
  #SUFFIX
  PLAN        (#IFL)
  ISSUE-DATE  (#IFL)
  PAID-TO-DATE(#IFL)
  PAID-UP-DATE(#IFL)
  ISSUE-AGE   (#IFL)
  ANNUAL-PREM (#IFL)
  SMOKER-FLAG (#IFL)
  FACE-AMOUNT (#IFL)
  DURATION    (#IFL)
  PAY-STATUS  (#IFL)
  TOT-PREMIUMS-PAID (#IFL)
  #AP-PREMS-PAID  /* calc tpp
*
  #MAX-7-PAY
  #MEC-PREMS-PAID-TO-DATE
  #EXCEEDS-MEC
  #1035-NX
  #1035-EXCH-AMT
  #LUMP-PMT
*
END-SUBROUTINE
*
************************************************
DEFINE SUBROUTINE ACCELERATED-DEATH-BENEFIT-EDIT     /* YK7
************************************************
*
IF #SCR-TRAN (#ISC) = 'ACDB' AND #SCR-PLN (#ISC) <> 'EZ'
  V_MARK := POS(#SCR-TRAN (#ISC))
  L_VLD := FALSE
  #TEXT := 'ACDB can only be used on EZ Term plan'
  ESCAPE ROUTINE
END-IF
*
IF #CGA-SCR-SUFFIX = 'LTR'
  ESCAPE ROUTINE
END-IF
*
CALLNAT 'GPLNMSXX' #POL-NUM CI-V.ID-NUMBER #IFL
FIND AR-V WITH ID-NUMBER = CI-V.ID-NUMBER
  ACCEPT IF AR-V.TXN-CODE = 'ACDB' AND AR-V.POLICY-NUMBER = #POL-NUM
  #FOUND := TRUE
END-FIND
*
IF #FOUND
  V_MARK := POS(#SCR-TRAN (#ISC))
L_VLD := FALSE #TEXT := 'Accelerated Death Benefit has been already paid for this policy'
  ESCAPE ROUTINE
END-IF
IF  (ST-V.X-FIRST-PLACE-FEE (#IFL) NE 0)
  V_MARK := POS(#SCR-TRAN (#ISC))
  L_VLD := FALSE #TEXT := 'This transaction invalid with FPF'
  ESCAPE ROUTINE
END-IF
IF #SCR-TRAN (#ISC) = 'ACDB' AND (#SCR-FACE-AMT(#ISC) = CI-V.FACE-AMOUNT(#IFL))
  V_MARK := POS(#SCR-FACE-AMT (#ISC))
L_VLD := FALSE #TEXT := 'Accelerated Death Benefit requires to enter new Face Amount'
  ESCAPE ROUTINE
END-IF
IF #SCR-TRAN (#ISC) = 'ACDB' AND NOT (#SCR-FACE-AMT( #ISC ) EQ #EZ-FACES (*))
  V_MARK := POS(#SCR-FACE-AMT (#ISC))
  L_VLD := FALSE
#TEXT := 'Face amount is not equal to $10K $12.5K $25K $50K $37.5K $75K $100K'
  ESCAPE ROUTINE
END-IF
IF #SCR-TRAN (#ISC) = 'ACDB' AND #SCR-FACE-AMT(#ISC) > CI-V.FACE-AMOUNT(#IFL)
  V_MARK := POS(#SCR-FACE-AMT (#ISC))
  L_VLD := FALSE
  #TEXT := 'You can not increase Face Amount on ACDB transaction'
  ESCAPE ROUTINE
END-IF
IF #SCR-TRAN (#ISC) = 'ACDB' AND (#SCR-FACE-AMT(#ISC) < CI-V.FACE-AMOUNT(#IFL)/2)
  V_MARK := POS(#SCR-FACE-AMT (#ISC))
L_VLD := FALSE #TEXT := 'Accelerated Death Benefit can not be more than 50% of current Face Amount'
  ESCAPE ROUTINE
END-IF
*
END-SUBROUTINE
*
*****************
define subroutine long-term-care-complete-edit              /* vt17 \/
*****************
IF #SCR-TRAN (#ISC) = 'LTCC' AND #SCR-status (#ISC) <> 'PODB'
  V_MARK := POS(#SCR-TRAN (#ISC))
  L_VLD := FALSE
  #TEXT := 'LTCC can only be used to change status to "PODB"'
  ESCAPE ROUTINE
END-IF
*
IF (#SCR-TRAN (#ISC) = 'LTCC') AND (#SCR-face-amt(#isc) eq ci-v.face-amount(#ifl) ) and (#scr-face-amt(#isc) ne 0)
  V_MARK := POS(#SCR-TRAN (#ISC))
  L_VLD := FALSE
  #TEXT := 'LTCC require  Face Amount equal to zero'
  ESCAPE ROUTINE
END-IF

end-subroutine
*****************
define subroutine validate-designation                      /* vt17 \/
*****************
*
#validated := TRUE
for.  for  #i 1 C*ACTIVE-SEGMENTS
  if st-v.status(#i) = 'D'
find (1) pos-v with policy-number = st-v.policy-id(#i) and pos-v.designation-id ne 0             /* vt 06/05/2017
    f3. find(1) designation  with designation-id =  pos-v.designation-id
        if designation.status-code ne 'V'
          reset #validated
          escape bottom (for.)
        end-if
      end-find
    end-find
  end-if
end-for
*
end-subroutine                                      /* vt7 /\
END
