* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
* PROGRAM-ID: athpstat - various AAFMAA stats  (not AFSC)
*******************************************
*                       MODIFICATION LOG
* USER DATE     TAG  REASON
* DRW  03032005 DW1  Add AL (Annuity Life) PROCESSING
* PAM  03112005 PM2  Reset display fields for GRANKSXX                 *
* DRW  03152005 DW3  Cleanup Policy testing for accumming              *
* DRW  05182005 DW4  Add Online-action of 'T' NEW/ADDL & CSV
* DRW  04262005 DW5  Add Accumulation for AL
* PAM  09302005 PM6  Increased total plans
* DRW  12312005 DW7  Increased LST-MO total plans
* DRW  08312006 DW8  Increased size of #RECS-READ
* PAM  07312007 PM9  Increase size of total fields
* DRW 08/20/2008 DW10 Gen Plus Statistics
* RSE  09302009 RE1  Change PROCESS-IND logic for Unification
* YAK  11272012 YK1  Use function to identify Level Term II plans
* YAK  01162012 YK2  Add EZ Term plan
* RSE  12072012 RE2  Stat for new products EZ (No Medical Term) and LTII+
* JNT  09232013 JT1  Address normalization
* vxt  10/29/2013 vt1 Increase size of the #tot-diff field /Error 1305during the trial ME /.
* TMT  01/27/2014 TT1 ADDED GP2 MEMBER STATISTICS
* TMT  06/10/2014 TT2 Contact Normalization - DOB and Sex
* TMT  10/16/2014 TT3 Added AL2 Policy
* vxt  06/12/2017 vt2 Group Term Project
**************************************************************************
*
DEFINE DATA
LOCAL USING ADDA0001                                     /* JT1
LOCAL USING CONTPDA1                                     /* TT2
LOCAL
*
1 #PARM-YYYYMMDD    (N8)    /* DW3
1 #TOT-DIFF         (P13.2)                 /* vt1 was p9.2
1 #TOT-DB-BY-TYPE    (P13.2)
1 #NUM-SO          (P5)
1 #AAFMAA-EMP          (P5)
1 #SUFFIX              (A3)
1 #LST-MO-MBRS         (P5)
1 #LST-MO-SPS-GEN      (P5)
1 #LST-MO-LIVES        (p7)    /* vt was (P5)
1 #LST-MO-PLNS         (P7)  /* DW7
1 #LST-MO-SPS-GEN-PLNS (P5)
1 #LST-MO-TOT-PLNS     (P7)  /* DW7
1 #ACT-MBR-DIF         (P5)
1 #ACT-S-G-DIF         (P5)
1 #ACT-TOT-DIF         (p7)     /* vt was (P5)
1 #ACT-MBR-PLN-DIF     (P7)  /* PM9
1 #ACT-S-G-PLN-DIF     (P5)
1 #ACT-TOT-PLN-DIF     (P7)  /* PM9
1 #MS-MBR-DIF         (P5)
1 #MS-S-G-DIF         (P5)
1 #MS-TOT-DIF         (P5)
1 #MS-MBR-PLN-DIF     (P5)
1 #MS-S-G-PLN-DIF     (P5)
1 #MS-TOT-PLN-DIF     (P5)
*
1 #GAIN-PUSP-PREMS   (P7.2)
1 #GAIN-PREMS (P7.2/9)                   /* DW10   RE2
1 #MON-PREM   (P5.2)
1 #VT-CP      (P5)
1 #VT-RG      (P5)
*
1 #PLN-X    (I2)
1 #GAINS-BY-PLAN     (P5/9)   /* OL/LT/RT/SO/FSO/vt/GPL/EZ/LTII+   RE2 was 7 added EZ LTII+
1 #TOT-GAINS-BY-PLAN (P5)
1 #GAINS-BY-PLAN-DB  (P9.2/9) /* OL/LT/RT/SO/FSO/vt/GPL/EZ/LTII+   RE2 was 7 added EZ LTII+
1 #TOT-GAINS-BY-PLAN-DB  (P9.2)
1 #LOSSES-BY-PLAN    (P5/9)   /* RE2 was 7 added EZ LTII+
1 #LOSSES-BY-PLAN-DB (P9.2/9) /* RE2 was 7 added EZ LTII+
1 #GAINS-BY-PLAN-TOT               (P5)    /* ALL BELOW EXCLUDE FSO
1 #GAINS-BY-PLAN-DB-TOT            (P9.2)
1 #LOSSES-BY-PLAN-TOT-DEATH        (P5)
1 #LOSSES-BY-PLAN-DB-TOT-DEATH     (P9.2)
1 #LOSSES-BY-PLAN-TOT-NON-DEATH    (P5)
1 #LOSSES-BY-PLAN-DB-TOT-NON-DEATH (P9.2)
1 #BY-PLAN-MISMATCH  (L)
1 #TOT-SEG-LOSSES-BY-PLAN    (P5)
1 #TOT-SEG-LOSSES-BY-PLAN-DB (P9.2)
1 #TOT-MS-LOSSES-BY-PLAN     (P5)
1 #TOT-MS-LOSSES-BY-PLAN-DB  (P9.2)
1 #DIF-LOSSES-BY-PLAN        (P5)
1 #DIF-LOSSES-BY-PLAN-DB     (P9.2)
*
1 #CAT-X    (I2)
1 #GAINS-LIVES-BY-CAT  (P5/4)   /* MBR/SPS/CHILD/GCHILD)
1 #LOSSES-LIVES-BY-CAT (P5/4)
*
1 #AVL-TDIV          (P7.2)
1 #DB                (P9.2)
*
1 MBRSHIP-STATS-V VIEW OF A-MBRSHIP-STATS
  2 MONTH-KEY        (N6)
  2 M-E-INS-BY-FACE        (8,4)
  2 M-E-INS-BY-FACE-CAPS   (8)
  2 M-E-PLANS-BY-FACE      (8, 4)
  2 M-E-PLANS-BY-FACE-CAPS (8)       /* DW10
  2 M-E-PLANS-BY-TYPE      (14, 4)   /* DW5    Was 11/4  12=GPL   /* DW10   RE2 was 12,4
  2 ME-INS-ONLY-BY-PLAN    (14)      /* DW5    Was 10    12=GPL   /* DW10   RE2 was 12
  2 M-E-PLANS-BY-TYPE-CAPS (14)      /* DW5    Was 11    12=GPL   /* DW10   RE2 was 12
  2 M-E-PU-PLANS-BY-TYPE   (9, 4)    /* DW5    WAS 8/4    9=GPL   /* DW10
  2 M-E-PP-PLANS-BY-MODE   (3, 4)
  2 M-E-INS-BY-AGE         (10, 4)
  2 M-E-DB-BY-TYPE         (14, 4)   /* DW5    WAS 10/4 12=GPL    /* DW10    RE2 was 12,4
  2 M-E-FSO-BY-STAT        (3)
  2 M-E-FSO-BY-RANK        (3)
  2 M-E-FSO-BY-SEX         (2)
  2 M-E-FSO-BY-AGE         (8)
  2 M-E-FSO-BY-SERV        (9)
*
  2 ME-MBR-BY-UNITS  (10)
  2 ME-S-G-BY-UNITS  (10)
  2 ME-LINES-BY-PLAN (9)    /* RE2 was 7
*
  2 GAIN-MBRS (27)          /* RE2 was 23
  2 SPS-GEN-GAIN-PLANS (25)  /* Was 19  add 2 for GPL              DW10   RE2 was 21
  2 GAINS-BY-PLAN      (9)  /* OL/LT/RT/SO/FSO/vt/GPL/EZ/LTII+            RE2 was 7
  2 GAINS-BY-PLAN-DB   (9)  /* OL/LT/RT/SO/FSO/vt/GPL/EZ/LTII+            RE2 was 7
  2 SPS-GEN-LOSS-MBRS (3)
  2 SPS-GEN-LOSS-PLANS (3)
  2 LOSS-MBRS  (5)
  2 LOSS-PLANS (5)
  2 LOSSES-BY-PLAN      (9)  /* OL/LT/RT/SO/FSO/vt/GPL/EZ/LTII+    /* DW10    RE2 was 7
  2 LOSSES-BY-PLAN-DB   (9)  /* OL/LT/RT/SO/FSO/vt/GPL/EZ/LTII+    /* DW10    RE2 was 7
  2 GAINS-LIVES-BY-CAT  (4)  /* MBR/SPS/CHILD/GCHILD
  2 LOSSES-LIVES-BY-CAT (4)  /* MBR/SPS/CHILD/GCHILD
  2 GAIN-PLANS
  2 GAIN-DB
  2 LOSS-PLANS-DEATHS
  2 LOSS-DB-DEATH
  2 LOSS-PLANS-NON-DEATHS
  2 LOSS-DB-NON-DEATH
  2 ME-FBR-BY-SVC        (3)
  2 ME-FBR-BY-RANK       (3)
  2 ME-FBR-BY-OWNER      (2)
  2 EMP-INS-BY-FACE      (8, 3)
  2 EMP-PLANS-BY-FACE    (8, 3)
  2 EMP-PLANS-BY-TYPE    (13, 3)   /* DW5     RE2 was 11
  2 POL-STATS-SEX-CNT    (8, 2)
  2 POL-STATS-SEX-TOT-AGE (8, 2)
  2 POL-STATS-SEX-TOT-FACE(8, 2)
  2 POL-STATS-CAT-CNT     (8, 7)
  2 POL-STATS-CAT-TOT-AGE (8, 7)
  2 POL-STATS-CAT-TOT-FACE(8, 7)
  2 POL-STATS-CAP-MALE    (8, 2)
  2 POL-STATS-CAP-FEMALE  (8, 2)
  2 POL-STATS-CAP-TOT-AGE (8, 2)
  2 POL-STATS-CAP-TOT-FACE (8, 2)
  2 POL-STATS-POL-CNT      (8, 4)
  2 POL-STATS-POL-TOT-AGE  (8, 4)
  2 POL-STATS-POL-TOT-FACE (8, 4)
  2 POL-STATS-STAT-CNT     (8, 3)
  2 POL-STATS-STAT-TOT-AGE (8, 3)
  2 POL-STATS-STAT-TOT-FACE(8, 3)
* accum for above
1 #ME-INS-ONLY-BY-PLAN  (P5/14)  /* DW5    /* WAs 10    DW10       RE2 was 12
1 #ME-FBR-BY-SVC        (P5/3)
1 #ME-FBR-BY-RANK       (P5/3)
1 #ME-FBR-BY-OWNER      (P5/2)
1 #M-E-INS-BY-FACE-PE (8)
  2 #M-E-INS-BY-FACE (P7/4)
1 #M-E-INS-BY-FACE-CAPS (P7/8)
1 #M-E-PLANS-BY-FACE-PE (8)
  2 #M-E-PLANS-BY-FACE (P7/4)
1 #M-E-PLANS-BY-FACE-CAPS (P7/8)
*
1 #M-E-PLANS-BY-TYPE-PE    (14)    /* DW5    /* WAS 11   DW10       RE2 was 12
  2 #M-E-PLANS-BY-TYPE   (P7/4)
*
1 #M-E-PLANS-BY-TYPE-CAPS (P7/14)  /* DW5    /* WAS 11   DW10       RE2 was 12
*
1 #M-E-PU-PLANS-BY-TYPE-PE   (9)   /* DW5    /* WAS 8    DW10
  2 #M-E-PU-PLANS-BY-TYPE (P7/4)
*
1 #M-E-PP-PLANS-BY-MODE-PE   (3)
  2 #M-E-PP-PLANS-BY-MODE   (P7/4)
1 #M-E-INS-BY-AGE-PE      (10)
  2 #M-E-INS-BY-AGE      (P7/4)
1 #M-E-DB-BY-TYPE-PE      (14)     /* DW5    /* WAS 10  DW10    RE2 was 12
  2 #M-E-DB-BY-TYPE      (P11.2/4)
1 #ME-EMP-INS-BY-FACE-PE (8)
  2 #ME-EMP-INS-BY-FACE (P3/3)
1 #ME-EMP-PLANS-BY-FACE-PE (8)
  2 #ME-EMP-PLANS-BY-FACE (P3/3)
1 #ME-EMP-PLANS-BY-TYPE-PE (13)   /* DW5     RE2 was 11
  2 #ME-EMP-PLANS-BY-TYPE (P3/3)
*
1 #M-E-FSO-BY-STAT   (N4/3)
1 #M-E-FSO-BY-RANK   (N4/3)
1 #M-E-FSO-BY-SEX    (N4/2)
1 #M-E-FSO-BY-AGE    (N4/8)
1 #M-E-FSO-BY-SERV   (N4/9)
*
1 #POL-STATS-OCC     (8)
  2 #POL-STATS-SEX             (P5/2)
  2 #POL-STATS-SEX-AGE         (P7/2)
  2 #POL-STATS-SEX-FACE        (P9/2)
*  #POL-STAT-SEX-AVG-AGE      (P3)
  2 #POL-STATS-CAT             (P5/7)
*  #POL-STATS-CAT-TOT         (P7/7)
  2 #POL-STATS-CAT-AGE         (P7/7)
  2 #POL-STATS-CAT-FACE        (P9/7)
  2 #POL-STATS-CAP-MALE        (P5/2)
  2 #POL-STATS-CAP-FEMALE      (P5/2)
  2 #POL-STATS-CAP-AGE         (P7/2)
  2 #POL-STATS-CAP-FACE        (P9/2)
  2 #POL-STATS-POL-TYPE        (P3/4)
  2 #POL-STATS-POL-AGE         (P7/4)
*  #POL-STATS-POL-TYPE-TOT    (P5)
  2 #POL-STATS-POL-TYPE-FACE   (P9/4)
  2 #POL-STATS-STAT            (P5/3)
  2 #POL-STATS-STAT-AGE        (P7/3)
  2 #POL-STATS-STAT-FACE       (P9/3)
1 #MBRX                (I2)
1 #SEXX                (I2)
1 #CAPX                (I2)
1 #POLX                (I2)
1 #CATX                (I2)
1 #IDEX                (I2)
*
* * * *   S T A T U S   F I L E   * * * * * * * * * * * * * * *
1 ST-V VIEW OF A-STATUS
  2 MEMBER-CONTACT-ID                                     /* JT1
  2 ID-NUMBER      (N6)
  2 REDEFINE ID-NUMBER
    3 ID-NBR       (A6)
  2 WIDOW-FLAG          (A1)
* 2 MEMBER-FLAG         (A1)
*   2 SEX                                   /* TT2
  2 PAD-CODE
  2 FIRST-PLACE-FEE
  2 INTRO-FLAG
  2 PROCESS-IND
  2 ALOT-AMT
  2 APPL-SOURCE
  2 DEBIT-CREDIT-AMT
  2 X-LOAN-AMOUNT    (9)
  2 X-LOAN-AMOUNT-2  (9)
  2 X-ALT-LP-IND     (9)
  2 X-ALT-LP-IND-2   (9)
  2 X-ALT-LP-AMT     (9)
  2 X-ALT-LP-AMT-2   (9)
  2 BILL-ADJUST
*   2 ADDRESS-CHG-CODE    (A1)                             /* JT1
  2 RANK                (A3)
  2 MILITARY-SERVICE    (A3)
  2 MILITARY-STATUS     (A1)
  2 NAME         (A25)
*   2 ADDRESS-1    (A25)                                   /* JT1
*   2 DATE-OF-BIRTH       (N8)                             /* TT2 BEGIN
*   2 REDEFINE DATE-OF-BIRTH
*    3 DOB-YYYY          (N4)
*    3 DOB-MM            (N2)
*    3 DOB-DD            (N2)                              /* TT2 END
  2 ONLINE-ACTION-GN
  2 ONLINE-ACTION        (9)
  2 NUMBER-MEMBERSHIPS
  2 PAID-TO-DATE       (N8/9)
  2 PAID-UP-DATE       (N8/9)
  2 ISSUE-DATE          (N8/9)
  2 REDEFINE ISSUE-DATE
    3 ISSUE-DATE-OCC    (9)
      4 ID-YYYYMM   (N6)
      4 REDEFINE ID-YYYYMM    /* this was redefinesd improperly
        5 ID-YYYY    (N4)
        5 ID-MM      (N2)
      4 ID-DD       (N2)
  2 ISSUE-AGE           (9)
  2 REDEFINE ISSUE-AGE
    3 ISS-AGE-OCC        (9)
      4 ISS-AGE      (N2)
  2 PAY-STATUS          (9)
  2 NUM-MBRSHIPS        (9)
  2 ANNUAL-PREM         (9)
  2 FACE-AMOUNT         (9)
  2 DEATH-BENEFIT       (9)
  2 ORIG-COST-BASIS     (9)
  2 COST-BASIS          (9)
  2 SMOKER-FLAG         (9)
  2 DURATION            (9)
  2 PLAN                (9)
  2 REDEFINE PLAN
    3 PLAN-OCC  (9)
      4 PLAN-A1      (A1)
      4 PLAN-A2      (A2)
  2 STATUS              (9)
  2 CASH-VALUE          (9)
  2 MIN-CASH-VALUE      (9)
  2 NXT-YR-MIN-CASH-VALUE (9)
  2 TOT-PREMIUMS-PAID   (9)
  2 CONV-DURATION       (9)
  2 MODE                (9)
  2 MONTH-ALLOC-AMT     (9)
  2 BEG-CASH-VALUE      (9)
  2 LAST-ANN-CASH-VALUE (9)
  2 RID-PLAN            (9)
*
* * * *   F I R S       F I L E   * * * * * * * * * * * * * * *
1 FR-V VIEW OF A-FIRS
  2 POL-DATE     (9)
  2 POL-AMT-PAID (9)
*
1 #JCL-PARM       (A32)
1 REDEFINE #JCL-PARM
  2 #JCL-WEEKLY-MONTHLY (A7)     /* 'WEEKLY ' OR 'MONTHLY' or 'PRE-M-E'
1 REDEFINE #JCL-PARM
  2 #JCL-MM            (N2)   /* DATE PARM 03/01/1999
  2 #JCL-X1            (A1)
  2 #JCL-DD            (N2)
  2 #JCL-X2            (A1)
  2 #JCL-YYYY          (N4)
*
1 #WEEKLY-MONTHLY (A7)
1 #NEXT-MON-YYYYMM (N6)
1 #LAST-MON-YYYYMM (N6)
1 REDEFINE #LAST-MON-YYYYMM
  2 #LAST-YYYY      (N4)
  2 #LAST-MM        (N2)
1 #UPDATE-NOUPDATE (A8)
*
1 #COUNTERS
  2 #RECS-READ        (P7)   /* DW8
  2 #CNT              (P5)
  2 #CNT-1            (P5)
  2 #CNT-2            (P5)
  2 #CNT-3            (P5)
  2 #CNT-4            (P5)
  2 #CNT-5            (P5)
  2 #CNT-6            (P5)
  2 #CNT-7            (P5)
  2 #CNT-8            (P5)
  2 #CNT-9            (P5)
  2 #I1               (I2)
  2 #I2               (I2)
  2 #I3               (I2)
  2 #I5               (I2)
*
1 #SELECT            (L)
1 #SSN               (N9)
1 REDEFINE #SSN
  2 #SSN-1ST-3        (N3)
  2 #SSN-MID-2        (N2)
  2 #SSN-QTD          (N4)
*
1 #SSN-KEY           (N7)
1 REDEFINE #SSN-KEY
  2 #SSN-KEY-QTD      (N4)
  2 #SSN-KEY-1ST-3    (N3)
*
1 #BASD   (N8)
1 #UPDATE          (L)
1 #HOLD-DATE       (N8)
1 REDEFINE #HOLD-DATE
  2 #HD-YYYY       (N4)
  2 #HD-MM         (N2)
  2 #HD-DD         (N2)
*
1 #DATN     (N8)
1 REDEFINE #DATN
  2 #DATN-YYYY (N4)
  2 #DATN-MMDD (N4)
*
1 #YYYYMMDD     (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYY    (N4)
  2 #MM      (N2)
  2 #DD      (N2)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM  (N6)
1 REDEFINE #YYYYMMDD
  2 #YYYYMMDD-A (A8)
*
1 #CAP-YYYYMM     (N6)
1 #NON-CAP-YYYYMM     (N6)
*
1 #WORK-AMT      (P5.5)
1 #DIFF          (P5.2)
1 #REC-FND    (L)
1 #SEX        (L)
1 #CAP        (L)
1 #TOT-FACE     (P7.2)
1 #RNK-I      (I2)
1 #AF-I       (I2)
1 #ARC-I      (I2)
1 #ADDL-AFTER-12-94  (L)
1 #RANK    (A3/50)
1 #CNT-RANK  (50)  /* 50 possible ranks
  2 #CNT-A-F   (2)  /* ARMY/AIRF
    3 #CNT-ADDL-POLS (P5/3)    /* ACT/RET/CIV
    3 #CNT-MAX-POLS  (P5/3)    /* ACT/RET/CIV
*
1 #UNTOUCHED-LAST-3 (P5/4)  /* <30/30-5-/50/70/>70
1 #UNTOUCHED-LAST-5 (P5/4)
1 #AG-X       (I2)
1 #CAP-DATE   (N8/20)
1 #CAP-CNT    (N3/20)
1 #FOUND-CAP  (L)
1 #PAY-STAT   (A4)
1 #EFF-DATE   (N8)
*
1 #LAST-ME-LIVES   (P7)
1 #LAST-ME-LINES   (P7)
1 #CURR-LIVES      (P7)
1 #CURR-LINES      (P7)
1 #CURR-MS-LIVES   (P7)
1 #CURR-MS-PLANS   (P7)
1 #TOT-LIVES (p7) /* vt was (P5)
1 #TOT-PLANS  (P7)                                                /* PM6
1 #NUM-PLANS  (P5)
1 #TOT-SPS-GEN (P5)
1 #TOT-SPS-GEN-PLANS (P5)
1 #TOT-MBRS    (P5)
1 #TOT-MBR-PLANS (P7)                          /* PM9
*
1 #TOT-MBR-GAINS      (P5)
1 #TOT-SG-LIVS-GAINS  (P5)
1 #TOT-MBR-LOSSES     (P5)
1 #TOT-SG-LIVS-LOSSES (P5)
1 #TOT-MBR-GAINS-PLANS      (P5)
1 #TOT-SG-LIVS-GAINS-PLANS  (P5)
1 #TOT-MBR-LOSSES-PLANS     (P5)
1 #TOT-SG-LIVS-LOSSES-PLANS (P5)
*
1 #ACTIVE     (L)
*
1 #LIVES-GAINS   (P5)
1 #MBR-GAINS     (P5)
1 #SPS-GEN-GAINS   (P5)
1 #TOT-PLAN-GAINS  (P5)
1 #MBR-PLAN-GAINS  (P5)
1 #SPS-GEN-PLAN-GAINS (P5)
*
1 #LIVES-LOSSES    (P5)
1 #MBR-LOSSES      (P5)
1 #SPS-GEN-LOSSES  (P5)
1 #TOT-PLAN-LOSSES (P5)
1 #MBR-PLAN-LOSSES (P5)
1 #SPS-GEN-PLAN-LOSSES (P5)
1 #ANY-LOSS    (L)
1 #LOSS        (L)
1 #ANY-GAIN    (L)
1 #GAIN        (L)
1 #CODE        (A1)
1 #TOT-INACTIVE (P5)
1 #TOT-NO-ADDR  (P5)
1 #TOT-UNDELIV  (P5)
1 #INS-X        (I2)
1 #FAC-X        (I2)
1 #AGE-X        (I2)
1 #TYP-X        (I2)
1 #MOD-X        (I2)
1 #RANK-X       (I2)
1 #SERV-X       (I2)
1 #PLAN-X       (I2)
1 #PUSP         (L)
1 #NO-MS-REC    (L)
1 #ISN          (P8)
1 #CURR-AGE     (N4)
1 #NCO-ARMY     (P5)
1 #NCO-AIRF     (P5)
1 #MS-MISMATCHED   (L)
1 #PURG-SEG-MISMATCHED (L)
1 #NUM-PLANS-PRIOR     (P3)
1 #ARMY-NM             (P5)
1 #AIRF-NM             (P5)
*
1 #NM-X    (I2)
1 #SCR-NEW-MBR-RANK  (A5/2)
1 #SCR-NEW-MBR-NAME  (A25/2)
1 #SCR-NEW-MBR-SERV  (A3/2)
*
1 #COMMAND    (A2) INIT <'BA'>
1 #INVALID    (L)
1 #RANK-DISPL (P2)
1 #RANK-LIT   (A23)
1 #RANK-DISPLAY (A5)
*
1 #FACE-AMT   (P7.2/9)
1 #DEATH-BN   (P7.2/9)
1 #FBR        (L)
1 #TOT-DC        (P11.2)
1 #TOT-BILL-ADJ  (P11.2)
1 #HAS-MODE-E    (L)
1 #HAS-PP        (L)
1 #TOT-LOANS     (P5.2)
* * * * * * * * * * * * * * * * * * * * * * *
END-DEFINE
*
FORMAT  LS=133 PS=76
WRITE   TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'Program Messages'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
FORMAT (2) LS=133 PS=76
WRITE  (2) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'GAIN DETAIL'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
FORMAT (3) LS=133 PS=76
WRITE  (3) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'LOSS (Death) DETAIL'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
FORMAT (4) LS=133 PS=76
WRITE  (4) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'LOSS (CASH-VALUES/EXCHANGES) DETAIL'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
FORMAT (5) LS=133 PS=76
WRITE  (5) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'LOSS (LAPSE/RESIGNS) DETAIL'
  5X 'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
FORMAT (7) LS=133 PS=76
WRITE  (7) TITLE LEFT 'PROGRAM: ' *PROGRAM 5X
  'New Members this month'5X  'DATE: ' *DATN 5X 'TIME: ' *TIMX
*
MOVE *DATN TO #DATN
READ WORK 1 ONCE RECORD #JCL-PARM
MOVE #JCL-WEEKLY-MONTHLY TO #WEEKLY-MONTHLY
READ WORK 1 ONCE RECORD #JCL-PARM
READ WORK 1 ONCE RECORD #UPDATE-NOUPDATE
WRITE 'JCL-PARM = ' #JCL-PARM
WRITE 'WEEKLY-MONTHLY = ' #WEEKLY-MONTHLY
WRITE 'UPDATE-NOUPDATE = ' #UPDATE-NOUPDATE
*
MOVE #JCL-YYYY TO #YYYY
MOVE #JCL-MM   TO #MM
MOVE #YYYYMM   TO #CAP-YYYYMM
MOVE #YYYYMMDD TO #PARM-YYYYMMDD   /* DW3
*
SUBTRACT 1 FROM #MM
IF #MM LT 1
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
MOVE #YYYYMM TO #NON-CAP-YYYYMM
*
READ ST-V BY MEMBER-KEY FROM '001900'
* READ ST-V BY MEMBER-KEY FROM '102660'
*  IF ST-V.PROCESS-IND = 'S' OR = 'C'   /* bypass AFSC records     RE1
  IF ST-V.PROCESS-IND = 'C'                                     /* RE1
      OR AFFL-ONLY-CLIENT(<ST-V.ID-NUMBER>)                       /* RE1
    ESCAPE TOP
  END-IF
*
  ADD 1 TO #RECS-READ
*
  PERFORM ACCUM-ME-STATS
*
  IF #WEEKLY-MONTHLY = 'MONTHLY'
    ESCAPE TOP
  END-IF
*
  PERFORM ACCUM-GAINS-LOSSES /* USED TO CHECK MS COUNTS DURING MONTH
*
  IF #WEEKLY-MONTHLY = 'WEEKLY'   /* USES FILE SEGMENTS
    ESCAPE TOP
  END-IF
*
* DO PRE-M-E PROCESSING   WILL PRINT NEW MEMBER LIST
* processing just before MONTH-END using FILE SEGMENTS about to be reset
*
  IF  (ONLINE-ACTION-GN NE '2')  /* ONLY SORT NEW MEMBERS
* IF  ((ID-NUMBER LT 102660) OR (ID-NUMBER GT 102876)) /* if after m/e
      OR (INTRO-FLAG = 'S' OR = 'K' OR = 'G')
    ESCAPE TOP
  END-IF
*
  PERFORM GET-RANK
*
  IF (#RANK-DISPL GE 20) AND (#RANK-DISPL LE 30)
    MOVE 2 TO #RANK-X    /* nco
  ELSE
    MOVE 1 TO #RANK-X   /* all else
  END-IF
*
  IF MILITARY-SERVICE = MASK ('A')
    MOVE 1 TO #SERV-X
    ADD 1 TO #ARMY-NM
  ELSE
    MOVE 2 TO #SERV-X
    ADD 1 TO #AIRF-NM
  END-IF
END-ALL
*
SORT BY #SERV-X #RANK-X NAME
    USING #RANK-DISPLAY MILITARY-SERVICE
*
  IF #NM-X = 2
    PERFORM PRINT-NEW-MBR
  END-IF
*
  AT BREAK #RANK-X
    PERFORM PRINT-NEW-MBR
    WRITE (7) '**********'
  END-BREAK
*
  AT BREAK #SERV-X
    PERFORM PRINT-NEW-MBR
    NEWPAGE (7)
  END-BREAK
*
  ADD 1 TO #NM-X
  MOVE #RANK-DISPLAY    TO #SCR-NEW-MBR-RANK (#NM-X)
  MOVE NAME             TO #SCR-NEW-MBR-NAME (#NM-X)
  MOVE MILITARY-SERVICE TO #SCR-NEW-MBR-SERV (#NM-X)
END-SORT
*
NEWPAGE
WRITE /// 'TYPE RUN =' #WEEKLY-MONTHLY
WRITE 'tot-db diff =' #TOT-DIFF (EM=Z,ZZZ,ZZZ,ZZZ,ZZZ.99)     /* vt1 was em=zzz,zzz,zzz.99
WRITE (7) 'Tot new ARMY members      = ' #ARMY-NM
WRITE (7) 'Tot new AIR FORCE members = ' #AIRF-NM
WRITE 'FSO NCO"S by army/airf  ARMY =' #NCO-ARMY 'AIRF = ' #NCO-AIRF
*
WRITE  'Recs read        ' #RECS-READ
WRITE  'AAFMAA Employees=' #AAFMAA-EMP
WRITE  'TOTAL DEMO RECS =' #CNT-9
WRITE // 'Level Term II Stats'
WRITE #VT-CP 'college protection plans'
WRITE #VT-RG 'regularplans'
*
IF #WEEKLY-MONTHLY = 'MONTHLY'
  MOVE #JCL-YYYY TO #YYYY
  MOVE #JCL-MM TO #MM
  MOVE #YYYYMM TO #NEXT-MON-YYYYMM
  RESET #NO-MS-REC
  FIND (1) MBRSHIP-STATS-V WITH MONTH-KEY = #NEXT-MON-YYYYMM
    IF NO RECORD FOUND
      MOVE TRUE TO #NO-MS-REC
      RESET MBRSHIP-STATS-V
    END-NOREC
    MOVE *ISN TO #ISN
  END-FIND
*
* WRITE '2795' MONTH-KEY
  IF NOT #NO-MS-REC
    GET MBRSHIP-STATS-V #ISN
  END-IF
*
  MOVE #M-E-INS-BY-FACE        (*, *) TO M-E-INS-BY-FACE        (*, *)
  MOVE #M-E-INS-BY-FACE-CAPS   (*)    TO M-E-INS-BY-FACE-CAPS   (*)
  MOVE #M-E-PLANS-BY-FACE      (*, *) TO M-E-PLANS-BY-FACE      (*, *)
  MOVE #M-E-PLANS-BY-FACE-CAPS (*)    TO M-E-PLANS-BY-FACE-CAPS (*)
  MOVE #M-E-PLANS-BY-TYPE      (*, *) TO M-E-PLANS-BY-TYPE      (*, *)
  MOVE #M-E-PLANS-BY-TYPE-CAPS (*)    TO M-E-PLANS-BY-TYPE-CAPS (*)
  MOVE #M-E-PU-PLANS-BY-TYPE   (*, *) TO M-E-PU-PLANS-BY-TYPE   (*, *)
  MOVE #M-E-PP-PLANS-BY-MODE   (*, *) TO M-E-PP-PLANS-BY-MODE   (*, *)
  MOVE #M-E-INS-BY-AGE         (*, *) TO M-E-INS-BY-AGE         (*, *)
  MOVE #M-E-DB-BY-TYPE         (*, *) TO M-E-DB-BY-TYPE         (*, *)
  MOVE #M-E-FSO-BY-STAT        (*)    TO M-E-FSO-BY-STAT       (*)
  MOVE #M-E-FSO-BY-RANK        (*)    TO M-E-FSO-BY-RANK       (*)
  MOVE #M-E-FSO-BY-SEX         (*)    TO M-E-FSO-BY-SEX        (*)
  MOVE #M-E-FSO-BY-AGE         (*)    TO M-E-FSO-BY-AGE        (*)
  MOVE #M-E-FSO-BY-SERV        (*)    TO M-E-FSO-BY-SERV       (*)
  MOVE #ME-INS-ONLY-BY-PLAN    (*)    TO ME-INS-ONLY-BY-PLAN   (*)
  MOVE #ME-FBR-BY-SVC          (*)    TO ME-FBR-BY-SVC         (*)
  MOVE #ME-FBR-BY-RANK         (*)    TO ME-FBR-BY-RANK        (*)
  MOVE #ME-FBR-BY-OWNER        (*)    TO ME-FBR-BY-OWNER       (*)
  MOVE #ME-EMP-INS-BY-FACE     (*, *) TO EMP-INS-BY-FACE       (*, *)
  MOVE #ME-EMP-PLANS-BY-FACE   (*, *) TO EMP-PLANS-BY-FACE     (*, *)
  MOVE #ME-EMP-PLANS-BY-TYPE   (*, *) TO EMP-PLANS-BY-TYPE     (*, *)
  MOVE #POL-STATS-SEX          (*, *) TO POL-STATS-SEX-CNT      (*, *)
  MOVE #POL-STATS-SEX-AGE      (*, *) TO POL-STATS-SEX-TOT-AGE  (*, *)
  MOVE #POL-STATS-CAT          (*, *) TO POL-STATS-CAT-CNT      (*, *)
  MOVE #POL-STATS-CAT-AGE      (*, *) TO POL-STATS-CAT-TOT-AGE  (*, *)
  MOVE #POL-STATS-CAP-MALE     (*, *) TO POL-STATS-CAP-MALE     (*, *)
  MOVE #POL-STATS-CAP-FEMALE   (*, *) TO POL-STATS-CAP-FEMALE   (*, *)
  MOVE #POL-STATS-CAP-AGE      (*, *) TO POL-STATS-CAP-TOT-AGE  (*, *)
  MOVE #POL-STATS-CAP-FACE     (*, *) TO POL-STATS-CAP-TOT-FACE (*, *)
  MOVE #POL-STATS-POL-TYPE     (*, *) TO POL-STATS-POL-CNT      (*, *)
  MOVE #POL-STATS-POL-TYPE-FACE(*, *) TO POL-STATS-POL-TOT-FACE (*, *)
*
  WRITE 'TOTAL DEMOGRAPHICS PROCESSED: '  #CNT-9
  FOR #I1 1 TO 2
    IF #I1 = 1 WRITE 'New  Stats' END-IF
    IF #I1 = 2 WRITE 'Addl Stats' END-IF
    WRITE 'DATES PROCESSED: '  #NON-CAP-YYYYMM #CAP-YYYYMM
    WRITE '#POL-STATS-SEX      '  POL-STATS-SEX-CNT      (#I1, *)
    WRITE '#POL-STATS-SEX-AGE  '  POL-STATS-SEX-TOT-AGE  (#I1, *)
    WRITE '#POL-STATS-CAT      '  POL-STATS-CAT-CNT      (#I1, *)
    WRITE '#POL-STATS-CAT-AGE  '  POL-STATS-CAT-TOT-AGE  (#I1, *)
    WRITE '#POL-STATS-CAP-MALE '  POL-STATS-CAP-MALE     (#I1, *)
    WRITE '#POL-STATS-CAP-FEMA '  POL-STATS-CAP-FEMALE   (#I1, *)
    WRITE '#POL-STATS-CAP-AGE  '  POL-STATS-CAP-TOT-AGE  (#I1, *)
    WRITE '#POL-STATS-CAP-FACE '  POL-STATS-CAP-TOT-FACE (#I1, *)
    WRITE '#POL-STATS-POL-TYPE '  POL-STATS-POL-CNT      (#I1, *)
    WRITE '#POL-STATS-TYPE-FACE'  POL-STATS-POL-TOT-FACE (#I1, *)
  END-FOR
*
  IF #NO-MS-REC
    WRITE 'new next-month ms rec stored' #NEXT-MON-YYYYMM
    MOVE #NEXT-MON-YYYYMM TO MONTH-KEY
    IF #UPDATE-NOUPDATE = 'UPDATE'
      STORE MBRSHIP-STATS-V
    END-IF
  ELSE
    IF #UPDATE-NOUPDATE = 'UPDATE'
      WRITE 'NEXT-MONTH MS REC UPDATED' #NEXT-MON-YYYYMM
      UPDATE (0643)
    END-IF
  END-IF
  END TRANSACTION
ELSE     /* 'WEEKLY' OR 'PRE-M-E'
  MOVE #JCL-YYYY TO #YYYY
  MOVE #JCL-MM TO #MM
  MOVE #JCL-DD TO #DD
*
  IF   (#WEEKLY-MONTHLY = 'WEEKLY')
      AND (*DATN GE #YYYYMMDD)   /* PARMRUND HAS NOT YET BEEN UPDATED
    MOVE *DATN TO #YYYYMMDD
  ELSE               /* PARMRUND HAS BEEN UPDATED OR DOING PRE-M-E
    SUBTRACT 1 FROM #MM
    IF #MM LT 1
      MOVE 12 TO #MM
      SUBTRACT 1 FROM #YYYY
    END-IF
  END-IF
*
  FIND (1) MBRSHIP-STATS-V WITH MONTH-KEY = #YYYYMM
    ADD ME-MBR-BY-UNITS  (*) TO #LAST-ME-LIVES
    ADD ME-S-G-BY-UNITS  (*) TO #LAST-ME-LIVES
    ADD ME-LINES-BY-PLAN (*) TO #LAST-ME-LINES
*
    ADD M-E-INS-BY-FACE   (*, 1)   TO #LST-MO-MBRS
    ADD M-E-INS-BY-FACE   (*, 2:4) TO #LST-MO-SPS-GEN
    ADD M-E-INS-BY-FACE   (*, *)   TO #LST-MO-LIVES
    ADD M-E-PLANS-BY-FACE (*, 1)   TO #LST-MO-PLNS
    ADD M-E-PLANS-BY-FACE (*, 2:4) TO #LST-MO-SPS-GEN-PLNS
    ADD M-E-PLANS-BY-FACE (*, *)   TO #LST-MO-TOT-PLNS
  END-FIND
*
* WRITE '3170' MONTH-KEY
  ADD GAIN-MBRS (1:10) TO #TOT-MBR-GAINS
  ADD GAIN-MBRS (20)   TO #TOT-MBR-GAINS
  ADD GAIN-MBRS (22)   TO #TOT-MBR-GAINS
  ADD GAIN-MBRS (24)   TO #TOT-MBR-GAINS                  /* RE2   EZ
  ADD GAIN-MBRS (26)   TO #TOT-MBR-GAINS                  /* RE2   LTII+
  ADD GAIN-MBRS (1:20)  TO #TOT-MBR-GAINS-PLANS
  ADD GAIN-MBRS (22:27) TO #TOT-MBR-GAINS-PLANS           /* RE2 was 22:23
  ADD SPS-GEN-GAIN-PLANS (1:6)   TO #TOT-SG-LIVS-GAINS
  ADD SPS-GEN-GAIN-PLANS (13:14) TO #TOT-SG-LIVS-GAINS
  ADD SPS-GEN-GAIN-PLANS (16)    TO #TOT-SG-LIVS-GAINS
  ADD SPS-GEN-GAIN-PLANS (18)    TO #TOT-SG-LIVS-GAINS
  ADD SPS-GEN-GAIN-PLANS (20)    TO #TOT-SG-LIVS-GAINS /* GPL    DW10
  ADD SPS-GEN-GAIN-PLANS (22)    TO #TOT-SG-LIVS-GAINS /* EZ     RE2
  ADD SPS-GEN-GAIN-PLANS (24)    TO #TOT-SG-LIVS-GAINS /* LTII+  RE2
  ADD SPS-GEN-GAIN-PLANS (1:25) TO #TOT-SG-LIVS-GAINS-PLANS   /* DW10    RE2 was 1:21
  ADD LOSS-MBRS (1:4) TO #TOT-MBR-LOSSES
  ADD SPS-GEN-LOSS-MBRS (1:3) TO #TOT-SG-LIVS-LOSSES
  ADD LOSS-PLANS (1:4) TO #TOT-MBR-LOSSES-PLANS
  ADD SPS-GEN-LOSS-PLANS (1:3) TO #TOT-SG-LIVS-LOSSES-PLANS
*
  COMPUTE #ACT-MBR-DIF = #TOT-MBRS - #LST-MO-MBRS
  COMPUTE #ACT-S-G-DIF = #TOT-SPS-GEN - #LST-MO-SPS-GEN
  COMPUTE #ACT-TOT-DIF = #TOT-LIVES - #LST-MO-LIVES
  COMPUTE #ACT-MBR-PLN-DIF = #TOT-MBR-PLANS - #LST-MO-PLNS
  COMPUTE #ACT-S-G-PLN-DIF = #TOT-SPS-GEN-PLANS - #LST-MO-SPS-GEN-PLNS
  COMPUTE #ACT-TOT-PLN-DIF = #TOT-PLANS - #LST-MO-TOT-PLNS
*
  COMPUTE #MS-MBR-DIF = #TOT-MBR-GAINS - #TOT-MBR-LOSSES
  COMPUTE #MS-S-G-DIF = #TOT-SG-LIVS-GAINS - #TOT-SG-LIVS-LOSSES
  COMPUTE #MS-TOT-DIF = #MS-MBR-DIF + #MS-S-G-DIF
  COMPUTE #MS-MBR-PLN-DIF = #TOT-MBR-GAINS-PLANS - #TOT-MBR-LOSSES-PLANS
  COMPUTE #MS-S-G-PLN-DIF = #TOT-SG-LIVS-GAINS-PLANS
    - #TOT-SG-LIVS-LOSSES-PLANS
  COMPUTE #MS-TOT-PLN-DIF = #MS-MBR-PLN-DIF + #MS-S-G-PLN-DIF
*
  IF   (#ACT-TOT-DIF = #MS-TOT-DIF)
      AND (#ACT-TOT-PLN-DIF = #MS-TOT-PLN-DIF)
    WRITE '** ACTUAL/MS Bodies and Plans match'
  END-IF
*
  WRITE '            *****BODIES*********  *****PLANS*********'
  WRITE 'DESCRIPTION   MBRS SPS/GEN TOTAL  MBRS SPS/GEN  TOTAL'
  WRITE 'LAST MONTH' #LST-MO-MBRS #LST-MO-SPS-GEN  #LST-MO-LIVES
    #LST-MO-PLNS #LST-MO-SPS-GEN-PLNS #LST-MO-TOT-PLNS
  WRITE 'CURRENT   ' #TOT-MBRS #TOT-SPS-GEN #TOT-LIVES
    #TOT-MBR-PLANS #TOT-SPS-GEN-PLANS #TOT-PLANS
  WRITE 'ACTUAL DIF' #ACT-MBR-DIF   #ACT-S-G-DIF       #ACT-TOT-DIF
    #ACT-MBR-PLN-DIF #ACT-S-G-PLN-DIF #ACT-TOT-PLN-DIF
  WRITE 'MS     DIF' #MS-MBR-DIF   #MS-S-G-DIF       #MS-TOT-DIF
    #MS-MBR-PLN-DIF #MS-S-G-PLN-DIF #MS-TOT-PLN-DIF
*
  COMPUTE #CURR-LIVES = #LAST-ME-LIVES + #LIVES-GAINS - #LIVES-LOSSES
  COMPUTE #CURR-LINES = #LAST-ME-LINES + #TOT-PLAN-GAINS
    - #TOT-PLAN-LOSSES
*
  IF #CURR-LIVES NE #TOT-LIVES
    MOVE TRUE TO #PURG-SEG-MISMATCHED
    WRITE 'Last ME Actual Lives =' #LAST-ME-LIVES
    WRITE 'Segment Gains        =' #LIVES-GAINS
    WRITE 'Segment Losses       =' #LIVES-LOSSES
    WRITE 'Computed New Lives   =' #CURR-LIVES
    WRITE 'Current Actual Lives =' #TOT-LIVES   '*** MISMATCH ***'
  END-IF
*
  IF #CURR-LINES NE #TOT-PLANS
    MOVE TRUE TO #PURG-SEG-MISMATCHED
    WRITE 'Last ME Actual Lines =' #LAST-ME-LINES
    WRITE 'Segment Gains        =' #TOT-PLAN-GAINS
    WRITE 'Segment Losses       =' #TOT-PLAN-LOSSES
    WRITE 'COMPUTED NEW LINES   =' #CURR-LINES
    WRITE 'Current Actual Lines =' #TOT-PLANS   '*** MISMATCH ***'
    WRITE 'Mismatch Lines Using MS Counts' #CURR-LINES
  END-IF
*
  IF NOT #PURG-SEG-MISMATCHED
    WRITE ' '
    WRITE '   CURRENT COUNTS MATCH  LAST M/E + "MODIFIED" SEGMENTS'
    WRITE ' '
  END-IF
*
  IF #TOT-MBR-GAINS NE #MBR-GAINS
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS MBR GAINS = ' #TOT-MBR-GAINS
      ' ***** ACTUAL = ' #MBR-GAINS
  END-IF
*
  IF #TOT-MBR-LOSSES NE #MBR-LOSSES
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS MBR LOSSES = ' #TOT-MBR-LOSSES
      ' ***** ACTUAL = ' #MBR-LOSSES
  END-IF
*
  IF #TOT-SG-LIVS-GAINS NE #SPS-GEN-GAINS
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS SPS-GEN LIVS GAINS = ' #TOT-SG-LIVS-GAINS
      ' ***** ACTUAL = ' #SPS-GEN-GAINS
  END-IF
*
  IF #TOT-SG-LIVS-LOSSES NE #SPS-GEN-LOSSES
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS SPS-GEN-MBR LOSSES = ' #TOT-SG-LIVS-LOSSES
      ' ***** ACTUAL = ' #SPS-GEN-LOSSES
  END-IF
*
  IF #TOT-MBR-GAINS-PLANS NE #MBR-PLAN-GAINS
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS MBR PLAN GAINS = ' #TOT-MBR-GAINS-PLANS
      ' ***** ACTUAL = ' #MBR-PLAN-GAINS
  END-IF
*
  IF #TOT-MBR-LOSSES-PLANS NE #MBR-PLAN-LOSSES
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS MBR PLAN LOSSES = ' #TOT-MBR-LOSSES-PLANS
      ' ***** ACTUAL = ' #MBR-PLAN-LOSSES
  END-IF
*
  IF #TOT-SG-LIVS-GAINS-PLANS NE #SPS-GEN-PLAN-GAINS
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS SPS-GEN LIVS PLAN GAINS = ' #TOT-SG-LIVS-GAINS-PLANS
      ' ***** ACTUAL = ' #SPS-GEN-PLAN-GAINS
  END-IF
*
  IF #TOT-SG-LIVS-LOSSES-PLANS NE #SPS-GEN-PLAN-LOSSES
    MOVE TRUE TO #MS-MISMATCHED
    WRITE 'MS MBR LOSSES = ' #TOT-SG-LIVS-LOSSES-PLANS
      ' ***** ACTUAL = ' #SPS-GEN-PLAN-LOSSES
  END-IF
*
  IF NOT #MS-MISMATCHED
    WRITE ' '
    WRITE '      "MS" MATCHES CURRENT "MODIFIED" SEGMENTS'
    WRITE ' '
  END-IF
*
  COMPUTE #CURR-MS-LIVES = #LAST-ME-LIVES
    + #TOT-MBR-GAINS
    + #TOT-SG-LIVS-GAINS
    - #TOT-MBR-LOSSES
    - #TOT-SG-LIVS-LOSSES
*
  COMPUTE #CURR-MS-PLANS = #LAST-ME-LINES
    + #TOT-MBR-GAINS-PLANS
    + #TOT-SG-LIVS-GAINS-PLANS
    - #TOT-MBR-LOSSES-PLANS
    - #TOT-SG-LIVS-LOSSES-PLANS
*
  IF #CURR-MS-LIVES = #TOT-LIVES
    WRITE '***** Last ME lives plus MS counts = Curr Lives *****'
  ELSE
    WRITE 'Last Me plus MS lives mismatch' #LAST-ME-LIVES
      '+' #TOT-MBR-GAINS
      '+' #TOT-SG-LIVS-GAINS
      '-' #TOT-MBR-LOSSES
      '-' #TOT-SG-LIVS-LOSSES
      'not =' #TOT-LIVES
  END-IF
*
  IF #CURR-MS-PLANS = #TOT-PLANS
    WRITE '***** Last ME plans plus MS counts = Curr Plans *****'
  ELSE
    WRITE 'Last Me plus MS plans mismatch' #LAST-ME-LINES
      '+' #TOT-MBR-GAINS-PLANS
      '+' #TOT-SG-LIVS-GAINS-PLANS
      '-' #TOT-MBR-LOSSES-PLANS
      '-' #TOT-SG-LIVS-LOSSES-PLANS
      'not =' #TOT-PLANS
  END-IF
*
  FOR #I1 1 TO 9                       /* DW10     RE2 was 7
    IF #I1 = 5  /* bypass fso
      ESCAPE TOP
    END-IF
*
    ADD GAINS-BY-PLAN    (#I1) TO #TOT-GAINS-BY-PLAN
    ADD GAINS-BY-PLAN-DB (#I1) TO #TOT-GAINS-BY-PLAN-DB
  END-FOR
*
  FOR #I1 1 TO 9                 /* RE2 was 6
    IF #I1 = 5  /* bypass fso
      ESCAPE TOP
    END-IF
*
    IF  (#GAINS-BY-PLAN (#I1) NE GAINS-BY-PLAN (#I1))
        OR (#LOSSES-BY-PLAN (#I1) NE LOSSES-BY-PLAN (#I1))
        OR (#GAINS-BY-PLAN-DB (#I1) NE GAINS-BY-PLAN-DB (#I1))
        OR (#LOSSES-BY-PLAN-DB (#I1) NE LOSSES-BY-PLAN-DB (#I1))
      MOVE TRUE TO #BY-PLAN-MISMATCH
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  IF #BY-PLAN-MISMATCH
    WRITE 'GAIN/LOSS W/O FSO BY PLAN MISMATCH - SEE BELOW ignore INDX 5'
    WRITE '  SEGMENT ACCUM GAINS' #GAINS-BY-PLAN (1:9)    /* DW10    RE2 was 7 start
    WRITE '     MS         GAINS' GAINS-BY-PLAN (1:9)
    WRITE '  SEGMENT ACCUM LOSSS' #LOSSES-BY-PLAN (1:9)
    WRITE '     MS         LOSSS' LOSSES-BY-PLAN (1:9)
    WRITE '  SEGMENT ACCUM DB GAINS' #GAINS-BY-PLAN-DB (1:9)
    WRITE '     MS         DB GAINS' GAINS-BY-PLAN-DB (1:9)
    WRITE '  SEGMENT ACCUM DB LOSSS' #LOSSES-BY-PLAN-DB (1:9)
    WRITE '     MS         DB LOSSS' LOSSES-BY-PLAN-DB (1:9)
*
    FOR #I1 1 TO 9                      /* DW10                   /* RE2 was 7 end
      IF #I1 = 5  /* bypass fso
        ESCAPE TOP
      END-IF
*
      ADD #LOSSES-BY-PLAN (#I1)    TO #TOT-SEG-LOSSES-BY-PLAN
      ADD #LOSSES-BY-PLAN-DB (#I1) TO #TOT-SEG-LOSSES-BY-PLAN-DB
      ADD LOSSES-BY-PLAN (#I1)    TO #TOT-MS-LOSSES-BY-PLAN
      ADD LOSSES-BY-PLAN-DB (#I1) TO #TOT-MS-LOSSES-BY-PLAN-DB
    END-FOR
*
    COMPUTE #DIF-LOSSES-BY-PLAN = #TOT-SEG-LOSSES-BY-PLAN
      - #TOT-MS-LOSSES-BY-PLAN
    COMPUTE #DIF-LOSSES-BY-PLAN-DB = #TOT-SEG-LOSSES-BY-PLAN-DB
      - #TOT-MS-LOSSES-BY-PLAN-DB
    WRITE 'ADJ TOT LOSSES BY PLAN NON-DEATH' #DIF-LOSSES-BY-PLAN
    WRITE 'ADJ TOT LOSSES BY PLAN-DB NON-DEATH' #DIF-LOSSES-BY-PLAN-DB
    SUBTRACT #DIF-LOSSES-BY-PLAN    FROM #LOSSES-BY-PLAN-TOT-NON-DEATH
    SUBTRACT #DIF-LOSSES-BY-PLAN-DB
      FROM #LOSSES-BY-PLAN-DB-TOT-NON-DEATH
*
  ELSE
    WRITE '     MS  MATCHES GAIN/LOSS W/O FSO BY PLAN'
  END-IF
*
  RESET #BY-PLAN-MISMATCH
  FOR #I1 1 TO 4
    IF  (#GAINS-LIVES-BY-CAT  (#I1) NE GAINS-LIVES-BY-CAT (#I1))
        OR (#LOSSES-LIVES-BY-CAT (#I1) NE LOSSES-LIVES-BY-CAT (#I1))
      MOVE TRUE TO #BY-PLAN-MISMATCH
      ESCAPE BOTTOM
    END-IF
  END-FOR
*
  IF #BY-PLAN-MISMATCH
    WRITE 'GAIN/LOSS LIVES W/O FSO BY CAT MISMATCH - SEE BELOW'
    WRITE '  SEGMENT LIVES ACCUM GAINS' #GAINS-LIVES-BY-CAT (1:4)
    WRITE '     MS   LIVES       GAINS' GAINS-LIVES-BY-CAT (1:4)
    WRITE '  SEGMENT LIVES ACCUM LOSSS' #LOSSES-LIVES-BY-CAT (1:4)
    WRITE '     MS   LIVES       LOSSS' LOSSES-LIVES-BY-CAT (1:4)
  ELSE
    WRITE '     MS  MATCHES GAIN/LOSS LIVES W/O FSO BY CAT'
  END-IF
*
  WRITE  '**************'
  WRITE  'Tot mbr gains         ' #MBR-GAINS
    'Tot mbr plan gains    ' #MBR-PLAN-GAINS
  WRITE  'Tot sps   gains       ' #SPS-GEN-GAINS
    'Tot sps-gen plan gains' #SPS-GEN-PLAN-GAINS
  WRITE  'Tot lives gains       ' #LIVES-GAINS
    'Tot plan gains        ' #TOT-PLAN-GAINS
  WRITE  '**************'
  WRITE  'Tot mbr losses         ' #MBR-LOSSES
    'Tot mbr plan losses    ' #MBR-PLAN-LOSSES
  WRITE  'Tot sps-gen losses     ' #SPS-GEN-LOSSES
    'Tot sps-gen plan losses' #SPS-GEN-PLAN-LOSSES
  WRITE  'Tot lives losses       ' #LIVES-LOSSES
    'Tot plan losses        ' #TOT-PLAN-LOSSES
*
  WRITE 'TOT GAINS/LOSSES BY PLAN W/O FSO"S from segments'
  WRITE #GAINS-BY-PLAN-TOT               'TOT GAINS'
    #GAINS-BY-PLAN-DB-TOT            'TOT GAINS-DB'
    #LOSSES-BY-PLAN-TOT-DEATH        'TOT-LOSSES-DEATHS'
    #LOSSES-BY-PLAN-DB-TOT-DEATH     'TOT-LOSSES-DEATHS-DB'
    #LOSSES-BY-PLAN-TOT-NON-DEATH    'TOT-LOSSES-NON-DEATH'
    #LOSSES-BY-PLAN-DB-TOT-NON-DEATH 'TOT-LOSSES-NoN-DEATH-DB'
*
  IF #WEEKLY-MONTHLY = 'PRE-M-E'  /* ASSUMES PARMRUND HAS BEEN UPDATED
    MOVE #JCL-YYYY TO #YYYY
    MOVE #JCL-MM TO #MM
    MOVE #YYYYMM TO #NEXT-MON-YYYYMM
*
    RESET #NO-MS-REC
    FIND (1) MBRSHIP-STATS-V WITH MONTH-KEY = #NEXT-MON-YYYYMM
      IF NO RECORD FOUND
        MOVE TRUE TO #NO-MS-REC
        RESET MBRSHIP-STATS-V
      END-NOREC
      MOVE *ISN TO #ISN
    END-FIND
*
*   WRITE '4580' MONTH-KEY
    IF NOT #NO-MS-REC
      GET MBRSHIP-STATS-V #ISN
    END-IF
*
*   MOVE #GAINS-BY-PLAN-TOT               TO GAIN-PLANS
*   MOVE #GAINS-BY-PLAN-DB-TOT            TO GAIN-DB
    MOVE #TOT-GAINS-BY-PLAN               TO GAIN-PLANS
    MOVE #TOT-GAINS-BY-PLAN-DB            TO GAIN-DB
    MOVE #LOSSES-BY-PLAN-TOT-DEATH        TO LOSS-PLANS-DEATHS
    MOVE #LOSSES-BY-PLAN-DB-TOT-DEATH     TO LOSS-DB-DEATH
    MOVE #LOSSES-BY-PLAN-TOT-NON-DEATH    TO LOSS-PLANS-NON-DEATHS
    MOVE #LOSSES-BY-PLAN-DB-TOT-NON-DEATH TO LOSS-DB-NON-DEATH
*
    WRITE 'new Mortality stats are:'
    WRITE 'GAIN-PLANS           ' GAIN-PLANS
    WRITE 'GAIN-DB              ' GAIN-DB
    WRITE 'LOSS PLANS DEATHS    ' LOSS-PLANS-DEATHS
    WRITE 'LOSS PLANS DEATHS -DB' LOSS-DB-DEATH
    WRITE 'LOSS PLANS DEATHS    ' LOSS-PLANS-NON-DEATHS
    WRITE 'LOSS PLANS DEATHS -DB' LOSS-DB-NON-DEATH
*
    IF #NO-MS-REC
      WRITE 'NEW NEXT-MONTH MS REC STORED' #NEXT-MON-YYYYMM
      MOVE #NEXT-MON-YYYYMM TO MONTH-KEY
      IF #UPDATE-NOUPDATE = 'UPDATE'
        STORE MBRSHIP-STATS-V
      END-IF
    ELSE
      IF #UPDATE-NOUPDATE = 'UPDATE'
        WRITE 'NEXT-MONTH MS REC UPDATED' #NEXT-MON-YYYYMM
        UPDATE (1024)
      END-IF
    END-IF
    END TRANSACTION
  END-IF
END-IF
*
WRITE  '**************'
WRITE  'Tot CURR Mbrs    ' #TOT-MBRS  'Tot member plans ' #TOT-MBR-PLANS
WRITE  'Tot CURR Sps-Gen ' #TOT-SPS-GEN
  'Tot sps-gen plans' #TOT-SPS-GEN-PLANS
WRITE  'Tot CURR Lives   ' #TOT-LIVES 'Tot lives plans  ' #TOT-PLANS
WRITE  '**************'
WRITE 'INSURED BY FACE - MBRS (CAPS)  - SPS   - KIDS  - GRANDCHILDREN'
FOR #FAC-X 1 TO 8
  WRITE #FAC-X #M-E-INS-BY-FACE (#FAC-X, 1)
    '(' #M-E-INS-BY-FACE-CAPS (#FAC-X) ')'
    #M-E-INS-BY-FACE (#FAC-X, 2:4)
END-FOR
WRITE  '**************'
WRITE '  PLANS BY FACE - MBRS (CAPS)  - SPS   - KIDS  - GRANDCHILDREN'
FOR #FAC-X 1 TO 8
  WRITE #FAC-X #M-E-PLANS-BY-FACE (#FAC-X, 1)
    '(' #M-E-PLANS-BY-FACE-CAPS (#FAC-X) ')'
    #M-E-PLANS-BY-FACE (#FAC-X, 2:4)
END-FOR
*
**WRITE  '************** (OL/30/20/7P/FX/NSP/RT/LT/SO/LT2/AL/GPL)'            /* RE2
WRITE  '************** (OL/30/20/7P/FX/NSP/RT/LT/SO/LT2/AL/GPL/EZ/LTII+)'     /* RE2
WRITE '  PLANS BY TYPE - MBRS (CAPS)  - SPS   - KIDS  - GRANDCHILDREN'
FOR #TYP-X 1 TO 14    /* DW5    DE10    RE2 was 12
  WRITE #TYP-X #M-E-PLANS-BY-TYPE (#TYP-X, 1)
    '(' #M-E-PLANS-BY-TYPE-CAPS (#TYP-X) ')'
    #M-E-PLANS-BY-TYPE (#TYP-X, 2:4)
END-FOR
*
**WRITE  '************** (OL/30/20/7P/FX/RT/LT/SO/LT2/AL/??/GPL)'             /* RE2
WRITE  '************** (OL/30/20/7P/FX/RT/LT/SO/LT2/AL/??/GPL/EZ/LTII+)'      /* RE2
WRITE '  PLANS BY TYPE INS-ONLY'                 /* DW10
FOR #TYP-X 1 TO 14                              /*  DW10   RE2 was 12
  WRITE #TYP-X #ME-ins-only-by-plan (#TYP-X)
END-FOR
*
WRITE  '************** (OL/30/20/7P/FX/NSP/SO-NSP/AL/GPL)'
WRITE 'PU PLNS BY TYPE - MBRS (CAPS)  - SPS   - KIDS  - GRANDCHILDREN'
FOR #TYP-X 1 TO 9   /* DW5    DW10
  WRITE #TYP-X #M-E-PU-PLANS-BY-TYPE (#TYP-X, 1)
    '( ******* )'
    #M-E-PU-PLANS-BY-TYPE (#TYP-X, 2:4)
END-FOR
WRITE  '************** (G/M/A-S-Q-M-1-2-4-0)'
WRITE 'PP PLNS BY MODE - MBRS (CAPS)  - SPS   - KIDS  - GRANDCHILDREN'
FOR #MOD-X 1 TO 3
  WRITE #MOD-X #M-E-PP-PLANS-BY-MODE (#MOD-X, 1)
    '( ******* )'
    #M-E-PP-PLANS-BY-MODE (#MOD-X, 2:4)
END-FOR
WRITE  '************** (<18/<30/<40/<50/<60/<70/<80/<90/<100/>100)'
WRITE 'INSURED BY  AGE - MBRS (CAPS)  - SPS   - KIDS  - GRANDCHILDREN'
FOR #AGE-X 1 TO 10
  WRITE #AGE-X #M-E-INS-BY-AGE (#AGE-X, 1)
    '( ******* )'
    #M-E-INS-BY-AGE (#AGE-X, 2:4)
END-FOR
*
WRITE  '**************'
WRITE 'EMP BY FACE/PLAN  EMP   SPS   KIDS      EMP    SPS   KIDS'
FOR #FAC-X 1 TO 8
  WRITE #FAC-X #ME-EMP-INS-BY-FACE (#FAC-X, 1:3)
    #ME-EMP-PLANS-BY-FACE (#FAC-X, 1:3)
END-FOR
*
**RITE  '************** (OL/30/20/7P/FX/NSP/RT/LT/SO/AL)'             /* RE2
WRITE  '************** (OL/30/20/7P/FX/NSP/RT/LT/SO/AL/EZ/LTII+)'     /* RE2
WRITE 'DEATH BENE BY TYPE MBRS  - SPS   - KIDS  - GRANDCHILDREN'
FOR #TYP-X 1 TO 14   /* DW5    DW10        RE2 was 12
  WRITE #TYP-X #M-E-DB-BY-TYPE (#TYP-X, *)
  FOR #I5 1 TO 4
    ADD #M-E-DB-BY-TYPE (#TYP-X, #I5) TO #TOT-DB-BY-TYPE
  END-FOR
END-FOR
WRITE 'tot-db-by-type =' #TOT-DB-BY-TYPE
WRITE  '**************'
WRITE  'Tot Inactive' #TOT-INACTIVE
WRITE  'Tot No addr ' #TOT-NO-ADDR
WRITE  'Tot Undeliv ' #TOT-UNDELIV
*
WRITE // 'FREE SERVICE-ONLY STATISTICS'
WRITE 'BY MIL-STATUS (A/R/C)' #M-E-FSO-BY-STAT (*)
WRITE 'BY MIL-SERVICE (A/AR/AG/AGR/F/FR/FG/FGR)' #M-E-FSO-BY-SERV (*)
WRITE 'BY AGE (THRU 29/39/49/59/69/74/79/OVER 80/INVALID'
WRITE #M-E-FSO-BY-AGE (*)
WRITE 'BY RANK (OFFICER/WARR OFF/ENLISTED/all else)' #M-E-FSO-BY-RANK(*)
WRITE 'BY SEX (M/F)' #M-E-FSO-BY-SEX (*)
*
WRITE / '***** TOTS FOR LEON TACKSELL'
WRITE / #TOT-DC       (EM=Z,ZZZ,ZZZ,ZZZ.99-) 'TOTAL DEBIT-CREDIT'
WRITE / #TOT-BILL-ADJ (EM=Z,ZZZ,ZZZ,ZZZ.99-) 'TOTAL BILL ADJUST'
*
WRITE 'Cris"s premium gain stats'
WRITE 'PUSP premiums =' #GAIN-PUSP-PREMS
WRITE 'Monthly premiums below'
WRITE '  VA   /  LT   /   RT   /   SO   /   FSO   /   VT'
WRITE #GAIN-PREMS (*)
*
* * * * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ACCUM-GAINS-LOSSES
* * * * * * * * * * * * * * * * * * *
*
IF INTRO-FLAG = 'S'
  MOVE 2 TO #CAT-X
ELSE
  IF INTRO-FLAG = 'K'
    MOVE 3 TO #CAT-X
  ELSE
    IF INTRO-FLAG = 'G'
      MOVE 4 TO #CAT-X
    ELSE
      MOVE 1 TO #CAT-X
    END-IF
  END-IF
END-IF
*
IF ONLINE-ACTION-GN = '2'    /* new member
  MOVE '2' TO #CODE
  MOVE TRUE TO #GAIN #ANY-GAIN
  MOVE 1 TO #I1
  ADD 1 TO #CNT-2
  DISPLAY (2) #CNT-2 ST-V.ID-NUMBER  #I1
    ONLINE-ACTION (#I1) #NUM-PLANS (EM=Z)
    #NUM-PLANS-PRIOR (EM=Z)
    PLAN (#I1) PAY-STATUS (#I1) FACE-AMOUNT (#I1)
*
*  IF (PLAN-A1 (1) GE 'U') AND (PLAN-A1 (1) LE 'Z')  /* var term     RE2 START
*    MOVE 6 TO #PLN-X
*  ELSE
*    IF PLAN (1) = 'FSO'
*      MOVE 5 TO #PLN-X
*    ELSE
*      IF PLAN (1) = 'LT'
*        MOVE 2 TO #PLN-X
*      ELSE
*        IF PLAN (1) = 'RT'
*          MOVE 3 TO #PLN-X
*        ELSE
*          IF PLAN (1) = 'AL'  /* WAS "SO"  - Now no new SO's  DW1
*            MOVE 4 TO #PLN-X
*          ELSE
*            MOVE 1 TO #PLN-X   /* All Else (All Whole Life)
*          END-IF
*        END-IF
*      END-IF
*    END-IF
*  END-IF
  DECIDE FOR FIRST CONDITION
    WHEN PLAN (1) = 'LT'
      #PLN-X := 2
    WHEN PLAN (1) = 'RT'
      #PLN-X := 3
    WHEN IS-ANNUITY-LIFE(< PLAN(1) >)  /* WAS "SO"  - Now no new SO's  DW1    /* TT3
      #PLN-X := 4
    WHEN PLAN (1) = 'FSO'
      #PLN-X := 5
    WHEN (PLAN-A1 (1) GE 'U') AND (PLAN-A1 (1) LE 'Z')   /* var term
      #PLN-X := 6
    WHEN PLAN (1) = 'EZ'
      #PLN-X := 8
    WHEN F-LT2PLUS-TRUE(<PLAN(1)>)
      #PLN-X := 9
    WHEN NONE
      #PLN-X := 1   /* All Else (All Whole Life)
  END-DECIDE                                                        /* RE2 END
*
  IF PLAN (1) NE 'FSO'
    ADD 1 TO #GAINS-LIVES-BY-CAT (#CAT-X)
    ADD 1 TO #GAINS-BY-PLAN-TOT
    ADD FACE-AMOUNT (1) TO #GAINS-BY-PLAN-DB-TOT
  END-IF
*
  IF PAY-STATUS (1) GT '40'
    ADD TOT-PREMIUMS-PAID (1) TO #GAIN-PUSP-PREMS
    WRITE '*****' ID-NUMBER PAY-STATUS (1)
  ELSE
    COMPUTE #MON-PREM = ANNUAL-PREM (1) / 12
    ADD #MON-PREM TO #GAIN-PREMS (#PLN-X)
  END-IF
*
  write 'ID-NUMBER' ST-V.ID-NUMBER 'PLAN' PLAN (1) 'INTRO-FLAG' INTRO-FLAG       /* TEMP
  ADD 1 TO #GAINS-BY-PLAN (#PLN-X)
  ADD FACE-AMOUNT (1) TO #GAINS-BY-PLAN-DB (#PLN-X)
  ADD 1 TO #LIVES-GAINS
  ADD 1 TO #TOT-PLAN-GAINS
*
  IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    ADD 1 TO #SPS-GEN-GAINS
    ADD 1 TO #SPS-GEN-PLAN-GAINS
  ELSE
    ADD 1 TO #MBR-GAINS
    ADD 1 TO #MBR-PLAN-GAINS
  END-IF
END-IF
*
FOR #I1 1 TO 9
  IF PLAN (#I1) = 'SO' OR = 'FSO'
    ADD 1 TO #NUM-SO
*   WRITE ST-V.ID-NUMBER '*****SO/FSO/POLICY' #I1 PLAN (#I1)
*                    PAY-STATUS (#I1)         #NUM-SO
  END-IF
*
  RESET #LOSS #GAIN
  IF ONLINE-ACTION (#I1) NE ' '
*    IF (PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z')  /* var term   /* RE2 END
*      MOVE 6 TO #PLN-X
*    ELSE
*      IF PLAN (#I1) = 'FSO'
*        MOVE 5 TO #PLN-X
*      ELSE
*        IF PLAN (#I1) = 'LT'
*          MOVE 2 TO #PLN-X
*        ELSE
*          IF PLAN (#I1) = 'RT'
*            MOVE 3 TO #PLN-X
*          else
*            if plan (#i1) = 'GPL'               /* DW10
*              move 7 to #pln-x
*            ELSE
*              IF PLAN (#I1) = 'AL' /* WAS "SO"  - Now no new SO's  DW1
*                MOVE 4 TO #PLN-X
*              ELSE
*                MOVE 1 TO #PLN-X  /* ALL ELSE (ALL WHOLE LIFE)
*              END-IF
*            end-if
*          END-IF
*        END-IF
*      END-IF
*    END-IF
    DECIDE FOR FIRST CONDITION
      WHEN PLAN (#I1) = 'LT'
        #PLN-X := 2
      WHEN PLAN (#I1) = 'RT'
        #PLN-X := 3
      WHEN IS-ANNUITY-LIFE(< PLAN (#I1) >)  /* WAS "SO"  - Now no new SO's  DW1    /* TT3
        #PLN-X := 4
      WHEN PLAN (#I1) = 'FSO'
        #PLN-X := 5
      WHEN (PLAN-A1 (1) GE 'U') AND (PLAN-A1 (1) LE 'Z')   /* var term
        #PLN-X := 6
      WHEN PLAN (#I1) = 'EZ'
        #PLN-X := 8
      WHEN F-LT2PLUS-TRUE(<PLAN(#I1)>)
        #PLN-X := 9
      WHEN NONE
        #PLN-X := 1   /* All Else (All Whole Life)
    END-DECIDE                                                        /* RE2 END
*
    MOVE ONLINE-ACTION (#I1) TO #CODE
*
    IF  (ONLINE-ACTION (#I1) = '1')    /* ADDL POLICY
        OR ((ONLINE-ACTION (#I1) = 'Q' OR = 'T') /* ADDL WITH RSGN/CSV  DW4
        AND (ONLINE-ACTION-GN NE '2'))     /* 2 = NEW MEMBER
        OR ((ONLINE-ACTION (#I1) = 'G')    /* ADDL POLICY WITH DEATH
        AND (ONLINE-ACTION-GN NE '2'))     /* 2 = NEW MEMBER
      MOVE TRUE TO #GAIN #ANY-GAIN
*
      IF PAY-STATUS (1) GT '40'
        ADD TOT-PREMIUMS-PAID (#I1) TO #GAIN-PUSP-PREMS
      ELSE
        COMPUTE #MON-PREM = ANNUAL-PREM (#I1) / 12
        ADD #MON-PREM TO #GAIN-PREMS (#PLN-X)
      END-IF
*
      ADD 1 TO #GAINS-BY-PLAN (#PLN-X)
      ADD FACE-AMOUNT (#I1) TO #GAINS-BY-PLAN-DB (#PLN-X)
      ADD 1 TO #TOT-PLAN-GAINS
      IF PLAN (#I1) NE 'FSO'
        ADD 1 TO #GAINS-BY-PLAN-TOT
        ADD FACE-AMOUNT (#I1) TO #GAINS-BY-PLAN-DB-TOT
      END-IF
*
      IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
        ADD 1 TO #SPS-GEN-PLAN-GAINS
      ELSE
        ADD 1 TO #MBR-PLAN-GAINS
      END-IF
*
      IF   (#NUM-PLANS-PRIOR = 0)   /* no pols last month
          AND (ONLINE-ACTION-GN NE '2') /* new mbr this month
        WRITE ST-V.ID-NUMBER  'ADDL BUT WAS INACT- ADD 1 TO LIVES GAINS'
*
        ADD 1 TO #LIVES-GAINS
        IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
          ADD 1 TO #SPS-GEN-GAINS
        ELSE
          ADD 1 TO #MBR-GAINS
        END-IF
*
        IF PLAN (#I1) NE 'FSO'
          ADD 1 TO #GAINS-LIVES-BY-CAT (#CAT-X)
        END-IF
      END-IF
    END-IF
*
    IF ONLINE-ACTION (#I1) = 'B' /* REINSTATEMENT
      WRITE ST-V.ID-NUMBER 'REINSTATE ADDED 1 TO GAIN PLANS'
      ADD 1 TO #TOT-PLAN-GAINS
      MOVE TRUE TO #GAIN #ANY-GAIN
*
      COMPUTE #MON-PREM = ANNUAL-PREM (#I1) / 12
      ADD #MON-PREM TO #GAIN-PREMS (#PLN-X)
*
      ADD 1 TO #GAINS-BY-PLAN (#PLN-X)
*
      IF DEATH-BENEFIT (#I1) = 0
        ADD FACE-AMOUNT (#I1) TO #GAINS-BY-PLAN-DB (#PLN-X)
      ELSE
        ADD DEATH-BENEFIT (#I1) TO #GAINS-BY-PLAN-DB (#PLN-X)
      END-IF
*
      IF PLAN (#I1) NE 'FSO'
        ADD 1 TO #GAINS-BY-PLAN-TOT
        IF DEATH-BENEFIT (#I1) = 0
          ADD FACE-AMOUNT (#I1) TO #GAINS-BY-PLAN-DB-TOT
        ELSE
          ADD DEATH-BENEFIT (#I1) TO #GAINS-BY-PLAN-DB-TOT
        END-IF
      END-IF
*
      IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
        ADD 1 TO #SPS-GEN-PLAN-GAINS
      ELSE
        ADD 1 TO #MBR-PLAN-GAINS
      END-IF
*
      IF #I1 = 1   /* REINSTATING 1ST SEG (NEW BODY)
        WRITE ST-V.ID-NUMBER 'REINSTAT WAS INACT - ADD 1 TO LIVES GAIN'
        ADD 1 TO #LIVES-GAINS
*
        IF PLAN (#I1) NE 'FSO'
          ADD 1 TO #GAINS-LIVES-BY-CAT (#CAT-X)
        END-IF
*
        IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
          ADD 1 TO #SPS-GEN-GAINS
        ELSE
          ADD 1 TO #MBR-GAINS
        END-IF
      END-IF
    END-IF
*
    IF ONLINE-ACTION (#I1) = 'E' OR = 'G' OR = 'H' OR = 'J' OR = 'K'
        OR = '5' OR = '6' OR = 'L' OR = 'M' OR = 'Q' OR = 'S' OR = '8'
        OR = 'T'                                             /* DW4
      MOVE TRUE TO #LOSS #ANY-LOSS
      PERFORM FIND-DB
      ADD 1 TO #LOSSES-BY-PLAN (#PLN-X)
      ADD #DB TO #LOSSES-BY-PLAN-DB (#PLN-X)
*
      IF PLAN (#I1) NE 'FSO'
        IF ONLINE-ACTION (#I1) = 'E' OR = 'G' OR = 'H'
          ADD 1 TO #LOSSES-BY-PLAN-TOT-DEATH
          ADD #DB TO #LOSSES-BY-PLAN-DB-TOT-DEATH
        ELSE
          ADD 1 TO #LOSSES-BY-PLAN-TOT-NON-DEATH
          ADD #DB TO #LOSSES-BY-PLAN-DB-TOT-NON-DEATH
        END-IF
      END-IF
*
      ADD 1 TO #TOT-PLAN-LOSSES
      IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
        ADD 1 TO #SPS-GEN-PLAN-LOSSES
      ELSE
        ADD 1 TO #MBR-PLAN-LOSSES
      END-IF
    END-IF
*
    IF #GAIN
      ADD 1 TO #CNT-2
      DISPLAY (2) #CNT-2 ST-V.ID-NUMBER #I1 ONLINE-ACTION-GN
        #NUM-PLANS #NUM-PLANS-PRIOR PLAN (#I1)
        PAY-STATUS (#I1) FACE-AMOUNT (#I1)
    END-IF
*
    IF #LOSS
      IF ONLINE-ACTION (#I1) = 'G' OR = 'H' OR = 'E'
        ADD 1 TO #CNT-3
        DISPLAY (3) #CNT-3 ST-V.ID-NUMBER 'SEG/NUM' #I1
          'ONL/ACT' ONLINE-ACTION (#I1)  'TOT/PLNS' #NUM-PLANS (EM=Z)
          'PRI/PLNS'  #NUM-PLANS-PRIOR (EM=Z)
          PLAN (#I1) PAY-STATUS (#I1) FACE-AMOUNT (#I1)
      ELSE
        IF ONLINE-ACTION (#I1) = '5' OR = 'J' OR = 'T'    /* DW4
          ADD 1 TO #CNT-4
          DISPLAY (4) #CNT-4 ST-V.ID-NUMBER 'SEG/NUM' #I1
            'ONL/ACT' ONLINE-ACTION (#I1)  'TOT/PLNS' #NUM-PLANS (EM=Z)
            'PRI/PLNS'  #NUM-PLANS-PRIOR (EM=Z)
            PLAN (#I1) PAY-STATUS (#I1) FACE-AMOUNT (#I1)
        ELSE
          ADD 1 TO #CNT-5
          DISPLAY (5) #CNT-5 ST-V.ID-NUMBER 'SEG/NUM' #I1
            'ONL/ACT' ONLINE-ACTION (#I1)  'TOT/PLNS' #NUM-PLANS (EM=Z)
            'PRI/PLNS'  #NUM-PLANS-PRIOR (EM=Z)
            PLAN (#I1) PAY-STATUS (#I1) FACE-AMOUNT (#I1)
        END-IF
      END-IF
    END-IF
  END-IF
END-FOR
*
IF   #ANY-LOSS
    AND (#NUM-PLANS = 0)
  ADD 1 TO #LIVES-LOSSES
*
  IF PLAN (1) NE 'FSO'  /* NO COUNT IF TERMINATING A FSO
    ADD 1 TO #LOSSES-LIVES-BY-CAT (#CAT-X)
  END-IF
*
  IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    ADD 1 TO #SPS-GEN-LOSSES
  ELSE
    ADD 1 TO #MBR-LOSSES
  END-IF
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE ACCUM-ME-STATS
* * * * * * * * * * * * * * * * *
*
* IF  (WIDOW-FLAG = 'Y')
*   ESCAPE TOP
* END-IF
*
* IF  (PLAN (1) = 'SO' or = 'FSO')
*  AND (SUSPEND-CODE = '5' OR = '6' or = '9')
*   WRITE ID-NUMBER 'SUSPEND-CODE = ' SUSPEND-CODE
* END-IF
*
RESET PDA-CONTACT                                          /* TT2
P-CONTACT-ID := ST-V.MEMBER-CONTACT-ID                     /* TT2
CALLNAT 'CONTS001' PDA-CONTACT                             /* TT2
*
MOVE *DATN TO #YYYYMMDD
SUBTRACT P-DATE-OF-BIRTH FROM #YYYYMMDD                    /* TT2
MOVE #YYYY TO #CURR-AGE
MOVE *DATN TO #YYYYMMDD
*
ADD DEBIT-CREDIT-AMT TO #TOT-DC
ADD BILL-ADJUST      TO #TOT-BILL-ADJ
*
IF MILITARY-SERVICE = 'EMP'
  ADD 1 TO #AAFMAA-EMP
  WRITE ST-V.ID-NUMBER 'AAFMAA Employee'
  PERFORM ACCUM-EMP-STATS
END-IF
*
RESET #PDA-ADDRESS                                        /* JT1 start
MOVE 'P' TO #ADD-TYPE
#ADD-CONTACT-ID := ST-V.MEMBER-CONTACT-ID
CALLNAT 'ADDN0001' #PDA-ADDRESS                           /* JT1 end
*
IF   (WIDOW-FLAG NE 'Y')
  IF NUMBER-MEMBERSHIPS = 0
    ADD 1 TO #TOT-INACTIVE
  ELSE
*     IF ADDRESS-1 = ' '                                    /* JT1
    IF #ADD-LINE-1 = ' '                                    /* JT1
      ADD 1 TO #TOT-NO-ADDR
    ELSE
*       IF ADDRESS-CHG-CODE = 'U' OR = 'V'                  /* JT1
      IF F-UNDEL-ADDRESS (< ST-V.MEMBER-CONTACT-ID >)       /* JT1
        ADD 1 TO #TOT-UNDELIV
      END-IF
    END-IF
  END-IF
END-IF
*
RESET #FBR #HAS-MODE-E #HAS-PP
FOR #I1 1 TO 9
  IF  ((X-ALT-LP-IND (#I1) = '3' OR = '4')
      AND (X-ALT-LP-AMT (#I1) NE 0))
      OR  ((X-ALT-LP-IND-2 (#I1) = '3' OR = '4')
      AND (X-ALT-LP-AMT-2 (#I1) NE 0))
    MOVE TRUE TO #HAS-MODE-E
  END-IF
*
  IF   (MODE (#I1) = 'E')
      AND (STATUS (#I1) = 'D')
      AND (PAY-STATUS (#I1) LT '40')
    MOVE TRUE TO #HAS-MODE-E
  END-IF
*
  IF (PAY-STATUS (#I1) LT '40')
    MOVE TRUE TO #HAS-PP
  END-IF
*
  IF RID-PLAN (#I1) NE ' '
    MOVE TRUE TO #FBR
  END-IF
END-FOR
*
* IF (PAD-CODE = 'E') AND (NOT #HAS-MODE-E) AND #HAS-PP
*   WRITE ST-V.ID-NUMBER 'is a PAD-CODE "E" but has no "E"'
* END-IF
*
IF #FBR
  DECIDE ON FIRST VALUE OF MILITARY-SERVICE
    VALUE 'A'   ADD 1 TO #ME-FBR-BY-SVC (1)
    VALUE 'F'   ADD 1 TO #ME-FBR-BY-SVC (2)
    NONE        ADD 1 TO #ME-FBR-BY-SVC (3)
  END-DECIDE
*
  PERFORM GET-RANK
*
  IF (#RANK-DISPL GE 20) AND (#RANK-DISPL LE 30)
    ADD 1 TO #ME-FBR-BY-RANK (2)
  ELSE
    IF   (RANK = MASK ('CW'))
        OR  (RANK = MASK ('MW'))
        OR  (RANK = MASK ('WO'))
      ADD 1 TO #ME-FBR-BY-RANK (3)
    ELSE
      ADD 1 TO #ME-FBR-BY-RANK (1)
    END-IF
  END-IF
*
  IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    ADD 1 TO #ME-FBR-BY-OWNER (2)
  ELSE
    ADD 1 TO #ME-FBR-BY-OWNER (1)
  END-IF
END-IF
*
IF PLAN (1) = 'FSO'   /* FSO MEMBERS'
  IF MILITARY-STATUS = 'A'
    ADD 1 TO #M-E-FSO-BY-STAT (1)
  ELSE
    IF MILITARY-STATUS = 'R'
      ADD 1 TO #M-E-FSO-BY-STAT (2)
    ELSE
      ADD 1 TO #M-E-FSO-BY-STAT (3)
    END-IF
  END-IF
*
  DECIDE ON FIRST VALUE OF MILITARY-SERVICE
    VALUE 'A'   ADD 1 TO #M-E-FSO-BY-SERV (1)
    VALUE 'AR'  ADD 1 TO #M-E-FSO-BY-SERV (2)
    VALUE 'AG'  ADD 1 TO #M-E-FSO-BY-SERV (3)
    VALUE 'AGA' ADD 1 TO #M-E-FSO-BY-SERV (4)
    VALUE 'ARA' ADD 1 TO #M-E-FSO-BY-SERV (4)
    VALUE 'F'   ADD 1 TO #M-E-FSO-BY-SERV (5)
    VALUE 'FR'  ADD 1 TO #M-E-FSO-BY-SERV (6)
    VALUE 'FG'  ADD 1 TO #M-E-FSO-BY-SERV (7)
    VALUE 'FGA' ADD 1 TO #M-E-FSO-BY-SERV (8)
    VALUE 'FRA' ADD 1 TO #M-E-FSO-BY-SERV (8)
    NONE        ADD 1 TO #M-E-FSO-BY-SERV (9)
      WRITE ST-V.ID-NUMBER 'INVALID FSO MIL-SVC'  MILITARY-SERVICE
  END-DECIDE
*
  DECIDE FOR FIRST CONDITION
    WHEN #CURR-AGE LE  29  MOVE 1 TO #AGE-X
    WHEN #CURR-AGE LE  39  MOVE 2 TO #AGE-X
    WHEN #CURR-AGE LE  49  MOVE 3 TO #AGE-X
    WHEN #CURR-AGE LE  59  MOVE 4 TO #AGE-X
    WHEN #CURR-AGE LE  69  MOVE 5 TO #AGE-X
    WHEN #CURR-AGE LE  74  MOVE 6 TO #AGE-X
    WHEN #CURR-AGE LE  79  MOVE 7 TO #AGE-X
    WHEN #CURR-AGE LE 150  MOVE 8 TO #AGE-X
    WHEN NONE     WRITE ST-V.ID-NUMBER 'invalid age' #CURR-AGE
  END-DECIDE
  ADD 1 TO #M-E-FSO-BY-AGE (#AGE-X)
*
  PERFORM GET-RANK
*
  IF (#RANK-DISPL GE 20) AND (#RANK-DISPL LE 30)
    MOVE 3 TO #RANK-X   /* NCO
    IF MILITARY-SERVICE = MASK ('A')
      ADD 1 TO #NCO-ARMY
    ELSE
      ADD 1 TO #NCO-AIRF
    END-IF
  ELSE
    IF #RANK-DISPL = 0  /* CIV
      MOVE 4 TO #RANK-X
    ELSE
      IF   (RANK = MASK ('CW'))
          OR  (RANK = MASK ('MW'))
          OR  (RANK = MASK ('WO'))
        MOVE 2 TO #RANK-X
      ELSE
        MOVE 1 TO #RANK-X
      END-IF
    END-IF
  END-IF
  IF (#RANK-X LT 4) AND (#RANK-X GT 0)
    ADD 1 TO #M-E-FSO-BY-RANK (#RANK-X)
  END-IF
*
  IF P-GENDER = 'M'                                  /* TT1
    ADD 1 TO #M-E-FSO-BY-SEX (1)
  ELSE
    ADD 1 TO #M-E-FSO-BY-SEX (2)
  END-IF
END-IF
*
RESET #ACTIVE #NUM-PLANS #NUM-PLANS-PRIOR #LOSS #GAIN
RESET #TOT-FACE #ANY-LOSS #ANY-GAIN
RESET #FACE-AMT (*) #DEATH-BN (*)
* * * * * * accum file totals
FOR #I1 1 TO 9
  MOVE FACE-AMOUNT   (#I1) TO #FACE-AMT (#I1)
  MOVE DEATH-BENEFIT (#I1) TO #DEATH-BN (#I1)
* MOVE *DATN TO #EFF-DATE
  MOVE #PARM-YYYYMMDD TO #EFF-DATE   /* DW3
*
  IF   ((PLAN (#I1) = 'LT')
      AND (P-DATE-OF-BIRTH LE (#EFF-DATE - 400000)))
      OR  ((PLAN (#I1) = 'RT') AND (ISSUE-AGE (#I1) GT '65'))
      OR ((PLAN (#I1) = 'EZ') AND (PAID-UP-DATE(#I1) LE #EFF-DATE))  /* YK2
*  OR  (((PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z'))       /* YK1
      OR (F-LT2-TRUE(<PLAN(#I1)>)                                /* YK1
      AND ((ISSUE-DATE(#I1) + 40000) LE #EFF-DATE))
      OR ( IS-ANNUITY-LIFE(<PLAN(#I1)>))   /* DW1             /* TT3
*
    CALLNAT 'GDROPSTM' USING
      PLAN          (#I1)
      SMOKER-FLAG   (#I1)
      P-DATE-OF-BIRTH                                      /* TT1
      ISSUE-DATE    (#I1)
      PAID-UP-DATE  (#I1)
      #EFF-DATE
      ISSUE-AGE     (#I1)
      #PAY-STAT
      #FACE-AMT     (#I1)
      #DEATH-BN     (#I1)
      CASH-VALUE    (#I1)
      BEG-CASH-VALUE(#I1)
  END-IF
*
  MOVE #DEATH-BN (#I1)  TO  #DB
*
  IF   (STATUS (#I1) = 'E')   /* TERMED POLICY THIS MON
    ADD 1 TO #NUM-PLANS-PRIOR
  END-IF
*
  IF STATUS (#I1) NE 'D'
    ESCAPE TOP
  END-IF
*
  IF   (ONLINE-ACTION-GN NE '2')   /* 2 = NEW MEMBER
      AND (ONLINE-ACTION (#I1) NE '1') /* 1= ADDL POLICY
    ADD 1 TO #NUM-PLANS-PRIOR
  END-IF
*
  MOVE TRUE TO #ACTIVE
  ADD 1 TO #NUM-PLANS
  ADD 1 TO #TOT-PLANS
  ADD #FACE-AMT (#I1) TO #TOT-FACE
*
  IF  (PLAN (#I1) = 'OL' OR = '20P' OR = '30P' OR = '7P' OR = 'SPF'
      or = 'GPL' or = 'GP2'                                       /* DW10
*              OR = 'RT' OR = 'LT' OR = 'SO' OR = 'FSO' OR = 'AL'        /*DW1 YK1
      OR = 'SO' OR = 'FSO'                          /*DW1 YK1    /* TT3
      OR ( IS-ANNUITY-LIFE(<PLAN (#I1)>))                                     /* TT3
      OR (PLAN (#I1) = MASK (N'PF'))
      OR (PLAN (#I1) = MASK (NN'F'))
*  OR ((PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z')                 /* YK1
*        AND (PLAN (#I1) = MASK (.NN)))                                  /* YK1
      OR FUNCTION-TERM-POLICY(<PLAN(#I1)>))                                 /* YK1
    IGNORE
  ELSE
    WRITE ST-V.ID-NUMBER 'Bad Plan = ' PLAN (#I1)
  END-IF
END-FOR
*
DECIDE ON FIRST VALUE INTRO-FLAG
  VALUE 'S' MOVE 2 TO #INS-X
  VALUE 'K' MOVE 3 TO #INS-X
  VALUE 'G' MOVE 4 TO #INS-X
  NONE      MOVE 1 TO #INS-X
END-DECIDE
*
DECIDE FOR FIRST CONDITION
  WHEN #TOT-FACE LT  10000  MOVE 1 TO #FAC-X
  WHEN #TOT-FACE =   10000  MOVE 2 TO #FAC-X
  WHEN #TOT-FACE LT  50000  MOVE 3 TO #FAC-X
  WHEN #TOT-FACE =   50000  MOVE 4 TO #FAC-X
  WHEN #TOT-FACE LT 100000  MOVE 5 TO #FAC-X
  WHEN #TOT-FACE =  100000  MOVE 6 TO #FAC-X
  WHEN #TOT-FACE LT 250000  MOVE 7 TO #FAC-X
  WHEN #TOT-FACE LE 820000  MOVE 8 TO #FAC-X
  WHEN NONE     WRITE ST-V.ID-NUMBER 'invalid face-amt' #TOT-FACE
    MOVE 8 TO #FAC-X
END-DECIDE
*
DECIDE FOR FIRST CONDITION
  WHEN #CURR-AGE LT  18  MOVE 1 TO #AGE-X
  WHEN #CURR-AGE LT  30  MOVE 2 TO #AGE-X
  WHEN #CURR-AGE LT  40  MOVE 3 TO #AGE-X
  WHEN #CURR-AGE LT  50  MOVE 4 TO #AGE-X
  WHEN #CURR-AGE LT  60  MOVE 5 TO #AGE-X
  WHEN #CURR-AGE LT  70  MOVE 6 TO #AGE-X
  WHEN #CURR-AGE LT  80  MOVE 7 TO #AGE-X
  WHEN #CURR-AGE LT  90  MOVE 8 TO #AGE-X
  WHEN #CURR-AGE LT 100  MOVE 9 TO #AGE-X
  WHEN #CURR-AGE LT 150  MOVE 10 TO #AGE-X
  WHEN NONE     WRITE ST-V.ID-NUMBER 'invalid age' #CURR-AGE
    MOVE 10 TO #AGE-X
END-DECIDE
*
IF #ACTIVE
  ADD 1 TO #M-E-INS-BY-FACE (#FAC-X, #INS-X)
  IF INTRO-FLAG = 'C' OR = 'B' OR = 'P' OR = 'Q'
    ADD 1 TO #M-E-INS-BY-FACE-CAPS (#FAC-X)
  END-IF
  ADD 1 TO #M-E-INS-BY-AGE (#AGE-X, #INS-X)
*
  FOR #I1 1 TO 9
    IF STATUS (#I1) = 'D'
      DECIDE FOR FIRST CONDITION
        WHEN #FACE-AMT (#I1) LT  10000  MOVE 1 TO #FAC-X
        WHEN #FACE-AMT (#I1) =   10000  MOVE 2 TO #FAC-X
        WHEN #FACE-AMT (#I1) LT  50000  MOVE 3 TO #FAC-X
        WHEN #FACE-AMT (#I1) =   50000  MOVE 4 TO #FAC-X
        WHEN #FACE-AMT (#I1) LT 100000  MOVE 5 TO #FAC-X
        WHEN #FACE-AMT (#I1) =  100000  MOVE 6 TO #FAC-X
        WHEN #FACE-AMT (#I1) LT 250000  MOVE 7 TO #FAC-X
        WHEN #FACE-AMT (#I1) LE 600000  MOVE 8 TO #FAC-X
        WHEN #FACE-AMT (#I1) GT 600000  MOVE 8 TO #FAC-X
*                 WRITE ST-V.ID-NUMBER 'Face exceeds 600K'
        WHEN NONE IGNORE
      END-DECIDE
      ADD 1 TO #M-E-PLANS-BY-FACE(#FAC-X, #INS-X)
*
      IF CONV-DURATION (#I1) = 999
        ADD 1 TO #M-E-PLANS-BY-FACE-CAPS (#FAC-X)
      END-IF
*
      DECIDE FOR FIRST CONDITION
        WHEN PAY-STATUS  (#I1) = '47'  /* Includes AL
          MOVE 6 TO #TYP-X
          IF PLAN (#I1) = 'SO' OR = 'FSO'
*           WRITE ST-V.ID-NUMBER 'Paid-up SO/FSO'
            MOVE 9 TO #TYP-X
          END-IF
*
          IF IS-ANNUITY-LIFE(< PLAN(#I1) >)      /* DW5   /* TT3
*           WRITE ST-V.ID-NUMBER 'AL policy'
            MOVE 11 TO #TYP-X
          END-IF
*
        WHEN PLAN        (#I1) = 'OL'     MOVE 1 TO #TYP-X
        WHEN PLAN        (#I1) = '30P'    MOVE 2 TO #TYP-X
        WHEN PLAN        (#I1) = '20P'    MOVE 3 TO #TYP-X
        WHEN PLAN        (#I1) = '7P'     MOVE 4 TO #TYP-X
        WHEN PLAN (#I1) = MASK (.'F'.)    MOVE 5 TO #TYP-X
        WHEN PLAN (#I1) = MASK (..'F')    MOVE 5 TO #TYP-X
        WHEN PLAN        (#I1) = 'RT'     MOVE 7 TO #TYP-X
        WHEN PLAN        (#I1) = 'LT'     MOVE 8 TO #TYP-X
        WHEN PLAN        (#I1) = 'SO'     MOVE 9 TO #TYP-X
        WHEN PLAN        (#I1) = 'FSO'    MOVE 9 TO #TYP-X
        WHEN IS-ANNUITY-LIFE(<PLAN(#I1)>) MOVE 11 TO #TYP-X   /* DW10     /* TT3
        WHEN PLAN        (#I1) = 'GPL'    MOVE 12 TO #TYP-X   /* DW10
        WHEN PLAN        (#I1) = 'GP2'    MOVE 12 TO #TYP-X   /* TT1
        WHEN (PLAN-A1 (#I1) GE 'U')
            AND (PLAN-A1 (#I1) LE 'Z')       MOVE 10 TO #TYP-X
        WHEN PLAN        (#I1) = 'EZ'     MOVE 13 TO #TYP-X   /* RE2
        WHEN F-LT2PLUS-TRUE(<PLAN(#I1)>)  MOVE 14 TO #TYP-X   /* RE2
        when plan(#i1)        = 'GT1'     move 10 to #typ-x                       /* vt2
        WHEN NONE WRITE ST-V.ID-NUMBER 'invalid plan' PLAN (#I1)
      END-DECIDE
*
      ADD 1 TO #M-E-PLANS-BY-TYPE (#TYP-X, #INS-X)
*
      IF #TYP-X = 10
        IF CONV-DURATION (#I1) = 662 OR = 612 OR = 622 OR = 632
          ADD 1 TO #VT-CP
        ELSE    /* FOR CAP mbrs who are lvII the default type is "rg"
          ADD 1 TO #VT-RG
        END-IF
      END-IF
*
      IF CONV-DURATION (#I1) = 999
        ADD 1 TO #M-E-PLANS-BY-TYPE-CAPS (#TYP-X)
      END-IF
*
      IF PROCESS-IND = 'I' OR = 'O' OR = 'D'
        IF  (PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z')
          ADD 1 TO #ME-INS-ONLY-BY-PLAN (9)
        ELSE
          IF  IS-ANNUITY-LIFE(<PLAN(#I1)>)    /* DW5    /* TT3
            ADD 1 TO #ME-INS-ONLY-BY-PLAN (10)
          ELSE
            IF  PLAN (#I1) = 'GPL' OR = 'GP2'        /*TT1  /* DW10
              ADD 1 TO #ME-INS-ONLY-BY-PLAN (12)
            ELSE
              ADD 1 TO #ME-INS-ONLY-BY-PLAN (#TYP-X)
            end-if
          END-IF
        END-IF
      END-IF
*
      IF   (PAY-STATUS (#I1) GE '40')   /* paid-up
          AND (NOT PLAN (#I1) = 'LT' OR = 'RT' OR = 'EZ' )            /* YK2 add EZ
        DECIDE FOR FIRST CONDITION
          WHEN (PAY-STATUS  (#I1) = '47' OR = '48'
              AND PLAN  (#I1) = 'SO' OR = 'FSO') MOVE 7 TO #TYP-X
          WHEN PAY-STATUS  (#I1) = '47'     MOVE 6 TO #TYP-X /* Must be 1st
          WHEN PLAN        (#I1) = 'OL'     MOVE 1 TO #TYP-X
          WHEN PLAN        (#I1) = '30P'    MOVE 2 TO #TYP-X
          WHEN PLAN        (#I1) = '20P'    MOVE 3 TO #TYP-X
          WHEN PLAN        (#I1) = '7P'     MOVE 4 TO #TYP-X
          WHEN PLAN (#I1) = MASK (.'F'.)    MOVE 5 TO #TYP-X
          WHEN PLAN (#I1) = MASK (..'F')    MOVE 5 TO #TYP-X
          WHEN IS-ANNUITY-LIFE(<PLAN(#I1)>) MOVE 8 TO #TYP-X  /* DW5         /* TT3
          WHEN PLAN        (#I1) = 'GPL'    MOVE 9 TO #TYP-X  /* DW10
          WHEN PLAN        (#I1) = 'GP2'    MOVE 9 TO #TYP-X  /* TT1
          when plan        (#i1) = 'GT1'    move 9 to #typ-x                /* vt2
          WHEN NONE WRITE ST-V.ID-NUMBER 'invald paid-up plan' PLAN(#I1)
        END-DECIDE
        ADD 1 TO #M-E-PU-PLANS-BY-TYPE (#TYP-X, #INS-X)
      END-IF
*
      IF PAY-STATUS (#I1) LT '40'   /* prem paying
        DECIDE FOR FIRST CONDITION
          WHEN MODE (#I1) = 'G'  MOVE 1 TO #MOD-X
          WHEN MODE (#I1) = 'E'  MOVE 2 TO #MOD-X
          WHEN MODE (#I1) = 'A' OR = 'S' OR = 'Q' OR = 'M'
              OR = '1' OR = '2' OR = '4' OR = '0'
              or = 'B'                                          /* vt2
            MOVE 3 TO #MOD-X
          WHEN NONE WRITE ST-V.ID-NUMBER 'invalid mode' MODE (#I1)
        END-DECIDE
        ADD 1 TO #M-E-PP-PLANS-BY-MODE (#MOD-X, #INS-X)
      END-IF
*
      DECIDE FOR FIRST CONDITION
        WHEN PLAN        (#I1) = 'OL'     MOVE 1 TO #TYP-X
        WHEN PLAN        (#I1) = '30P'    MOVE 2 TO #TYP-X
        WHEN PLAN        (#I1) = '20P'    MOVE 3 TO #TYP-X
        WHEN PLAN        (#I1) = '7P'     MOVE 4 TO #TYP-X
        WHEN PLAN (#I1) = MASK (.'F'.)    MOVE 5 TO #TYP-X
        WHEN PLAN (#I1) = MASK (..'F')    MOVE 5 TO #TYP-X
        WHEN PLAN        (#I1) = 'RT'     MOVE 6 TO #TYP-X
        WHEN PLAN        (#I1) = 'LT'     MOVE 7 TO #TYP-X
        WHEN PLAN        (#I1) = 'SO' OR = 'FSO' MOVE 8 TO #TYP-X
        WHEN (PLAN-A1 (#I1) GE 'U')
            AND (PLAN-A1 (#I1) LE 'Z')       MOVE 9 TO #TYP-X
        WHEN IS-ANNUITY-LIFE(<PLAN(#I1)>) MOVE 10 TO #TYP-X  /* DW5       /* TT3
        WHEN PLAN        (#I1) = 'GPL'    MOVE 12 TO #TYP-X  /* DW10
        WHEN PLAN        (#I1) = 'GP2'    MOVE 12 TO #TYP-X  /* TT1
        WHEN PLAN        (#I1) = 'EZ'     MOVE 13 TO #TYP-X  /* RE2
        WHEN F-LT2PLUS-TRUE(<PLAN(#I1)>)  MOVE 14 TO #TYP-X  /* RE2
        when plan         (#i1) = 'GT1'   move 9  to #typ-x               /* vt2
        WHEN NONE WRITE ST-V.ID-NUMBER 'invalid plan' PLAN (#I1)
      END-DECIDE
*
      IF (PLAN (#I1) = 'SO' OR = 'FSO') AND (#DEATH-BN (#I1) = 0)
        ADD #FACE-AMT   (#I1) TO #M-E-DB-BY-TYPE (#TYP-X, #INS-X)
      ELSE
        ADD #DEATH-BN (#I1) TO #M-E-DB-BY-TYPE (#TYP-X, #INS-X)
      END-IF
*
*     IF DEATH-BENEFIT (#I1) NE #DEATH-BN (#I1)
*       WRITE ST-V.ID-NUMBER 'DB DIFF' DEATH-BENEFIT(#I1) #DEATH-BN(#I1)
*            PLAN (#I1)
*     END-IF
      COMPUTE #TOT-DIFF = #TOT-DIFF     /* DW3
        + (DEATH-BENEFIT (#I1) - #DEATH-BN (#I1))
    END-IF
  END-FOR
*
  ADD 1 TO #TOT-LIVES
*
  IF INTRO-FLAG = 'S' OR = 'K' OR = 'G'
    ADD 1 TO #TOT-SPS-GEN
    FOR #I1 1 TO 9
      IF STATUS (#I1) = 'D'
        ADD 1 TO #TOT-SPS-GEN-PLANS
      END-IF
    END-FOR
  ELSE
    ADD 1 TO #TOT-MBRS
    FOR #I1 1 TO 9
      IF STATUS (#I1) = 'D'
        ADD 1 TO #TOT-MBR-PLANS
      END-IF
    END-FOR
  END-IF
END-IF
*
END-SUBROUTINE
*
***************************
DEFINE SUBROUTINE GET-RANK
****************************
*
RESET #RANK-DISPL #RANK-LIT #RANK-DISPLAY                         /* PM2
CALLNAT 'GRANKSXX' #COMMAND RANK MILITARY-SERVICE
  #INVALID #RANK-DISPL #RANK-LIT #RANK-DISPLAY
*
IF #INVALID OR (#RANK-DISPL = 99)
  RESET #RANK-DISPL
END-IF
*
END-SUBROUTINE
*
* * * * * * * * * * * * * * * * *
DEFINE SUBROUTINE PRINT-NEW-MBR
* * * * * * * * * * * * * * * * *
*
DISPLAY (7) 'RANK' #SCR-NEW-MBR-RANK (1)
  'NAME' #SCR-NEW-MBR-NAME (1)
  'MIL/ID' #SCR-NEW-MBR-SERV (1)
  '    '
  'RANK' #SCR-NEW-MBR-RANK (2)
  'NAME' #SCR-NEW-MBR-NAME (2)
  'MIL/ID' #SCR-NEW-MBR-SERV (2)
RESET #SCR-NEW-MBR-RANK (*)
  #SCR-NEW-MBR-NAME (*)
  #SCR-NEW-MBR-SERV (*)
RESET #NM-X
*
END-SUBROUTINE
*
* * * * * * * * * * * * *
DEFINE SUBROUTINE FIND-DB
* * * * * * * * * * * * *
*
IF ONLINE-ACTION (#I1) = 'G' OR = 'H' OR = 'E'   /* DEAD
  FIND (1) FR-V WITH MEMBER-KEY = ST-V.ID-NBR
  END-FIND
*
  IF FR-V.POL-DATE (#I1) = ISSUE-DATE (#I1)
    MOVE FR-V.POL-AMT-PAID (#I1) TO #DB
    ESCAPE ROUTINE
  END-IF
END-IF
*
RESET #AVL-TDIV #DB
IF   (ISSUE-DATE(#I1) GE 19970101)
    AND (MONTH-ALLOC-AMT (#I1) NE 999.99)
  COMPUTE #AVL-TDIV = BEG-CASH-VALUE (#I1) - MONTH-ALLOC-AMT (#I1)
  IF #AVL-TDIV LT 0
    RESET #AVL-TDIV
  END-IF
END-IF
*
MOVE *DATN TO #EFF-DATE
IF   ((PLAN (#I1) = 'LT')
    AND (P-DATE-OF-BIRTH LE (#EFF-DATE - 400000)))                     /* TT2
    OR  ((PLAN (#I1) = 'RT')
    AND (ISSUE-AGE (#I1) GT '65'))
    OR ((PLAN (#I1) = 'EZ') AND (PAID-UP-DATE(#I1) LE #EFF-DATE))    /* YK2
* OR  (((PLAN-A1 (#I1) GE 'U') AND (PLAN-A1 (#I1) LE 'Z'))        /* YK1
    OR (F-LT2-TRUE(<PLAN(#I1)>)                                      /* YK1
    AND ((ISSUE-DATE(#I1) + 40000) LE #EFF-DATE))
    OR (IS-ANNUITY-LIFE(<PLAN(#I1)>))   /* DW1                       /* TT3
*
  CALLNAT 'GDROPSTM' USING
    PLAN          (#I1)
    SMOKER-FLAG   (#I1)
    P-DATE-OF-BIRTH                                              /* TT2
    ISSUE-DATE    (#I1)
    PAID-UP-DATE  (#I1)
    #EFF-DATE
    ISSUE-AGE     (#I1)
    #PAY-STAT
    FACE-AMOUNT   (#I1)
    DEATH-BENEFIT (#I1)
    CASH-VALUE    (#I1)
    BEG-CASH-VALUE(#I1)
*
  MOVE DEATH-BENEFIT (#I1) TO #DEATH-BN (#I1)
    #DB
END-IF
*
IF ((ONLINE-ACTION (#I1) = '1') OR (ONLINE-ACTION-GN = '2')
    OR (PLAN (#I1) = 'LT')) /* USE POSSIBLY LOWERED FACE AMT
    AND (NOT IS-ANNUITY-LIFE(< PLAN (#I1) >))
  MOVE FACE-AMOUNT (#I1) TO #DB
ELSE
  MOVE DEATH-BENEFIT (#I1) TO #DB  /* USE CURR DB
  IF (ISSUE-DATE (#I1) GE 19970101)
      AND (MONTH-ALLOC-AMT (#I1) NE 999.99)
      AND (LAST-ANN-CASH-VALUE (#I1) GT #DB)
    MOVE LAST-ANN-CASH-VALUE (#I1) TO #DB
  END-IF
END-IF
*
END-SUBROUTINE
*
****************************************
** CODE FOR NEW EMP STATS
****************************************
DEFINE SUBROUTINE ACCUM-EMP-STATS
****************************************
*
DECIDE ON FIRST VALUE INTRO-FLAG
  VALUE 'S' MOVE 2 TO #INS-X
  VALUE 'K' MOVE 3 TO #INS-X
  NONE      MOVE 1 TO #INS-X
END-DECIDE
*
RESET #FACE-AMT (*) #TOT-FACE
FOR #I1 1 TO 9
  IF STATUS (#I1) NE 'D'    /* DW3
    ESCAPE TOP
  END-IF
*
  MOVE FACE-AMOUNT (#I1) TO #FACE-AMT (#I1)
  ADD #FACE-AMT (#I1) TO #TOT-FACE
END-FOR
*
DECIDE FOR FIRST CONDITION
  WHEN #TOT-FACE LT  50000  MOVE 1 TO #FAC-X
  WHEN #TOT-FACE =   50000  MOVE 2 TO #FAC-X
  WHEN #TOT-FACE LT 100000  MOVE 3 TO #FAC-X
  WHEN #TOT-FACE =  100000  MOVE 4 TO #FAC-X
  WHEN #TOT-FACE LT 250000  MOVE 5 TO #FAC-X
  WHEN #TOT-FACE =  250000  MOVE 6 TO #FAC-X
  WHEN #TOT-FACE LT 400000  MOVE 7 TO #FAC-X
  WHEN #TOT-FACE LE 820000  MOVE 8 TO #FAC-X
  WHEN NONE  WRITE ST-V.ID-NUMBER 'INVALID FACE-AMT' #TOT-FACE
    MOVE 8 TO #FAC-X
END-DECIDE
*
ADD 1 TO #ME-EMP-INS-BY-FACE (#FAC-X, #INS-X)
*
FOR #I1 1 TO 9
  IF STATUS (#I1) = 'D'
    DECIDE FOR FIRST CONDITION
      WHEN #FACE-AMT (#I1) LT  50000  MOVE 1 TO #FAC-X
      WHEN #FACE-AMT (#I1) =   50000  MOVE 2 TO #FAC-X
      WHEN #FACE-AMT (#I1) LT 100000  MOVE 3 TO #FAC-X
      WHEN #FACE-AMT (#I1) =  100000  MOVE 4 TO #FAC-X
      WHEN #FACE-AMT (#I1) LT 250000  MOVE 5 TO #FAC-X
      WHEN #FACE-AMT (#I1) =  250000  MOVE 6 TO #FAC-X
      WHEN #FACE-AMT (#I1) LT 400000  MOVE 7 TO #FAC-X
      WHEN #FACE-AMT (#I1) LE 620000  MOVE 8 TO #FAC-X
        WRITE ST-V.ID-NUMBER 'FACE EXCEEDS 620K'
      WHEN NONE IGNORE
    END-DECIDE
    ADD 1 TO #ME-EMP-PLANS-BY-FACE(#FAC-X, #INS-X)
*
    DECIDE FOR FIRST CONDITION
      WHEN PAY-STATUS  (#I1) = '47'     MOVE 6 TO #TYP-X
      WHEN PLAN        (#I1) = 'OL'     MOVE 1 TO #TYP-X
      WHEN PLAN        (#I1) = '30P'    MOVE 2 TO #TYP-X
      WHEN PLAN        (#I1) = '20P'    MOVE 3 TO #TYP-X
      WHEN PLAN        (#I1) = '7P'     MOVE 4 TO #TYP-X
      WHEN PLAN (#I1) = MASK (.'F'.)    MOVE 5 TO #TYP-X
      WHEN PLAN (#I1) = MASK (..'F')    MOVE 5 TO #TYP-X
      WHEN PLAN        (#I1) = 'RT'     MOVE 7 TO #TYP-X
      WHEN PLAN        (#I1) = 'LT'     MOVE 8 TO #TYP-X
      WHEN PLAN        (#I1) = 'SO'     MOVE 9 TO #TYP-X
      WHEN PLAN        (#I1) = 'FSO'    MOVE 9 TO #TYP-X
      WHEN (PLAN-A1 (#I1) GE 'U')
          AND (PLAN-A1 (#I1) LE 'Z')       MOVE 10 TO #TYP-X
      WHEN PLAN        (#I1) = 'EZ'     MOVE 12 TO #TYP-X  /* RE2
      WHEN F-LT2PLUS-TRUE(<PLAN(#I1)>)  MOVE 13 TO #TYP-X  /* RE2
      when plan        (#i1) = 'GT1'    move 10  to #typ-x                   /* vt2
      WHEN NONE WRITE ST-V.ID-NUMBER 'INVALID PLAN'
    END-DECIDE
    ADD 1 TO #ME-EMP-PLANS-BY-TYPE (#TYP-X, #INS-X)
  END-IF
END-FOR
*
END-SUBROUTINE
*
END
