* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 10
* <Natural Source Header
*****************************************************************
*                                                               *
* New COPYCODE member: ATHISXNU created by ACCORD on: 02/09/05  *
*                                                               *
*****************************************************************
************************************************************************
*                       MODIFICATION LOG                               *
* USER DATE     TAG  REASON                                            *
* SAG  20060221 RH1  AS - Correction made to converted code.  Logic    *
*                    now matches that of original Cobol module.        *
* DRW 08/18/2008 DW21 Gen Plus Processing
* NGG 20141023   NG1  Annuity life products                            *
* NGG 20151215   NG2  VAWL                                             *
************************************************************************
*
DEFINE SUBROUTINE CALC-INIT-VALUES-X
*
if is-type = 'GP'       /* Gen Plus            DW21
  move is-fac-amt to is-beg-db is-beg-min-db is-db
  move 0 to is-beg-csv is-beg-acv is-beg-min-csv
  compute IS-NXT-YR-MIN-CSV = is-gpl-cvs (1) * is-fac-amt / 1000
*  write 'ATHISXNU beg nxt-min-csv=' IS-NXT-YR-MIN-CSV
*     'fac-amt=' is-fac-amt 'gpl-csv (1)=' is-gpl-cvs (1)
  escape routine
end-if
*
IF IS-TYPE = 'AL'
**IF IS-ANNUITY-LIFE (< IS-TYPE >)  /* NG1
  RESET IS-NET-LEVEL-PREM IS-ADJ-PREM-MIN-DB IS-NET-PREM-RATIO
    IS-NXT-YR-MIN-CSV IS-ORIG-NXT-MIN-CV IS-INIT-ACQ IS-CURR-ACQ IS-MON-AMORT-ACQ
  MOVE IS-WORK-BEG-ACV TO IS-BEG-CSV IS-BEG-ACV IS-BEG-MCV-AL
*
*  COMPUTE INIT DEATH BENE USING CUR SINGLE-PAY & (ACV * .90)
*
*  IF IS-TYPE = 'AL2'   /* NG1
  IF PLAN-CODE = 'AL2'
    CALLNAT 'AOCXAL2R' IS-ISS-AGE CUR-SNG-PA
  ELSE
    IF IS-ISS-AGE > 79
      MOVE 1.0000000 TO CUR-SNG-PA
    ELSE
      MOVE IS-ISS-AGE TO SP-AL-X
      ADD 1 TO SP-AL-X
      MOVE SNG-PAY-AL-A(SP-AL-X) TO CUR-SNG-PA
    END-IF
  END-IF
  COMPUTE ROUNDED IS-NXT-CONT-FUND = IS-BEG-ACV * 0.10
  MOVE IS-NXT-CONT-FUND TO IS-AVL-TDIV
  COMPUTE ROUNDED IS-WORK-B = (IS-BEG-ACV * 0.90) / CUR-SNG-PA
  COMPUTE ROUNDED IS-BEG-DB = IS-WORK-B * 1
  COMPUTE IS-BEG-MIN-DB = IS-BEG-DB + (IS-BEG-ACV * 0.10)
  ESCAPE ROUTINE
END-IF
*
* Set values for calculations based on VAWL version NG2
*
IF #VERSION = '4'
  IS-CALC-14-ACQ-PER-POL     := 253.11
  IS-CALC-15-ACQ-PER-1K      := 1.27
END-IF
*
MOVE IS-ISS-AGE TO TJ-ISS-X
ADD 1 TO TJ-ISS-X
IF TJ-ISS-X > 101
  MOVE 101 TO TJ-ISS-X
END-IF
IF IS-TYPE = 'OL' OR = 'SO' OR = 'FS' OR= '99'
  MOVE 101 TO TJ-PUP-X
ELSE
  MOVE IS-ISS-AGE TO TJ-PUP-X
  ADD 1 TO TJ-PUP-X
  ADD IS-TYPE-YEARS TO TJ-PUP-X
END-IF
MOVE TJ-ISS-X TO TK-ISS-X
MOVE TJ-PUP-X TO TK-PUP-X
IF L-NPR = 'NP'
  IF L-NPR-OLD-TERM = 99
    MOVE 101 TO TJ-PUP-X
    MOVE TJ-PUP-X TO TK-PUP-X
  ELSE
    MOVE IS-ISS-AGE TO TJ-PUP-X
    ADD 1 TO TJ-PUP-X
    ADD L-NPR-OLD-TERM TO TJ-PUP-X
    MOVE TJ-PUP-X TO TK-PUP-X
  END-IF
END-IF
*
IF L-NPR = 'NP'
  MOVE TJ-ISS-X TO TJ-ATT-X
  ADD IS-DURATION TO TJ-ATT-X
  MOVE TJ-ATT-X TO TK-ATT-X
  COMPUTE ROUNDED IS-WORK-B = IS-LUMP-PREM * IS-NET-PREM-RATIO
  IF IS-SMOK-STATUS = 'N'
    COMPUTE ROUNDED IS-PVP-ADJ = IS-WORK-B * ((TJ-NX(TJ-ATT-X) - TJ-NX(TJ-PUP-X))
      /  TJ-DX(TJ-ATT-X))
    MOVE IS-ISS-AGE TO TJ-PUP-X
    ADD 1 TO TJ-PUP-X
    ADD IS-TYPE-YEARS TO TJ-PUP-X
    COMPUTE ROUNDED IS-ADJ-PREM = IS-PVP-ADJ /((TJ-NX(TJ-ATT-X) - TJ-NX(TJ-PUP-X))
      / TJ-DX(TJ-ATT-X))
    COMPUTE ROUNDED IS-NET-PREM-RATIO = IS-ADJ-PREM / IS-ANN-PREM
  ELSE
    COMPUTE ROUNDED IS-PVP-ADJ = IS-WORK-B * ((TK-NX(TK-ATT-X) - TK-NX(TK-PUP-X))
      /  TK-DX(TK-ATT-X))
    MOVE IS-ISS-AGE TO TK-PUP-X
    ADD 1 TO TK-PUP-X
    ADD IS-TYPE-YEARS TO TK-PUP-X
    COMPUTE ROUNDED IS-ADJ-PREM = IS-PVP-ADJ /((TK-NX(TK-ATT-X) - TK-NX(TK-PUP-X))
      / TK-DX(TK-ATT-X))
    COMPUTE ROUNDED IS-NET-PREM-RATIO = IS-ADJ-PREM / IS-ANN-PREM
  END-IF
END-IF
*
IF L-NPR = 'NP'
  ADD 1 TO TJ-ATT-X
  MOVE TJ-ATT-X TO TK-ATT-X
  MOVE IS-ANN-PREM TO IS-WORK-PREM
  IF IS-SMOK-STATUS = 'N'
    COMPUTE ROUNDED IS-WORK-B = ((IS-WORK-BEG-MIN-CSV + (IS-WORK-PREM * IS-NET-PREM-RATIO))
      * (TJ-DX(TJ-ATT-X - 1) / TJ-DX(TJ-ATT-X)))
      - (((TJ-MX(TJ-ATT-X - 1) - TJ-MX(TJ-ATT-X)) / TJ-DX(TJ-ATT-X)) * IS-FAC-AMT)
    COMPUTE ROUNDED IS-NXT-YR-MIN-CSV = IS-WORK-B * 1
    ESCAPE ROUTINE
  ELSE
    COMPUTE ROUNDED IS-WORK-B = ((IS-WORK-BEG-MIN-CSV + (IS-WORK-PREM * IS-NET-PREM-RATIO))
      * (TK-DX(TK-ATT-X - 1) / TK-DX(TK-ATT-X)))
      - (((TK-MX(TK-ATT-X - 1) - TK-MX(TK-ATT-X)) / TK-DX(TK-ATT-X)) * IS-FAC-AMT)
    COMPUTE ROUNDED IS-NXT-YR-MIN-CSV = IS-WORK-B * 1
    ESCAPE ROUTINE
  END-IF
END-IF
IF IS-SMOK-STATUS = 'N'
  COMPUTE ROUNDED IS-WORK-C = TJ-NX(TJ-ISS-X) - TJ-NX(TJ-PUP-X)
ELSE
  COMPUTE ROUNDED IS-WORK-C = TK-NX(TK-ISS-X) - TK-NX(TK-PUP-X)
END-IF
IF IS-PAID-UP-SW = 'Y'
  IF IS-SMOK-STATUS = 'N'
    MOVE TJ-DX(TJ-ISS-X) TO IS-WORK-C
  ELSE
    MOVE TK-DX(TK-ISS-X) TO IS-WORK-C
  END-IF
END-IF
*
IF IS-SMOK-STATUS = 'N'
  COMPUTE ROUNDED IS-NET-LEVEL-PREM = (1000 * TJ-MX(TJ-ISS-X)) / IS-WORK-C
ELSE
  COMPUTE ROUNDED IS-NET-LEVEL-PREM = (1000 * TK-MX(TK-ISS-X)) / IS-WORK-C
END-IF
IF IS-NET-LEVEL-PREM > 40
  MOVE 40 TO IS-NET-LEVEL-PREM
END-IF
*
COMPUTE ROUNDED IS-WORK-B = 10 + (1.25 * IS-NET-LEVEL-PREM)
IF IS-SMOK-STATUS = 'N'
  COMPUTE ROUNDED IS-ADJ-PREM = ((1000 * TJ-MX(TJ-ISS-X)) +
    (IS-WORK-B * TJ-DX(TJ-ISS-X))) / IS-WORK-C
ELSE
  COMPUTE ROUNDED IS-ADJ-PREM = ((1000 * TK-MX(TK-ISS-X)) +
    (IS-WORK-B * TK-DX(TK-ISS-X))) / IS-WORK-C
END-IF
*
COMPUTE IS-ADJ-PREM-MIN-DB = IS-ADJ-PREM * (IS-FAC-AMT / 1000)
*
IF IS-PAID-UP-SW = 'Y'
  MOVE IS-ADJ-PREM-MIN-DB TO IS-PVP-ADJ
  MOVE IS-WORK-BEG-CSV TO IS-PVP-GROSS
ELSE
  IF IS-SMOK-STATUS = 'N'
    COMPUTE ROUNDED IS-PVP-ADJ = IS-ADJ-PREM-MIN-DB * (TJ-NX(TJ-ISS-X)
      - TJ-NX(TJ-PUP-X)) / TJ-DX(TJ-ISS-X)
    COMPUTE ROUNDED IS-PVP-GROSS = IS-ANN-PREM * ((TJ-NX(TJ-ISS-X)
      - TJ-NX(TJ-PUP-X)) / TJ-DX(TJ-ISS-X))
  ELSE
    COMPUTE ROUNDED IS-PVP-ADJ = IS-ADJ-PREM-MIN-DB * (TK-NX(TK-ISS-X)
      - TK-NX(TK-PUP-X))     / TK-DX(TK-ISS-X)
    COMPUTE ROUNDED IS-PVP-GROSS = IS-ANN-PREM  * ((TK-NX(TK-ISS-X)
      - TK-NX(TK-PUP-X))  / TK-DX(TK-ISS-X))
  END-IF
END-IF
*
IF (IS-PAID-UP-SW = 'Y') AND (IS-TOT-PRM-PD NE 0)
  MOVE IS-TOT-PRM-PD TO IS-PVP-GROSS
END-IF
*
* ABOVE ADDED 9/30/97 TO ALLOW PRMS TO BE PAID LATE IN ATHP05PN
*
IF IS-PVP-GROSS = 0
  WRITE IS-ID-NO ' NO SINGLE PREM TO CALC NPR - RECALCULATE NPR & NXT-MCV'
  MOVE IS-PVP-ADJ TO IS-PVP-GROSS
END-IF
*
COMPUTE ROUNDED IS-NET-PREM-RATIO = IS-PVP-ADJ / IS-PVP-GROSS
MOVE IS-ISS-AGE TO TJ-ISS-X
ADD 1 TO TJ-ISS-X
MOVE TJ-ISS-X TO TK-ISS-X
*
IF IS-SMOK-STATUS = 'N'
  COMPUTE ROUNDED IS-WORK-B = (IS-FAC-AMT * (TJ-MX(TJ-ISS-X)
    / TJ-DX(TJ-ISS-X))) - IS-PVP-ADJ
ELSE
  COMPUTE ROUNDED IS-WORK-B = (IS-FAC-AMT * (TK-MX(TK-ISS-X)
    / TK-DX(TK-ISS-X))) -  IS-PVP-ADJ
END-IF
*
COMPUTE ROUNDED IS-BEG-MIN-CSV = IS-WORK-B * 1
*
MOVE TJ-ISS-X TO TJ-ATT-X
ADD 1 TO TJ-ATT-X
MOVE TJ-ATT-X TO TK-ATT-X
IF IS-PAID-UP-SW = 'Y'
  MOVE IS-WORK-BEG-CSV TO IS-WORK-PREM
ELSE
  MOVE IS-ANN-PREM TO IS-WORK-PREM
END-IF
IF IS-PAID-UP-SW = 'Y' AND IS-TOT-PRM-PD NE 0
  MOVE IS-TOT-PRM-PD TO IS-WORK-PREM
END-IF
IF IS-SMOK-STATUS = 'N'
  COMPUTE ROUNDED IS-WORK-B = ((IS-BEG-MIN-CSV + (IS-WORK-PREM *
    IS-NET-PREM-RATIO)) * (TJ-DX(TJ-ATT-X - 1) / TJ-DX(TJ-ATT-X)))
    - (((TJ-MX(TJ-ATT-X - 1) - TJ-MX(TJ-ATT-X)) / TJ-DX(TJ-ATT-X)) * IS-FAC-AMT)
ELSE
  COMPUTE ROUNDED IS-WORK-B = ((IS-BEG-MIN-CSV + (IS-WORK-PREM *
    IS-NET-PREM-RATIO)) * (TK-DX(TK-ATT-X - 1) / TK-DX(TK-ATT-X)))
    - (((TK-MX(TK-ATT-X - 1) - TK-MX(TK-ATT-X)) / TK-DX(TK-ATT-X)) * IS-FAC-AMT)
**COMPUTE ROUNDED IS-NXT-YR-MIN-CSV = IS-WORK-B * 1      /*SAG 20060221 RH1 AS
END-IF
COMPUTE ROUNDED IS-NXT-YR-MIN-CSV = IS-WORK-B * 1        /*SAG 20060221 RH1 AS
MOVE IS-NXT-YR-MIN-CSV TO IS-ORIG-NXT-MIN-CV
MOVE IS-WORK-BEG-CSV TO IS-BEG-CSV
MOVE IS-WORK-BEG-ACV TO IS-BEG-ACV
MOVE IS-FAC-AMT TO IS-BEG-MIN-DB IS-BEG-DB
*
MOVE 10 TO IS-ACQ-TERM
IF IS-TYPE = 'SO' OR = 'FS'
  MOVE IS-CALC-23-ACQ-PER-POL TO IS-INIT-ACQ
ELSE
  COMPUTE ROUNDED IS-INIT-ACQ = IS-CALC-14-ACQ-PER-POL +
    (IS-CALC-15-ACQ-PER-1K * (IS-FAC-AMT / 1000))
END-IF
MOVE IS-INIT-ACQ TO IS-CURR-ACQ
COMPUTE ROUNDED IS-WORK-B = 1 /(1 + IS-ACQ-LOAN-INT-RT)
COMPUTE ROUNDED IS-WORK-C = IS-INIT-ACQ / ((1 - (IS-WORK-B ** IS-ACQ-TERM)) /
  (1 - (IS-WORK-B ** IS-CALC-6)))
COMPUTE ROUNDED IS-MON-AMORT-ACQ = IS-WORK-C * 1
*
END-SUBROUTINE
*
********************************************************************************
*
