* >Natural Source Header 000000
* :Mode S
* :CP ISO_8859-1:1987
* :LineIncrement 2
* <Natural Source Header
******** CONVERTED TO NATURAL BY SOFTWARE AG ON 07/09/05 ********
*
* COMPOPT:RENT,RES,OPT,LIB
* LINKOPT:RENT,AMODE=31,RMODE=ANY
* PROGRAM-ID.    ATHP05P4.
* AUTHOR.        EJS 03/76.
*****************************************************************
* MODIFICATION LOG
* USER    DATE    TAG  REMARKS
* DRW   03152005  DW1  FIX SUNGARD CAP IND ON EIP'S & USE CONV-DUR
*                      INSTEAD OF INTRO-FLAG TO IND CAP POLS
* DRW   04042005  DW2  CHG IFL NOTICE DATE CALC OF OVERLOAN
*                      CONDITION
* DRW   05062005  DW3  ONLY USE CSV GROWTH IN IFL CALC IF PAID-UP
*                      OR MODE = MONTHLY
* DRW   05102005  DW4  FIX PREM ADD CALC IF EST FUTURE LOAN DATE
* DRW   06032005  DW5  DO NOT REPLACE DUEP IN SG-TRAN
* DRW   07232005  DW6  CHG TIMING OF PREM NOTICES/REMOVED 7/27/05
* DRW   07292005  DW7  DO DELQ NOTC OF PD TO 1-15 1 MON EARLIER
* DRW   08082005  DW8  BYPASS TERMED POLS ON EZPAY START 1ST DEBIT
* PAM   08192005  PM9  REMOVE OLD OWNERSHIP LOGIC FOR EZPAY NAME
* DRW/AB 12282005 DW8  2 lines repositioned after DW8 (see Cobol)
* DRW/AB 12282005 DW10 Bypass adding dues to bill if not 1st bill
*                      Updated in Cobol 10/14/2005
* SAG/AB 01162006 RH1  Changed WF1 (Cobol ATHNPADC) to WF7
*                      Changed WF2 (cobol ATHNPADS) to WF8
* SAG-AB 20060314 RH1  Split test so that exceed index evaluated first
* DRW   11152005  DW11 CHG 2006 LOAN INT RATE TO 7.90% FROM 8.00%
* DW11-AB 20060328 implement DW11 in converted Natural
* SAG-AB 20060504 AB1 new variable with redefinition added to correct
*                  overflow in calculation
* SAG-AB 20060504 AB2 Correction for overflows from total bill
*                      and bill adjustments moves to Tin1
* SAG-AB 20060504 AB3 Correction for overflows of hash totals
* SAG-AB 20060504 AB4 Correcion for overflow of W-MODE-PREMIUM MOVE
* DRW   04262006  DW12-AB USE MIP LOAN/INT PMT TO BYPASS PTNTNG NOTICE
* DRW   05172006  DW13-AB FIX DELQ PREM NOTICE TIMING FOR NXT POLS
* SAG-AB 20060808 Changed zip code suffix from N4 to A4 in LDA ATHP05L4
*                 and correct for loss of leading zeros.
* SAG-AB 20060809 Replaced 2nd condition in test that had been deleted
*                 during conversion, on advice of PAM and DRW
* SAG-AB 20060810 Added an if test in write-pre-auth-detail per PAM
* EDS-PM 20060825 Formatted date
* SAG-AB 20060919 Changed move of id-number to move edited so leading zero is written
* EDS-PM 20061006 Changed escape clause
* EDS-PM 20061011 Adjusted Loan Interest Bill Logic
* DRW   12122006  DW14 USE VAR AIP AS WELL AS FIXED AIP ON PAYOFF
* DRW   12272006  DW15 CHG 2007 LOAN INT RATE TO 8.10% FROM 7.90%
* DRW   08212007  DW16 Adjust MIP amts on notices if delinquent
* DRW   10182007  DW17 MIP Only Bill Processing
* DRW   11012007  DW18 Modify Due-date on LC prem notc if paid-to delq
* DRW   11192006  DW19 CHG 2008 LOAN INT RATE TO 8.20% FROM 8.10% (ATHISWRK)
* DRW   12112007  DW20 Force a Delq Bill 1 month after paid to date for CAP pols
* YAK   12052007  YK1  Remove hardcording for interest rates
*                      (Read GEN-TABLE through OBJNGENT)
* DRW 01/28/2008  DW21 Bypass MIP Only bill if CAP-BILL-DATE is in the future
* DRW 01/30/2008  DW22 Force a Delq Bill 1 month after paid to date for all other pols
*     DW22 was removed just before M/E 1/2008
* YAK 02/05/2008  YK2  Change code to use FUNCTION-INT-RATE
*                         to get rate from GEN-TABLE
* DRW 02/21/2008  DW23 Create Delq bill if STOP-DATE is Current Month
* DRW 05/18/2008  DW24 Fix Paid-Up Calc for OLD/NEW EZPAYS
* PAM 06/09/2008  PM25 EZPay start by line
* PAM 07/28/2008  PM26 Added CAP Guard processing (EIL)
* DRW 08/21/2008  DW27 GEN PLUS Processing
* PAM 11/07/2008  PM28 Include EIL/Premium and total amounts in email file
* PAM 03/20/2009  PM29 Only draft EIL when Bridger verified
* DRW 05/29/2009  DW30 Modify Errors & Exceptions Report
* DRW 06/01/2009  DW31 Remove DW30(we need the Err & Excp Rec for ATHP09P0)
* PAM 08/24/2009  PM32 EZPay loan starts should be before MIP billing
* PAM 04/07/2010  PM33 Modify Bills for ezpay start by line
* vxt 10/31/2010  vt1  use name rank and address from the new files.
* vxt 01/14/2011  vt2  change to populate city with country for international addresses
* vxt 02/16/2011  vt3  fix #D-own-last population
* NGG 02/14/2012  NG1  Premier services
* vxt 12/03/2012  vt5  ticket 1618 - adding the CAP amount to the work file 10.
* YAK 09/26/2012  YK3  Use function to identify Level Term II plans
* YAK 11/08/2012  YK4  Add No Medical Term plan (EZ)
* YAK 02/13/2012  YK5  Add special processing for EZ term - deduct $1 from premium
*                      for EZ Pay and Allotment
* VXT 04/10/2013  VT6  Populate the svc-tran-type field with  'EZME' to determine PS payment during the ME process /ticket 1929/
* TMT 10/08/2013  TT1  ADDRESS NORMALIZATION
* YAK 01/13/2014  YK6  Add GP2 (Generation Plus 2) plan
* YAK 02/11/2014  YK7  Change Rider logic for direct bill
* TMT 05/13/2014  TT1  CONTACT NORMALIZATION   -  EMAILS
* NGG 06/13/2014  NG2  CONTACT NORMALIZATION   -  DOB
****************************************************************
* REMARKS.                                          VERSION 13.8
*         SUB-PROGRAM TO FORMAT NOTICES AND REGISTERS.
*
*              Q RECORD  MISSING ZIP CODE
*              G RECORD  DIRECT BILL REGISTER
*              E RECORD  REMINDER NOTICE
*              L RECORD  PREMIUM DUE NOTICE
*              M RECORD  LOAN     NOTICE
*              N RECORD  PAY UP   NOTICE
*****************************************************************
*                                                               *
*          W O R K I N G - S T O R A G E                        *
*                                                               *
*       WYSY0004 - CVTCOB2 - 12/01/98 - COBOL II CONVERSION     *
*                                                               *
*****************************************************************
* Converted to Natural by SAGUK ( UKALI ) on 07/09/05           *
* ---------------------------------------------------           *
* Notes:                                                        *
*                                                               *
*  vxt 10/20/2010 vt1 replace GCTSTSXX with the new program     *
*  vxt 03/21/2013 vt2 add a message when the payment mode is 'E'*
*                     and  the bank account is not populated.    *
*                     /Ticket 1890/                             *
*****************************************************************
*
DEFINE DATA
GLOBAL USING ATHG05P0
*
LOCAL USING ATHISWRK
LOCAL USING ATHP05L4
LOCAL USING ADDA0001                                    /* vt1
LOCAL
1 ST-V VIEW OF A-STATUS                         /* DW17
  2 CAP-BILL-DATE
  2 BRIDGER-IND                                  /* PM29
*
1 #BRIDGER-FLAG           (A1)                  /* PM29
1 #CAP-BILL-DATE          (N8)
1 REDEFINE #CAP-BILL-DATE
  2 #CAP-BILL-DATE-YYYYMM  (N6)
  2 REDEFINE #CAP-BILL-DATE-YYYYMM
    3 #CAP-BILL-DATE-YYYY   (N4)
    3 #CAP-BILL-DATE-MM     (N2)
  2 #CAP-BILL-DATE-DD      (N2)
1 #CN                     (N6)
1 REDEFINE #CN
  2 #CN-A                  (A6)
*
1 #WD-YYYY                (N4)   /* added SAG-AB 20060504 AB1 to correct overflow in calculation
1 REDEFINE #WD-YYYY
  2 #WD-OVERFLOW          (N2)
  2 #WD-YY-N2             (N2)
1 #QUOT                   (N5.2) /* added SAG-AB 20060504 AB2 to correct overflow in calculation
1 #MIP-LOAN-AMT           (N7.2)               /* DW16
1 #YYYYMMDD               (N8)
1 REDEFINE #YYYYMMDD
  2 #YYYYMM                (N6)
  2 REDEFINE #YYYYMM
    3 #YYYY                 (N4)
    3 REDEFINE #YYYY
      4 #CENT                (N2)
      4 #YY                  (N2)
    3 #MM                   (N2)
  2 #DD                    (N2)
*
1 #NO-START               (L)                  /* PM25
*
1 #MULTIPLE-OWNER          (L)                 /* PM26
1 #NON-INS-OWNER           (L)                 /* PM26
1 #OWNER-OCC-9             (9)                 /* PM26
  2 #OWNER-FLAG             (A1)                /* PM26
  2 #OWNER-CN               (N6/10)             /* PM26
  2 #OWNER-CN-BY-POL        (N6)                /* PM26
  2 #OWNER-CN-SEG           (I2/9)              /* PM26
  2 #ISS-DATE               (N8/9)              /* PM26
  2 #ISS-DATE-DISP          (A10/9)             /* PM26
*
  2 #BENE-TYPE              (A1/2)              /* PM26
  2 #BENE-TEXT              (A60/10)            /* PM26
1 #WORK-OWNER-CN           (N6)                /* PM26
1 REDEFINE #WORK-OWNER-CN                      /* PM26
  2 #WORK-OWNER-CN-A        (A6)                /* PM26
*
1 #SPLIT    (A1)  INIT <'S'>                   /* PM26
1 #ERR-MSG  (A60)                              /* PM26
1 #STREET   (A70)                              /* PM26                         vt1
1 #STREET-2 (A70)                              /* PM26                         vt1
1 #CITY     (A50)                              /* PM26                         vt1
1 #STATE    (A2)                               /* PM26
1 #NAME      (A70)                             /* PM26                      vt1 was 25
1 #LAST      (A25)                             /* PM26
*  1 #FIRST-20  (A20)                             /* PM26                    vt1
* 1 #MI        (A1)                              /* PM26                     vt1
1 #EXTRACT-RECORD (A457)                       /* PM26                          /* vt1   was 250
1 #TAB            (A1)  INIT <H'09'>           /* PM26
1 #I1             (I2)                         /* PM26
1 #WORK-AMOUNT    (P7.2)                       /* PM28
*
1 #EMAIL-RECORDS                               /* PM26
  2 #D-RANK      (A25)                           /* PM26                 /* vt1 was 3
  2 #D-OWN-FIRST (A25)                          /* PM26                  /* vt1 was 20
  2 #D-OWN-MI    (A25)                           /* PM26                 /* vt1 was 1
  2 #D-OWN-LAST  (A25)                          /* PM26
  2 #D-MEM-FIRST (A25)                          /* PM26                  /* vt1 was 20
  2 #D-MEM-MI    (A25)                           /* PM26                 / vt1 was 1
  2 #D-MEM-LAST  (A25)                          /* PM26
  2 #D-POL-NUM   (A16)                          /* PM26
  2 #D-EIL-AMT   (A10)                          /* PM28
  2 #D-PRM-AMT   (A12)                          /* PM28
  2 #D-TTL-AMT   (A12)                          /* PM28
  2 #D-ADDR1     (A70)                          /* PM26     was 25 vt1  \/
  2 #D-ADDR2     (A70)                          /* PM26
  2 #D-ADDR3     (A70)                          /* PM26     was 25 vt1  /\
  2 #D-EMAIL     (A60)                          /* PM26
*
1 ST-N VIEW OF A-STATUS                        /* PM26
*  2 INTERNET-ADDR                               /* PM26
  2 NAME
  2 MEMBER-CONTACT-ID                                             /* vt1
1 OBSOLETE-STATUS-FIELDS                         /* NG2
  2 DATE-OF-BIRTH     (N8)
  2 REDEFINE DATE-OF-BIRTH
    3 DOB-YYYY (N4.0)
    3 REDEFINE DOB-YYYY
      4 DOB-CENT (N2.0)
      4 DOB-YY (N2.0)
    3 DOB-MMDD (N4.0)
    3 REDEFINE DOB-MMDD
      4 DOB-MM (N2.0)
      4 DOB-DD (N2.0)
*
1 #ZIP-CODE                     (N9)                              /* vt1  \/
1 REDEFINE #ZIP-CODE
  2 #ZIP-CODE-5                 (N5)
  2 #ZIP-CODE-4                   (N4)
1 #CONTACT-ID                     (N8)
1 #NAME-F                          (A70)
1 #FIRST-NAME                     (A25)
1 #MIDDLE-NAME                    (A25)
1 #LAST-NAME                      (A25)
1 #SUFFIX                         (A10)
1 #PDA-RANK
  2 #PASS-COMMAND       (A2)
  2 #RANK-PASS          (A3)
  2 #MIL-ID-PASS        (A3)
  2 #INVALID            (L)
  2 #RANK-PAY-TBL-DISPL (P2)
  2 #RANK-LITERAL-PASS  (A23)
  2 #RANK-DISPLAY       (A5)
*
  2 #CONTACT-ID-R         (N8)
  2 #RANK-ABBR          (A) DYNAMIC
  2 #LETTER-ENV         (A) DYNAMIC
  2 #SALUTATION         (A) DYNAMIC
  2 #SALUTATION-WITH-NAME (A) DYNAMIC
*
1 #EMAIL                          (A70)                     /* vt1   /\
*
1 #MATCH-ID           (P9)
1 #PS-DUES            (N7.2)
1 #REQUEST            (A) DYNAMIC
1 #D-PSM-AMT          (A12)
1 #SVC-PAID-TO-DATE   (N8) 1 REDEFINE #SVC-PAID-TO-DATE
  2 #SVC-PTD-YYYYMM   (N6)
LOCAL USING OBJAMB01
LOCAL USING SVCA0003
*
local
1 AT-V VIEW OF A-APPL-TRACKING                             /* vt5 \/
  2 SSN
  2 ACTION-FLAG
  2 CAP-IND
  2 CAP-TYPE
  2 CAP-LOAN-AMT
  2 CAP-TERM
  2 ALLOT-STRT-AMT
1 #d-cap-amt         (A10)                               /* vt5 /\
1 #EZ-TERM           (A3) CONST <'EZ'>                   /* YK5
*
END-DEFINE
*****************************************************************
*
PERFORM PROGRAM-STARTUP
*
IF RETURN-SWITCH = ' '  /* 1st time for a member              /* DW17
  FOR NAS-X 1 TO 9
    IF NAS-X GT P05P4.I-NEW-ACTIVE-SEG
      ESCAPE BOTTOM
    END-IF
*
    IF   (X-ALT-LP-IND(NAS-X) = '6') AND (X-ALT-LP-AMT (NAS-X) NE 0)
        AND (MODE(NAS-X) NE 'M')
        AND NOT (PAD-CODE = 'V' OR = 'X' OR = 'W')               /* PM32
      PERFORM MIP-ONLY-BILL   /* There can be only 1 MIP bill per Member
    END-IF
  END-FOR
ELSE
  IF RETURN-SWITCH = 'C'
    RESET RETURN-SWITCH
  END-IF
END-IF                                                 /* END DW17
*
NXT-YR-VAR-INT-RT := CUR-YR-VAR-INT-RT := FUNCTION-INT-RATE(<'RATE5AB'>)  /* YK2
IF #C-RUN-DT-MM = 12
  NXT-YR-VAR-INT-RT := FUNCTION-INT-RATE(<'RATEN  '>)          /* YK2
END-IF
*
#REQUEST := 'SERVICE'                    /* NG1
CALLNAT 'SVCN0004'
  ID-NUMBER
  #C-RUN-DT-YYYYMM
  MODE (*)
  PAID-TO-DATE (*)
  #MATCH-ID
  #PS-DUES
  #REQUEST
  #SVC-MEMBER
*
MAIN-PROCESS.
REPEAT
  SECONDARY-PROCESS.
  REPEAT
    PROCESS-VARIABLE-BILL.
    REPEAT
      FORM-M-LOOP.
      REPEAT
        IF RESTART-M
          MOVE FALSE TO RESTART-M
          ESCAPE BOTTOM (FORM-M-LOOP.)
        END-IF
        CONTINUE-PAD-1.
        REPEAT
          END-G.
          REPEAT
            FORM-L.           /* premium due notice
            REPEAT
              FORM-K.         /* reminder notice
              REPEAT
                FORM-H.       /* direct bill adjust register
                REPEAT
                  RETURN-TEST.
                  REPEAT
                    IF RESTART-G
                      MOVE FALSE TO RESTART-G
                      ESCAPE BOTTOM (RETURN-TEST.)
                    END-IF
                    IF RETURN-SWITCH = 'H'
                      ESCAPE BOTTOM (FORM-H.)
                    END-IF
                    IF RETURN-SWITCH = 'K'
                      ESCAPE BOTTOM (FORM-K.)
                    END-IF
                    IF RETURN-SWITCH = 'L'
                      ESCAPE BOTTOM (FORM-L.)
                    END-IF
                    IF RETURN-SWITCH = 'M'
                      ESCAPE BOTTOM (RETURN-TEST.)
                    END-IF
                    IF RETURN-SWITCH = 'P'
                      ESCAPE BOTTOM (PROCESS-VARIABLE-BILL.)
                    END-IF
                    IF RETURN-SWITCH = 'N'
                      ESCAPE BOTTOM (FORM-M-LOOP.)
                    END-IF
                    IF RETURN-SWITCH = 'Z'
                      ESCAPE BOTTOM (CONTINUE-PAD-1.)
                    END-IF
*
*****************************************************************
*                                                               *
*          F O R M - G - DIRECT BILL REGISTER                   *
*                                                               *
*****************************************************************
*
                    IF P4 NE '4'
                      ESCAPE BOTTOM (END-G.)
                    END-IF
                    RESET NEW-PAD TOTAL-BILL AMT-PRE-AUTH-DEBIT WORK-DB-CR (*)           /* PM25
                      DUES-DB-CR RID-BAL-INCR (*) EZPAY-FUTURE-AMT ACV-MONEY-NEEDED(1:9) /* PM25
                      #PREMIUM-EZPAY-MONEY (*)                                           /* PM25
                    MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID                    /* vt1  \/
                    #NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
                    COMPRESS #FIRST-NAME #MIDDLE-NAME #LAST-NAME INTO EZ-PAY-NAME
*                   MOVE STATUS-VIEW.NAME TO EZ-PAY-NAME                                 /* vt1  /\
                    IF PAD-CODE = 'Z'
                      MOVE 'Y' TO NEW-PAD
                    END-IF
                    RESET NAS-X
                    ESCAPE BOTTOM
                  END-REPEAT /* (RETURN-TEST.)
*
                  CHECK-FOR-G.
                  REPEAT
                    REPEAT
                      ADD 1 TO NAS-X
                      MOVE NAS-X TO OWN-X
                      IF P05P4.I-NEW-ACTIVE-SEG = 0 OR NAS-X > P05P4.I-NEW-ACTIVE-SEG
                        ESCAPE BOTTOM (END-G.)
                      END-IF
                      RESET TOTAL-BILL TOT-MIP-PRIN TOT-MIP-INTR TIN1-P4-BILL-PRIN TIN1-P4-BILL-INTR EXTRA-BILL
                        EXTRA-DUES EXTRA-RIDER EXTRA-MIP-PRIN EXTRA-MIP-INTR SAVE-PU-DATE SAVE-DB-DATE
                        SAVE-DB-BILL-TO POL-WORK-DB-CR REMAINING-CSV RID-MON-PREM P05P4.RID-AMT-DUE
                      MOVE X-RID-BALANCE(NAS-X) TO TOTAL-RIDER
                      IF NAS-X = P05P4.FIRST-ACTIVE
                        MOVE DUES-BALANCE TO TOTAL-DUES
                      ELSE
                        RESET TOTAL-DUES
                      END-IF
                      RESET G-RECORD-NEEDED BILL-CODE-SW EXTRA-BILL-CODE-SW SAVE-MODE LAST-DB-SW HAS-TERM
                        PROCESS-MBR-FLAG HOLD-MODE
                      IF OWNERSHIP-FLAG(NAS-X) = 'N'
                        MOVE 'N' TO PROCESS-MBR-FLAG
                      END-IF
                      ADD CASH-VALUE(NAS-X) TO REMAINING-CSV
                      MOVE NAS-X TO PRM-X
                      IF MTD-ACV-PREM-ADJ(PRM-X) NE 9999999.99
                        ADD MTD-ACV-PREM-ADJ(PRM-X) TO REMAINING-CSV
                      END-IF
                      SUBTRACT X-LOAN-AMOUNT(NAS-X) FROM REMAINING-CSV
                      SUBTRACT X-ACCUM-INTEREST(NAS-X) FROM REMAINING-CSV
                      SUBTRACT X-LOAN-AMOUNT-2(NAS-X) FROM REMAINING-CSV
                      SUBTRACT X-ACCUM-INTEREST-2(NAS-X) FROM REMAINING-CSV
                      IF ((PAY-STATUS(NAS-X) > '41' OR ONLINE-ACTION(NAS-X) = '7')
                          AND RID-PLAN(NAS-X) = ' ') OR STATUS(NAS-X) NE 'D'
                        ESCAPE TOP
                      END-IF
                      IF PAD-CODE = 'V' AND MODE(NAS-X) NE 'E'
                        MOVE 'Y' TO NEW-PAD
                        MOVE MODE(NAS-X) TO HOLD-MODE
                        MOVE 'E' TO MODE(NAS-X)
                        MOVE '22' TO PAY-STATUS(NAS-X)
                        EZPAY-START (NAS-X) := 'Y'               /* PM25
                      END-IF
                      IF PAD-CODE = 'X' AND OWNERSHIP-FLAG(OWN-X) = 'D' AND MODE(NAS-X) NE 'E'
                        MOVE 'Y' TO NEW-PAD
                        MOVE MODE(NAS-X) TO HOLD-MODE
                        MOVE 'E' TO MODE(NAS-X)
                        RESET OWNERSHIP-FLAG(OWN-X)
                        MOVE '22' TO PAY-STATUS(NAS-X)
                        EZPAY-START (NAS-X) := 'Y'               /* PM25
                      END-IF
                      IF PAD-CODE = 'W' AND MODE(NAS-X) NE 'E'
                        MOVE 'Y' TO NEW-PAD
                        MOVE MODE(NAS-X) TO HOLD-MODE
                        MOVE 'E' TO MODE(NAS-X)
                        MOVE '22' TO PAY-STATUS(NAS-X)
                        EZPAY-START (NAS-X) := 'Y'               /* PM25
                      END-IF
*
                      IF NEW-PAD = 'Y' AND X-ALT-LP-IND(NAS-X) = '6'  /* PM32
                        MOVE '4' TO X-ALT-LP-IND(NAS-X)               /* PM32
                      END-IF                                          /* PM32
*
                      IF MODE(NAS-X) = 'A' OR = 'S' OR = 'Q' OR = 'M' OR = 'E'
                        ESCAPE BOTTOM
                      END-IF
                    END-REPEAT
*
                    REPEAT
*                                                                   /* vt1 \/
                      MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID
                      MOVE 's' TO #ADD-TYPE
                      CALLNAT 'addn0001'#PDA-ADDRESS
*                                                                   /* vt1 /\
                      IF MODE(NAS-X) = 'E'
                          AND PAID-TO-YYYYMM(NAS-X) GE #C-RUN-DT-YYYYMM
                          AND (PAD-CODE = 'E' OR = 'V' OR = 'X' OR = 'W')
                        PERFORM CALC-MODE-PREMIUM
                        ADD W-MODE-PREMIUM TO EZPAY-FUTURE-AMT
                        PERFORM CALC-DUES
                        ADD P05P4.SVC-FEE TO EZPAY-FUTURE-AMT
                        PERFORM CALC-RIDER-MON-PREM
                        ADD RID-MON-PREM TO EZPAY-FUTURE-AMT
                        ESCAPE BOTTOM
                      END-IF
*                      IF OWNERSHIP-FLAG(OWN-X) = 'N' AND S-ADDRESS-1 NE ' '            /* vt1
                      IF OWNERSHIP-FLAG(OWN-X) = 'N' AND #ADD-LINE-1 NE ' '             /* vt1
*                        MOVE S-ADDRESS-1 TO EZ-PAY-NAME                                /* vt1
                        MOVE #ADD-LINE-1 TO EZ-PAY-NAME                                /* vt1
                      END-IF
*
                      IF MODE(NAS-X) NE 'E'
                        MOVE MODE(NAS-X) TO SAVE-MODE
                      END-IF
                      MOVE PAID-TO-DATE(NAS-X) TO DB-DATE
                      IF PAY-STATUS(NAS-X) > '40' AND RID-PLAN(NAS-X) NE ' '
                        MOVE RID-PD-TO(NAS-X) TO DB-DATE
                      END-IF
                      MOVE DB-DATE TO SAVE-DB-DATE
                      MOVE PAID-UP-DATE(NAS-X) TO SAVE-PU-DATE
                      IF PAID-TO-DATE(NAS-X) > RUN-DATE-PLUS-1-YR AND
                          (DATE-ACCT-UPDATE > #C-LAST-MON-YYYYMMDD OR DATE-ACCT-UPDATE = #C-LAST-MON-YYYYMMDD)
                        PERFORM FORM-BASE-ERROR
                        MOVE 'PAID TO DATE MORE THAN 1 YEAR IN ADVANCE' TO #C-E-MESSAGE(EPR-X)
                      END-IF
                      ESCAPE BOTTOM (CHECK-FOR-G.)
                    END-REPEAT
                  END-REPEAT /* (CHECK-FOR-G.)
*
                  MOVE NAS-X TO NAS-Z
                  PERFORM CALC-RIDER-MON-PREM
                  IF (PLAN(NAS-X) = 'OL ' OR = 'GPL' OR = 'GP2')    /* DW27    YK6
                      AND OBSOLETE-STATUS-FIELDS.DATE-OF-BIRTH NE 0
                    IF ISSUE-DATE(NAS-X) GE 19970101 AND
                        MONTH-ALLOC-AMT(NAS-X) NE 999.99
                      COMPUTE PAID-UP-DATE(NAS-X) = DATE-OF-BIRTH + +1000000
                    ELSE
                      COMPUTE PAID-UP-DATE(NAS-X) = DATE-OF-BIRTH + +960000
                    END-IF
                  END-IF
                  IF MODE(NAS-X) = 'E'
                    IF NOT (PAD-CODE = 'V' OR = 'W' OR = 'E' OR = 'X')
                      PERFORM FORM-BASE-ERROR
                      MOVE 'MODE = "E" PAD-CODE NOT "V/W/E"-NO PRE-AUTH-DEBIT' TO #C-E-MESSAGE(EPR-X)
                      ESCAPE BOTTOM /* (FORM-H.)
                    END-IF
                  END-IF
*
                  DECIDE ON FIRST VALUE OF MODE(NAS-X)
                    VALUE 'A'
                      MOVE 1 TO IS-MODE
                      MOVE 12 TO NO-MON
                      MOVE 360 TO NO-DAYS
                    VALUE 'Q'
                      MOVE 4 TO IS-MODE
                      MOVE 3 TO NO-MON
                      MOVE 90 TO NO-DAYS
                    VALUE 'S'
                      MOVE 2 TO IS-MODE
                      MOVE 6 TO NO-MON
                      MOVE 180 TO NO-DAYS
                    NONE VALUES
                      MOVE 12 TO IS-MODE
                      MOVE 1 TO NO-MON
                      MOVE 30 TO NO-DAYS
                  END-DECIDE
*
                  CVTA.
                  REPEAT
                    CVTA-EXTRA.
                    REPEAT
                      CVT-MA.
                      REPEAT
                        REPEAT
                          IF MODE(NAS-X) NE 'E'
                            ESCAPE BOTTOM (CVTA.)
                          END-IF
                          MOVE PAID-TO-DATE(NAS-X) TO WORK-DATE
                          IF PAID-TO-DATE(NAS-X) < P05P4.RUN-DATE-MINUS-1MON
                            PERFORM CALC-MODE-PREMIUM
                            PERFORM CALC-DUES
                            ESCAPE BOTTOM
                          END-IF
                          IF PAID-TO-DATE(NAS-X) GE #C-RUN-DT-YYYYMMDD
                            PERFORM CALC-MODE-PREMIUM
                            PERFORM CALC-DUES
                            RESET DB-CR-DECREASE-AMT
                            ESCAPE BOTTOM (CVT-MA.)
                          END-IF
                          ESCAPE BOTTOM (CVTA-EXTRA.)
                        END-REPEAT
*
                        INCREASE-DB-CR.
                        REPEAT
                          ADD W-MODE-PREMIUM TO WORK-DB-CR (NAS-X)    /* PM25
                          ADD W-MODE-PREMIUM TO POL-WORK-DB-CR
*                         IF NOT (PLAN(NAS-X) = 'LT' OR PLAN(NAS-X) = 'RT' OR            /* YK3
*                             ((PLAN-A1(NAS-X) GE 'U') AND (PLAN-A1(NAS-X) LE 'Z')))     /* YK3
                          IF (NOT FUNCTION-TERM-POLICY(<PLAN(NAS-X)>))                   /* YK3
                            ADD W-MODE-PREMIUM TO ACV-MONEY-NEEDED(NAS-X)
                          END-IF
                          ADD P05P4.SVC-FEE TO DUES-DB-CR
                          ADD 1 TO WORK-MM
                          IF WORK-MM > 12
                            MOVE 1 TO WORK-MM
                            ADD 1 TO WORK-YYYY
                          END-IF
                          IF WORK-DATE GE P05P4.RUN-DATE-MINUS-1MON
                            ESCAPE BOTTOM (CVTA-EXTRA.)
                          END-IF
                        END-REPEAT
                        ESCAPE BOTTOM (CVT-MA.)
                      END-REPEAT /* (CVT-MA.)
*
*                     DECREASE-DB-CR.  /* PM25
*                     REPEAT
*                       SUBTRACT W-MODE-PREMIUM FROM WORK-DB-CR (NAS-X)
*                       SUBTRACT W-MODE-PREMIUM FROM POL-WORK-DB-CR
*                       SUBTRACT P05P4.SVC-FEE FROM DUES-DB-CR
*                       SUBTRACT W-MODE-PREMIUM FROM DB-CR-DECREASE-AMT
*                       SUBTRACT 1 FROM WORK-MM
*                       IF WORK-MM < 01
*                         MOVE 12 TO WORK-MM
*                         SUBTRACT 1 FROM WORK-YYYY
*                       END-IF
*                       IF WORK-DATE < #C-RUN-DT-YYYYMMDD
*                         ESCAPE BOTTOM
*                       END-IF
*                     END-REPEAT
                      ESCAPE BOTTOM (CVTA-EXTRA.)
                    END-REPEAT /* (CVTA-EXTRA.)
*
                    CVT-RID.
                    REPEAT
                      REPEAT
                        MOVE RID-PD-TO(NAS-X) TO WORK-DATE
                        IF RID-PLAN(NAS-X) NE '  ' AND RID-PD-TO(NAS-X) < P05P4.RUN-DATE-MINUS-1MON
                          ESCAPE BOTTOM
                        END-IF
                        IF RID-PLAN(NAS-X) NE '  ' AND RID-PD-TO(NAS-X) GE #C-RUN-DT-YYYYMMDD
                          ADD RID-MON-PREM TO EZPAY-FUTURE-AMT         /* PM25
                          ESCAPE BOTTOM (CVT-RID.)
                        END-IF
                        ESCAPE BOTTOM (CVTA.)
                      END-REPEAT
*
                      INCREASE-RID-BAL.
                      REPEAT
                        ADD RID-MON-PREM TO RID-BAL-INCR (NAS-X)       /* PM25
                        ADD 1 TO WORK-MM
                        IF WORK-MM > 12
                          MOVE 1 TO WORK-MM
                          ADD 1 TO WORK-YYYY
                        END-IF
                        IF WORK-DATE GE P05P4.RUN-DATE-MINUS-1MON
                          ESCAPE BOTTOM (CVTA.)
                        END-IF
                      END-REPEAT
                      ESCAPE BOTTOM (CVT-RID.)
                    END-REPEAT /* (CVT-RID.)
*
*                   DECREASE-RID-BAL.    /* PM25
*                   REPEAT
*                     SUBTRACT RID-MON-PREM FROM RID-BAL-INCR (NAS-X)
*                     SUBTRACT 1 FROM WORK-MM
*                     IF WORK-MM < 01
*                       MOVE 12 TO WORK-MM
*                       SUBTRACT 1 FROM WORK-YYYY
*                     END-IF
*                     IF WORK-DATE < #C-RUN-DT-YYYYMMDD
*                       ESCAPE BOTTOM
*                     END-IF
*                   END-REPEAT
*
                    ESCAPE BOTTOM (CVTA.)
                  END-REPEAT /* (CVTA.)
* was CVT-MAA.
                  MOVE PAID-TO-DATE(NAS-X) TO WA-D-PD-TO-DT-YYYYMMDD/ALPHA
                  RESET WORK-DATE
                  MOVE 'N' TO WILL-BE-BILLED EXTRA-BILL-SW
                  RESET MONS-DELQ
                  IF MODE(NAS-X) = 'E'
                    MOVE PAID-TO-DATE(NAS-X) TO WORK-DATE
                  ELSE
                    IF PAID-TO-YYYYMM(NAS-X) = #C-RUN-DT-YYYYMM
                      MOVE PAID-TO-DATE(NAS-X) TO WORK-DATE
                    ELSE
                      IF (PAID-TO-DATE(NAS-X) < #C-RUN-DT-YYYYMMDD) AND
                          ((IS-MODE = 1 OR = 2 OR = 4) OR (SAVE-MODE = 'M'))
                        MOVE PAID-TO-DATE(NAS-X) TO IS-PD-THRU
                        PERFORM CALC-PREM-PMT-MONS
                        IF (#C-RUN-DT-MM = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2) OR = IS-PRM-PD-MON(3)
                            OR = IS-PRM-PD-MON(4)) OR SAVE-MODE = 'M'
                          MOVE 'Y' TO EXTRA-BILL-SW
                          MOVE PAID-TO-DATE(NAS-X) TO WORK-PT-DATE
                          PERFORM CALC-DELQ
                          MOVE BILL-TO-DATE(NAS-X) TO WORK-DATE
                        END-IF
                      END-IF
                    END-IF
                  END-IF
                  IF WORK-DATE NE 0
                    MOVE 15 TO WORK-DD
                    COMPUTE WORK-MM = WORK-MM + NO-MON
                    IF WORK-MM > 12
                      COMPUTE WORK-MM = WORK-MM - 12
                      COMPUTE WORK-YYYY = WORK-YYYY + 1
                    END-IF
                  END-IF
                  IF MODE(NAS-X) NE 'E'
*                   IF PLAN(NAS-X) = 'LT' OR = 'RT' OR (PLAN-A1(NAS-X) = 'U' THRU 'Z')  /* YK3
                    IF (FUNCTION-TERM-POLICY(<PLAN(NAS-X)>))                            /* YK3
                      MOVE 'Y' TO HAS-TERM
                    END-IF
                    IF WORK-DATE NE 0
                      MOVE 'Y' TO WILL-BE-BILLED
                      MOVE WORK-DATE TO BILL-TO-DATE(NAS-X)
                    END-IF
* YK7 Calculating Rider Due
                    IF RID-PLAN(NAS-X) NE '  '
                      PERFORM CALC-RIDER-PREM-DUE
                      ADD P05P4.RID-AMT-DUE TO TOTAL-RIDER
                      IF EXTRA-BILL-SW = 'Y'
                        COMPUTE EXTRA-CALC = MONS-DELQ * RID-MON-PREM
                        ADD EXTRA-CALC TO EXTRA-RIDER
                        ADD EXTRA-CALC TO TOTAL-RIDER
                      END-IF
                    END-IF
*                   IF WILL-BE-BILLED = 'Y'
*                     ADD P05P4.RID-AMT-DUE TO X-RID-BALANCE(NAS-X)               /* YK7 DO NOT CREATE BALANCE
*                     MOVE WORK-DATE TO RID-PD-TO(NAS-X)                          /* YK7 DO NOT MOVE RD-PD-TO
*                   END-IF
                  END-IF
* was END-BILL-UPDATE
                  IF NEW-PAD = 'Y' AND MODE(NAS-X) = 'E'
                    IF HOLD-MODE = 'A'
                      MOVE 1 TO IS-MODE
                    ELSE
                      IF HOLD-MODE = 'S'
                        MOVE 2 TO IS-MODE
                      ELSE
                        IF HOLD-MODE = 'Q'
                          MOVE 4 TO IS-MODE
                        ELSE
                          MOVE 12 TO IS-MODE
                        END-IF
                      END-IF
                    END-IF
                  END-IF
                  MOVE RID-EFF-DT(NAS-X) TO ISS-DT-1-YEAR
                  ADD 1 TO ISS-DT-1-YYYY
                  IF ISS-DT-1-YYYYMM > #C-RUN-DT-YYYYMM
                    MOVE '1Y' TO SG-YEAR
                  ELSE
                    MOVE 'RN' TO SG-YEAR
                  END-IF
                  IF MODE(NAS-X) = 'E'
                    MOVE #C-RUN-DT-YYYYMMDD TO PAID-TO-DATE(NAS-X)
                    MOVE 15 TO PAID-TO-DD(NAS-X)
                    IF RID-PD-TO(NAS-X) < #C-RUN-DT-YYYYMMDD
                      MOVE PAID-TO-DATE(NAS-X) TO RID-PD-TO(NAS-X)
                      MOVE PAID-TO-DATE(NAS-X) TO BILL-TO-DATE(NAS-X)
                      ADD RID-MON-PREM TO AMT-PRE-AUTH-DEBIT
                      ADD RID-MON-PREM TO RID-TOT-PAID
                      ADD RID-MON-PREM TO TOT-EZPAY-RIDER
                      ADD RID-MON-PREM TO #PREMIUM-EZPAY-MONEY (NAS-X) /* PM25
                      MOVE 'RIDP' TO SG-TRAN
                      MOVE 'RD' TO SG-PLAN
                      MOVE RID-MON-PREM TO SG-AMT
                      PERFORM SUN-LOOP
                    END-IF
                  END-IF
*
*****************************************************************
*            C V T - M B                                        *
*****************************************************************
*
                  RESET SG-PREM SG-DUES
                  MOVE ISSUE-DATE(NAS-X) TO ISS-DT-1-YEAR
                  ADD 1 TO ISS-DT-1-YYYY
                  IF ISS-DT-1-YYYYMM > #C-RUN-DT-YYYYMM
                    MOVE '1Y' TO SG-YEAR
                  ELSE
                    MOVE 'RN' TO SG-YEAR
                  END-IF
                  IF PLAN(NAS-X) = 'OL' OR = '20P' OR = '30P' OR = '7P'
                      OR = 'SO' OR = 'SPF' OR = 'FSO' OR = 'LT' OR = 'RT'
                      OR = 'GPL' OR = 'EZ' OR = 'GP2'                     /* YK4 /* DW27  /* YK6
                    MOVE PLAN(NAS-X) TO SG-PLAN
                  ELSE
*                   IF PLAN-A1(NAS-X) GE 'U' AND PLAN-A1(NAS-X) LE 'Z'    /* YK3
                    IF (F-LT2-TRUE(<PLAN(NAS-X)>))                        /* YK3
                      MOVE 'VT' TO SG-PLAN
                    ELSE
                      MOVE 'FX' TO SG-PLAN
                    END-IF
                  END-IF
                  MOVE 'PREP' TO SG-TRAN
                  IF PLAN(NAS-X) = 'SO'
                    MOVE 'DUEP' TO SG-TRAN
                    MOVE 'SO' TO SG-YEAR
                    MOVE '**' TO SG-PLAN
                  END-IF
*
                  GTP-A.
                  REPEAT
*
                    GTP-B.
                    REPEAT
                      IF POL-WORK-DB-CR NE 0
                        MOVE POL-WORK-DB-CR TO SG-AMT
                        PERFORM SUN-LOOP
                      END-IF
                      MOVE PAID-UP-DATE(NAS-X) TO WORK-DATE
                      IF WORK-YYYY < 1976
                        ADD 100 TO WORK-YYYY
                      END-IF
                      COMPUTE WA-D-PAYUP-TM = (WORK-YY * 12) + WORK-MM
                      IF WORK-DATE > 19991231
                        ADD 1200 TO WA-D-PAYUP-TM
                      END-IF
                      MOVE WORK-YYYYMM TO WA-D-PAYUP-DT-YYYYMM
                      ADD NO-MON TO WA-D-PD-TO-MM
                      IF WA-D-PD-TO-MM > 12
                        SUBTRACT 12 FROM WA-D-PD-TO-MM
                        ADD 1 TO WA-D-PD-TO-YYYY
                      END-IF
** SAG-AB 20060516 changed logic to what it looks like in Cobol
**                        IF NOT (WA-D-PD-TO-YYYYMM < WA-D-PAYUP-DT-YYYYMM')
**                          ESCAPE BOTTOM (GTP-B.)
**                        END-IF
*
* Compare paid-to-date with Paid-up Date if PD-TO lt PD-UP keep going
*                   otherwise quit
                      IF (WA-D-PD-TO-YYYYMM < WA-D-PAYUP-DT-YYYYMM)
                        IGNORE /* GO TO GTP-A
                      ELSE
                        ESCAPE BOTTOM (GTP-B.)
                      END-IF
* was para GTP-A.
                      MOVE PAID-TO-DATE(NAS-X) TO WA-D-PD-TO-DT-YYYYMMDD/ALPHA
                      PERFORM CALC-MODE-PREMIUM
                      PERFORM CALC-DUES
                      IF MODE(NAS-X) = 'E'
                        ADD W-MODE-PREMIUM TO AMT-PRE-AUTH-DEBIT
                        ADD W-MODE-PREMIUM TO #PREMIUM-EZPAY-MONEY (NAS-X)
                        ADD P05P4.SVC-FEE TO AMT-PRE-AUTH-DEBIT
                        ADD P05P4.SVC-FEE TO DUES-TOT-PAID
                        MOVE W-MODE-PREMIUM TO SG-PREM
                        MOVE P05P4.SVC-FEE TO SG-DUES
                        MOVE SG-PREM TO SG-AMT
                        PERFORM SUN-LOOP
                        MOVE 'DUEP' TO SG-TRAN
                        MOVE '**' TO SG-YEAR SG-PLAN
                        MOVE SG-DUES TO SG-AMT
                        PERFORM SUN-LOOP
                      ELSE
                        ADD W-MODE-PREMIUM TO TOTAL-BILL
                        IF WILL-BE-BILLED EQ 'Y'     /* DW10 12/28/2005 DRW/AB
                          ADD P05P4.SVC-FEE TO TOTAL-DUES
                        END-IF                       /* DW10 12/28/2005 DRW/AB
                        IF X-ALT-LP-IND(NAS-X) = '6' AND MODE(NAS-X) = 'M'
                          ADD FIX-ALP-PRN-AMT(NAS-X) TO TOT-MIP-PRIN
                          ADD FIX-ALP-INT-AMT(NAS-X) TO TOT-MIP-INTR
                        END-IF
                        IF WILL-BE-BILLED = 'Y'
                          ADD P05P4.SVC-FEE TO DUES-BALANCE
                        END-IF
                      END-IF
                      IF EXTRA-BILL-SW = 'Y'
                        COMPUTE EXTRA-CALC = MONS-DELQ * (ANNUAL-PREM(NAS-X) / 12)
                        ADD EXTRA-CALC TO EXTRA-BILL
                        ADD EXTRA-CALC TO TOTAL-BILL
                        COMPUTE EXTRA-CALC = MONS-DELQ * ((P05P4.SVC-FEE * W-MODE) / 12)
                        ADD EXTRA-CALC TO EXTRA-DUES
                        ADD EXTRA-CALC TO TOTAL-DUES
                        IF X-ALT-LP-IND(NAS-X) = '6' AND MODE(NAS-X) = 'M'
                          RESET EXTRA-CALC
                          COMPUTE SAVE-LOAN = X-LOAN-AMOUNT(NAS-X) - FIX-ALP-PRN-AMT(NAS-X)
                          COMPUTE #MIP-LOAN-AMT = X-ALT-LP-AMT(NAS-X) * MONS-DELQ /* DW16
                          IF MONS-DELQ = 1 OR = 2 OR = 3                     /* DW16
                            IF #MIP-LOAN-AMT < SAVE-LOAN
                              ADD #MIP-LOAN-AMT TO EXTRA-CALC
                              SUBTRACT #MIP-LOAN-AMT FROM SAVE-LOAN
                            ELSE
                              ADD SAVE-LOAN TO EXTRA-CALC
                              RESET SAVE-LOAN
                            END-IF
                          END-IF                                             /* DW16
*  Below replaced by above on 8/21/2007                        /* DW16
*
*                          IF MONS-DELQ = 1
*                            IF X-ALT-LP-AMT(NAS-X) < SAVE-LOAN
*                              ADD X-ALT-LP-AMT(NAS-X) TO EXTRA-CALC
*                              SUBTRACT X-ALT-LP-AMT(NAS-X) FROM SAVE-LOAN
*                            ELSE
*                              ADD SAVE-LOAN TO EXTRA-CALC
*                              RESET SAVE-LOAN
*                            END-IF
*                          END-IF
*                          IF MONS-DELQ = 2
*                            IF X-ALT-LP-AMT(NAS-X) < SAVE-LOAN
*                              ADD X-ALT-LP-AMT(NAS-X) TO EXTRA-CALC
*                              SUBTRACT X-ALT-LP-AMT(NAS-X) FROM SAVE-LOAN
*                            ELSE
*                              ADD SAVE-LOAN TO EXTRA-CALC
*                              RESET SAVE-LOAN
*                            END-IF
*                          END-IF
*                          IF MONS-DELQ = 3
*                            IF X-ALT-LP-AMT(NAS-X) < SAVE-LOAN
*                              ADD X-ALT-LP-AMT(NAS-X) TO EXTRA-CALC
*                              SUBTRACT X-ALT-LP-AMT(NAS-X) FROM SAVE-LOAN
*                            ELSE
*                              ADD SAVE-LOAN TO EXTRA-CALC
*                              RESET SAVE-LOAN
*                            END-IF
*                          END-IF
*
                          ADD EXTRA-CALC TO EXTRA-MIP-PRIN
                          ADD EXTRA-CALC TO TOT-MIP-PRIN
                        END-IF
                      END-IF
                      IF MODE(NAS-X) = 'E'
                        ADD P05P4.SVC-FEE TO TOT-EZPAY-DUES
                        IF PLAN(NAS-X) = 'SO'
                          ADD W-MODE-PREMIUM TO TOT-EZPAY-DUES-SO
                        END-IF
                      END-IF
                      ESCAPE BOTTOM (GTP-A.)  /* was go to create-reg-notice
                    END-REPEAT /* (GTP-B.)
* was para GTP-B
                    MOVE PAID-TO-DATE(NAS-X) TO WORK-DATE
                    COMPUTE WA-D-PD-TO-TM = (WORK-YY * 12) + WORK-MM
                    IF WORK-DATE > 19991231
                      ADD 1200 TO WA-D-PD-TO-TM
                    END-IF
*
*                   IF WA-D-PD-TO-TM GE WA-D-PAYUP-TM  /* misses mode E DW24
                    IF  (MODE (NAS-X) = 'E')                        /* DW24
                        AND (WA-D-PD-TO-TM GT WA-D-PAYUP-TM)  /* Allow equal
                        OR (MODE (NAS-X) NE 'E')                       /* DW24
                        AND (WA-D-PD-TO-TM GE WA-D-PAYUP-TM)
*                     ESCAPE BOTTOM /* (FORM-H.)              /* EDS-PM 20061006
                      ESCAPE BOTTOM (FORM-H.)                 /* EDS-PM 20061006
                    END-IF
                    PERFORM CALC-MODE-PREMIUM
                    PERFORM CALC-DUES
                    IF   (PLAN(NAS-X) = 'OL ' OR = 'GPL' OR = 'GP2')    /* DW27 /* YK6
                        AND (DATE-OF-BIRTH NE  0)
                      MOVE DOB-DD TO WORK-DD
                    ELSE
                      MOVE ISSUE-DATE-DD(NAS-X) TO WORK-DD
                    END-IF
                    IF ISSUE-DATE(NAS-X) GE 19970101 AND MONTH-ALLOC-AMT(NAS-X) NE 999.99
                      COMPUTE ROUNDED SG-PREM =                   /* DW24
                        ((WA-D-PAYUP-TM - WA-D-PD-TO-TM) * W-MODE-PREMIUM / NO-MON)
                      COMPUTE ROUNDED SG-DUES =                  /* DW24
                        ((WA-D-PAYUP-TM - WA-D-PD-TO-TM) * P05P4.SVC-FEE / NO-MON)
                    ELSE    /* Must ne OlD/NEW
                      IF MODE (NAS-X) = 'E' /* only 1 partial month /* DW24
                        COMPUTE ROUNDED SG-PREM =            /* DW24
                          (WORK-DD - 1) * W-MODE-PREMIUM / NO-DAYS
                        WRITE STATUS-VIEW.ID-NUMBER 'Mode E Partial' SG-PREM
                      ELSE
                        COMPUTE ROUNDED SG-PREM =                   /* DW24
                          (((WA-D-PAYUP-TM - 1 - WA-D-PD-TO-TM) *
                          W-MODE-PREMIUM / NO-MON) + ((WORK-DD - 1) * W-MODE-PREMIUM / NO-DAYS))
                      END-IF
*
                      RESET SG-DUES
                    END-IF
                    IF MODE(NAS-X) = 'E'
                      ADD SG-PREM TO AMT-PRE-AUTH-DEBIT
                      ADD SG-PREM TO #PREMIUM-EZPAY-MONEY (NAS-X)  /* PM25
                      ADD SG-DUES TO AMT-PRE-AUTH-DEBIT
                      ADD SG-DUES TO DUES-TOT-PAID
                      MOVE SG-PREM TO SG-AMT
                      PERFORM SUN-LOOP
                      MOVE 'DUEP' TO SG-TRAN
                      MOVE '**' TO SG-YEAR SG-PLAN
                      MOVE SG-DUES TO SG-AMT
                      PERFORM SUN-LOOP
                    ELSE
                      IF WILL-BE-BILLED = 'Y'
                        ADD SG-PREM TO TOTAL-BILL
                        ADD SG-DUES TO TOTAL-DUES
                        ADD SG-DUES TO DUES-BALANCE
                      END-IF
                    END-IF
                    IF MODE(NAS-X) = 'E'
                      ADD SG-DUES TO TOT-EZPAY-DUES
                      IF PLAN(NAS-X) = 'SO'
                        ADD SG-PREM TO TOT-EZPAY-DUES-SO
                      END-IF
                    END-IF
                    IF MODE(NAS-X) NE 'E'
                      IF PLAN(NAS-X) = 'RT'
                        MOVE 'R' TO LAST-DB-SW
                      ELSE
                        IF LAST-DB-SW NE 'R'
                          MOVE '1' TO LAST-DB-SW
                        END-IF
                      END-IF
                    END-IF
*
                    ESCAPE BOTTOM (GTP-A.)
                  END-REPEAT /* (GTP-A.)
* was para CREATE-REG-NOTICE.
                  MOVE BILL-TO-DATE(NAS-X) TO SAVE-DB-BILL-TO
                  MOVE '1' TO G-RECORD-NEEDED
                  COMPUTE REV-BILL-ADJ = X-BILL-ADJUST(NAS-X) * -1
                  IF REV-BILL-ADJ > TOTAL-BILL AND TOTAL-BILL NE 0
                    PERFORM FORM-BASE-ERROR
                    MOVE 'BILL ADJ EXCEEDS MODE' TO #C-E-MESSAGE(EPR-X)
                  END-IF
                  IF SAVE-DB-YYYYMM = #C-RUN-DT-YYYYMM
*                   IF NOT (PAD-CODE = 'P' OR = 'V' OR = 'W' OR = 'N' OR = 'D' OR = 'X')  /* PM33
                    IF NOT (PAD-CODE = 'P' OR = 'V' OR = 'W' OR = 'N')                    /* PM33
                        AND NOT (PAD-CODE = 'D' OR = 'X' AND OWNERSHIP-FLAG (NAS-X) = 'D')   /* PM33
                      MOVE '1' TO BILL-CODE-SW
                    END-IF
                  END-IF
                  IF SAVE-MODE = 'M'
                    IF CONV-DURATION(NAS-X) = 999 AND SAVE-DB-YYYYMM <= #C-RUN-DT-YYYYMM
                      MOVE '1' TO BILL-CODE-SW
                    ELSE
                      RESET BILL-CODE-SW
                    END-IF
                  END-IF
                  IF (SAVE-MODE = 'A' OR = 'S' OR = 'Q')  AND
*
                      (((ISSUE-DATE(NAS-X) GE 19970101)        /* #1 Early NXT Delqs
                      AND (MONTH-ALLOC-AMT(NAS-X) NE 999.99)
                      AND (SAVE-DB-YYYYMM = LAST-MON-YYYYMM)
                      AND (ISSUE-DATE-DD(NAS-X) > 1)
                      AND (ISSUE-DATE-DD(NAS-X) < 17))
*  BELOW PUT IN FOR 6/1/2006                                   /* #2 2-mon NXT DElqs
                      OR   ((ISSUE-DATE (NAS-X) GE 19970101)       /* DW13-AB 05172006
                      AND (MONTH-ALLOC-AMT (NAS-X) NOT = 999.99)   /* DW13-AB 05172006
                      AND (SAVE-DB-YYYYMM = P05P4.DUE-DATE-FOR-REMINDER) /* DW13-AB
                      AND ((ISSUE-DATE-DD (NAS-X) = 1)             /* DW13-AB 05172006
                      OR (ISSUE-DATE-DD (NAS-X) GREATER THAN 16))) /* DW13-AB 05172006
*
                      OR  ((ISSUE-DATE(NAS-X) GE 19970101) /* #3 Forced CAP Delqs DW20
                      AND (MONTH-ALLOC-AMT(NAS-X) NE 999.99)  /* In 1st & 2nd Months
                      AND (SAVE-DB-YYYYMM = LAST-MON-YYYYMM
                      OR = P05P4.DUE-DATE-FOR-REMINDER)
                      AND (CONV-DURATION (NAS-X) = 999))                             /* DW20
*
*                     or  ((ISSUE-DATE(NAS-X) GE 19970101) /* #4 Forced Non-CAP Delqs DW22
*                     AND (MONTH-ALLOC-AMT(NAS-X) NE 999.99)  /* In 1st & 2nd Months
*                     AND (SAVE-DB-YYYYMM = LAST-MON-YYYYMM   /* Removed 1/31/2008 prior to M/E
*                                       or = P05P4.DUE-DATE-FOR-REMINDER)
*                     AND (conv-duration (nas-x) ne 999))                             /* DW20
*
                      OR (((ISSUE-DATE(NAS-X) < 19970101) /* #5 2-mon OLD/NEW Delqs
                      OR (MONTH-ALLOC-AMT(NAS-X) = 999.99))
                      AND (SAVE-DB-YYYYMM = P05P4.DUE-DATE-FOR-REMINDER)) /* Removed 1/31/2008
*                             or = last-mon-yyyymm)))  /* Removed 1/31/2008 DW22/DW23
*
                      OR ((STOP-DATE = #C-RUN-DT-YYYYMMDD)    /* #6 1/2-mon Delqs      DW23
                      AND (SAVE-DB-YYYYMM = P05P4.DUE-DATE-FOR-REMINDER /* whiched stopped
                      OR = LAST-MON-YYYYMM)))         /* DW23
*
*                   IF NOT (PAD-CODE = 'P' OR = 'V' OR = 'W' OR = 'N' OR = 'D' OR = 'X')
                    IF NOT (PAD-CODE = 'P' OR = 'V' OR = 'W' OR = 'N')                    /* PM33
                        AND NOT (PAD-CODE = 'D' OR = 'X' AND OWNERSHIP-FLAG (NAS-X) = 'D')   /* PM33
                      MOVE 'R' TO BILL-CODE-SW
                    END-IF
                  END-IF
                  IF (SAVE-MODE = 'A' OR = 'S' OR = 'Q')
                      AND SAVE-DB-YYYYMM < P05P4.DUE-DATE-FOR-REMINDER
                      AND ID-NUMBER NE LAST-DELQ-CN
                    MOVE ID-NUMBER TO LAST-DELQ-CN
                    MOVE 'O' TO BILL-CODE-SW
                  END-IF
                  IF SAVE-MODE = 'A'
                    MOVE 1 TO IS-MODE
                  ELSE
                    IF SAVE-MODE = 'S'
                      MOVE 2 TO IS-MODE
                    ELSE
                      IF SAVE-MODE = 'Q'
                        MOVE 4 TO IS-MODE
                      ELSE
                        MOVE 12 TO IS-MODE
                      END-IF
                    END-IF
                  END-IF
**                IF SAVE-DB-DATE < #C-RUN-DT-YYYYMMDD AND                  /* SAG-AB 20060925 START
**                    (SAVE-MODE = 'A' OR = 'S' OR = 'Q' OR = 'M') AND
**                    ((IS-MODE = 1 OR = 2 OR = 4 OR = 12) AND CONV-DURATION(NAS-X) = 999)
                  IF (SAVE-DB-DATE < #C-RUN-DT-YYYYMMDD)
                      AND (SAVE-MODE = 'A' OR = 'S' OR = 'Q' OR = 'M')
                      AND (IS-MODE = 1 OR = 2 OR = 4 OR (IS-MODE = 12 AND CONV-DURATION(NAS-X) = 999))
**                                                                          /* SAG-AB 20060925 END
                    MOVE SAVE-DB-DATE TO IS-PD-THRU
                    PERFORM CALC-PREM-PMT-MONS
                    IF (#C-RUN-DT-MM = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2) OR = IS-PRM-PD-MON(3)
                        OR = IS-PRM-PD-MON(4)) OR SAVE-MODE = 'M'
                      MOVE '1' TO EXTRA-BILL-CODE-SW BILL-CODE-SW
                    END-IF
                  END-IF
                  IF BILL-CODE-SW = '1'
                    IF TOTAL-BILL < 0
                      PERFORM FORM-BASE-ERROR
                      RESET BILL-CODE-SW
                      MOVE 'COMPUTED BILL MINUS FILE ERROR' TO #C-E-MESSAGE(EPR-X)
                    END-IF
                    IF X-BILL-ADJUST(NAS-X) >
                        (TOTAL-BILL + TOTAL-RIDER + TOTAL-DUES + TOT-MIP-PRIN + TOT-MIP-INTR)
                      PERFORM FORM-BASE-ERROR
                      MOVE 'BILL ADJ EXCEEDS SCHEDULED AMT DUE' TO #C-E-MESSAGE(EPR-X)
                    END-IF
                  END-IF
*
*****************************************************************
*            T O T A L - B I L L  - C H E C K                   *
*****************************************************************
*
                  IF TOTAL-BILL = 0 AND TOTAL-DUES = 0 AND TOTAL-RIDER = 0 AND TOT-MIP-PRIN = 0 AND TOT-MIP-INTR = 0
                    RESET BILL-CODE-SW
                  END-IF
                  MOVE BILL-CODE-SW TO REMINDER-NOTICE-SWITCH
*
                  ESCAPE BOTTOM
                END-REPEAT /* (FORM-H.)
*
*****************************************************************
*                                                               *
*  F O R M - H - DIRECT BILL REGISTER (BILL ADJUST AMT NOT = 0  *
*                                                               *
*****************************************************************
*
                MOVE NAS-X TO NAS-Z
                MOVE BILL-CODE-SW TO TIN1-P4-DIRECT-BILCOD
                MOVE 'G' TO TIN1-P4-DIRECT-SECT
*
                MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID  #CONTACT-ID-R     /* vt1 \/
                #NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
                COMPRESS #FIRST-NAME #MIDDLE-NAME #LAST-NAME INTO TIN1-P4-DIRECT-NAME
*               MOVE STATUS-VIEW.NAME TO TIN1-P4-DIRECT-NAME                        /* vt1 /\
*
                MOVE 'CN' TO TIN1-P4-DIRECT-CN-NUMBER/ALPHA
                MOVE ID-NUMBER TO TIN1-P4-DIRECT-ID
*
                CALLNAT 'RANKn001' #PDA-RANK
                TIN1-P4-DIRECT-RANK :=  #RANK-ABBR
*               MOVE RANK TO TIN1-P4-DIRECT-RANK                                    /* vt1
*
                MOVE MILITARY-STATUS TO TIN1-P4-DIRECT-RET
                MOVE SAVE-MODE TO TIN1-P4-DIRECT-MODE
** SAG-AB 20060504 AB2 START
** Correction for overflows of total bill and bill adjustments
                IF TOTAL-BILL GT 9999.99 OR TOTAL-BILL LT -9999.99
                  DIVIDE 1000000 INTO TOTAL-BILL
                    GIVING #QUOT REMAINDER TIN1-P4-DIRECT-PREM
                ELSE
                  MOVE TOTAL-BILL TO TIN1-P4-DIRECT-PREM
                END-IF
                MOVE TOTAL-DUES TO TIN1-P4-DIRECT-DUES
                IF X-BILL-ADJUST(NAS-X) GT 9999.99 OR X-BILL-ADJUST(NAS-X) LT -9999.99
                  DIVIDE 1000000 INTO X-BILL-ADJUST(NAS-X)
                    GIVING #QUOT REMAINDER TIN1-P4-DIRECT-ADJ
                ELSE
                  MOVE X-BILL-ADJUST(NAS-X) TO TIN1-P4-DIRECT-ADJ
                END-IF
** SAG-AB 20060504 AB2 END
                RESET TIN1-P4-DIRECT-BILLED
                COMPUTE TIN1-P4-DIRECT-PDTO = (SAVE-DB-YY * 12) + SAVE-DB-MM
                COMPUTE TIN1-P4-DIRECT-BLTO = (SAVE-DB-BILL-TO-YY * 12) + SAVE-DB-BILL-TO-MM
                MOVE DAU-MM TO TIN1-P4-DIRECT-LACTMM
                MOVE DAU-DD TO TIN1-P4-DIRECT-LACTDD
                MOVE DAU-YY TO TIN1-P4-DIRECT-LACTYY
                MOVE DOU-MM TO TIN1-P4-DIRECT-LOTHMM
                MOVE DOU-DD TO TIN1-P4-DIRECT-LOTHDD
                MOVE DOU-YY TO TIN1-P4-DIRECT-LOTHYY
                IF X-BILL-ADJUST(NAS-X) NE 0
                  MOVE 'K' TO RETURN-SWITCH
*                                                                     NG1      Start
                  IF #MATCH-ID > 0                 /* Premier service exist
                    IF #MATCH-ID > 9               /* No perfect match
                      #MATCH-ID := NAS-X           /* Force match
                    END-IF
                    IF NAS-X = #MATCH-ID           /* Perfect match
                      #REQUEST := 'PAYMENT'
                      CALLNAT 'SVCN0004'
                        ID-NUMBER
                        #C-RUN-DT-YYYYMM
                        MODE (*)
                        PAID-TO-DATE (*)
                        #MATCH-ID
                        #PS-DUES
                        #REQUEST
                        #SVC-MEMBER
                      ADD #PS-DUES TO TIN1-P4-DIRECT-DUES
                    END-IF
                  END-IF                                         /*  NG1      End
                  PERFORM END-WITH-MORE-WRITE
                END-IF
*
                ESCAPE BOTTOM
              END-REPEAT /* (FORM-K.)
*
*****************************************************************
*                                                               *
*           F O R M - K - REMINDER  NOTICE                      *
*                                                               *
*****************************************************************
*
              MOVE NAS-X TO NAS-Z
              RESET RETURN-SWITCH
              IF REMINDER-NOTICE-SWITCH NE 'R'
                ESCAPE BOTTOM (FORM-L.)
              END-IF
              RESET REMINDER-NOTICE-SWITCH
              MOVE 'E' TO TIN1-P4-SECT
              RESET TIN1-P4-SUB-SECT
              MOVE 'E' TO TIN1-P4-OLD-SECT
              PERFORM FORM-BASE
              IF MILITARY-STATUS = 'A' AND (MILITARY-SERVICE = 'A' OR = 'F')
                MOVE '2' TO TIN1-P4-SUB-SECT
              ELSE
                MOVE '1' TO TIN1-P4-SUB-SECT
              END-IF
*
              RESET L-TYPE
              PERFORM FIND-ADDRESS
*              IF TIN1-P4-ZIP = ' ' OR SAVE-PU-DATE < RUN-DATE-PLUS-2YRS                   /* vt1
              IF TIN1-P4-ZIP = 0 OR SAVE-PU-DATE < RUN-DATE-PLUS-2YRS                   /* vt1
                MOVE '3' TO TIN1-P4-SUB-SECT
              END-IF
              IF PLAN(1) = 'SO' OR = 'FSO'
                MOVE 'Y' TO TIN1-P4-SVC-ONLY
              ELSE
                RESET TIN1-P4-SVC-ONLY
              END-IF
              MOVE TOTAL-BILL TO TIN1-P4-BILLPREM
              MOVE X-BILL-ADJUST(NAS-X) TO TIN1-P4-PREMADJ
              MOVE TOTAL-DUES TO TIN1-P4-BILLDUES
              MOVE TOTAL-RIDER TO TIN1-P4-BILLRIDER
              RESET TIN1-P4-BILL-EXTRA
*
              IF (TIN1-P4-BILLPREM + TIN1-P4-PREMADJ
                  + TIN1-P4-BILLDUES + TIN1-P4-BILLRIDER) > 0
                MOVE ISSUE-DATE(NAS-X) TO TIN1-P4-EFF-DT
                MOVE PLAN(NAS-X) TO TIN1-P4-PLAN
                MOVE DDFR-P-YY TO TIN1-P4-DUEDT4-YY
                MOVE DDFR-P-MM TO TIN1-P4-DUEDT4-MM
                IF APL-CNT > 99                  /* YAK 01/12/20
                  MOVE 99 TO TIN1-P4-APL         /* FIX FOR TRUNCATION
                ELSE
                  MOVE APL-CNT TO TIN1-P4-APL
                END-IF
                MOVE SAVE-MODE TO TIN1-P4-MODE TIN1-P4-GEN-MODE
                SUBTRACT TIN1-P4-BILLPREM FROM REMAINING-CSV
                SUBTRACT TIN1-P4-PREMADJ FROM REMAINING-CSV
                SUBTRACT TIN1-P4-BILLDUES FROM REMAINING-CSV
                SUBTRACT TIN1-P4-BILLRIDER FROM REMAINING-CSV
                IF REMAINING-CSV < 0 OR HAS-TERM = 'Y'
                  MOVE 'L' TO TIN1-P4-PRM-DU-APL-LAPS
                ELSE
                  MOVE 'A' TO TIN1-P4-PRM-DU-APL-LAPS
                END-IF
                MOVE 'L' TO RETURN-SWITCH
*                                                                     NG1  Start
                IF #MATCH-ID > 0                 /* Premier service exist
                  IF #MATCH-ID > 9               /* No perfect match
                    #MATCH-ID := NAS-X           /* Force match
                  END-IF
                  IF NAS-X = #MATCH-ID           /* Perfect match
                    #REQUEST := 'PAYMENT'
                    CALLNAT 'SVCN0004'
                      ID-NUMBER
                      #C-RUN-DT-YYYYMM
                      MODE (*)
                      PAID-TO-DATE (*)
                      #MATCH-ID
                      #PS-DUES
                      #REQUEST
                      #SVC-MEMBER
                    ADD #PS-DUES TO TIN1-P4-BILLDUES
                  END-IF
                END-IF                                           /*  NG1      End
                PERFORM END-WITH-MORE-WRITE
              END-IF
*
              ESCAPE BOTTOM
            END-REPEAT /* (FORM-L.)
*
*****************************************************************
*                                                               *
*       F O R M - L -  DIRECT BILL  PREMIUM DUE NOTICE.         *
*                                                               *
*****************************************************************
*
            MOVE NAS-X TO NAS-Z
            IF BILL-CODE-SW NE '1' OR (SAVE-MODE = 'M' AND CONV-DURATION(NAS-X) NE 999)
              MOVE TRUE TO RESTART-G
              ESCAPE TOP    /* (END-G.)   SAG-AB 20060516
            END-IF
            RESET TIN1-P4-BILL-EXTRA
            MOVE TOTAL-BILL TO TIN1-P4-BILLPREM
            MOVE X-BILL-ADJUST(NAS-X) TO TIN1-P4-PREMADJ
            MOVE TOTAL-DUES TO TIN1-P4-BILLDUES
            MOVE TOTAL-RIDER TO TIN1-P4-BILLRIDER
            IF EXTRA-BILL-CODE-SW NE ' '
              ADD X-BILL-ADJUST(NAS-X) TO EXTRA-BILL
              COMPUTE TIN1-P4-BILL-EXTRA = EXTRA-BILL + EXTRA-DUES
                + EXTRA-RIDER + EXTRA-MIP-PRIN + EXTRA-MIP-INTR
            END-IF
            MOVE TOT-MIP-PRIN TO TIN1-P4-BILL-PRIN
            MOVE TOT-MIP-INTR TO TIN1-P4-BILL-INTR
            COMPUTE TIN1-P4-P-I = X-LOAN-AMOUNT (NAS-X)            /* DW17
              + X-ACCUM-INTEREST (NAS-X)
*
            MOVE ISSUE-DATE(NAS-X) TO TIN1-P4-EFF-DT
            MOVE PLAN(NAS-X) TO TIN1-P4-PLAN
            IF PLAN(1) = 'SO' OR PLAN(1) = 'FSO'
              MOVE 'Y' TO TIN1-P4-SVC-ONLY
            ELSE
              RESET TIN1-P4-SVC-ONLY
            END-IF
            IF (TIN1-P4-BILLPREM + TIN1-P4-PREMADJ
                + TIN1-P4-BILLDUES + TIN1-P4-BILLRIDER
                + TIN1-P4-BILL-PRIN + TIN1-P4-BILL-INTR) LE 0   /* 04262006  DW12-AB
              MOVE TRUE TO RESTART-G
              ESCAPE TOP     /* (END-G.)   SAG-AB 20060516
            END-IF
            MOVE TIN1-P4-BILLPREM TO X-BILL-DOLLAR(NAS-X)
            ADD TIN1-P4-PREMADJ TO X-BILL-DOLLAR(NAS-X)
            ADD TIN1-P4-BILL-PRIN TO X-BILL-DOLLAR(NAS-X)
            ADD TIN1-P4-BILL-INTR TO X-BILL-DOLLAR(NAS-X)
            ADD TIN1-P4-BILLDUES TO X-BILL-DOLLAR(NAS-X)
            ADD TIN1-P4-BILLRIDER TO X-BILL-DOLLAR(NAS-X)
            PERFORM FORM-BASE
            MOVE 'P' TO TIN1-P4-SECT
            IF MILITARY-STATUS = 'A' AND (MILITARY-SERVICE = 'A' OR = 'F')
              MOVE '2' TO TIN1-P4-SUB-SECT
            ELSE
              MOVE '1' TO TIN1-P4-SUB-SECT
            END-IF
*
            MOVE 'P' TO TIN1-P4-OLD-SECT
            RESET L-TYPE
            PERFORM FIND-ADDRESS
*            IF TIN1-P4-ZIP = ' ' OR SAVE-PU-DATE < RUN-DATE-PLUS-2YRS               /* vt1
            IF TIN1-P4-ZIP = 0 OR SAVE-PU-DATE < RUN-DATE-PLUS-2YRS               /* vt1
              MOVE '3' TO TIN1-P4-SUB-SECT
            END-IF
*
            IF PAID-TO-YYYYMM (NAS-X) LE P05P4.DUE-DATE-FOR-REMINDER         /* DW18
              MOVE #C-RUN-DT-YY TO TIN1-P4-DUEDT4-YY
              MOVE #C-RUN-DT-MM TO TIN1-P4-DUEDT4-MM
            ELSE
              MOVE DDFN-YY TO TIN1-P4-DUEDT4-YY
              MOVE DDFN-MM TO TIN1-P4-DUEDT4-MM
            END-IF
*
            MOVE SAVE-MODE TO TIN1-P4-MODE TIN1-P4-GEN-MODE
            MOVE LAST-DB-SW TO TIN1-P4-PUSW
            IF APL-CNT > 99                  /* YAK 01/12/20
              MOVE 99 TO TIN1-P4-APL         /* FIX FOR TRANCATION
            ELSE
              MOVE APL-CNT TO TIN1-P4-APL
            END-IF
            MOVE 'M' TO RETURN-SWITCH
*                                                                     NG1  Start
            IF #MATCH-ID > 0                 /* Premier service exist
              IF #MATCH-ID > 9               /* No perfect match
                #MATCH-ID := NAS-X           /* Force match
              END-IF
              IF NAS-X = #MATCH-ID           /* Perfect match
                #REQUEST := 'PAYMENT'
                CALLNAT 'SVCN0004'
                  ID-NUMBER
                  #C-RUN-DT-YYYYMM
                  MODE (*)
                  PAID-TO-DATE (*)
                  #MATCH-ID
                  #PS-DUES
                  #REQUEST
                  #SVC-MEMBER
                ADD #PS-DUES TO TIN1-P4-BILLDUES /* TIN1-P4-DIRECT-DUES
              END-IF
            END-IF                                                /*  NG1  End
            PERFORM END-WITH-MORE-WRITE  /* gets back to check-for-g
*
          END-REPEAT /* (END-G.)
*
*****************************************************************
*                                                               *
*              E N D - G                                        *
*                                                               *
*****************************************************************
*
          IF PAD-CODE = 'P'
            MOVE 'P' TO DOING-PRENOTE-SWITCH
            PERFORM WRITE-PRE-AUTH-DETAIL
            RESET DOING-PRENOTE-SWITCH
            MOVE 'V' TO PAD-CODE
          END-IF
          IF PAD-CODE = 'D'
            MOVE 'P' TO DOING-PRENOTE-SWITCH
            PERFORM WRITE-PRE-AUTH-DETAIL
            RESET DOING-PRENOTE-SWITCH
            MOVE 'X' TO PAD-CODE
          END-IF
          IF PAD-CODE = 'N'
            MOVE 'P' TO DOING-PRENOTE-SWITCH
            PERFORM WRITE-PRE-AUTH-DETAIL
            RESET DOING-PRENOTE-SWITCH
            MOVE 'W' TO PAD-CODE
          END-IF
          IF PAD-CODE = 'L'
            MOVE 'P' TO DOING-PRENOTE-SWITCH
            PERFORM WRITE-PRE-AUTH-DETAIL
            RESET DOING-PRENOTE-SWITCH
            MOVE 'Z' TO PAD-CODE
          END-IF
          IF P4 NE '4'
            PERFORM END-WITH-NO-WRITE
          END-IF
          ADD AMT-PRE-AUTH-DEBIT TO TOT-EZPAY-PREMS
*
          PERFORM PREMIER-SERVICES-EZPAY                           /* PM99
*
          IF NEW-PAD = 'Y'
            MOVE 'E' TO PAD-CODE
          END-IF
*
          RESET TOT-AMT NAS-X
*
          REPEAT
            ADD 1 TO NAS-X
            IF NAS-X > 9
              ESCAPE BOTTOM
            END-IF
*
            IF pad-code = 'E' AND (pad-aba-nbr = ' ' OR pad-acct-num = ' ')            /* vt2 \/
              PERFORM FORM-BASE-ERROR
              MOVE 'PAD CODE is ''E'', but no BANK ACCOUNT' TO #C-E-MESSAGE(EPR-X)
              PERFORM CREATE-EIL-EMAIL-FILE
            END-IF                                                                    /* vt2  /\
*
            IF PAD-CODE = 'E' AND X-ALT-LP-IND(NAS-X) = 'E'        /* PM26
              MOVE ID-NUMBER TO #CN                                /* PM29
              RESET #BRIDGER-FLAG                                  /* PM29
              FIND (1) ST-V WITH MEMBER-KEY = #CN-A                /* PM29
                #BRIDGER-FLAG := ST-V.BRIDGER-IND                  /* PM29
              END-FIND                                             /* PM29
*
              IF #BRIDGER-FLAG = 'Y'                               /* PM29
                MOVE 'APFP' TO SG-TRAN                             /* PM26
                MOVE ISSUE-DATE (NAS-X) TO ISS-DT-1-YEAR           /* PM26
                ADD 1 TO ISS-DT-1-YYYY                             /* PM26
                IF ISS-DT-1-YYYYMM > #C-RUN-DT-YYYYMM              /* PM26
                  MOVE '1Y' TO SG-YEAR                             /* PM26
                ELSE                                               /* PM26
                  MOVE 'RN' TO SG-YEAR                              /* PM26
                END-IF                                            /* PM26
                SG-AMT := X-ALT-LP-AMT (NAS-X)                     /* PM26
                ADD X-ALT-LP-AMT (NAS-X) TO TOT-AMT                /* PM26
                ADD X-ALT-LP-AMT (NAS-X) TO EZPAY-CAP-LOAN-AMOUNT  /* PM26
                PERFORM SUN-LOOP                                   /* PM26
                PERFORM FORM-BASE-ERROR                            /* PM26
                MOVE 'EIL DRAFTED, WAITING FOR BANK VERIFICATION'  /* PM26
                  TO #C-E-MESSAGE(EPR-X)                         /* PM26
                PERFORM CREATE-EIL-EMAIL-FILE                      /* PM26
              ELSE                                                 /* PM29
                PERFORM FORM-BASE-ERROR                            /* PM29
                MOVE 'EIL SKIPPED, INVALID BRIDGER VERIFICATION'   /* PM29
                  TO #C-E-MESSAGE(EPR-X)                         /* PM29
              END-IF                                               /* PM29
            END-IF                                                 /* PM26
*
*           IF NEW-PAD = 'Y' AND X-ALT-LP-IND(NAS-X) = '6'         /* PM32
*             MOVE '4' TO X-ALT-LP-IND(NAS-X)                      /* PM32
*           END-IF                                                 /* PM32
*
            IF PAD-CODE = 'E' AND
                (X-ALT-LP-IND(NAS-X) = '3' OR X-ALT-LP-IND(NAS-X) = '4')
              ADD X-ALT-LP-AMT(NAS-X) TO TOT-AMT
              MOVE '**' TO SG-YEAR SG-PLAN
              IF CONV-DURATION(NAS-X) = 999
                MOVE 'CP' TO SG-YEAR
              END-IF
              MOVE 'PRNF' TO SG-TRAN
              MOVE FIX-ALP-PRN-AMT(NAS-X) TO SG-AMT
              PERFORM SUN-LOOP
              MOVE 'INTF' TO SG-TRAN
              MOVE FIX-ALP-INT-AMT(NAS-X) TO SG-AMT
              PERFORM SUN-LOOP
            END-IF
            MOVE '**' TO SG-YEAR SG-PLAN
            IF PAD-CODE = 'E' AND
                (X-ALT-LP-IND-2(NAS-X) = '3' OR = '4')
              ADD X-ALT-LP-AMT-2(NAS-X) TO TOT-AMT
              MOVE 'PRNV' TO SG-TRAN
              MOVE VAR-ALP-PRN-AMT(NAS-X) TO SG-AMT
              PERFORM SUN-LOOP
              MOVE 'INTV' TO SG-TRAN
              MOVE VAR-ALP-INT-AMT(NAS-X) TO SG-AMT
              PERFORM SUN-LOOP
            END-IF
          END-REPEAT
*
          ALP-LOOP-1-XIT.
          REPEAT
            IF #EZPAY-LOAN-OVERFLOW < 0
              ADD #EZPAY-LOAN-OVERFLOW TO TOT-AMT
              IF #EZPAY-LOAN-OVERFLOW NE 0
                WRITE ID-NUMBER ' EZ-LON OVRFLO ' #EZPAY-LOAN-OVERFLOW ' TOT= ' TOT-AMT
              END-IF
            END-IF
            IF TOT-AMT NE 0
              ADD TOT-AMT TO AMT-PRE-AUTH-DEBIT
            END-IF
*
            PERFORM EZPAY-START                                            /* PM25
*
            IF NEW-PAD NE 'Y'
              ESCAPE BOTTOM (ALP-LOOP-1-XIT.)
            END-IF
*
            FOR NAS-Y = 1 TO 9
              PERFORM ACCUMULATE-ACV
            END-FOR
            ADD EZPAY-FUTURE-AMT TO AMT-PRE-AUTH-DEBIT
**          MOVE AMT-PRE-AUTH-DEBIT TO PAD-AMT-2                           /* EDS - 08/31/2006
            MOVE EDITED AMT-PRE-AUTH-DEBIT (EM=Z,ZZ9.99) TO PAD-AMT-2      /* EDS - 08/31/2006
            MOVE LEFT PAD-AMT-2 TO PAD-AMT-2                               /* EDS - 08/31/2006
            COMPRESS '$' PAD-AMT-2 INTO PAD-AMT-2 LEAVING NO               /* EDS - 08/31/2006
            MOVE RIGHT PAD-AMT-2 TO PAD-AMT-2                              /* EDS - 08/31/2006
*
            SUBTRACT EZPAY-FUTURE-AMT FROM AMT-PRE-AUTH-DEBIT
            IF REV-DB-CR LE AMT-PRE-AUTH-DEBIT
              SUBTRACT REV-DB-CR FROM AMT-PRE-AUTH-DEBIT                  /* PM25
              SUBTRACT REV-DB-CR FROM TOT-EZPAY-PREMS                     /* PM25
*              ADD DEBIT-CREDIT-AMT TO AMT-PRE-AUTH-DEBIT                  /* PM25
*              ADD DEBIT-CREDIT-AMT TO TOT-EZPAY-PREMS                     /* PM25
*              RESET DEBIT-CREDIT-AMT                                      /* PM25
            ELSE
              IF (AMT-PRE-AUTH-DEBIT NE 0) OR (REV-DB-CR NE 0)
                WRITE ID-NUMBER ' PAD REMOVED  DB/CR= ' DEBIT-CREDIT-AMT ' ' AMT-PRE-AUTH-DEBIT ' ' REV-DB-CR
                MOVE 'PREP' TO SG-TRAN
                MOVE 'DC' TO SG-YEAR
                MOVE '**' TO SG-PLAN
*               COMPUTE SG-AMT = DEBIT-CREDIT-AMT + AMT-PRE-AUTH-DEBIT
                COMPUTE SG-AMT = REV-DB-CR - AMT-PRE-AUTH-DEBIT            /* PM25
                COMPUTE SG-AMT = SG-AMT * -1
                PERFORM SUN-LOOP
                SUBTRACT SG-AMT FROM DEBIT-CREDIT-AMT                      /* PM25
*               ADD AMT-PRE-AUTH-DEBIT TO DEBIT-CREDIT-AMT
*               SUBTRACT AMT-PRE-AUTH-DEBIT FROM TOT-EZPAY-PREMS
                IF AMT-PRE-AUTH-DEBIT NE 0
                  WRITE ID-NUMBER ' EZ SUB PREMS' AMT-PRE-AUTH-DEBIT ' ' TOT-EZPAY-PREMS
                END-IF
                RESET AMT-PRE-AUTH-DEBIT
              END-IF
            END-IF
*
            PERFORM FORM-BASE-ERROR                      /* DW30/DW31
**          MOVE AMT-PRE-AUTH-DEBIT TO PAD-AMT-1                         /* EDS - 08/31/2006
            MOVE EDITED AMT-PRE-AUTH-DEBIT (EM=ZZ,ZZ9.99) TO PAD-AMT-1   /* EDS - 08/31/2006
            MOVE LEFT PAD-AMT-1 TO PAD-AMT-1                             /* EDS - 08/31/2006
            COMPRESS '$' PAD-AMT-1 INTO PAD-AMT-1 LEAVING NO             /* EDS - 08/31/2006
            MOVE RIGHT PAD-AMT-1 TO PAD-AMT-1                            /* EDS - 08/31/2006
            MOVE PRE-AUTH-MSG/ALPHA TO #C-E-MESSAGE(EPR-X)  /* DW30/DW31 /* SAG-AB 09/08/2006
            ESCAPE BOTTOM (ALP-LOOP-1-XIT.)
          END-REPEAT /* (ALP-LOOP-1-XIT.)
*
          RESET HOLD-TR-RG-CODE
          IF ((AMT-PRE-AUTH-DEBIT NE 0) OR (HAS-MODE-E = 'N')) AND
              (AMT-PRE-AUTH-DEBIT NE PAD-LAST-MON-AMT)
            IF PAD-LAST-MON-AMT = 0
              MOVE 'STRT' TO HOLD-TR-RG-CODE
              MOVE AMT-PRE-AUTH-DEBIT TO HOLD-TR-RG-CRDT
              RESET HOLD-TR-RG-DEBT
            ELSE
              MOVE 'ADJ ' TO HOLD-TR-RG-CODE
              RESET HOLD-TR-RG-CRDT
              COMPUTE HOLD-TR-RG-DEBT = AMT-PRE-AUTH-DEBIT - PAD-LAST-MON-AMT
            END-IF
          END-IF
          IF ((AMT-PRE-AUTH-DEBIT NE 0 OR HAS-MODE-E = 'N')
              AND (AMT-PRE-AUTH-DEBIT NE PAD-LAST-MON-AMT))
            RESET TRANS-REG-REC
            MOVE 'B' TO TR-RG-TR-TYP
            MOVE 'CN' TO TR-RG-ID-CN
            MOVE ID-NUMBER TO TR-RG-ID
            MOVE HOLD-TR-RG-CODE TO TR-RG-CODE
*
            MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID                    /* vt1 \/
            #NAME-F :=FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
            COMPRESS #FIRST-NAME #MIDDLE-NAME #LAST-NAME INTO TR-RG-NAME
*            MOVE STATUS-VIEW.NAME TO TR-RG-NAME                                 /* vt1 /\
*
            MOVE 'EDS' TO TR-RG-CLERK
            MOVE DAU-MM TO MM
            MOVE DAU-DD TO DD
            MOVE DAU-YY TO YY
            MOVE MMDDYY-N TO TR-RG-LDTE
            MOVE HOLD-TR-RG-CRDT TO TR-RG-CRDT
            MOVE HOLD-TR-RG-DEBT TO TR-RG-DEBT
            MOVE '445' TO TR-RG-NUM
            MOVE #C-RUN-DT-YYYYMMDD TO DATE-ACCT-UPDATE
            MOVE #C-RUN-DT-MM TO MM
            MOVE #C-RUN-DT-DD TO DD
            MOVE #C-RUN-DT-YY TO YY
*           MOVE MMDDYY-N TO TR-RG-DATE                     /* EDS-PM 08252006
            MOVE EDITED MMDDYY-N (EM=999999) TO TR-RG-DATE  /* EDS-PM 08252006
            MOVE TRANS-REG-REC/ALPHA TO #C-REPORT-RECORD
            MOVE 'Z' TO RETURN-SWITCH
            MOVE 1 TO #C-OUTGOING-FLAG
            ESCAPE MODULE
          END-IF
*
          ESCAPE BOTTOM
        END-REPEAT /* (CONTINUE-PAD-1.)
*
        RESET RETURN-SWITCH
        IF (AMT-PRE-AUTH-DEBIT NE 0 OR HAS-MODE-E = 'N')
          MOVE AMT-PRE-AUTH-DEBIT TO PAD-LAST-MON-AMT
        END-IF
        IF AMT-PRE-AUTH-DEBIT > 0
          PERFORM WRITE-PRE-AUTH-DETAIL
        END-IF
*
        RESET NAS-X
*
        ESCAPE BOTTOM
      END-REPEAT /* (FORM-M-LOOP.)
*
*****************************************************************
*                                                               *
*              F O R M - M - LOAN NOTICE.                       *
*                                                               *
*****************************************************************
* was para FORM-M-LOOP
      REPEAT
        ADD 1 TO NAS-X
        RESET PROCESS-MBR-FLAG
        IF NAS-X > 9
          ESCAPE BOTTOM (SECONDARY-PROCESS.)
        END-IF
        IF X-LOAN-DATE(NAS-X) = 0 AND X-LOAN-DATE-2(NAS-X) = 0
          ESCAPE TOP
        END-IF
        RESET CSV NET-GROWTH
        ADD CASH-VALUE(NAS-X) TO CSV
        MOVE NAS-X TO PRM-X
        IF PAY-STATUS(NAS-X) > '40' OR (MODE(NAS-X) = 'G' OR = 'E' OR = '0' OR = 'M')
          COMPUTE NET-GROWTH = (CASH-VALUE(NAS-X) - NXT-MON-CASH-VALUE(NAS-X))
        END-IF
        IF CONV-DURATION(NAS-X) NE 999
          SUBTRACT X-LOAN-AMOUNT(NAS-X) FROM CSV
          SUBTRACT X-ACCUM-INTEREST(NAS-X) FROM CSV
        END-IF
        SUBTRACT X-LOAN-AMOUNT-2(NAS-X) FROM CSV
        SUBTRACT X-ACCUM-INTEREST-2(NAS-X) FROM CSV
        MOVE '2' TO HOLD-SECT
        RESET MONS-LEFT HOLD-MONS-LEFT
        ESCAPE BOTTOM
      END-REPEAT
*
      REPEAT
        IF X-LOAN-DATE(NAS-X) = 0
            OR CONV-DURATION (NAS-X) = 999   /* SAG-AB 20060809
          ESCAPE BOTTOM
        END-IF
        IF X-LOAN-AMOUNT(NAS-X) = 0
          IF X-ACCUM-INTEREST(NAS-X) > 5.00 OR X-ACCUM-INTEREST(NAS-X) < -5.00
            ESCAPE BOTTOM
          ELSE
            ESCAPE BOTTOM /* this is correct - CGC !
          END-IF
        END-IF
*
        IF #C-RUN-DT-MM = 02
          MOVE 28 TO P05P4.LOAN-DAYS
        ELSE
          IF #C-RUN-DT-MM = 04 OR = 06 OR = 09 OR = 11
            MOVE 30 TO P05P4.LOAN-DAYS
          ELSE
            MOVE 31 TO P05P4.LOAN-DAYS
          END-IF
        END-IF
        COMPUTE P05P4.LOAN-DAYS = P05P4.LOAN-DAYS + X-LOAN-DATE-DD(NAS-X) - 1
        IF CSV < 0
          RESET NET-GROWTH
          MOVE '1' TO HOLD-SECT
          ESCAPE BOTTOM
        END-IF
        IF X-PRINCIPAL-CHG-CODE(NAS-X) = ' ' OR X-LOAN-DATE-MM(NAS-X) NE LOAN-NOTICE-MONTH
          COMPUTE ROUNDED INT-AMT = (X-LOAN-AMOUNT(NAS-X) * X-INTEREST-RATE (NAS-X) / 100)
            - X-INTEREST-RECEIVED(NAS-X)
        ELSE
          COMPUTE ROUNDED INT-AMT = X-ACCUM-INTEREST(NAS-X) +
            (X-LOAN-AMOUNT(NAS-X) * X-INTEREST-RATE(NAS-X) / 36500 * P05P4.LOAN-DAYS)
*         COMPUTE ROUNDED NET-GROWTH = NET-GROWTH -                                        /* EDS-PM 20061011
*           ((((X-LOAN-AMOUNT(NAS-X) + INT-AMT) * X-INTEREST-RATE (NAS-X )) / 100) / 12)   /* EDS-PM 20061011
*           + X-ALT-LP-AMT(NAS-X)                                                          /* EDS-PM 20061011
        END-IF
*
        COMPUTE ROUNDED NET-GROWTH = NET-GROWTH -                                        /* EDS-PM 20061011
          ((((X-LOAN-AMOUNT(NAS-X) + INT-AMT) * X-INTEREST-RATE (NAS-X )) / 100) / 12)   /* EDS-PM 20061011
          + X-ALT-LP-AMT(NAS-X)                                                          /* EDS-PM 20061011

*
        ESCAPE BOTTOM
      END-REPEAT
*
      CALC-MONTHLY-INT-GROWTH.
      REPEAT
        PROCESS-VARIABLE-LOAN.
        REPEAT
          IF X-LOAN-DATE-2(NAS-X) = 0
            ESCAPE BOTTOM (PROCESS-VARIABLE-LOAN.)
          END-IF
          IF X-LOAN-AMOUNT-2(NAS-X) = 0
            IF X-ACCUM-INTEREST-2(NAS-X) > 5.00 OR X-ACCUM-INTEREST-2(NAS-X) < -5.00
              PERFORM FORM-BASE-ERROR
              MOVE 'VARIABLE PRINC BAL 0, NO INTR BILL' TO #C-E-MESSAGE(EPR-X)
            END-IF
            ESCAPE BOTTOM (PROCESS-VARIABLE-LOAN.)
          END-IF
*
          IF #C-RUN-DT-MM = 02
            MOVE 28 TO P05P4.LOAN-DAYS-2
          ELSE
            IF #C-RUN-DT-MM = 04 OR = 06 OR = 09 OR = 11
              MOVE 30 TO P05P4.LOAN-DAYS-2
            ELSE
              MOVE 31 TO P05P4.LOAN-DAYS-2
            END-IF
          END-IF
          COMPUTE P05P4.LOAN-DAYS-2 = P05P4.LOAN-DAYS-2 + X-LOAN-DATE-DD-2(NAS-X) - 1
          IF CSV < 0
            RESET NET-GROWTH
            MOVE '1' TO HOLD-SECT
            ESCAPE BOTTOM (CALC-MONTHLY-INT-GROWTH.)
          END-IF
*
          IF X-LOAN-DATE-MM-2(NAS-X) NE LOAN-NOTICE-MONTH
            COMPUTE ROUNDED INT-AMT-2 = (X-LOAN-AMOUNT-2(NAS-X) * CUR-YR-VAR-INT-RT / 100)
              - X-INTEREST-RECEIVED-2(NAS-X)
          ELSE
            COMPUTE ROUNDED INT-AMT-2 = X-ACCUM-INTEREST-2(NAS-X) + (X-LOAN-AMOUNT-2(NAS-X) *
              CUR-YR-VAR-INT-RT / 36500 * P05P4.LOAN-DAYS-2)
          END-IF                                    /* EDS-PM 20061011
*
          IF #C-RUN-DT-MM = 12
            COMPUTE ROUNDED NET-GROWTH = NET-GROWTH - ((((X-LOAN-AMOUNT-2(NAS-X) + INT-AMT-2) *
              NXT-YR-VAR-INT-RT) / 100) / 12) + X-ALT-LP-AMT-2(NAS-X)
          ELSE
            COMPUTE ROUNDED NET-GROWTH = NET-GROWTH -
              ((((X-LOAN-AMOUNT-2(NAS-X) + INT-AMT-2) * CUR-YR-VAR-INT-RT) / 100) / 12)
              + X-ALT-LP-AMT-2(NAS-X)
          END-IF
*         END-IF                                    /* EDS-PM 20061011
          ESCAPE BOTTOM (PROCESS-VARIABLE-LOAN.)
        END-REPEAT /* (PROCESS-VARIABLE-LOAN.)
*
        IF HOLD-SECT = '1' OR NET-GROWTH > 0
          ESCAPE BOTTOM (CALC-MONTHLY-INT-GROWTH.)
        END-IF
        MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
        SUBTRACT 1 FROM WORK-MM
        IF WORK-MM < 1
          MOVE 12 TO WORK-MM
          SUBTRACT 1 FROM WORK-YYYY
        END-IF
*
        LAPSE-LOOP.
        REPEAT
          REPEAT
            ADD 1 TO MONS-LEFT
            IF MONS-LEFT > 16
              ESCAPE BOTTOM (LAPSE-LOOP.)
            END-IF
            ADD 1 TO WORK-MM
            IF WORK-MM > 12
              MOVE 1 TO WORK-MM
              ADD 1 TO WORK-YYYY
            END-IF
            RESET PREMS-TO-ADD
            ESCAPE BOTTOM
*
* the following code is never executed - CGC
*
            RESET PREMS-TO-ADD
            IF STATUS(NAS-X) NE 'D' OR
                PAY-STATUS(NAS-X) > '41' OR
                CONV-DURATION(NAS-X) = 999 OR
                (MODE(NAS-X) = 'G' OR = 'E' OR = 'M' OR = '0')
              ESCAPE BOTTOM
            END-IF
            IF MODE(NAS-X) = 'A' OR MODE(NAS-X) = '1'
              MOVE 1 TO IS-MODE
            ELSE
              IF MODE(NAS-X) = 'S' OR MODE(NAS-X) = '2'
                MOVE 2 TO IS-MODE
              ELSE
                IF MODE(NAS-X) = 'Q' OR MODE(NAS-X) = '4'
                  MOVE 4 TO IS-MODE
                ELSE
                  MOVE 12 TO IS-MODE
                END-IF
              END-IF
            END-IF
            MOVE PAID-TO-DATE(NAS-X) TO IS-PD-THRU
            PERFORM CALC-PREM-PMT-MONS
            IF WORK-MM = IS-PRM-PD-MON(1) OR = IS-PRM-PD-MON(2) OR = IS-PRM-PD-MON(3) OR = IS-PRM-PD-MON(4)
              COMPUTE PREMS-TO-ADD = PREMS-TO-ADD + (ANNUAL-PREM(NAS-X) / IS-MODE)
            END-IF
            ESCAPE BOTTOM
          END-REPEAT
*
          COMPUTE CSV = CSV + NET-GROWTH + PREMS-TO-ADD
          IF CSV < 0
            MOVE MONS-LEFT TO HOLD-MONS-LEFT
            MOVE '1' TO HOLD-SECT
            ESCAPE BOTTOM (LAPSE-LOOP.)
          END-IF
*
        END-REPEAT /* (LAPSE-LOOP.)
        ESCAPE BOTTOM (CALC-MONTHLY-INT-GROWTH.)
      END-REPEAT /* (CALC-MONTHLY-INT-GROWTH.)
*
      PROCESS-FIXED-BILL.
      REPEAT
        IF X-LOAN-AMOUNT(NAS-X) = 0
            OR CONV-DURATION (NAS-X) = 999       /* SAG-AB 20060809
          ESCAPE BOTTOM (PROCESS-VARIABLE-BILL.)
        END-IF
        IF MONS-LEFT = 0 AND X-LOAN-DATE-MM(NAS-X) NE LOAN-NOTICE-MONTH AND NET-GROWTH LE 0
          MOVE '5' TO HOLD-SECT
          ESCAPE BOTTOM
        END-IF
        IF X-LOAN-DATE-MM(NAS-X) NE LOAN-NOTICE-MONTH
          ESCAPE BOTTOM (PROCESS-VARIABLE-BILL.)
        END-IF
        ESCAPE BOTTOM
      END-REPEAT
*
      MOVE 'K' TO TIN1-P4-SECT TIN1-P4-OLD-SECT
      MOVE '1' TO L-TYPE
      MOVE HOLD-SECT TO TIN1-P4-SUB-SECT
      MOVE HOLD-MONS-LEFT TO TIN1-P4-LPS-MONS
      MOVE 'F' TO TIN1-P4-F-V
      MOVE X-LOAN-DATE-YYMMDD (NAS-X) TO TIN1-P4-LOAN-DT
      MOVE ISSUE-DATE(NAS-X) TO TIN1-P4-ISSUE-DATE
      MOVE X-INTEREST-RATE(NAS-X) TO TIN1-P4-LOAN-RATE
      IF X-LOAN-DATE-2(NAS-X) NE 0
        MOVE 2 TO TIN1-P4-NUM-LNS
      ELSE
        MOVE 1 TO TIN1-P4-NUM-LNS
      END-IF
      IF TIN1-P4-SUB-SECT = '5'
        COMPUTE ROUNDED TIN1-P4-NETBIL = (X-LOAN-AMOUNT(NAS-X) * X-INTEREST-RATE(NAS-X) / 100)
      ELSE
        IF X-PRINCIPAL-CHG-CODE(NAS-X) = ' '
          COMPUTE ROUNDED X-BILL-INTEREST-AMT(NAS-X) = (X-LOAN-AMOUNT(NAS-X) *
            X-INTEREST-RATE(NAS-X) / 100) - X-INTEREST-RECEIVED(NAS-X)
        ELSE
          COMPUTE ROUNDED X-BILL-INTEREST-AMT(NAS-X) = X-ACCUM-INTEREST(NAS-X) +
            (X-LOAN-AMOUNT(NAS-X) * X-INTEREST-RATE(NAS-X) / 36500 * P05P4.LOAN-DAYS)
        END-IF
      END-IF
      IF X-BILL-INTEREST-AMT(NAS-X) > 0 OR TIN1-P4-SUB-SECT = '5'
        PERFORM FORM-BASE
        PERFORM FIND-ADDRESS
        RESET TIN1-P4-POL
        MOVE '1' TO TIN1-P4-TYPE
        MOVE X-LOAN-DATE(NAS-X) TO WORK-DATE
        MOVE #C-RUN-DT-YYYY TO WORK-YYYY
        IF WORK-MM = 1
          ADD 1 TO WORK-YYYY
        END-IF
        IF WORK-DD = 29 AND WORK-MM = 2
          MOVE 28 TO WORK-DD
        END-IF
        MOVE WORK-MM TO TIN1-P4-DUEDT-MM
        MOVE WORK-DD TO TIN1-P4-DUEDT-DD
        MOVE WORK-YY TO TIN1-P4-DUEDT-YY
        MOVE X-LOAN-AMOUNT(NAS-X) TO TIN1-P4-PRINC
        IF TIN1-P4-SUB-SECT NE '5'
          MOVE X-BILL-INTEREST-AMT(NAS-X) TO TIN1-P4-NETBIL
          MOVE '1' TO X-BILL-SW(NAS-X)
        END-IF
        RESET TIN1-P4-PREPD
        MOVE X-ALT-LP-AMT(NAS-X) TO TIN1-P4-ALLOT-DIFF
        COMPUTE TIN1-P4-TOTBIL = TIN1-P4-PREPD + TIN1-P4-NETBIL
        MOVE 'P' TO RETURN-SWITCH
        PERFORM END-WITH-MORE-WRITE
      ELSE
        PERFORM FORM-BASE-ERROR
        IF X-BILL-INTEREST-AMT(NAS-X) = 0
          MOVE 'FIXED INT-BILLED = 0 - NO BILL PRODUCED' TO #C-E-MESSAGE(EPR-X)
        ELSE
          MOVE 'FIXED INT-BILLED NEGATIVE - NO BILL PRODUCED' TO #C-E-MESSAGE(EPR-X)
        END-IF
      END-IF
*
      ESCAPE BOTTOM
    END-REPEAT /* (PROCESS-VARIABLE-BILL.)
*
    REPEAT
      IF X-LOAN-AMOUNT-2(NAS-X) = 0
        MOVE TRUE TO RESTART-M
        ESCAPE BOTTOM (SECONDARY-PROCESS.)   /* go to form-m-loop
      END-IF
      IF CONV-DURATION(NAS-X) NE 999
        IF MONS-LEFT = 0 AND X-LOAN-DATE-MM-2(NAS-X) NE LOAN-NOTICE-MONTH AND NET-GROWTH LE 0
          MOVE '5' TO HOLD-SECT
          ESCAPE BOTTOM
        END-IF
      END-IF
      IF X-LOAN-DATE-MM-2(NAS-X) NE LOAN-NOTICE-MONTH
        MOVE TRUE TO RESTART-M
        ESCAPE BOTTOM (SECONDARY-PROCESS.)   /* go to form-m-loop
      END-IF
      ESCAPE BOTTOM
    END-REPEAT
*
    MOVE 'K' TO TIN1-P4-SECT TIN1-P4-OLD-SECT
    MOVE '1' TO L-TYPE
    MOVE HOLD-SECT TO TIN1-P4-SUB-SECT
    MOVE HOLD-MONS-LEFT TO TIN1-P4-LPS-MONS
    MOVE 'V' TO TIN1-P4-F-V
    MOVE X-LOAN-DATE-YYMMDD-2(NAS-X) TO TIN1-P4-LOAN-DT
    MOVE ISSUE-DATE(NAS-X) TO TIN1-P4-ISSUE-DATE
    MOVE CUR-YR-VAR-INT-RT TO TIN1-P4-LOAN-RATE
    IF X-LOAN-DATE(NAS-X) NE 0
      MOVE 2 TO TIN1-P4-NUM-LNS
    ELSE
      MOVE 1 TO TIN1-P4-NUM-LNS
    END-IF
    IF TIN1-P4-SUB-SECT = '5'
      COMPUTE ROUNDED TIN1-P4-NETBIL = (X-LOAN-AMOUNT-2(NAS-X) * CUR-YR-VAR-INT-RT / 100)
    ELSE
      IF #C-RUN-DT-MM = 12
        COMPUTE ROUNDED X-BILL-INTEREST-AMT-2(NAS-X) = X-ACCUM-INTEREST-2(NAS-X)
          + ((X-LOAN-AMOUNT-2(NAS-X) * CUR-YR-VAR-INT-RT / 36500) * (P05P4.LOAN-DAYS-2 - X-LOAN-DATE-DD-2 (NAS-X) + 1))
          + ((X-LOAN-AMOUNT-2(NAS-X) * NXT-YR-VAR-INT-RT / 36500) * (X-LOAN-DATE-DD-2 (NAS-X) - 1))
      ELSE
        COMPUTE ROUNDED X-BILL-INTEREST-AMT-2(NAS-X) = X-ACCUM-INTEREST-2(NAS-X) +
          ((X-LOAN-AMOUNT-2(NAS-X) * CUR-YR-VAR-INT-RT / 36500) * P05P4.LOAN-DAYS-2)
      END-IF
    END-IF
    IF NOT ( (X-BILL-INTEREST-AMT-2(NAS-X) > 0) OR (TIN1-P4-SUB-SECT = '5') )
      IF X-BILL-INTEREST-AMT-2(NAS-X) = 0
        PERFORM FORM-BASE-ERROR
        MOVE 'VARIABLE INT-BILLED = 0 - NO BILL PRODUCED' TO #C-E-MESSAGE(EPR-X)
        MOVE TRUE TO RESTART-M
        ESCAPE BOTTOM (SECONDARY-PROCESS.)       /* go to form-m-loop
      ELSE
        PERFORM FORM-BASE-ERROR
        MOVE 'VARIABLE INT-BILLED NEGATIVE - NO BILL PRODUCED' TO #C-E-MESSAGE(EPR-X)
        MOVE TRUE TO RESTART-M
        ESCAPE BOTTOM (SECONDARY-PROCESS.)      /* go to form-m-loop
      END-IF
    END-IF
    PERFORM FORM-BASE
    PERFORM FIND-ADDRESS
    RESET TIN1-P4-POL
    MOVE '1' TO TIN1-P4-TYPE
    MOVE X-LOAN-DATE-2(NAS-X) TO WORK-DATE
    MOVE #C-RUN-DT-YYYY TO WORK-YYYY
    IF WORK-MM = 1
      ADD 1 TO WORK-YYYY
    END-IF
    IF WORK-DD = 29 AND WORK-MM = 2
      MOVE 28 TO WORK-DD
    END-IF
    MOVE WORK-MM TO TIN1-P4-DUEDT-MM
    MOVE WORK-DD TO TIN1-P4-DUEDT-DD
    MOVE WORK-YY TO TIN1-P4-DUEDT-YY
    IF X-LOAN-AMOUNT-2(NAS-X) > 99999.99
      MOVE 99999.99 TO TIN1-P4-PRINC
    ELSE
      MOVE X-LOAN-AMOUNT-2(NAS-X) TO TIN1-P4-PRINC
    END-IF
    IF TIN1-P4-SUB-SECT NE '5'
      MOVE X-BILL-INTEREST-AMT-2(NAS-X) TO TIN1-P4-NETBIL
      MOVE '1' TO X-BILL-SW-2(NAS-X)
    END-IF
    RESET TIN1-P4-PREPD
    MOVE X-ALT-LP-AMT-2(NAS-X) TO TIN1-P4-ALLOT-DIFF
    COMPUTE TIN1-P4-TOTBIL = TIN1-P4-PREPD + TIN1-P4-NETBIL
    MOVE 'N' TO RETURN-SWITCH
    PERFORM END-WITH-MORE-WRITE
    ESCAPE BOTTOM (SECONDARY-PROCESS.)
  END-REPEAT /* (SECONDARY-PROCESS.)
  IF RESTART-M
    ESCAPE TOP
  END-IF
*
*****************************************************************
*                                                               *
*              F O R M - N - PAY UP NOTICES                     *
*                                                               *
*****************************************************************
*                        was para FORM-N
  RESET NAS-X
*
  REPEAT
*                        was para TEST-FOR-N
    REPEAT
      RESET PROCESS-MBR-FLAG
      ADD 1 TO NAS-X
      IF NAS-X > P05P4.I-NEW-ACTIVE-SEG
        ESCAPE BOTTOM (MAIN-PROCESS.)
      END-IF
      IF PAY-STATUS(NAS-X) > '41' OR STATUS(NAS-X) NE 'D'
        ESCAPE TOP
      END-IF
      IF (PLAN-SUF-A1(NAS-X) = 'P' OR = 'F') OR (PLAN-SUF-A2(NAS-X) = 'P' OR = 'F')
        ESCAPE BOTTOM
      END-IF
    END-REPEAT
*                        was para TEST-PLAN
    MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
    COMPUTE WORK-MM = WORK-MM + 2
    IF WORK-MM > 12
      SUBTRACT 12 FROM WORK-MM
      ADD 1 TO WORK-YYYY
    END-IF
    IF PLAN-SUF-A2(NAS-X) = 'F' OR = 'P' OR = 'PF'
      SUBTRACT PLAN-N1(NAS-X) FROM WORK-YYYY
    ELSE
      SUBTRACT PLAN-N2(NAS-X) FROM WORK-YYYY
    END-IF
    MOVE WORK-DATE TO PAY-UP-LOW-P4
    MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
    COMPUTE WORK-MM = WORK-MM + 3
    IF WORK-MM > 12
      SUBTRACT 12 FROM WORK-MM
      ADD 1 TO WORK-YYYY
    END-IF
    IF PLAN-SUF-A2(NAS-X) = 'F' OR = 'P' OR = 'PF'
      SUBTRACT PLAN-N1(NAS-X) FROM WORK-YYYY
    ELSE
      SUBTRACT PLAN-N2(NAS-X) FROM WORK-YYYY
    END-IF
    MOVE WORK-DATE TO PAY-UP-HIGH-P4
    IF ISSUE-DATE(NAS-X) GE PAY-UP-LOW-P4 AND ISSUE-DATE(NAS-X) < PAY-UP-HIGH-P4
      MOVE ISSUE-DATE-YY(NAS-X) TO WD-YY
      MOVE ISSUE-DATE-MM(NAS-X) TO WD-MM
      MOVE ISSUE-DATE-DD(NAS-X) TO WD-DD
      IF PLAN-SUF-A2(NAS-X) = 'F' OR = 'P' OR = 'PF'
        COMPUTE #WD-YYYY = WD-YY + PLAN-N1(NAS-X)
        MOVE #WD-YY-N2 TO WD-YY
        MOVE W-DATE-MMDDYY TO TIN1-P4-PUDATE
      ELSE
        COMPUTE #WD-YYYY = WD-YY + PLAN-N2(NAS-X)
        MOVE #WD-YY-N2 TO WD-YY
        MOVE W-DATE-MMDDYY TO TIN1-P4-PUDATE
      END-IF
      ESCAPE BOTTOM
    END-IF
  END-REPEAT
*
*****************************************************************
*              K E E P - N                                      *
*****************************************************************
*
  MOVE 'Q' TO TIN1-P4-SECT
  RESET TIN1-P4-SUB-SECT
  MOVE 'Q' TO TIN1-P4-OLD-SECT
  MOVE '1' TO L-TYPE
  PERFORM FIND-ADDRESS
  PERFORM FORM-BASE
  MOVE MODE(NAS-X) TO TIN1-P4-GEN-MODE
  PERFORM CALC-MODE-PREMIUM
  PERFORM CALC-DUES
  REPEAT
    IF MODE(NAS-X) NE 'G'
      MOVE '5' TO TIN1-P4-PUTYPE
** SAG-AB 20060504 AB4 START - workaround for overflow
      IF W-MODE-PREMIUM GT 9999.99 OR W-MODE-PREMIUM LT -9999.99
        DIVIDE 1000000 INTO W-MODE-PREMIUM GIVING #QUOT REMAINDER TIN1-P4-PUBEF
      ELSE
        MOVE W-MODE-PREMIUM TO TIN1-P4-PUBEF
      END-IF
** SAG-AB 20060504 AB4 END - workaround for overflow
      ADD P05P4.SVC-FEE TO TIN1-P4-PUBEF
      RESET TIN1-P4-PUAFT
      ESCAPE BOTTOM
    END-IF
    MOVE '4' TO TIN1-P4-PUTYPE
    MOVE ALOT-AMT TO TIN1-P4-PUBEF
    COMPUTE TIN1-P4-PUAFT = ALOT-AMT - W-MODE-PREMIUM - P05P4.SVC-FEE
    IF X-ALT-LP-AMT(NAS-X) > 0
        OR X-ALT-LP-AMT-2 (NAS-X) > 0       /* DW14 20061212
      MOVE '6' TO TIN1-P4-PUTYPE
** SAG-AB 20060504 AB4 START - workaround for overflow
      IF W-MODE-PREMIUM GT 9999.99 OR W-MODE-PREMIUM LT -9999.99
        DIVIDE 1000000 INTO W-MODE-PREMIUM GIVING #QUOT REMAINDER TIN1-P4-PUBEF
      ELSE
        MOVE W-MODE-PREMIUM TO TIN1-P4-PUBEF
      END-IF
** SAG-AB 20060504 AB4 END - workaround for overflow
      ADD P05P4.SVC-FEE TO TIN1-P4-PUBEF
      COMPUTE TIN1-P4-PUAFT = X-ALT-LP-AMT(NAS-X) + X-ALT-LP-AMT-2 (NAS-X) /* DW14 20061212
        + W-MODE-PREMIUM + P05P4.SVC-FEE
      ESCAPE BOTTOM
    END-IF
    IF TIN1-P4-PUAFT LE 0 OR P05P4.I-NEW-ACTIVE-SEG = 1
      RESET TIN1-P4-PUAFT
      ESCAPE BOTTOM
    END-IF
    MOVE 'N' TO GOVT-IND-SW
    FOR HLD-NAS-X = 1 TO P05P4.I-NEW-ACTIVE-SEG
      IF PAY-STATUS(HLD-NAS-X) > '41' OR STATUS(HLD-NAS-X) NE 'D'
          OR MODE(HLD-NAS-X) NE 'G' OR HLD-NAS-X = NAS-X      /* EDS-PM 20060912
**      ESCAPE BOTTOM                                      /* EDS-PM 20060912
        ESCAPE TOP                                         /* EDS-PM 20060912
      END-IF
*
      MOVE 'Y' TO GOVT-IND-SW                              /* EDS-PM 20060912
*
*     IF MODE(HLD-NAS-X) = 'G' AND HLD-NAS-X NE NAS-X      /* EDS-PM 20060912
*       ESCAPE BOTTOM                                      /* EDS-PM 20060912
*     ELSE                                                 /* SAG-AB 20060912
*       MOVE 'Y' TO GOVT-IND-SW
*     END-IF
    END-FOR
    IF GOVT-IND-SW = 'N'
      RESET TIN1-P4-PUAFT
    END-IF
    ESCAPE BOTTOM
  END-REPEAT
*
  IF TIN1-P4-PUBEF NE 0
    MOVE PLAN(NAS-X) TO TIN1-P4-PUPLAN
    COMPUTE TIN1-P4-EFFDTYM = (ISSUE-DATE-YY(NAS-X) * 12) + ISSUE-DATE-MM(NAS-X)
    MOVE ISSUE-DATE-DD(NAS-X) TO TIN1-P4-EFFDTDY
    RESET RETURN-SWITCH
    PERFORM END-WITH-WRITE
  END-IF
  ESCAPE BOTTOM (MAIN-PROCESS.)
END-REPEAT /* (MAIN-PROCESS.)
*
RESET RETURN-SWITCH
PERFORM END-WITH-NO-WRITE
*
*****************************************************************
DEFINE SUBROUTINE MIP-ONLY-BILL    /* DW17
*****************************************************************
*
MOVE ID-NUMBER TO #CN
RESET #CAP-BILL-DATE
FIND (1) ST-V WITH MEMBER-KEY = #CN-A
  IF CAP-BILL-DATE = 0
    MOVE #C-RUN-DT-YYYYMMDD TO CAP-BILL-DATE
  END-IF
*
  MOVE CAP-BILL-DATE TO #CAP-BILL-DATE
* write id-number 'Found ST for MIP Only info record CAP-BILL-DATE=' #CAP-BILL-DATE
END-FIND
*
IF #CAP-BILL-DATE = 0
  WRITE #CN-A 'ST not found for MIP Only info record'
  ESCAPE ROUTINE
END-IF
*
IF #CAP-BILL-DATE-YYYYMM GT #C-RUN-DT-YYYYMM   /* DW21
  WRITE #CN-A 'CAP BILL DATE is in the future - Bypasss MIP bill'
  ESCAPE ROUTINE
END-IF
*
MOVE #C-RUN-DT-YYYYMMDD TO #YYYYMMDD
*
IF #MM LT #CAP-BILL-DATE-MM
  ADD 12 TO #MM
  SUBTRACT 1 FROM #YYYY
END-IF
*
SUBTRACT #CAP-BILL-DATE-YYYYMM FROM #YYYYMM
MOVE #MM TO MONS-DELQ
*
MOVE FIX-ALP-PRN-AMT (NAS-X) TO TOT-MIP-PRIN
MOVE FIX-ALP-INT-AMT (NAS-X) TO TOT-MIP-INTR
*
RESET EXTRA-CALC
IF MONS-DELQ GT 0 /* As of 10/25/2007 Delq MIP's get no 2nd bill
* write #cn-a 'Delq MIP only Bill bypassed'
  ESCAPE ROUTINE                     /* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*
  COMPUTE SAVE-LOAN = X-LOAN-AMOUNT(NAS-X) - FIX-ALP-PRN-AMT(NAS-X)
  COMPUTE #MIP-LOAN-AMT = X-ALT-LP-AMT(NAS-X) * MONS-DELQ
  IF MONS-DELQ = 1 OR = 2 OR = 3
    IF #MIP-LOAN-AMT < SAVE-LOAN
      ADD #MIP-LOAN-AMT TO EXTRA-CALC
      SUBTRACT #MIP-LOAN-AMT FROM SAVE-LOAN
    ELSE
      ADD SAVE-LOAN TO EXTRA-CALC
      RESET SAVE-LOAN
    END-IF
  END-IF
END-IF
*
ADD EXTRA-CALC TO EXTRA-MIP-PRIN
ADD EXTRA-CALC TO TOT-MIP-PRIN
*
PERFORM FORM-BASE
MOVE 'P' TO TIN1-P4-SECT
MOVE '4' TO TIN1-P4-SUB-SECT
MOVE 'P' TO TIN1-P4-OLD-SECT
RESET L-TYPE
PERFORM FIND-ADDRESS
MOVE ISSUE-DATE (NAS-X) TO TIN1-P4-EFF-DT
MOVE PLAN (NAS-X)       TO TIN1-P4-PLAN
MOVE #C-RUN-DT-YY TO TIN1-P4-DUEDT4-YY /* Lapse Date will be Calced in ATHP07P0
MOVE #C-RUN-DT-MM TO TIN1-P4-DUEDT4-MM
MOVE 'M'          TO TIN1-P4-GEN-MODE
MOVE 'M'          TO TIN1-P4-MODE
MOVE TOT-MIP-PRIN TO TIN1-P4-BILL-PRIN
MOVE TOT-MIP-INTR TO TIN1-P4-BILL-INTR
MOVE EXTRA-CALC   TO TIN1-P4-BILL-EXTRA
MOVE X-LOAN-AMOUNT (NAS-X) TO TIN1-P4-P-I
*
ADD TIN1-P4-BILL-PRIN TO X-BILL-DOLLAR(NAS-X)
ADD TIN1-P4-BILL-INTR TO X-BILL-DOLLAR(NAS-X)
*
MOVE 'C' TO RETURN-SWITCH
PERFORM END-WITH-MORE-WRITE
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE PROGRAM-STARTUP
*****************************************************************
*
OBSOLETE-STATUS-FIELDS.DATE-OF-BIRTH :=
  GET-DATE-OF-BIRTH (< STATUS-VIEW.MEMBER-CONTACT-ID >)  /* NG2
IF PROCESS-SWITCH = 'F'
  MOVE #C-RUN-DT-MM TO MM
  MOVE #C-RUN-DT-DD TO DD
  MOVE #C-RUN-DT-YY TO YY
  IF RETURN-SWITCH = 'X'
    RESET TRANS-REG-REC
    MOVE 'B' TO TR-RG-TR-TYP
    MOVE 'CN' TO TR-RG-ID-CN
    MOVE 999999 TO TR-RG-ID
*   MOVE MMDDYY-N TO TR-RG-DATE                     /* EDS-PM 08252006
    MOVE EDITED MMDDYY-N (EM=999999) TO TR-RG-DATE  /* EDS-PM 08252006
    MOVE 'EDS' TO TR-RG-CLERK
    MOVE 'EZDU' TO TR-RG-CODE
    MOVE TOT-EZPAY-DUES-SO TO TR-RG-CRDT
    MOVE TOT-EZPAY-DUES TO TR-RG-DEBT
    MOVE '999' TO TR-RG-NUM
    MOVE 'A' TO TR-RG-MSG
    RESET #C-OUTGOING-FLAG
    MOVE TRANS-REG-REC/ALPHA TO #C-REPORT-RECORD
    RESET #C-OUTGOING-FLAG
    WRITE TOT-EZPAY-DUES-SO ' TOT EZPAY-DUES-SO'
    WRITE TOT-EZPAY-DUES ' TOT EZPAY-DUES'
  ELSE
    PERFORM FINALIZE-PRE-AUTH
    RESET TRANS-REG-REC
    MOVE 'B' TO TR-RG-TR-TYP
    MOVE 'CN' TO TR-RG-ID-CN
    MOVE 999999 TO TR-RG-ID
*   MOVE MMDDYY-N TO TR-RG-DATE                     /* EDS-PM 08252006
    MOVE EDITED MMDDYY-N (EM=999999) TO TR-RG-DATE  /* EDS-PM 08252006
    MOVE 'EDS' TO TR-RG-CLERK
    MOVE 'EZPR' TO TR-RG-CODE
    MOVE TOT-EZPAY-PREMS TO TR-RG-CRDT
    MOVE TOT-EZPAY-RIDER TO TR-RG-DEBT
    MOVE '999' TO TR-RG-NUM
    MOVE 'A' TO TR-RG-MSG
    MOVE 1 TO #C-OUTGOING-FLAG
    MOVE TRANS-REG-REC/ALPHA TO #C-REPORT-RECORD
    WRITE TOT-EZPAY-PREMS ' TOT EZPAY-PREMS'
    WRITE TOT-EZPAY-RIDER ' TOT EZPAY-RIDER'
    MOVE 'X' TO RETURN-SWITCH
  END-IF
  ESCAPE MODULE
END-IF
*
IF P05P4.FIRST-TIME-SW = ' '
  MOVE '1' TO P05P4.FIRST-TIME-SW
  MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
  ADD 1 TO WORK-YYYY
  ADD 1 TO WORK-MM
  IF WORK-MM > 12
    SUBTRACT 12 FROM WORK-MM
    ADD 1 TO WORK-YYYY
  END-IF
  MOVE WORK-DATE TO RUN-DATE-PLUS-1-YR
  COMPUTE LOAN-NOTICE-MONTH = #C-RUN-DT-MM + +1
  IF LOAN-NOTICE-MONTH = 13
    MOVE 1 TO LOAN-NOTICE-MONTH
  END-IF
  MOVE #C-RUN-DT-YYYYMMDD TO P05P4.RUN-DATE-MINUS-1MON
  SUBTRACT 1 FROM P05P4.RDM1MON-MM
  IF P05P4.RDM1MON-MM = 0
    MOVE 12 TO P05P4.RDM1MON-MM
    SUBTRACT 1 FROM P05P4.RDM1MON-YYYY
  END-IF
  MOVE #C-RUN-DT-YYYYMM TO P05P4.DUE-DATE-FOR-REMINDER
  SUBTRACT 2 FROM P05P4.DDFR-MM
  IF P05P4.DDFR-MM < 1
    ADD 12 TO P05P4.DDFR-MM
    SUBTRACT 1 FROM P05P4.DDFR-YYYY
  END-IF
  MOVE #C-RUN-DT-YYYYMM TO DUE-DATE-FOR-REMINDER-P
  SUBTRACT 1 FROM DDFR-P-MM
  IF DDFR-P-MM < 1
    ADD 12 TO DDFR-P-MM
    SUBTRACT 1 FROM DDFR-P-YYYY
  END-IF
  MOVE #C-RUN-DT-YYYYMM TO DUE-DATE-FOR-NOTICE
  ADD 1 TO DDFN-MM
  IF DDFN-MM > 12
    SUBTRACT 12 FROM DDFN-MM
    ADD 1 TO DDFN-YYYY
  END-IF
  MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
  ADD 3 TO WORK-MM
  IF WORK-MM > 12
    SUBTRACT 12 FROM WORK-MM
    ADD 1 TO WORK-YYYY
  END-IF
  MOVE 00 TO WORK-DD
  MOVE WORK-DATE TO RUN-DATE-PLUS-3
  MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
  ADD 6 TO WORK-MM
  IF WORK-MM > 12
    SUBTRACT 12 FROM WORK-MM
    ADD 1 TO WORK-YYYY
  END-IF
  MOVE 00 TO WORK-DD
  MOVE WORK-DATE TO RUN-DATE-PLUS-6
  MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
  ADD 1 TO WORK-YYYY
  MOVE 00 TO WORK-DD
  MOVE WORK-DATE TO RUN-DATE-PLUS-12
  MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
  ADD 2 TO WORK-YYYY
  MOVE WORK-DATE TO RUN-DATE-PLUS-2YRS
**  DEFINE WORK FILE 7      /* defined in batch script SAG/AB RH1 01162006
  RESET PA-REC-FH
  ADD 1 TO PAD-TOT-NUM-RECS
  MOVE '1' TO PAR-FH-REC-TYPE
  MOVE 01 TO PAR-FH-PRI-CODE
  MOVE ' 101108319' TO PAR-FH-IMM-DEST
  MOVE ' 530213841' TO PAR-FH-IMM-ORIG
  MOVE #C-RUN-DT-YY TO PAR-FH-TRANS-DATE-YY
  MOVE #C-RUN-DT-MM TO PAR-FH-TRANS-DATE-MM
  MOVE #C-RUN-DT-DD TO PAR-FH-TRANS-DATE-DD
  MOVE 0101 TO PAR-FH-TRANS-TIME
  MOVE 'A' TO PAR-FH-FILE-MOD
  MOVE '094' TO PAR-FH-REC-SIZE
  MOVE '10' TO PAR-FH-BLK-FACT
  MOVE '1' TO PAR-FH-FORM-CODE
  MOVE 'ARMED FORCES BANK' TO PAR-FH-IMM-DEST-NAME
  MOVE 'AAFMAA' TO PAR-FH-IMM-ORIG-NAME
  RESET PAR-FH-REF-CODE
  WRITE WORK FILE 7 PA-REC-FH
**  DEFINE WORK FILE 8     /* defined in batch script SAG/AB RH1 01162006
  RESET PS-REC-FH
  ADD 1 TO PAS-TOT-NUM-RECS
  MOVE '1' TO PAS-FH-REC-TYPE
  MOVE 01 TO PAS-FH-PRI-CODE
  MOVE ' 101108319' TO PAS-FH-IMM-DEST
  MOVE ' 541987992' TO PAS-FH-IMM-ORIG
  MOVE #C-RUN-DT-YY TO PAS-FH-TRANS-DATE-YY
  MOVE #C-RUN-DT-MM TO PAS-FH-TRANS-DATE-MM
  MOVE #C-RUN-DT-DD TO PAS-FH-TRANS-DATE-DD
  MOVE 0101 TO PAS-FH-TRANS-TIME
  MOVE 'A' TO PAS-FH-FILE-MOD
  MOVE '094' TO PAS-FH-REC-SIZE
  MOVE '10' TO PAS-FH-BLK-FACT
  MOVE '1' TO PAS-FH-FORM-CODE
  MOVE 'ARMED FORCES BANK' TO PAS-FH-IMM-DEST-NAME
  MOVE 'AFSC' TO PAS-FH-IMM-ORIG-NAME
  RESET PAS-FH-REF-CODE
  WRITE WORK FILE 8 PS-REC-FH
**  DEFINE WORK FILE 10                            /* PM26
  COMPRESS 'RANK'             #TAB                 /* PM26
    'OWNER FIRST NAME'        #TAB                 /* PM26
    'OWNER MIDDLE NAME'       #TAB                 /* PM26    vt1
    'OWNER LAST NAME'         #TAB                 /* PM26
    'INSURED FIRST NAME'      #TAB                 /* PM26
    'INSURED MIDDLE NAME'     #TAB                 /* PM26    vt1
    'INSURED LAST NAME'       #TAB                 /* PM26
    'CERT NUM'                #TAB                 /* PM26
    'CAP AMOUNT'              #TAB                                  /* vt5
    'EIL AMOUNT'              #TAB                 /* PM28
    'PREM AMOUNT'             #TAB                 /* PM28
    'PREMIER SERVICE AMOUNT'  #TAB                        /* PM99
    'TOTAL AMOUNT'            #TAB                 /* PM28
    'ADD1'                    #TAB                 /* PM26
    'ADD2'                    #TAB                 /* PM26
    'CSZ'                     #TAB                 /* PM26
    'EMAIL' INTO #EXTRACT-RECORD LEAVING NO   /* PM26
  WRITE WORK 10 #EXTRACT-RECORD                    /* PM26
  RESET #EXTRACT-RECORD #EMAIL-RECORDS             /* PM26
*
END-IF
*
*****************************************************************
*                                                               *
*              S E T U P - A C T I V E - S E G S                *
*                                                               *
*****************************************************************
*
IF NOT (RETURN-SWITCH = 'P' OR = 'N' OR = 'K' OR = 'L' OR = 'M')
*
  RESET P05P4.FIRST-ACTIVE
  FOR SUB-P4 = 1 TO 9
    IF STATUS(SUB-P4) = 'D'
      MOVE SUB-P4 TO P05P4.FIRST-ACTIVE
      MOVE 9 TO SUB-P4
    END-IF
  END-FOR
  RESET NAS-X P05P4.I-NEW-ACTIVE-SEG
  REPEAT
    ADD 1 TO NAS-X
    IF NAS-X GT 9
      ESCAPE BOTTOM    /* SAG-AB 20060314 split test
    END-IF
    IF STATUS(NAS-X) = ' '
      ESCAPE BOTTOM
    END-IF
    ADD 1 TO P05P4.I-NEW-ACTIVE-SEG
  END-REPEAT
  IF ID-NUMBER/ALPHA = ' '
    PERFORM END-WITH-NO-WRITE
  END-IF
  IF SUSPEND-CODE = '3'
    PERFORM END-WITH-NO-WRITE
  END-IF
  MOVE 'N' TO FOUND-MBR-ASQM HAS-MODE-E
  RESET NAS-X
*
  REPEAT
    ADD 1 TO NAS-X
    MOVE NAS-X TO OWN-X
    IF P05P4.I-NEW-ACTIVE-SEG = 0 OR NAS-X > P05P4.I-NEW-ACTIVE-SEG
      ESCAPE BOTTOM
    END-IF
    IF MODE(NAS-X) = 'E' AND STATUS(NAS-X) = 'D'
      MOVE 'Y' TO HAS-MODE-E
    END-IF
    IF (MODE(NAS-X) = 'A' OR = 'S' OR = 'Q' OR = 'M') AND
        PAY-STATUS(NAS-X) < '40' AND OWNERSHIP-FLAG(OWN-X) NE 'N'
      MOVE 'Y' TO FOUND-MBR-ASQM
    END-IF
  END-REPEAT
*
  MOVE 1 TO EPR-X
  SUBTRACT 1 FROM EPR-X
*
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE FORM-BASE-ERROR
*****************************************************************
*
ADD 1 TO EPR-X
IF EPR-X = +6
  MOVE 5 TO EPR-X
END-IF
**MOVE ID-NUMBER TO #C-E-ID(EPR-X)                   /* SAG-AB 20060919
MOVE EDITED ID-NUMBER (EM=999999) TO #C-E-ID(EPR-X)  /* SAG-AB 20060919
*
MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID #CONTACT-ID-R           /*  vt1 \/
#NAME-F :=  FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
COMPRESS #FIRST-NAME #MIDDLE-NAME #LAST-NAME INTO #C-E-NAME(EPR-X)
*   MOVE STATUS-VIEW.NAME TO #C-E-NAME(EPR-X)                   /* vt1  /\
*
* MOVE RANK TO #C-E-RANK(EPR-X)                                 /* vt1 \/
CALLNAT 'RANKN001' #PDA-RANK
#C-E-RANK(EPR-X) := #RANK-ABBR                                  /* vt1 /\
*
MOVE MILITARY-STATUS TO #C-E-RETIRED(EPR-X)
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE CALC-DELQ
*****************************************************************
*
MOVE #C-RUN-DT-YYYYMMDD TO WORK-DATE
IF WORK-MM < WORK-PT-MM
  ADD 12 TO WORK-MM
  SUBTRACT 1 FROM WORK-YYYY
END-IF
COMPUTE MONS-DELQ = ((WORK-YYYY - WORK-PT-YYYY) * 12) + (WORK-MM - WORK-PT-MM)
RESET DELQ-CAP-APL DELQ-CAP-Q
IF CONV-DURATION(NAS-X) = 999
  MOVE '-CAP' TO DELQ-CAP-APL DELQ-CAP-Q
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE CALC-RIDER-PREM-DUE
*****************************************************************
*
RESET P05P4.RID-AMT-DUE
IF RID-PLAN(NAS-X) = '  ' OR RID-PD-TO-YYYYMM(NAS-X) GE BILL-TO-YYYYMM(NAS-X)
  ESCAPE ROUTINE
END-IF
MOVE RID-PD-TO(NAS-X) TO WORK-DATE
*
REPEAT
  ADD RID-MON-PREM TO P05P4.RID-AMT-DUE
  ADD 1 TO WORK-MM
  IF WORK-MM > 12
    MOVE 1 TO WORK-MM
    ADD 1 TO WORK-YYYY
  END-IF
  IF WORK-YYYYMM GE BILL-TO-YYYYMM(NAS-X)
    ESCAPE BOTTOM
  END-IF
END-REPEAT
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE CALC-RIDER-MON-PREM
*****************************************************************
*
RESET RID-MON-PREM
IF RID-PLAN(NAS-X) = '  '
  ESCAPE ROUTINE
END-IF
IF RID-PLAN-1(NAS-X) = 'F'
  COMPUTE RID-MON-PREM = 1.50 * RID-PLAN-2(NAS-X)
END-IF
IF RID-PLAN-1(NAS-X) = 'T'
  COMPUTE RID-MON-PREM = 2.00 * RID-PLAN-2(NAS-X)
END-IF
IF RID-PLAN-1(NAS-X) = 'C'
  COMPUTE RID-MON-PREM = 1.00 * RID-PLAN-2(NAS-X)
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE CALC-MODE-PREMIUM
*****************************************************************
*
IF DOING-PRENOTE-SWITCH = 'P'
  MOVE 12 TO W-MODE
ELSE
  IF MODE(NAS-X) = 'A' OR MODE(NAS-X) = '1'
    MOVE 1 TO W-MODE
  ELSE
    IF MODE(NAS-X) = 'S' OR MODE(NAS-X) = '2'
      MOVE 2 TO W-MODE
    ELSE
      IF MODE(NAS-X) = 'Q' OR MODE(NAS-X) = '4'
        MOVE 4 TO W-MODE
      ELSE
        MOVE 12 TO W-MODE
      END-IF
    END-IF
  END-IF
END-IF
*
COMPUTE W-MODE-PREMIUM = ANNUAL-PREM(NAS-X) / W-MODE
* YK5 Special processing for EZ Term - $1 Less monthly
IF PLAN(NAS-X) = #EZ-TERM AND (MODE(NAS-X) = 'E' OR = 'A')
  W-MODE-PREMIUM := W-MODE-PREMIUM - 1
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE CALC-DUES
*****************************************************************
*
MOVE NAS-X TO NAS-Z
RESET P05P4.SVC-FEE
IF (ISSUE-DATE(NAS-X) < 19970101) OR (MONTH-ALLOC-AMT(NAS-X) = 999.99)
    OR (INTRO-FLAG = 'S' OR = 'K' OR = 'G' OR = 'O' OR = 'P' OR = 'Q')
    OR DUES-ALL-PAID-IND = 'Y' OR NAS-X NE P05P4.FIRST-ACTIVE
  ESCAPE ROUTINE
END-IF
IF PLAN(NAS-X) = '2P'
  MOVE SVC-FEE-2P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '3P'
  MOVE SVC-FEE-3P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '4P'
  MOVE SVC-FEE-4P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '5P'
  MOVE SVC-FEE-5P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '6P'
  MOVE SVC-FEE-6P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '7P'
  MOVE SVC-FEE-7P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '8P'
  MOVE SVC-FEE-7P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = '9P'
  MOVE SVC-FEE-7P TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) = 'OL' OR = 'GPL' OR = 'GP2'         /* DW27  /* YK6
  MOVE SVC-FEE-OL TO P05P4.SVC-FEE
END-IF
* YK3 start
* IF PLAN(NAS-X) = 'RT'
*   MOVE SVC-FEE-TM TO P05P4.SVC-FEE
* END-IF
* IF PLAN(NAS-X) = 'LT'
*   MOVE SVC-FEE-TM TO P05P4.SVC-FEE
* END-IF
* IF PLAN-A1(NAS-X) GE 'U' AND PLAN-A1(NAS-X) LE 'Z'
*   MOVE SVC-FEE-TM TO P05P4.SVC-FEE
* END-IF
IF FUNCTION-TERM-POLICY(<PLAN(NAS-X)>)
  MOVE SVC-FEE-TM TO P05P4.SVC-FEE
END-IF
* YK3 end
IF P05P4.SVC-FEE NE 0
  COMPUTE P05P4.SVC-FEE = (P05P4.SVC-FEE * 12) / W-MODE
  ESCAPE ROUTINE
END-IF
IF PLAN(NAS-X) GE '10F' AND PLAN(NAS-X) LE '19P'
  MOVE SVC-FEE-10 TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) GE '20F' AND PLAN(NAS-X) LE '29P'
  MOVE SVC-FEE-20 TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) GE '30F' AND PLAN(NAS-X) LE '34P'
  MOVE SVC-FEE-30 TO P05P4.SVC-FEE
END-IF
IF PLAN(NAS-X) GE '35F' AND PLAN(NAS-X) LE '99P'
  MOVE SVC-FEE-OL TO P05P4.SVC-FEE
END-IF
*
COMPUTE P05P4.SVC-FEE = (P05P4.SVC-FEE * 12) / W-MODE
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE FINALIZE-PRE-AUTH
*****************************************************************
*
IF PAD-TOT-NUM-DTLS-PREN NE 0
  ADD 1 TO PAD-TOT-NUM-RECS
  MOVE '8' TO PAR-BC-REC-TYPE
  MOVE 200 TO PAR-BC-SVC-CL-CODE
  MOVE PAD-TOT-NUM-DTLS-PREN TO PAR-BC-ENTRY-COUNT
  MOVE PAD-TOT-ABA-HASH-PREN-10 TO PAR-BC-ENTRY-HASH  /* SAG-AB 20060504 AB3
  RESET PAR-BC-DEBIT-TOTAL-AMT PAR-BC-CREDIT-TOTAL-AMT
  MOVE '9530213841' TO PAR-BC-COMP-ID
  RESET PAR-BC-MSG-AUTH-CODE PAR-BC-RSV
  MOVE '05100025' TO PAR-BC-ORIG-DFI-ID
  MOVE 0000002 TO PAR-BC-BATCH-NUMBER
  WRITE WORK FILE 7 PA-REC-BC
END-IF
IF PAD-TOT-NUM-DTLS-LIVE NE 0
  ADD 1 TO PAD-TOT-NUM-RECS
  MOVE '8' TO PAR-BC-REC-TYPE
  MOVE 200 TO PAR-BC-SVC-CL-CODE
  MOVE PAD-TOT-NUM-DTLS-LIVE TO PAR-BC-ENTRY-COUNT
  MOVE PAD-TOT-ABA-HASH-LIVE-10 TO PAR-BC-ENTRY-HASH  /* SAG-AB 20060504 AB3
  MOVE PAD-TOT-DEBIT-AMT TO PAR-BC-DEBIT-TOTAL-AMT
  RESET PAR-BC-CREDIT-TOTAL-AMT
  MOVE '9530213841' TO PAR-BC-COMP-ID
  RESET PAR-BC-MSG-AUTH-CODE PAR-BC-RSV
  MOVE '05100025' TO PAR-BC-ORIG-DFI-ID
  MOVE 0000001 TO PAR-BC-BATCH-NUMBER
  WRITE WORK FILE 7 PA-REC-BC
END-IF
ADD 1 TO PAD-TOT-NUM-RECS
MOVE '9' TO PAR-FC-REC-TYPE
MOVE PAD-BATCH-COUNT TO PAR-FC-BATCH-COUNT
DIVIDE 10 INTO PAD-TOT-NUM-RECS GIVING PAR-FC-BLOCK-COUNT REMAINDER FINISH-BLOCK
IF FINISH-BLOCK NE 0
  ADD 1 TO PAR-FC-BLOCK-COUNT
END-IF
MOVE PAD-TOT-NUM-DTLS TO PAR-FC-ENTRY-COUNT
MOVE PAD-TOT-ABA-HASH-10 TO PAR-FC-ENTRY-HASH  /* SAG-AB 20060504 AB3
MOVE PAD-TOT-DEBIT-AMT TO PAR-FC-DEBIT-TOTAL-AMT
RESET PAR-FC-CREDIT-TOTAL-AMT PAR-FC-RSV
WRITE WORK FILE 7 PA-REC-FC
IF FINISH-BLOCK NE 0
  COMPUTE FINISH-BLOCK = 10 - FINISH-BLOCK
  MOVE ALL '9' TO PA-REC-FC/ALPHA
  FOR #SUB = 1 TO FINISH-BLOCK
    WRITE WORK FILE 7 PA-REC-FC
  END-FOR
END-IF
** CLOSE WORK FILE 7      /* removed SAG/AB RH1 01162006
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE WRITE-PRE-AUTH-DETAIL
*****************************************************************
*
IF DOING-PRENOTE-SWITCH = 'P' AND PAD-TOT-NUM-DTLS-PREN = 0
  ADD 1 TO PAD-BATCH-COUNT
  ADD 1 TO PAD-TOT-NUM-RECS
  RESET PA-REC-BH
  MOVE '5' TO PAR-BH-REC-TYPE
  MOVE 200 TO PAR-BH-SVC-CL-CODE
  MOVE 'AAFMAA' TO PAR-BH-COMP-NAME
  RESET PAR-BH-COMP-DIS-DATA
  MOVE '9530213841' TO PAR-BH-COMP-ID
  MOVE 'PPD' TO PAR-BH-CLASS-CODE
  MOVE 'PREAUTH DB' TO PAR-BH-COMP-ENT-DESC
  MOVE #C-RUN-DT-YY TO PAR-BH-EFF-DATE-YY
  MOVE #C-RUN-DT-MM TO PAR-BH-EFF-DATE-MM
  MOVE #C-RUN-DT-DD TO PAR-BH-EFF-DATE-DD
  MOVE PAR-BH-EFF-DATE TO PAR-BH-COMP-DESC-DATE
  RESET PAR-BH-SETTLE-DATE
  MOVE '1' TO PAR-BH-ORIG-STAT-CODE
  MOVE '05100025' TO PAR-BH-ORIG-DFI-ID
  MOVE 0000002 TO PAR-BH-BATCH-NUMBER
  WRITE WORK FILE 7 PA-REC-BH
  IF CONV-DURATION(NAS-X) = 999
    PERFORM FORM-BASE-ERROR
    MOVE 'CAP MEMBER PAD PRENOTE' TO #C-E-MESSAGE(EPR-X)
  END-IF
ELSE                            /* NOT DOING PRENOTE
  IF PAD-TOT-NUM-DTLS-LIVE = 0  /* SAG-AB 20060810
    ADD 1 TO PAD-BATCH-COUNT
    ADD 1 TO PAD-TOT-NUM-RECS
    RESET PA-REC-BH
    MOVE '5' TO PAR-BH-REC-TYPE
    MOVE 200 TO PAR-BH-SVC-CL-CODE
    MOVE 'AAFMAA' TO PAR-BH-COMP-NAME
    RESET PAR-BH-COMP-DIS-DATA
    MOVE '9530213841' TO PAR-BH-COMP-ID
    MOVE 'PPD' TO PAR-BH-CLASS-CODE
    MOVE 'PREAUTH DB' TO PAR-BH-COMP-ENT-DESC
    MOVE #C-RUN-DT-YY TO PAR-BH-EFF-DATE-YY
    MOVE #C-RUN-DT-MM TO PAR-BH-EFF-DATE-MM
    MOVE #C-RUN-DT-DD TO PAR-BH-EFF-DATE-DD
    ADD 000006 TO PAR-BH-EFF-DATE
    MOVE PAR-BH-EFF-DATE TO PAR-BH-COMP-DESC-DATE
    RESET PAR-BH-SETTLE-DATE
    MOVE '1' TO PAR-BH-ORIG-STAT-CODE
    MOVE '05100025' TO PAR-BH-ORIG-DFI-ID
    MOVE 0000001 TO PAR-BH-BATCH-NUMBER
    WRITE WORK FILE 7 PA-REC-BH
  END-IF                        /* SAG-AB 20060810
END-IF
IF DOING-PRENOTE-SWITCH = 'P'
  ADD 1 TO PAD-TOT-NUM-DTLS-PREN
  ADD 1 TO PAD-TRACE-NBR-PREN
  MOVE PAD-ABA-NUMBER TO ABA-NBR
  ADD ABA-NBR-WO-CHK-DIG TO PAD-TOT-ABA-HASH-PREN
  MOVE 28 TO PAR-DT-TRAN-CODE
  RESET PAR-DT-AMT
  MOVE PAD-TRACE-NBR-PREN TO PAR-DT-TRACE-NUMBER
  IF PAD-CHECK-SAV = 'S'
    MOVE 38 TO PAR-DT-TRAN-CODE
  END-IF
ELSE
  ADD 1 TO PAD-TOT-NUM-DTLS-LIVE
  ADD 1 TO PAD-TRACE-NBR-LIVE
  MOVE PAD-ABA-NUMBER TO ABA-NBR
  ADD ABA-NBR-WO-CHK-DIG TO PAD-TOT-ABA-HASH-LIVE
  MOVE 27 TO PAR-DT-TRAN-CODE
  MOVE AMT-PRE-AUTH-DEBIT TO PAR-DT-AMT
  ADD AMT-PRE-AUTH-DEBIT TO PAD-TOT-DEBIT-AMT
  MOVE PAD-TRACE-NBR-LIVE TO PAR-DT-TRACE-NUMBER
  IF PAD-CHECK-SAV = 'S'
    MOVE 37 TO PAR-DT-TRAN-CODE
  END-IF
END-IF
ADD 1 TO PAD-TOT-NUM-RECS
ADD 1 TO PAD-TOT-NUM-DTLS
MOVE PAD-ABA-NUMBER TO ABA-NBR
ADD ABA-NBR-WO-CHK-DIG TO PAD-TOT-ABA-HASH
MOVE '6' TO PAR-DT-REC-TYPE
MOVE PAD-ABA-NUMBER TO PAR-DT-RCV-DFI-ID
MOVE PAD-ACCT-NUM TO PAR-DT-DFI-ACCT-NUM
**MOVE ID-NUMBER TO PAR-DT-INDIV-ID                        /* EDS-PM 08/25/2006
MOVE EDITED ID-NUMBER (EM=999999) TO PAR-DT-INDIV-ID     /* EDS-PM 08/25/2006
MOVE EZ-PAY-NAME TO PAR-DT-INDIV-NAME
RESET PAR-DT-DISC-DATA PAR-DT-ADD-REC-IND
MOVE 05100025 TO PAR-DT-TRACE-NUMBER-ABA
WRITE WORK FILE 7 PA-REC-DET
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE ACCUMULATE-ACV
*****************************************************************
*
IF ACV-MONEY-NEEDED(NAS-Y) NE 0
  IF NAS-Y NE 1
    FOR PRM-X = 1 TO NAS-Y
      IF PRM-X < NAS-Y AND MTD-ACV-PREM-ADJ(PRM-X) = 0
        MOVE 9999999.99 TO MTD-ACV-PREM-ADJ(PRM-X)
      END-IF
    END-FOR
  END-IF
  IF MTD-ACV-PREM-ADJ(NAS-Y) = 9999999.99
    MOVE ACV-MONEY-NEEDED(NAS-Y) TO MTD-ACV-PREM-ADJ(NAS-Y)
  ELSE
    ADD ACV-MONEY-NEEDED(NAS-Y) TO MTD-ACV-PREM-ADJ(NAS-Y)
  END-IF
  IF MTD-ACV-PREM-ADJ(NAS-Y) = 0
    MOVE 9999999.99 TO MTD-ACV-PREM-ADJ(NAS-Y)
  END-IF
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE FORM-BASE
*****************************************************************
*
*  MOVE STATUS-VIEW.NAME TO TIN1-P4-NAME                               /* vt1 \/
* mOVE RANK TO TIN1-P4-RANK
MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID #CONTACT-ID-R
#NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
COMPRESS #FIRST-NAME #MIDDLE-NAME #LAST-NAME INTO TIN1-P4-NAME
CALLNAT 'rankn001' #PDA-RANK
TIN1-P4-RANK := #RANK-ABBR
*                                                                      /* vt1 /\
* IF CHIEF-OF-STAFF-IND = 'R'                                                 /* vt1 \/
*  IF SEX = 'F'
*    MOVE 'MRS' TO TIN1-P4-RANK
*  ELSE
*    MOVE 'MR' TO TIN1-P4-RANK
*  END-IF
* END-IF                                                                      /* vt1 /\
IF CHIEF-OF-STAFF-IND = 'X'
  MOVE 'A' TO TIN1-P4-CL
ELSE
  MOVE MILITARY-STATUS TO TIN1-P4-CL
END-IF
MOVE ID-NUMBER TO TIN1-P4-ID
MOVE MODE(1) TO TIN1-P4-GEN-MODE
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE FIND-ADDRESS
*****************************************************************
*
RESET TIN1-P4-NAME-ADDRESS
*
MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID                    /*  vt1 \/
#NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
COMPRESS #FIRST-NAME #MIDDLE-NAME #LAST-NAME INTO TIN1-P4-NAME
* MOVE STATUS-VIEW.NAME TO TIN1-P4-NAME                              /*  vt1 /\
*
RESET TIN1-P4-NON-MBR-FLAG
*
IF L-TYPE = '1'
  REPEAT
    IF (PROCESS-MBR-FLAG = 'N' AND HANDLE-FLAG = ' ') OR
        ((TIN1-P4-SECT = 'K') AND (TIN1-P4-F-V = 'F') AND (HANDLE-FLAG = ' ')
        AND (OWNERSHIP-FLAG(NAS-X) = 'N')) OR
        ((TIN1-P4-SECT = 'K') AND (TIN1-P4-F-V = 'V') AND (HANDLE-FLAG = ' ')
        AND (OWNERSHIP-FLAG(NAS-X) = 'N'))
      MOVE 'N' TO TIN1-P4-NON-MBR-FLAG
      PERFORM FIND-ADDR-D
      ESCAPE ROUTINE
    END-IF
    IF HANDLE-FLAG = ' ' OR = '2' OR = '3' OR = '6' OR = '7'
      PERFORM FIND-ADDR-B
      ESCAPE ROUTINE
    END-IF
    IF S-ADDRESS-IND = ' '
      ESCAPE BOTTOM
    END-IF
    IF S-ADDRESS-CODE = ' ' OR = '2' OR = '3' OR = '6' OR = '7'  /* TT1 COMMENTED OUT
      PERFORM FIND-ADDR-D
      ESCAPE ROUTINE
    END-IF
    ESCAPE BOTTOM
  END-REPEAT
  MOVE 'A' TO TIN1-P4-SECT
  RESET TIN1-P4-SUB-SECT
  ESCAPE ROUTINE
END-IF
*
IF (PROCESS-MBR-FLAG = 'N' AND HANDLE-FLAG = ' ') OR
    (TIN1-P4-SECT = 'K' AND TIN1-P4-F-V = 'F' AND HANDLE-FLAG = ' ' AND OWNERSHIP-FLAG(NAS-X) = 'N') OR
    (TIN1-P4-SECT = 'K' AND TIN1-P4-F-V = 'V' AND HANDLE-FLAG = ' ' AND OWNERSHIP-FLAG(NAS-X) = 'N')
  MOVE 'N' TO TIN1-P4-NON-MBR-FLAG
  PERFORM FIND-ADDR-D
  ESCAPE ROUTINE
END-IF
IF HANDLE-FLAG = ' ' OR = '1' OR = '3' OR = '5' OR = '7'
  PERFORM FIND-ADDR-B
  ESCAPE ROUTINE
END-IF
IF S-ADDRESS-IND = ' '
  MOVE 'A' TO TIN1-P4-SECT
  RESET TIN1-P4-SUB-SECT
  ESCAPE ROUTINE
END-IF
IF S-ADDRESS-CODE = ' ' OR = '1' OR = '3' OR = '5' OR = '7'       /*TT1 maybe obsolete ?
  PERFORM FIND-ADDR-D
  ESCAPE ROUTINE
END-IF
MOVE 'A' TO TIN1-P4-SECT
RESET TIN1-P4-SUB-SECT
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE FIND-ADDR-B
*****************************************************************
*
MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #ADD-CONTACT-ID                        /* vt1    \/
MOVE 'P' TO #ADD-TYPE
CALLNAT 'addn0001' #PDA-ADDRESS
MOVE #ADD-LINE-1 TO TIN1-P4-LN1
MOVE #ADD-LINE-2 TO TIN1-P4-LN2
MOVE #ADD-LINE-3 TO TIN1-P4-LN3
IF #ADD-COUNTRY-CODE NE 'US'                       /* vt2 \/
  MOVE #ADD-COUNTRY TO #ADD-CITY
  RESET #ADD-STATE
  RESET #ADD-ZIP-CODE
END-IF                                           /* vt2 /\
MOVE #ADD-CITY   TO TIN1-P4-CITY
MOVE #ADD-STATE  TO TIN1-P4-STATE
MOVE #ADD-ZIP-CODE TO #ZIP-CODE
*
* MOVE ADDRESS-1 TO TIN1-P4-LN1
* MOVE ADDRESS-2 TO TIN1-P4-LN2
* MOVE ADDRESS-3 TO TIN1-P4-LN3
RESET TIN1-P4-LN4 TIN1-P4-ZIP-G
* IF ZIP-CODE-1-5 NE 0
*  MOVE EDITED ZIP-CODE-1-5 (EM=99999) TO TIN1-P4-ZIP         /* SAG-AB 20060808
*  IF ZIP-CODE-6-9 NE 0
*    MOVE '-' TO TIN1-P4-DASH
*    MOVE EDITED ZIP-CODE-6-9 (EM=9999) TO TIN1-P4-ZIP-LST-4  /* SAG-AB 20060808
*  END-IF
* ELSE
*  RESET TIN1-P4-ZIP
* END-IF
IF #ZIP-CODE-5 NE 0
  MOVE #ZIP-CODE-5 TO TIN1-P4-ZIP
  IF #ZIP-CODE-4 NE 0
    MOVE '-' TO TIN1-P4-DASH
    MOVE  #ZIP-CODE-4 TO TIN1-P4-ZIP-LST-4
  END-IF
ELSE
  RESET TIN1-P4-ZIP
END-IF                                                                   /* vt1 /\
* IF TIN1-P4-ZIP = ' '                                                   /* vt1
IF TIN1-P4-ZIP = 0                                                       /* vt1
  MOVE 'C' TO TIN1-P4-SECT
END-IF
IF #ADD-LINE-1 = ' '                                                     /* vt1
* IF ADDRESS-1 = ' '                                                     /* vt1
  MOVE 'A' TO TIN1-P4-SECT
  RESET TIN1-P4-SUB-SECT
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE FIND-ADDR-D
*****************************************************************
*
MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #ADD-CONTACT-ID                          /* vt1 \/
MOVE 'S' TO #ADD-TYPE
CALLNAT 'addn0001' #PDA-ADDRESS
IF #ADD-LINE-1 = ' ' AND #ADD-LINE-2 = ' ' AND #ADD-LINE-3 = ' '
* IF S-ADDRESS-1 = ' ' AND S-ADDRESS-2 = ' ' AND S-ADDRESS-3 = ' '             /* vt1 /\
  PERFORM FIND-ADDR-B
  ESCAPE ROUTINE
END-IF
* MOVE S-ADDRESS-1 TO TIN1-P4-LN1                                             /* vt1 \/
* MOVE S-ADDRESS-2 TO TIN1-P4-LN2
* MOVE S-ADDRESS-3 TO TIN1-P4-LN3
MOVE #ADD-LINE-1 TO TIN1-P4-LN1
MOVE #ADD-LINE-2 TO TIN1-P4-LN2
MOVE #ADD-LINE-3 TO TIN1-P4-LN3
*
IF #ADD-COUNTRY-CODE NE 'US'                       /* vt2 \/
  MOVE #ADD-COUNTRY TO #ADD-CITY
  RESET #ADD-STATE
  RESET #ADD-ZIP-CODE
END-IF                                           /* vt2 /\
MOVE #ADD-CITY    TO TIN1-P4-CITY
MOVE #ADD-STATE   TO TIN1-P4-STATE                                             /* vt1  /\
MOVE #ADD-ZIP-CODE TO #ZIP-CODE
*
RESET TIN1-P4-LN4 TIN1-P4-RANK
MOVE 'A' TO TIN1-P4-CL
RESET TIN1-P4-ZIP-G
* IF S-ZIP-CODE-1-5 NE 0                                                        /* vt1 \/
IF #ZIP-CODE-5 NE 0
  MOVE #ZIP-CODE-5 TO TIN1-P4-ZIP
  IF #ZIP-CODE-4 NE 0
    MOVE '-' TO TIN1-P4-DASH
    MOVE  #ZIP-CODE-4 TO TIN1-P4-ZIP-LST-4
  END-IF
ELSE
  RESET TIN1-P4-ZIP
END-IF
* IF TIN1-P4-ZIP = ' '                                            /* vt1
IF TIN1-P4-ZIP = 0                                              /* vt1
  MOVE 'C' TO TIN1-P4-SECT
END-IF
IF #ADD-LINE-1 = ' '                                            /* vt1
*  IF S-ADDRESS-1 = ' '                                           /* vt1
  MOVE 'A' TO TIN1-P4-SECT
  RESET TIN1-P4-SUB-SECT
END-IF
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE END-WITH-WRITE
*****************************************************************
*
RESET #C-OUTGOING-FLAG
MOVE TIN1-P4/ALPHA TO #C-REPORT-RECORD
ESCAPE MODULE
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE END-WITH-MORE-WRITE
*****************************************************************
*
MOVE 1 TO #C-OUTGOING-FLAG
MOVE TIN1-P4/ALPHA TO #C-REPORT-RECORD
ESCAPE MODULE
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE END-WITH-NO-WRITE
*****************************************************************
*
MOVE 2 TO #C-OUTGOING-FLAG
ESCAPE MODULE
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE SUN-LOOP
*****************************************************************
*
FOR SG-X = 1 TO 27
  IF SG-AMT = 0
    MOVE 27 TO SG-X
    ESCAPE ROUTINE
  END-IF
  IF SG-X = 27
    WRITE ID-NUMBER 'SUNGARD FILE TABLE ON 27TH ENTRY' SG-TRAN
  END-IF
  IF SUN-TRAN(SG-X) = ' '
    MOVE SG-TRAN TO SUN-TRAN(SG-X)
    MOVE SG-YEAR TO SUN-CAT1(SG-X)
    MOVE SG-PLAN TO SUN-CAT2(SG-X)
    ADD SG-AMT TO SUN-AMT(SG-X)
    IF NAS-X > 9
      RESET SUN-SEG(SG-X)
    ELSE
      MOVE NAS-X TO SUN-SEG(SG-X)
    END-IF
    MOVE 27 TO SG-X
  END-IF
END-FOR
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE EZPAY-START                             /* PM25
*****************************************************************
*
RESET NAS-X       /* NG1 REV-DB-CR
*
REPEAT
  ADD 1 TO NAS-X
  IF NAS-X > 9
    ESCAPE BOTTOM
  END-IF
*
  IF STATUS(NAS-X) NE 'D'   /* DW8 12/28/2005  DRW/AB
      OR EZPAY-START (NAS-X) NE 'Y'
      OR #PREMIUM-EZPAY-MONEY (NAS-X) LE 0
      OR PAID-TO-YYYYMM(NAS-X) GT #C-RUN-DT-YYYYMM
*
    IF   DUES-DB-CR = 0
        AND DUES-FPF = 0
        AND DUES-BALANCE LE 0
        AND X-BILL-ADJUST (NAS-X) = 0
        AND WORK-DB-CR (NAS-X) = 0
        AND RID-BAL-INCR (NAS-X) = 0
        AND X-RID-FPF (NAS-X) = 0
        AND X-RID-BALANCE (NAS-X) = 0
        AND X-FIRST-PLACE-FEE (NAS-X) = 0
        AND EZPAY-START (NAS-X) = 'Y'
      RESET EZPAY-START (NAS-X)
    END-IF
*
    ESCAPE TOP
  END-IF
*
  NEW-PAD := 'Y'
*
  IF NAS-X = P05P4.FIRST-ACTIVE
    IF DUES-DB-CR GT 0
      SUBTRACT DUES-DB-CR FROM REV-DB-CR
      ADD DUES-DB-CR TO #PREMIUM-EZPAY-MONEY (NAS-X)
      ADD DUES-DB-CR TO DUES-TOT-PAID
      MOVE 'DUEP' TO SG-TRAN
      MOVE '**' TO SG-YEAR SG-PLAN
      MOVE DUES-DB-CR TO SG-AMT
      PERFORM SUN-LOOP
      RESET DUES-DB-CR
    END-IF
*
    IF DUES-FPF GT 0
      SUBTRACT DUES-FPF FROM REV-DB-CR
      ADD DUES-FPF TO #PREMIUM-EZPAY-MONEY (NAS-X)
      ADD DUES-FPF TO DUES-TOT-PAID
      MOVE 'DUEP' TO SG-TRAN
      MOVE '**' TO SG-YEAR SG-PLAN
      MOVE DUES-FPF TO SG-AMT
      PERFORM SUN-LOOP
      RESET DUES-FPF
    END-IF
*
    IF DUES-BALANCE GT 0
      SUBTRACT DUES-BALANCE FROM REV-DB-CR
      ADD DUES-BALANCE TO #PREMIUM-EZPAY-MONEY (NAS-X)
      ADD DUES-BALANCE TO DUES-TOT-PAID
      MOVE 'DUEP' TO SG-TRAN
      MOVE '**' TO SG-YEAR SG-PLAN
      MOVE DUES-BALANCE TO SG-AMT
      PERFORM SUN-LOOP
      RESET DUES-BALANCE
    END-IF
  END-IF
*
  IF X-BILL-ADJUST(NAS-X) GT 0
    ADD X-BILL-ADJUST (NAS-X) TO #PREMIUM-EZPAY-MONEY (NAS-X)
    SUBTRACT X-BILL-ADJUST(NAS-X) FROM REV-DB-CR
    MOVE 'PREP' TO SG-TRAN
    MOVE 'UN' TO SG-YEAR
    MOVE '**' TO SG-PLAN
    MOVE X-BILL-ADJUST(NAS-X) TO SG-AMT
    PERFORM SUN-LOOP
    RESET X-BILL-ADJUST (NAS-X)
  END-IF
*
  IF PLAN(NAS-X) = 'OL' OR= '20P' OR= '30P' OR= '7P' OR= 'SO' OR= 'SPF' OR= 'FSO'
*     OR= 'LT' OR= 'RT' OR = 'GPL'                    /* DW27
      OR= 'LT' OR= 'RT' OR = 'GPL' OR = 'EZ'         /* DW27  YK4
    MOVE PLAN(NAS-X) TO SG-PLAN
  ELSE
*   IF PLAN-A1(NAS-X) GE 'U' AND PLAN-A1(NAS-X) LE 'Z'   /* YK3
    IF F-LT2-TRUE(<PLAN(NAS-X)>)                         /* YK3
      MOVE 'VT' TO SG-PLAN
    ELSE
      MOVE 'FX' TO SG-PLAN
    END-IF
  END-IF
*
  IF WORK-DB-CR (NAS-X) GT 0
    SUBTRACT WORK-DB-CR (NAS-X) FROM REV-DB-CR
    ADD WORK-DB-CR (NAS-X) TO #PREMIUM-EZPAY-MONEY (NAS-X)
  END-IF
*
  IF RID-BAL-INCR (NAS-X) GT 0
    SUBTRACT RID-BAL-INCR (NAS-X) FROM REV-DB-CR
    ADD RID-BAL-INCR (NAS-X) TO #PREMIUM-EZPAY-MONEY (NAS-X)
    ADD RID-BAL-INCR (NAS-X) TO RID-TOT-PAID
    MOVE 'RN' TO SG-YEAR
    MOVE 'RIDP' TO SG-TRAN
    MOVE 'RD' TO SG-PLAN
    MOVE RID-BAL-INCR (NAS-X) TO SG-AMT
    PERFORM SUN-LOOP
  END-IF
*
  IF X-RID-FPF(NAS-X) GT 0
    SUBTRACT X-RID-FPF(NAS-X) FROM REV-DB-CR
    ADD X-RID-FPF (NAS-X) TO #PREMIUM-EZPAY-MONEY (NAS-X)
    ADD X-RID-FPF (NAS-X) TO RID-TOT-PAID
    MOVE RID-EFF-DT(NAS-X) TO ISS-DT-1-YEAR
    ADD 1 TO ISS-DT-1-YYYY
    IF ISS-DT-1-YYYYMM > #C-RUN-DT-YYYYMM
      MOVE '1Y' TO SG-YEAR
    ELSE
      MOVE 'RN' TO SG-YEAR
    END-IF
    MOVE 'RIDP' TO SG-TRAN
    MOVE 'RD' TO SG-PLAN
    MOVE X-RID-FPF(NAS-X) TO SG-AMT
    PERFORM SUN-LOOP
    RESET X-RID-FPF (NAS-X)
  END-IF
*
  IF X-RID-BALANCE(NAS-X) GT 0
    SUBTRACT X-RID-BALANCE(NAS-X) FROM REV-DB-CR
    ADD X-RID-BALANCE (NAS-X) TO #PREMIUM-EZPAY-MONEY (NAS-X)
    ADD X-RID-BALANCE (NAS-X) TO RID-TOT-PAID
    MOVE RID-EFF-DT(NAS-X) TO ISS-DT-1-YEAR
    ADD 1 TO ISS-DT-1-YYYY
    IF ISS-DT-1-YYYYMM > #C-RUN-DT-YYYYMM
      MOVE '1Y' TO SG-YEAR
    ELSE
      MOVE 'RN' TO SG-YEAR
    END-IF
    MOVE 'RIDP' TO SG-TRAN
    MOVE 'RD' TO SG-PLAN
    MOVE X-RID-BALANCE(NAS-X) TO SG-AMT
    PERFORM SUN-LOOP
    RESET X-RID-BALANCE (NAS-X)
  END-IF
*
  IF X-FIRST-PLACE-FEE(NAS-X) GT 0
    SUBTRACT X-FIRST-PLACE-FEE(NAS-X) FROM REV-DB-CR
    ADD X-FIRST-PLACE-FEE (NAS-X) TO #PREMIUM-EZPAY-MONEY (NAS-X)
*   IF NOT (PLAN(NAS-X) = 'LT' OR PLAN(NAS-X) = 'RT' OR                /* YK3
*       ((PLAN-A1(NAS-X) GE 'U') AND (PLAN-A1(NAS-X) LE 'Z')))         /* YK3
    IF (NOT FUNCTION-TERM-POLICY(<PLAN(NAS-X)>))                       /* YK3
      ADD X-FIRST-PLACE-FEE(NAS-X) TO ACV-MONEY-NEEDED(NAS-X)
    END-IF
    MOVE 'FPFP' TO SG-TRAN
    MOVE '1Y' TO SG-YEAR
    MOVE X-FIRST-PLACE-FEE(NAS-X) TO SG-AMT
    PERFORM SUN-LOOP
    RESET X-FIRST-PLACE-FEE (NAS-X)
  END-IF
*
  RESET #NO-START
  IF X-RID-BALANCE(NAS-X) LT 0
    IF X-RID-BALANCE (NAS-X) * -1 GT #PREMIUM-EZPAY-MONEY (NAS-X)
      ADD #PREMIUM-EZPAY-MONEY (NAS-X) TO REV-DB-CR
      ADD #PREMIUM-EZPAY-MONEY (NAS-X) TO X-RID-BALANCE (NAS-X)
      SG-AMT := #PREMIUM-EZPAY-MONEY (NAS-X)
      RESET #PREMIUM-EZPAY-MONEY (NAS-X)
      #NO-START := TRUE
    ELSE
      SUBTRACT X-RID-BALANCE(NAS-X) FROM REV-DB-CR
      ADD X-RID-BALANCE (NAS-X)  TO #PREMIUM-EZPAY-MONEY (NAS-X)
      MOVE X-RID-BALANCE (NAS-X) TO SG-AMT
      RESET X-RID-BALANCE (NAS-X)
    END-IF
*
    MOVE RID-EFF-DT(NAS-X) TO ISS-DT-1-YEAR
    ADD 1 TO ISS-DT-1-YYYY
    IF ISS-DT-1-YYYYMM > #C-RUN-DT-YYYYMM
      MOVE '1Y' TO SG-YEAR
    ELSE
      MOVE 'RN' TO SG-YEAR
    END-IF
    MOVE 'RIDP' TO SG-TRAN
    MOVE 'RD' TO SG-PLAN
    PERFORM SUN-LOOP
  END-IF
*
  IF X-BILL-ADJUST (NAS-X) LT 0
    IF X-BILL-ADJUST (NAS-X) * -1 GT #PREMIUM-EZPAY-MONEY (NAS-X)
      ADD #PREMIUM-EZPAY-MONEY (NAS-X) TO REV-DB-CR
      ADD #PREMIUM-EZPAY-MONEY (NAS-X) TO X-BILL-ADJUST (NAS-X)
      SG-AMT := #PREMIUM-EZPAY-MONEY (NAS-X) * -1
      RESET #PREMIUM-EZPAY-MONEY (NAS-X)
      #NO-START := TRUE
    ELSE
      SUBTRACT X-BILL-ADJUST (NAS-X) FROM REV-DB-CR
      ADD X-BILL-ADJUST (NAS-X)  TO #PREMIUM-EZPAY-MONEY (NAS-X)
      MOVE X-BILL-ADJUST (NAS-X) TO SG-AMT
      RESET X-BILL-ADJUST (NAS-X)
    END-IF
*
    MOVE 'PREP' TO SG-TRAN
    MOVE 'UN' TO SG-YEAR
    MOVE '**' TO SG-PLAN
    PERFORM SUN-LOOP
  END-IF
*
  IF #NO-START
    ESCAPE TOP
  ELSE
    RESET EZPAY-START (NAS-X)
  END-IF
END-REPEAT
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE CREATE-EIL-EMAIL-FILE                   /* PM26
*****************************************************************
*
RESET #EXTRACT-RECORD #EMAIL-RECORDS
*
RESET #STREET #STREET-2 #CITY #STATE
*    CALLNAT 'GCTSTSXX'                                         /* vt1 \/
*    #SPLIT
* STATUS-VIEW.ADDRESS-1
* STATUS-VIEW.ADDRESS-2
* STATUS-VIEW.ADDRESS-3
* #STREET
* #STREET-2
* #CITY
* #STATE
* #ERR-MSG
RESET #PDA-ADDRESS                  /* vt3
#ADD-TYPE        := 'P'
#ADD-CONTACT-ID := STATUS-VIEW.MEMBER-CONTACT-ID
CALLNAT 'ADDN0001' #PDA-ADDRESS
#ZIP-CODE := #ADD-ZIP-CODE                     /* vt3 \/
#CITY     := #ADD-CITY
#STATE    := #ADD-STATE                        /* vt3 /\
*
IF #ADD-LINE-3 NE ' '
  #STREET := #ADD-LINE-1
  #STREET-2 := #ADD-LINE-2
ELSE
  #STREET := #ADD-LINE-1
  RESET #STREET-2
END-IF
IF #ADD-COUNTRY = 'UNITED STATES'               /* vt2 010302011  was US
  #CITY     := #ADD-CITY
  #STATE    := #ADD-STATE                                         /* vt1 /\
ELSE                                /* vt2 01032011 \/
  #CITY := #ADD-LINE-3
  RESET #STATE
END-IF                              /* vt2 01032011 /\
*
* MOVE STATUS-VIEW.NAME TO #NAME                                /* vt1 \/
MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID #CONTACT-ID-R
#NAME-F := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
#D-MEM-FIRST    := #FIRST-NAME
#D-MEM-MI       := #MIDDLE-NAME
#D-MEM-LAST     := #LAST-NAME
* RESET #LAST #MI #FIRST-20
* CALLNAT 'GFMLNSXX'
*  #NAME
*  #FIRST-20
*  #MI
*  #LAST
*  #ERR-MSG
*
CALLNAT 'RANKN001' #PDA-RANK
#D-RANK := #RANK-ABBR
*
* #D-RANK              := RANK
* #D-MEM-FIRST         := #FIRST-20
* #D-MEM-MI            := #MI
* #D-MEM-LAST          := #LAST                                 /* vt1 /\
#D-ADDR1             := #STREET
#D-ADDR2             := #STREET-2
*
* MOVE EDITED STATUS-VIEW.ZIP-CODE (EM=99999-9999) TO #D-ADDR3                        /* vt1
IF #ZIP-CODE-5 NE 0                                   /* vt3 \/
  MOVE #ZIP-CODE-5 TO #D-ADDR3
  IF #ZIP-CODE-4 NE 0
    COMPRESS #D-ADDR3 '-' #ZIP-CODE-4  INTO #D-ADDR3 LEAVING NO
  END-IF
END-IF
* compress #zip-code-5 '-' #zip-code-4 to #d-addr3    /* vt3 /\                                    /* vt1
COMPRESS #CITY #STATE #D-ADDR3 INTO #D-ADDR3
*
MOVE EDITED X-ALT-LP-AMT (NAS-X) (EM=ZZ,ZZ9.99) TO #D-EIL-AMT    /* PM28
RESET #WORK-AMOUNT                                               /* PM28
FOR #I1 1 TO 9                                                   /* PM28
  ADD #PREMIUM-EZPAY-MONEY (#I1) TO #WORK-AMOUNT                 /* PM28
END-FOR                                                          /* PM28
ADD EZPAY-FUTURE-AMT TO #WORK-AMOUNT                             /* PM28
MOVE EDITED #WORK-AMOUNT (EM=Z,ZZZ,ZZ9.99) TO #D-PRM-AMT         /* PM28
COMPUTE #WORK-AMOUNT = #WORK-AMOUNT + X-ALT-LP-AMT (NAS-X)       /* PM28
MOVE EDITED #WORK-AMOUNT (EM=Z,ZZZ,ZZ9.99) TO #D-TTL-AMT         /* PM28
*
*** Here - we are including 1 month rate for premier services paying via EZpay in an email merge ***
*** Cliff will use this in his email document to say something about normal draft for PSM        ***
*** We already performed the PREMIER-SERVICCE routine to see if we need to draft so we should know**
*** if we have soemthing paying via EZPay
IF #SVC-MEMBER.SVC-MODE = 'E'                                     /* NG1
  MOVE EDITED #SVC-MEMBER.SVC-MONTHLY-RATE (EM=Z,ZZZ,ZZ9.99) TO #D-PSM-AMT
ELSE
  MOVE 0.00 TO #D-PSM-AMT
END-IF
*
#I1 := NAS-X
CALLNAT 'GPLNMSXX' #D-POL-NUM STATUS-VIEW.ID-NUMBER #I1
*
CALLNAT 'GOWNRSXX' STATUS-VIEW.ID-NUMBER
  #NON-INS-OWNER
  #MULTIPLE-OWNER
  #OWNER-OCC-9 (1:9)
*
IF #NON-INS-OWNER
    AND #OWNER-CN-BY-POL (NAS-X) NE 0
  #WORK-OWNER-CN    := #OWNER-CN-BY-POL (NAS-X)
  #D-EMAIL          := F-PREF-EMAIL(< ST-N.MEMBER-CONTACT-ID >)  /* TT1
*  #D-EMAIL          := ST-N.INTERNET-ADDR                       /* TT1
*
  FIND (1) ST-N WITH ST-N.MEMBER-KEY = #WORK-OWNER-CN-A
*    MOVE ST-N.NAME TO #NAME                                                /* vt1  \/
*    RESET #LAST #MI #FIRST-20
*    CALLNAT 'GFMLNSXX'
*      #NAME
*      #FIRST-20
*      #MI
*      #LAST
*      #ERR-MSG
    MOVE ST-N.MEMBER-CONTACT-ID TO #CONTACT-ID
    #NAME := FUNCTION-FRM-NAME(<#CONTACT-ID,#FIRST-NAME,#MIDDLE-NAME,#LAST-NAME,#SUFFIX>)
    #D-OWN-FIRST := #FIRST-NAME
    #D-OWN-MI    := #MIDDLE-NAME
    #D-OWN-LAST  := #LAST-NAME                                  /* vt3 02/16/2011  was #d-mem-last
*                                                                           /* vt1 /\
  END-FIND
ELSE
  MOVE STATUS-VIEW.MEMBER-CONTACT-ID TO #CONTACT-ID                        /* vt1 \/
  CALLNAT 'EMAILN01' #CONTACT-ID #EMAIL
  #D-EMAIL              := #EMAIL                                          /* vt1 /\
*  #D-EMAIL           := STATUS-VIEW.INTERNET-ADDR
END-IF
*
IF #D-EMAIL = '999' OR = '?'
  RESET #D-EMAIL
END-IF
*  #D-OWN-FIRST         := #FIRST-20                                  /* vt1 \/
*  #D-OWN-MI            := #MI
*  #D-OWN-LAST          := #LAST                                      /* vt1 /\
#D-OWN-FIRST := #D-MEM-FIRST            /* vt3 \/
#D-OWN-MI    := #D-MEM-MI
#D-OWN-LAST  := #D-MEM-LAST             /* vt3 /\
*
find at-v with at-v.ssn = status-view.ssn                         /* vt5 \/
  if no
    escape bottom
  end-norec
  move edited at-v.cap-loan-amt(em=zzzzzz9.99)  to #d-cap-amt
end-find                                                          /* vt5 /\
*
COMPRESS #D-RANK       #TAB
  #D-OWN-FIRST  #TAB                          /* vt3 \/
  #D-OWN-MI     #TAB
  #D-OWN-LAST   #TAB                          /* vt3 /\
  #D-MEM-FIRST  #TAB
  #D-MEM-MI     #TAB
  #D-MEM-LAST   #TAB
*  #D-OWN-FIRST  #TAB                         /* vt3 \/
*  #D-OWN-MI     #TAB
*  #D-OWN-LAST   #TAB                         /* vt3 /\
  #D-POL-NUM    #TAB
  #d-cap-amt    #tab                                                  /* vt5
  #D-EIL-AMT    #TAB                                 /* PM28
  #D-PRM-AMT    #TAB                                 /* PM28
  #D-PSM-AMT    #TAB                                 /* PM99
  #D-TTL-AMT    #TAB                                 /* PM28
  #D-ADDR1      #TAB
  #D-ADDR2      #TAB
  #D-ADDR3      #TAB
  #D-EMAIL INTO #EXTRACT-RECORD LEAVING NO
WRITE WORK 10 #EXTRACT-RECORD
RESET #EXTRACT-RECORD
*
END-SUBROUTINE
*
*****************************************************************
DEFINE SUBROUTINE PREMIER-SERVICES-EZPAY                  /* NG1
*****************************************************************
*
RESET REV-DB-CR
*
IF #SVC-MEMBER.SVC-MODE = 'E'
    AND #SVC-MEMBER.SVC-PAY-UP NE 'Y'
    AND PAD-CODE = 'E' OR = 'V' OR = 'X' OR = 'W'
  #SVC-PAID-TO-DATE := #SVC-MEMBER.SVC-PAID-TO-DATE
  IF #SVC-PTD-YYYYMM GE #C-RUN-DT-YYYYMM
    ADD #SVC-MEMBER.SVC-MONTHLY-RATE TO EZPAY-FUTURE-AMT
  ELSE
    PARM-SVC.SVC-PLAN      := 'PSM'
    PARM-SVC.CASH-MODE     := 'E'
    PARM-SVC.SVC-MEMBER-ID := ID-NUMBER
    PARM-SVC.ACTION        := 'GET'
*** use transaction date of 1rst of new month ***
    #SVC-PAID-TO-DATE      := 1
    #SVC-PTD-YYYYMM        := #C-RUN-DT-YYYYMM
    PARM-SVC.TRANSACTION-DATN := #SVC-PAID-TO-DATE
    PARM-SVC.TRANSACTION-TIMN := *TIMN
    CALLNAT 'SVCN0003' PARM-SVC #REQUEST
    IF #REQUEST = ' '
      PARM-SVC.ACTION         :=  'APPLY'
      PARM-SVC.SVC-PAY-AMOUNT := PARM-SVC.SVC-TOTAL-DUE
* apply payment for premier-services-due (set MONTH-END ind to 'Y' for accounting register)
      PARM-SVC.SVC-TRAN-TYPE := 'EZME'                                /* vt6
      CALLNAT 'SVCN0003' PARM-SVC #REQUEST
    END-IF
    ADD PARM-SVC.SVC-AMOUNT-DUE            TO AMT-PRE-AUTH-DEBIT
    SUBTRACT PARM-SVC.SVC-ARREARS-FEE      FROM REV-DB-CR
    SUBTRACT PARM-SVC.SVC-REACTIVATION-FEE FROM REV-DB-CR
*
    IF AMT-PRE-AUTH-DEBIT NE PAD-LAST-MON-AMT
        OR PAD-CODE NE 'E'
        OR REV-DB-CR NE 0
      NEW-PAD := 'Y'
    END-IF
  END-IF
END-IF
*
END-SUBROUTINE
*
*** NOTE - do not include payment, we're only calculating amount due to include on bill
*
*
*****************************************************************
*          C A L C - P R E M - P M T - M O N S                  *
*****************************************************************
*
INCLUDE ATHISCPM
*
END
